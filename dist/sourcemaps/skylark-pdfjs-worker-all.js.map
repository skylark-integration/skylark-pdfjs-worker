{"version":3,"sources":["skylark-pdfjs-worker-all.js"],"names":["define","obj1","path","obj2","split","length","ns","i","name","_attach","skylark","attach","obj","main","__webpack_modules__","__unused_webpack_module","exports","__w_pdfjs_require__","Object","defineProperty","value","enumerable","get","_worker","WorkerMessageHandler","WorkerTask","_util","_primitives","_pdf_manager","_writer","_is_node","_message_handler","_worker_stream","_core_utils","[object Object]","this","terminated","_capability","createPromiseCapability","finished","promise","resolve","Error","handler","port","testMessageProcessed","on","data","Uint8Array","send","supportTransfers","postMessageTransfers","setVerbosityLevel","verbosity","createDocumentHandler","docParams","pdfManager","cancelXHRs","WorkerTasks","getVerbosityLevel","apiVersion","enumerableProperties","property","push","join","ReadableStream","docId","docBaseUrl","workerHandlerName","MessageHandler","ensureNotTerminated","startWorkerTask","task","finishWorkerTask","finish","indexOf","splice","async","loadDocument","recoveryMode","ensureDoc","numPages","fingerprint","Promise","all","getPdfManager","evaluatorOptions","pdfManagerCapability","newPdfManager","source","LocalPdfManager","password","ex","reject","pdfStream","cachedChunks","PDFWorkerStream","fullRequest","getFullReader","headersReady","then","isRangeSupported","disableAutoFetch","isStreamingSupported","NetworkPdfManager","msgHandler","contentLength","rangeChunkSize","sendProgressiveData","catch","reason","loaded","readPromise","readChunk","done","pdfFile","arraysToBytes","warn","flushChunks","arrayByteLength","total","Math","max","read","e","cancelAllRequests","getPage","pageIndex","page","ensure","rotate","ref","userUnit","view","pageRef","Ref","num","gen","ensureCatalog","id","jsActions","requestLoadedStream","onLoadedStream","stream","bytes","ensureXRef","intent","getAnnotationsData","annotationStorage","filename","promises","save","finally","acroForm","xref","startXRef","refs","newRefs","filter","x","reduce","a","b","concat","xfa","Dict","xfaDatasets","Array","isArray","ii","newXrefInfo","create","trailer","infoObj","xrefInfo","forEach","key","isString","stringToPDFString","rootRef","getRaw","encrypt","newRef","getNewRef","infoRef","info","fileIds","resetNewRef","incrementalUpdate","originalData","datasetsRef","sink","start","VerbosityLevel","INFOS","Date","now","getOperatorList","renderInteractiveForms","operatorListInfo","close","featureId","UNSUPPORTED_FEATURES","errorOperatorList","error","onPull","desiredSize","onCancel","extractTextContent","normalizeWhitespace","combineTextItems","fontFallback","cleanup","waitOn","terminate","AbortException","cleanupPromise","clearPrimitiveCaches","destroy","onSuccess","doc","pdfInfo","onFailure","PasswordException","code","sendWithPromise","updatePassword","pdfManagerReady","InvalidPDFException","MissingPDFException","UnexpectedResponseException","UnknownErrorException","message","toString","XRefParseException","maxImageSize","disableFontFace","ignoreErrors","isEvalSupported","fontExtraProperties","byteLength","setupDoc","setup","window","isNodeJS","self","maybePort","postMessage","initializeFromPort","arr","resultLength","pos","item","stringToBytes","itemLength","set","assert","bytesToString","undefined","String","fromCharCode","apply","strBuf","chunkEnd","min","chunk","subarray","capability","isSettled","createValidAbsoluteUrl","url","baseUrl","absoluteUrl","URL","protocol","_isValidProtocol","encodeToXmlString","str","buffer","char","codePointAt","entity","XMLEntities","substring","toUpperCase","escapeString","replace","match","getModificationDate","date","getUTCFullYear","getUTCMonth","padStart","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","msg","console","log","isArrayBuffer","v","isArrayEqual","arr1","arr2","every","element","index","isAscii","test","isBool","isNum","isSameOrigin","otherUrl","base","origin","other","objectFromEntries","iterable","assign","fromEntries","objectSize","keys","removeNullCharacters","NullCharactersRegExp","level","Number","isInteger","shadow","string32","charCodeAt","PDFStringTranslateTable","charAt","stringToUTF16BEString","buf","stringToUTF8String","decodeURIComponent","escape","unreachable","utf8StringToString","unescape","encodeURIComponent","Util","TextRenderingMode","StreamType","PermissionFlag","PasswordResponses","PageActionEventType","OPS","IsLittleEndianCached","IsEvalSupportedCached","ImageKind","IDENTITY_MATRIX","FormatError","FontType","FONT_IDENTITY_MATRIX","DocumentActionEventType","createObjectURL","CMapCompressionType","BaseException","AnnotationType","AnnotationStateModelType","AnnotationReviewState","AnnotationReplyType","AnnotationMarkedState","AnnotationFlag","AnnotationFieldFlag","AnnotationBorderStyleType","AnnotationActionEventType","PRINT","MODIFY_CONTENTS","COPY","MODIFY_ANNOTATIONS","FILL_INTERACTIVE_FORMS","COPY_FOR_ACCESSIBILITY","ASSEMBLE","PRINT_HIGH_QUALITY","FILL","STROKE","FILL_STROKE","INVISIBLE","FILL_ADD_TO_PATH","STROKE_ADD_TO_PATH","FILL_STROKE_ADD_TO_PATH","ADD_TO_PATH","FILL_STROKE_MASK","ADD_TO_PATH_FLAG","GRAYSCALE_1BPP","RGB_24BPP","RGBA_32BPP","TEXT","LINK","FREETEXT","LINE","SQUARE","CIRCLE","POLYGON","POLYLINE","HIGHLIGHT","UNDERLINE","SQUIGGLY","STRIKEOUT","STAMP","CARET","INK","POPUP","FILEATTACHMENT","SOUND","MOVIE","WIDGET","SCREEN","PRINTERMARK","TRAPNET","WATERMARK","THREED","REDACT","MARKED","REVIEW","UNMARKED","ACCEPTED","REJECTED","CANCELLED","COMPLETED","NONE","GROUP","REPLY","HIDDEN","NOZOOM","NOROTATE","NOVIEW","READONLY","LOCKED","TOGGLENOVIEW","LOCKEDCONTENTS","REQUIRED","NOEXPORT","MULTILINE","PASSWORD","NOTOGGLETOOFF","RADIO","PUSHBUTTON","COMBO","EDIT","SORT","FILESELECT","MULTISELECT","DONOTSPELLCHECK","DONOTSCROLL","COMB","RICHTEXT","RADIOSINUNISON","COMMITONSELCHANGE","SOLID","DASHED","BEVELED","INSET","E","X","D","U","Fo","Bl","PO","PC","PV","PI","K","F","V","C","WC","WS","DS","WP","DP","O","UNKNOWN","FLATE","LZW","DCT","JPX","JBIG","A85","AHX","CCF","RLX","TYPE1","TYPE1C","CIDFONTTYPE0","CIDFONTTYPE0C","TRUETYPE","CIDFONTTYPE2","TYPE3","OPENTYPE","TYPE0","MMTYPE1","ERRORS","WARNINGS","BINARY","STREAM","dependency","setLineWidth","setLineCap","setLineJoin","setMiterLimit","setDash","setRenderingIntent","setFlatness","setGState","restore","transform","moveTo","lineTo","curveTo","curveTo2","curveTo3","closePath","rectangle","stroke","closeStroke","fill","eoFill","fillStroke","eoFillStroke","closeFillStroke","closeEOFillStroke","endPath","clip","eoClip","beginText","endText","setCharSpacing","setWordSpacing","setHScale","setLeading","setFont","setTextRenderingMode","setTextRise","moveText","setLeadingMoveText","setTextMatrix","nextLine","showText","showSpacedText","nextLineShowText","nextLineSetSpacingShowText","setCharWidth","setCharWidthAndBounds","setStrokeColorSpace","setFillColorSpace","setStrokeColor","setStrokeColorN","setFillColor","setFillColorN","setStrokeGray","setFillGray","setStrokeRGBColor","setFillRGBColor","setStrokeCMYKColor","setFillCMYKColor","shadingFill","beginInlineImage","beginImageData","endInlineImage","paintXObject","markPoint","markPointProps","beginMarkedContent","beginMarkedContentProps","endMarkedContent","beginCompat","endCompat","paintFormXObjectBegin","paintFormXObjectEnd","beginGroup","endGroup","beginAnnotations","endAnnotations","beginAnnotation","endAnnotation","paintJpegXObject","paintImageMaskXObject","paintImageMaskXObjectGroup","paintImageXObject","paintInlineImageXObject","paintInlineImageXObjectGroup","paintImageXObjectRepeat","paintImageMaskXObjectRepeat","paintSolidColorImageMask","constructPath","unknown","forms","javaScript","smask","shadingPattern","font","errorTilingPattern","errorExtGState","errorXObject","errorFontLoadType3","errorFontState","errorFontMissing","errorFontTranslate","errorColorSpace","errorFontToUnicode","errorFontLoadNative","errorFontGetPath","errorMarkedContent","NEED_PASSWORD","INCORRECT_PASSWORD","cond","prop","configurable","writable","constructor","prototype","super","details","status","buffer8","Uint32Array","isLittleEndian","Function","hexNumbers","map","n","r","g","m1","m2","p","m","xt","yt","d","p1","applyTransform","p2","slice","p3","p4","transpose","c","first","second","sqrt","sx","sy","rect","rect1","rect2","compare","orderedX","sort","orderedY","result","normalizeRect","digits","contentType","forceDataSchema","blob","Blob","type","b1","b2","b3","d1","d2","d3","d4","60","62","38","34","39","__unused_webpack_exports","process","versions","nw","electron","Cmd","_clearCache","Name","isCmd","cmd","isDict","isName","isEOF","EOF","isRef","isRefsEqual","v1","v2","isStream","getBytes","RefSetCache","RefSet","nameCache","nameValue","cmdCache","cmdValue","nonSerializable","_map","objId","suppressEncryption","__nonSerializable__","assignXref","newXref","size","key1","key2","key3","fetch","fetchAsync","getKeys","getRawValues","values","has","callback","empty","emptyDict","merge","dictArray","mergeSubDicts","mergedDict","dict","entries","properties","Map","subDict","clear","refCache","refValue","parent","_set","Set","add","delete","aliasRef","_chunked_stream","_document","_stream","BasePdfManager","_docId","_password","_docBaseUrl","href","args","pdfDocument","catalog","manuallyTriggered","begin","end","Stream","PDFDocument","_loadedStreamPromise","pdfNetworkStream","streamManager","ChunkedStreamManager","getStream","MissingDataException","requestRange","requestAllChunks","onReceiveData","abort","ChunkedStream","chunkSize","manager","_loadedChunks","numChunks","ceil","progressiveDataLength","lastSuccessfulEnsureByteChunk","chunks","numChunksLoaded","beginChunk","floor","endChunk","curChunk","position","isEmpty","ensureByte","b0","getByte","forceClamped","strEnd","ensureRange","Uint8ClampedArray","peekedByte","ChunkedStreamSubstream","getMissingChunks","missingChunks","allChunksLoaded","subStream","currRequestId","_chunksNeededByRequest","_requestsByChunk","_promisesByRequest","aborted","_loadedStreamCapability","rangeReader","getRangeReader","onProgress","bind","chunkData","_requestChunks","requestId","chunksNeeded","hasChunk","chunksToRequest","requestIds","groupedChunksToRequest","groupChunks","groupedChunk","sendRequest","getBeginChunk","getEndChunk","ranges","range","includes","groupedChunks","prevChunk","isProgressive","onReceiveProgressiveData","loadedRequests","nextEmptyChunk","lastChunk","err","collectActions","eventType","actions","additionalActions","action","actionDict","parents","list","_collectJS","Action","escapePDFName","getArrayLookupTableFactory","initializer","lookup","getInheritableProperty","getArray","stopWhenFound","loopCount","getLookupTableFactory","isWhiteSpace","ch","log2","parseXFAPath","positionPattern","component","parseInt","readInt8","offset","readUint16","readUint32","toRomanNumerals","number","lowerCase","romanBuf","ROMAN_NUMBER_MAP","romanStr","toLowerCase","XRefEntryException","entry","put","js","remove","Page","_obj","_annotation","_crypto","_parser","_operator_list","_evaluator","DEFAULT_USER_UNIT","LETTER_SIZE_MEDIABOX","isAnnotationRenderable","annotation","viewable","printable","pageDict","globalIdFactory","fontCache","builtInCMapCache","globalImageCache","nonBlendModesSet","resourcesPromise","idCounters","_localIdFactory","content","resources","_getInheritableProperty","box","mediaBox","_getBoundingBox","cropBox","intersect","streams","fetchIfRef","StreamsSequenceStream","NullStream","partialEvaluator","PartialEvaluator","idFactory","options","_parsedAnnotations","annotations","newRefsPromises","objectLoader","ObjectLoader","load","contentStreamPromise","loadResources","dataPromises","pageListPromise","contentStream","opList","OperatorList","transparency","hasBlendModes","operatorList","pageOpList","flush","totalLength","opListPromises","isHidden","opLists","addOp","addOpList","getTextContent","annotationsData","annots","parsedAnnotations","annotationPromises","annotationRef","AnnotationFactory","PDF_HEADER_SIGNATURE","STARTXREF_SIGNATURE","ENDOBJ_SIGNATURE","FINGERPRINT_FIRST_BYTES","EMPTY_FINGERPRINT","PDF_HEADER_VERSION_REGEXP","find","signature","limit","backwards","signatureLength","scanBytes","peekBytes","scanLength","signatureEnd","j","arg","XRef","_pagePromises","_version","_globalIdFactory","parse","Catalog","version","linearization","Linearization","reset","step","startXRefLength","found","skip","isNaN","moveStart","setStartXRef","fields","recursionDepth","field","_hasOnlyDocumentSignatures","isSignature","isInvisible","formInfo","hasFields","hasAcroForm","hasXfa","sigFlags","hasOnlyDocumentSignatures","documentInfo","DocumentInfoValidators","Title","Author","Subject","Keywords","Creator","Producer","CreationDate","ModDate","Trapped","docInfo","PDFFormatVersion","IsLinearized","IsAcroFormPresent","IsXFAPresent","IsCollectionPresent","collection","infoDict","customValue","Custom","hash","idArray","fingerprintBuf","calculateMD5","getByteRange","hex","objectNumberFirst","pageKidsCountCache","getPageDict","pageFirst","_getLinearizationPage","fieldRef","partName","getFieldObject","kids","kid","_collectFieldObjects","fieldObjects","allFields","fieldPromises","allPromises","hasJSActions","some","fieldObject","object","calculationOrderIds","calculationOrder","ids","FileSpec","_colorspace","_image_utils","fetchDestination","dest","_catDict","getCatalogObj","GlobalImageCache","metadata","streamRef","encryptMetadata","subtype","markInfo","_readMarkInfo","Marked","UserProperties","Suspects","toplevelPagesDict","pagesObj","documentOutline","_readDocumentOutline","root","items","queue","processed","blackColor","shift","outlineDict","parseDestDictionary","destDict","resultObj","title","flags","color","count","rgbColor","ColorSpace","singletons","rgb","getRgb","outlineItem","unsafeUrl","newWindow","bold","italic","permissions","_readPermissions","optionalContentConfig","config","defaultConfig","groupsData","groups","groupRefs","groupRef","group","_readOptionalContentConfig","contentGroupRefs","parseOnOff","onParsed","parseOrder","nestedLevels","order","parsedOrderRefs","nestedOrder","parseNestedOrder","hiddenGroups","MAX_NESTED_LEVELS","nestedName","creator","baseState","off","destinations","_readDests","dests","NameTree","names","getAll","destinationId","pageLabels","_readPageLabels","style","prefix","numberTree","NumberTree","nums","currentLabel","currentIndex","labelDict","s","st","LIMIT","A_UPPER_CASE","A_LOWER_CASE","baseCharCode","letterIndex","character","charBuf","jj","pageLayout","pageMode","viewerPreferences","ViewerPreferencesValidators","HideToolbar","HideMenubar","HideWindowUI","FitWindow","CenterWindow","DisplayDocTitle","NonFullScreenPageMode","Direction","ViewArea","ViewClip","PrintArea","PrintClip","PrintScaling","Duplex","PickTrayByPDFSize","PrintPageRange","NumCopies","prefs","prefValue","isValid","openAction","attachments","nameTree","fs","serializable","appendIfJavaScriptDict","jsDict","_collectJavaScript","val","translatedFonts","translatedFont","loadedName","fallback","cacheKey","nodesToVisit","visitedNodes","currentPageIndex","next","currentNode","pop","last","kidRef","parentRef","node","getAsync","kidPromises","pagesBeforeRef","params","actionType","actionName","startsWith","addDefaultProtocolToUrl","urlDict","remoteDest","JSON","stringify","namedAction","jsAction","URL_OPEN_METHODS","regex","RegExp","jsUrl","exec","tryConvertUrlEncoding","xrefstms","_cacheMap","stats","streamTypes","fontTypes","_newRefNum","startXRefQueue","trailerDict","indexObjects","readXRef","fileId","CipherTransformFactory","processXRefTable","parser","tableState","entryNum","streamPos","lexer","parserBuf1","buf1","parserBuf2","buf2","readXRefTable","getObj","firstEntryNum","entryCount","free","uncompressed","processXRefStream","streamParameters","byteWidths","streamState","entryRanges","readXRefStream","typeFieldWidth","offsetFieldWidth","generationFieldWidth","generation","LF","CR","LT","readToken","token","skipUntil","what","dataLength","skipped","objRegExp","endobjRegExp","nestedObjRegExp","trailerBytes","startxrefBytes","objBytes","xrefBytes","trailers","xrefStms","startPos","endPos","checkPos","tokenStr","objToken","xrefTagOffset","Parser","Lexer","allowStreams","rootDict","pagesDict","pagesCount","startXRefParsedCache","topDict","getEntry","xrefEntry","cacheEntry","fetchUncompressed","fetchCompressed","makeSubStream","obj3","createCipherTransform","tableOffset","NameOrNumberTree","_type","kidsOrEntries","l","limits","tmp","currentKey","mm","description","contentAvailable","pickPlatformItem","_filename","contentRef","fileObj","addChildren","rawValue","refSet","_walk","nodesToRevisit","pendingRequests","getBaseStreams","baseStreams","foundMissingData","requestRanges","_ccitt_stream","_jbig2_stream","_jpeg_stream","_jpx_stream","MAX_LENGTH_TO_CACHE","MAX_ADLER32_LENGTH","computeAdler32","bytesLength","imageCache","refill","cipherTransform","makeInlineImage","array","makeStream","decryptString","maybeEIPos","state","followingBytes","knownCommands","nextObj","peekObj","endOffset","peekByte","markerLength","foundEOI","getUint16","findDefaultInlineStreamEnd","inlineStreamSkipEI","tildePos","maybeEI","dictLength","beginInlineImagePos","filterName","filterZero","findDCTDecodeInlineStreamEnd","findASCII85DecodeInlineStreamEnd","findASCIIHexDecodeInlineStreamEnd","imageStream","imageBytes","initialStreamPos","dictBytes","createStream","skipToNextLine","nextChar","tryShift","ENDSTREAM_SIGNATURE","actualLength","_findStreamLength","MAX_TRUNCATION","TRUNCATED_SIGNATURE","maybeLength","lastByte","makeFilter","filterArray","paramsArray","xrefStreamStats","PredictorStream","FlateStream","earlyChange","LZWStream","JpegStream","JpxStream","Ascii85Stream","AsciiHexStream","CCITTFaxStream","RunLengthStream","Jbig2Stream","specialChars","toHexDigit","_hexStringNumWarn","currentChar","eNotation","divideBy","sign","baseValue","powerValue","powerValueSign","currentDigit","peekChar","numParen","charBuffered","previousCh","x2","firstDigit","secondDigit","isFirstHex","_hexStringWarn","comment","getNumber","getString","getName","getHexString","knownCommandFound","possibleCommand","getInt","linDict","allowZeroValue","hints","hintsLength","hint","getHints","endFirst","mainXRefEntriesOffset","StringStream","DecryptStream","DecodeStream","arrayBuffer","getInt32","call","emptyBuffer","maybeMinBufferLength","_rawMinBufferLength","bufferLength","eof","minBufferLength","readBlock","ensureBuffer","requested","buffer2","bufEnd","newLength","codeLenCodeMap","Int32Array","lengthDecode","distDecode","fixedLitCodeTab","fixedDistCodeTab","cmf","flg","codeSize","codeBuf","getBits","bits","getCode","table","codes","maxLen","codeLen","codeVal","generateHuffmanTable","lengths","len","code2","t","hdr","litCodeTable","distCodeTable","numLitCodes","numDistCodes","numCodeLenCodes","codeLenCodeLengths","codeLenCodeTab","bitsLength","bitsOffset","codeLengths","repeatLength","code1","dist","k","blockLen","check","block","predictor","readBlockTiff","readBlockPng","colors","columns","pixBytes","rowBytes","rawBytes","inbuf","outbuf","inbits","outbits","bytesPerPixel","sum","compArray","bitMask","kk","prevRow","up","upLeft","left","pa","pb","pc","decrypt","nextChunk","initialized","hasMoreData","input","maxDecodeLength","digit","repeatHeader","cachedData","bitsCached","lzwState","codeLength","nextCode","dictionaryValues","dictionaryLengths","Uint16Array","dictionaryPrevCodes","currentSequence","currentSequenceLength","readBits","lastCode","q","estimatedDecodedSize","blockSize","prevCode","decodedLength","currentBufferLength","hasPrev","_ccitt","ccittFaxDecoder","CCITTFaxDecoder","EndOfLine","EncodedByteAlign","Columns","Rows","EndOfBlock","BlackIs1","readNextChar","twoDimTable","whiteTable1","whiteTable2","blackTable1","blackTable2","blackTable3","encoding","eoline","byteAlign","rows","eoblock","black","codingLine","refLine","codingPos","row","nextLine2D","inputBits","inputBuf","outputBits","rowsDone","_lookBits","_eatBits","refPos","blackPixels","code3","_getTwoDimCode","_addPixels","_getBlackCode","_getWhiteCode","_addPixelsNeg","gotEOL","a1","limitValue","_findTableCode","_jbig","jbig2Image","Jbig2Image","globalsStream","globals","parseChunks","_arithmetic_decoder","Jbig2Error","ContextCache","DecodingContext","decodeInteger","contextCache","procedure","decoder","contexts","getContexts","prev","bit","readBit","decodeIAID","Int8Array","ArithmeticDecoder","cache","SegmentTypes","CodingTemplates","y","RefinementTemplates","coding","reference","ReusedContexts","RefinementReusedContexts","decodeBitmap","mmr","width","height","templateIndex","prediction","at","decodingContext","Reader","decodeMMRBitmap","contextLabel","pixel","row1","row2","bitmap","decodeBitmapTemplate0","useskip","template","templateLength","templateX","templateY","changingTemplateEntries","reuseMask","minX","maxX","minY","changingEntriesLength","changingTemplateX","changingTemplateY","changingTemplateBit","i0","j0","sbb_left","sbb_top","sbb_right","pseudoPixelContext","ltp","sltp","decodeRefinement","referenceBitmap","offsetX","offsetY","codingTemplate","codingTemplateLength","codingTemplateX","codingTemplateY","referenceTemplate","referenceTemplateLength","referenceTemplateX","referenceTemplateY","referenceWidth","referenceHeight","decodeTextRegion","huffman","refinement","defaultPixelValue","numberOfSymbolInstances","stripSize","inputSymbols","symbolCodeLength","transposed","dsOffset","referenceCorner","combinationOperator","huffmanTables","refinementTemplateIndex","refinementAt","logStripSize","huffmanInput","stripT","tableDeltaT","decode","firstS","deltaT","deltaFirstS","tableFirstS","currentS","currentT","symbolId","symbolIDTable","applyRefinement","symbolBitmap","symbolWidth","symbolHeight","rdw","rdh","rdx","rdy","s2","t2","symbolRow","offsetT","offsetS","maxWidth","deltaS","tableDeltaS","readSegmentHeader","segmentHeader","segmentType","typeName","deferredNonRetain","pageAssociationFieldSize","referredFlags","referredToCount","retainBits","referredToSegmentNumberSize","referredTo","pageAssociation","genericRegionInfo","readRegionSegmentInformation","genericRegionSegmentFlags","RegionSegmentInformationFieldLength","genericRegionMmr","searchPattern","headerEnd","readSegments","header","segments","segment","randomAccess","processSegment","visitor","atLength","dictionary","dictionaryFlags","huffmanDHSelector","huffmanDWSelector","bitmapSizeSelector","aggregationInstancesSelector","bitmapCodingContextUsed","bitmapCodingContextRetained","refinementTemplate","numberOfExportedSymbols","numberOfNewSymbols","textRegion","textRegionSegmentFlags","textRegionHuffmanFlags","huffmanFS","huffmanDS","huffmanDT","huffmanRefinementDW","huffmanRefinementDH","huffmanRefinementDX","huffmanRefinementDY","huffmanRefinementSizeSelector","patternDictionary","patternDictionaryFlags","patternWidth","patternHeight","maxPatternIndex","halftoneRegion","halftoneRegionFlags","enableSkip","gridWidth","gridHeight","gridOffsetX","gridOffsetY","gridVectorX","gridVectorY","genericRegion","pageInfo","resolutionX","resolutionY","pageSegmentFlags","lossless","requiresBuffer","combinationOperatorOverride","callbackName","processSegments","SimpleSegmentVisitor","HuffmanLine","lineData","isOOB","rangeLow","prefixLength","rangeLength","prefixCode","isLowerRange","HuffmanTreeNode","line","children","isLeaf","HuffmanTable","lines","prefixCodesDone","assignPrefixCodes","rootNode","buildTree","onPageInformation","currentPageInfo","rowSize","drawBitmap","regionInfo","mask","mask0","offset0","onImmediateGenericRegion","region","onImmediateLosslessGenericRegion","arguments","onSymbolDictionary","currentSegment","referredSegments","customTables","tableDeltaHeight","tableDeltaWidth","tableBitmapSize","tableAggregateInstances","customIndex","getStandardTable","getCustomHuffmanTable","getSymbolDictionaryHuffmanTables","symbols","referredSymbols","newSymbols","currentHeight","tableB1","symbolWidths","deltaHeight","currentWidth","totalWidth","firstSymbol","deltaWidth","numberOfInstances","symbol","bitmapSize","collectiveBitmap","readUncompressedBitmap","originalEnd","bitmapEnd","numberOfSymbolsDecoded","xMax","bitmapWidth","xMin","exportedSymbols","currentFlag","totalSymbolsLength","runLength","decodeSymbolDictionary","onImmediateTextRegion","numberOfSymbols","reader","runCodesTable","repeatedLength","numberOfRepeats","getTextRegionHuffmanTables","onImmediateLosslessTextRegion","patterns","patternBitmap","decodePatternDictionary","regionWidth","regionHeight","regionBitmap","numberOfPatterns","pattern0","bitsPerValue","grayScaleBitPlanes","mmrInput","mg","ng","patternIndex","patternRow","regionRow","regionX","regionY","decodeHalftoneRegion","onImmediateHalftoneRegion","lowestValue","highestValue","prefixSizeBits","rangeSizeBits","currentRangeLow","decodeTablesSegment","htOffset","decodeNode","linesLength","prefixLengthMax","histogram","currentCode","currentTemp","currentLength","firstCode","standardTablesCache","currentByte","endOfBlock","lookForEOFLimit","numBits","parseJbig2Chunks","imgData","numberOfPages","bitPacked","parseJbig2","QeTable","qe","nmps","nlps","switchFlag","bp","dataEnd","chigh","clow","byteIn","ct","cx_index","cx_mps","qeTableIcx","qeIcx","_jpg","jpegOptions","decodeTransform","colorTransform","decodeArr","forceRGB","bitsPerComponent","decodeArrLength","transformNeeded","maxValue","jpegImage","JpegImage","getData","drawWidth","drawHeight","isSourcePDF","JpegError","DNLMarkerError","scanLines","EOIMarkerError","dctZigZag","dctCos1","dctSin1","dctCos3","dctSin3","dctCos6","dctSin6","dctSqrt2","dctSqrt1d2","_decodeTransform","_colorTransform","buildHuffmanTable","getBlockBufferOffset","col","blocksPerLine","decodeScan","frame","components","resetInterval","spectralStart","spectralEnd","successivePrev","successive","parseDNLMarker","mcusPerLine","progressive","startOffset","bitsData","bitsCount","nextByte","maybeScanLines","blockRow","precision","round","decodeHuffman","tree","receive","receiveAndExtend","eobrun","successiveACNextValue","successiveACState","decodeMcu","mcu","mcuRow","mcuCol","blockCol","h","blockOffset","decodeBlock","decodeFn","componentsLength","huffmanTableDC","diff","blockData","pred","rs","huffmanTableAC","z","offsetZ","fileMarker","mcuExpected","blocksPerColumn","mcusPerColumn","mcuToRead","findNextFileMarker","invalid","partialMsg","marker","quantizeAndInverse","blockBufferOffset","v0","v3","v4","v5","v6","v7","p0","p5","p6","p7","qt","quantizationTable","buildComponentData","computationBuffer","Int16Array","currentPos","maxPos","newPos","currentMarker","newMarker","dnlScanLines","readDataBlock","prepareComponents","samplesPerLine","maxH","maxV","blocksPerLineForMcu","blocksPerColumnForMcu","blocksBufferSize","jfif","adobe","numSOSMarkers","quantizationTables","huffmanTablesAC","huffmanTablesDC","markerLoop","appData","major","minor","densityUnits","xDensity","yDensity","thumbWidth","thumbHeight","thumbData","flags0","flags1","transformCode","quantizationTablesLength","quantizationTablesEnd","quantizationTableSpec","tableData","extended","sofScanLines","componentIds","componentId","componentsCount","qId","quantizationId","huffmanLength","huffmanTableSpec","codeLengthSum","huffmanValues","selectorsCount","componentIndex","tableSpec","successiveApproximation","nextFileMarker","output","scaleX","scaleY","numComponents","componentScaleX","componentScaleY","blocksPerScanline","xScaleBlockOffset","lastComponentScaleX","_isColorConversionNeeded","_convertYccToRgb","Y","Cb","Cr","_convertYcckToRgb","_convertYcckToCmyk","_convertCmykToRgb","_getLinearizedBlockData","rgbData","grayColor","_jpx","jpxImage","JpxImage","tileCount","tiles","tileComponents","tileWidth","tileHeight","tileLeft","tileTop","top","src","srcPosition","dataPosition","imgRowSize","tileRowSize","JpxError","SubbandsGainLog2","LL","LH","HL","HH","failOnCorruptedImage","calculateComponentDimensions","siz","x0","XOsiz","XRsiz","x1","Xsiz","y0","YOsiz","YRsiz","y1","Ysiz","calculateTileGrids","context","tile","SIZ","numXtiles","XTOsiz","XTsiz","numYtiles","YTOsiz","YTsiz","tx0","ty0","tx1","ty1","Csiz","tileComponent","tcx0","tcy0","tcx1","tcy1","getBlocksDimensions","codOrCoc","codingStyleParameters","entropyCoderWithCustomPrecincts","PPx","precinctsSizes","PPy","xcb_","xcb","ycb_","ycb","buildPrecincts","resolution","dimensions","precinctWidth","precinctHeight","isZeroRes","resLevel","precinctWidthInSubband","precinctHeightInSubband","numprecinctswide","trx1","trx0","numprecinctshigh","try1","try0","numprecincts","precinctParameters","buildCodeblocks","subband","codeblock","precinctNumber","codeblockWidth","codeblockHeight","cbx0","tbx0","cby0","tby0","cbx1","tbx1","cby1","tby1","codeblocks","precincts","cbx","cby","tbx0_","tby0_","tbx1_","tby1_","pi","pj","subbandType","Lblock","precinct","cbxMin","cbxMax","cbyMin","cbyMax","codeblockParameters","numcodeblockwide","numcodeblockhigh","createPacket","layerNumber","precinctCodeblocks","subbands","getPrecinctIndexIfExist","pxIndex","pyIndex","sizeInImageScale","precinctIterationSizes","posX","minWidth","posY","minHeight","startPrecinctRowIndex","getPrecinctSizesInImageScale","MAX_VALUE","maxNumWide","maxNumHigh","sizePerComponent","decompositionLevelsCount","sizePerResolution","minWidthCurrentComponent","minHeightCurrentComponent","maxNumWideCurrentComponent","maxNumHighCurrentComponent","scale","resolutions","widthCurrentResolution","heightCurrentResolution","buildPackets","tileIndex","currentTile","blocksDimensions","bscale","resolutionSubbands","progressionOrder","codingStyleDefaultParameters","packetsIterator","layersCount","maxDecompositionLevelsCount","nextPacket","packet","maxNumPrecinctsInLevel","maxNumPrecincts","precinctsIterationSizes","px","py","parseTilePackets","bufferSize","skipNextBit","skipMarkerIfEqual","skipBytes","alignToByte","readCodingpasses","sopMarkerUsed","COD","ephMarkerUsed","codeblockColumn","codeblockRow","codeblockIncluded","firstTimeInclusion","included","inclusionTree","zeroBitPlanesTree","InclusionTree","TagTree","incrementValue","nextLevel","zeroBitPlanes","codingpasses","codingpassesLog2","codedDataLength","packetItem","copyCoefficients","coefficients","levelWidth","levelHeight","delta","mb","reversible","segmentationSymbolUsed","right","bottom","blockWidth","blockHeight","bitModel","currentCodingpassType","BitModel","dataItem","encodedData","setDecoder","runSignificancePropagationPass","runMagnitudeRefinementPass","runCleanupPass","checkSegmentationSymbol","nb","coefficentsSign","magnitude","coefficentsMagnitude","bitsDecoded","magnitudeCorrection","interleave","levelOffset","transformTile","quantizationParameters","spqcds","SPqcds","scalarExpounded","guardBits","reversibleTransformation","ReversibleTransform","IrreversibleTransform","subbandCoefficients","Float32Array","mu","epsilon","gainLog2","calculate","initializeTile","qcdOrQcc","QCC","QCD","COC","head","headerSize","lbox","tbox","jumpDataLength","method","colorspace","parseCodestream","headerType","parseImageProperties","newByte","oldByte","doNotRecover","sqcd","spqcdSize","mainHeader","isSigned","qcd","noQuantization","spqcd","cqcc","qcc","cod","scod","multipleComponentTransform","blockStyle","selectiveArithmeticCodingBypass","resetContextProbabilities","terminationOnEachCodingPass","verticallyStripe","predictableTermination","precinctsSize","unsupported","partIndex","partsCount","resultImages","transformedTiles","y2","tile0","out","fourComponents","y0items","y1items","y2items","y3items","component0","alpha01","transformComponents","levelsLength","levels","currentLevel","defaultValue","stopValue","propagateValues","levelIndex","currentValue","LLAndLHContextsLabel","HLContextLabel","HHContextLabel","contextLabelTable","coefficientCount","neighborsSignificance","processingFlags","setNeighborsSignificance","column","labels","i1","decision","decodeSignBit","contribution","sign0","sign1","significance1","decoded","horizontalContribution","indexNext","width4","index0","significance","iNext","oneRowDown","twoRowsDown","threeRowsDown","indexBase","checkAllEmpty","allEmpty","hasSignificantCoefficent","i2","Transform","u0","ll","iterate","extend","j1","j2","hl_lh_hh","u","llWidth","llHeight","llItems","rowBuffer","numBuffers","colBuffers","currentBuffer","current","alpha","beta","gamma","PDF20","PDF17","calculateSHA512","calculateSHA384","calculateSHA256","ARCFourCipher","AES256Cipher","AES128Cipher","keyLength","encryptBlock","tmp2","decryptBlock","h0","h1","h2","h3","paddedLength","padded","w","f","rotateArg","Word64","highInteger","lowInteger","high","low","and","word","xor","or","shiftRight","places","shiftLeft","rotateRight","not","lowAdd","highAdd","copyTo","rotr","maj","sigma","sigmaPrime","littleSigma","h4","h5","h6","h7","t1","littleSigmaPrime","mode384","tmp3","tmp1","NullCipher","AESBaseCipher","_s","_inv_s","_mix","_mixCol","bufferPosition","cipherKey","_keySize","_cyclesOfRepetition","s0","s1","s3","finalize","sourceLength","iv","plain","_decrypt","_key","outputLength","lastBlock","psLen","_decryptBlock2","cipher","_encrypt","_rcon","_expandKey","rcon","t3","t4","compareByteArrays","array1","array2","checkOwnerPassword","ownerValidationSalt","userBytes","ownerPassword","hashData","checkUserPassword","userValidationSalt","userPassword","getOwnerKey","ownerKeySalt","ownerEncryption","getUserKey","userKeySalt","userEncryption","concatArrays","calculatePDF20Hash","arrayLength","k1","remainder","concatBytes","CipherTransform","stringCipherConstructor","streamCipherConstructor","StringCipherConstructor","StreamCipherConstructor","encryptString","strLen","pad","padEnd","crypto","getRandomValues","random","defaultPasswordBytes","prepareKeyData","revision","hashDataSize","keyLengthInBytes","checkData","encryptionKey","derivedKey","identityName","algorithm","cfDict","streamCryptoName","handlerDict","passwordBytes","fileIdBytes","uBytes","perms","passwordLength","pdfAlgorithm","createEncryptionKey20","decodedPassword","decodeUserPassword","cf","stmf","strf","eff","buildObjectKey","isAes","buildCipherConstructor","cfm","cryptFilter","cipherConstructor","numComps","srcOffset","getRgbItem","destOffset","inputLength","decodeMap","bpc","isDefaultDecode","originalWidth","originalHeight","actualHeight","comps","rgbBuf","numComponentColors","needsResizing","isPassthrough","allColors","colorMap","getRgbBuffer","rgbPos","destPos","w1","w2","xRatio","yRatio","oldIndex","newIndex","xScaled","w1Scanline","resizeRgbImage","usesZeroToOneRange","localColorSpaceCache","parsedColorSpace","csName","csRef","localColorSpace","getByRef","getByName","cs","pdfFunctionFactory","_parse","_cache","cachedColorSpace","getCached","gray","cmyk","PatternCS","colorSpaces","resourcesCS","mode","baseCS","whitePoint","blackPoint","CalGrayCS","matrix","CalRGBCS","alt","altCS","hiVal","IndexedCS","tintFn","AlternateCS","LabCS","DeviceGrayCS","DeviceRgbCS","DeviceCmykCS","tmpBuf","baseNumComps","baseBuf","scaled","tinted","getOutputLength","highVal","outputDelta","lookupPos","convertToRgb","srcScale","A","AG","G","L","YW","XW","ZW","XB","YB","ZB","BRADFORD_SCALE_MATRIX","BRADFORD_SCALE_INVERSE_MATRIX","SRGB_D65_XYZ_TO_RGB_MATRIX","FLAT_WHITEPOINT_MATRIX","tempNormalizeMatrix","tempConvertMatrix1","tempConvertMatrix2","DECODE_L_CONSTANT","matrixProduct","sRGBTransferFunction","adjustToRange","decodeL","B","AGR","GR","BGG","GG","CGB","GB","MXA","MXB","MXC","MYA","MYB","MYC","Z","MZA","MZB","MZC","XYZ","XYZ_Flat","sourceWhitePoint","XYZ_In","LMS","LMS_Flat","convertToFlat","normalizeWhitePointToFlat","XYZ_Black","sourceBlackPoint","zeroDecodeL","X_DST","X_SRC","Y_DST","Y_SRC","Z_DST","Z_SRC","X_Scale","X_Offset","Y_Scale","Y_Offset","Z_Scale","Z_Offset","compensateBlackPoint","XYZ_D65","LMS_D65","convertToD65","normalizeWhitePointToD65","SRGB","fn_g","high1","low2","high2","maxVal","Ls","as","bs","amin","amax","bmin","bmax","M","N","LocalTilingPatternCache","LocalImageCache","LocalGStateCache","LocalFunctionCache","LocalColorSpaceCache","BaseLocalCache","onlyRefs","_nameRefMap","_imageMap","_imageCache","NUM_PAGES_THRESHOLD","MAX_IMAGES_TO_CACHE","_refCache","pageIndexSet","onlyData","getQuadPoints","MarkupAnnotation","AnnotationBorderStyle","Annotation","_default_appearance","quadPoints","quadPointsLists","quadPointsList","maxY","mX","MX","mY","MY","quadPoint","MIN_VALUE","getTransformMatrix","bbox","getAxialAlignedBoundingBox","createObjId","parameters","LinkAnnotation","TextAnnotation","fieldType","TextWidgetAnnotation","ButtonWidgetAnnotation","ChoiceWidgetAnnotation","WidgetAnnotation","PopupAnnotation","FreeTextAnnotation","LineAnnotation","SquareAnnotation","CircleAnnotation","PolylineAnnotation","PolygonAnnotation","CaretAnnotation","InkAnnotation","HighlightAnnotation","UnderlineAnnotation","SquigglyAnnotation","StrikeOutAnnotation","StampAnnotation","FileAttachmentAnnotation","setContents","setModificationDate","setFlags","setRectangle","setColor","setBorderStyle","setAppearance","_streams","appearance","annotationFlags","borderStyle","contents","hasAppearance","modificationDate","_fallbackFontDict","flag","_hasFlag","hidden","_isViewable","_isPrintable","dictType","setWidth","setStyle","setDashArray","setHorizontalCornerRadius","setVerticalCornerRadius","appearanceStates","normalAppearanceState","evaluator","renderForms","appearanceDict","fallbackFontDict","dashArray","horizontalCornerRadius","verticalCornerRadius","maxHeight","allZeros","validNumber","radius","rawIRT","inReplyTo","rt","replyType","setCreationDate","creationDate","hasPopup","extra","strokeColor","fillColor","blendMode","pointsCallback","points","formDict","appearanceStreamDict","appearanceStream","gsDict","stateDict","annotationType","fieldName","_constructFieldName","fieldValue","_decodeFormValue","defaultFieldValue","alternativeText","defaultAppearance","defaultAppearanceData","parseDefaultAppearance","localResources","acroFormResources","appearanceResources","_fieldResources","mergedResources","fieldFlags","readOnly","hasFieldFlag","unshift","loopDict","formValue","_hasText","_getAppearance","AP","originalTransform","newTransform","_getSaveFieldResources","bufferOriginal","writeDict","bufferNew","isPassword","totalHeight","_getFontData","fontSize","_computeFontSize","descent","vPadding","abs","alignment","textAlignment","multiLine","_getMultilineAppearance","defaultPadding","encodedString","encodeString","comb","_getCombAppearance","renderedText","_renderText","initialState","fontName","handleSetFont","fontColor","capHeight","glyphs","charsToGlyphs","em","createDefaultAppearance","text","hPadding","glyph","toFixed","fontNameStr","localFont","acroFormFont","subFontDict","subResourcesDict","maximumLength","combWidth","positions","getCharPositions","renderedComb","_splitLine","padding","lastSpacePosInStringStart","lastSpacePosInStringEnd","lastSpacePos","startChunk","glyphWidth","unicode","multiline","charLimit","editable","checkedAppearance","uncheckedAppearance","checkBox","radioButton","pushButton","isTooltipOnly","_processCheckBox","_processRadioButton","_processPushButton","savedAppearance","_saveCheckbox","_saveRadioButton","exportValue","buttonValue","parentBuffer","parentTransform","customAppearance","normalAppearance","exportValues","fieldParent","fieldParentValue","option","isOptionArray","displayValue","combo","multiSelect","numItems","multipleSelection","stateModel","parentItem","parentSubtype","parentType","rawParent","parentId","parentRect","parentFlags","lineCoordinates","vertices","rawVertices","inkLists","rawInkLists","from","_setDefaultAppearance","dy","xEnd","file","colorCmd","DefaultAppearanceEvaluator","EvaluatorPreprocessor","operation","fn","savedStatesDepth","_cmap","_fonts","_encodings","_unicode","_standard_fonts","_pattern","_function","_bidi","_glyphlist","_metrics","_murmurhash","_image","DefaultPartialEvaluatorOptions","freeze","PatternType","TILING","SHADING","deferred","normalizeBlendMode","parsingArray","maybeBM","TimeSlotManager","TIME_SLOT_DURATION_MS","CHECK_TIME_EVERY","checked","endTime","parsingType3Font","_fetchBuiltInCMapBound","fetchBuiltInCMap","_pdfFunctionFactory","PDFFunctionFactory","newOptions","newEvaluator","nodes","graphicStates","graphicState","bm","xObjects","xObject","xResources","readableStream","sendWithStream","getReader","pump","compressionType","xobj","optionalContent","parseMarkedContentProps","groupOptions","isolated","knockout","groupSubtype","colorSpace","parseColorSpace","backdrop","cacheGlobally","transfers","image","isInline","localImageCache","imageRef","imageMask","bitStrideLength","imgArray","PDFImage","createMask","imageIsFromDecodeStream","inverseDecode","cached","softMask","imageObj","res","createImageData","getDocId","shouldCache","addDependency","buildImage","_sendImgData","addPageIndex","setData","stateManager","smaskContent","smaskOptions","transferObj","isPDFFunction","transferFn","transferMap","buildFormXObject","clone","tr","transferArray","transferMaps","numFns","numEffectfulFns","pattern","patternDict","localTilingPatternCache","tilingOpList","patternResources","operatorListIR","getIR","tilingPatternIR","getTilingPatternIR","addDependencies","dependencies","fontArgs","fontRef","loadFont","translated","isType3Font","loadType3Data","type3Dependencies","TranslatedFont","ErrorFont","extraProperties","chars","isAddToPathSet","textRenderingMode","fillColorSpace","buildFontPaths","gState","localGStateCache","gStateRef","isSimpleGState","gStateObj","gStateKeys","handleSMask","handleTransferFunction","errorFont","fontRes","fontCapability","preEvaluatedFont","preEvaluateFont","descriptor","fontID","fontRefIsRef","fontAliases","aliasFontRef","putAlias","createFontId","translateFont","fontType","xrefFontStats","fontFile3","getFontType","parsingText","lastIndex","fnArray","opArgs","argsArray","parseAsync","patternName","localTilingPattern","typeNum","handleTilingType","shading","Pattern","parseShading","contentProperties","optionalContentType","optionalContentGroups","groupIds","ocg","expression","policy","EvalState","xobjs","StateManager","preprocessor","timeSlotManager","closePendingRestoreOPS","argument","promiseBody","ready","stop","localImage","resolveXObject","rejectXObject","globalImage","buildPaintImageXObject","ensureStateFont","handleText","combinedGlyphs","arrLength","arrItem","strokeColorSpace","handleColorN","shadingRes","patternIR","localGStateObj","resolveGState","rejectGState","extGState","buildPath","seenStyles","TextState","WhitespaceRegexp","textContent","styles","textContentItem","vertical","lastAdvanceWidth","lastAdvanceHeight","textAdvanceScale","spaceWidth","fakeSpaceMin","Infinity","fakeMultiSpaceMin","fakeMultiSpaceMax","textRunBreakAllowed","SPACE_FACTOR","MULTI_SPACE_FACTOR","MULTI_SPACE_FACTOR_MAX","emptyXObjectCache","emptyGStateCache","textState","ensureTextContentItem","fontFamily","fallbackName","ascent","tsm","textHScale","textRise","fontMatrix","glyphHeight","trm","ctm","textMatrix","textLineMatrix","scaleLineX","scaleCtmX","isMonospace","runBidiTransform","textChunk","bidiResult","bidi","replaceWhitespace","dir","buildTextContentItem","vmetric","glyphUnicode","NormalizedUnicodes","getNormalizedUnicodes","reverseIfRtl","charSpacing","isSpace","wordSpacing","addFakeSpaces","tx","ty","w0","translateTextMatrix","fakeSpaces","flushTextContentItem","enqueueChunk","enqueue","advance","fontNameArg","fontSizeArg","leading","isSameTextLine","translateTextLineMatrix","carriageReturn","calcTextLineMatrixAdvance","setTextLineMatrix","breakTextRun","currentState","xObjStateManager","sinkWrapper","enqueueInvoked","gStateFont","baseDict","cidToGidBytes","toUnicode","toUnicodePromise","readToUnicode","composite","cidSystemInfo","registry","ordering","supplement","cidToGidMap","differences","baseEncodingName","diffEncoding","defaultEncoding","getEncoding","isSymbolicFont","FontFlags","Symbolic","isNonsymbolicFont","Nonsymbolic","StandardEncoding","WinAnsiEncoding","MacRomanEncoding","SymbolSetEncoding","ZapfDingbatsEncoding","hasEncoding","buildToUnicode","builtToUnicode","readCidToGidMap","forceGlyphs","charcode","glyphName","glyphsUnicodeMap","getGlyphsUnicode","codeStr","_buildSimpleFontToUnicode","getUnicodeForGlyph","baseEncoding","fromCodePoint","ToUnicodeMap","hasIncludedToUnicodeMap","fallbackToUnicode","cMap","builtInCMap","IdentityCMap","ucs2CMapName","CMapFactory","useCMap","ucs2CMap","cid","ucs2","IdentityToUnicodeMap","firstChar","lastChar","cmapObj","cmap","getMap","charCode","glyphsData","glyphID","defaultVMetrics","widths","glyphsWidths","defaultWidth","glyphsVMetrics","vmetrics","parseFloat","baseFontName","metrics","getBaseFontMetrics","buildCharCodeToWidth","firstWidth","FixedPitch","fontNameWoStyle","getSerifFonts","search","monospace","stdFontMap","getStdFontMap","lookupName","Metrics","getMetrics","isSerifFont","glyphWidths","widthsByGlyphName","uint8array","df","MurmurHash3_64","update","diffLength","diffBuf","diffEntry","hexdigest","maxCharIndex","Serif","getSymbolsFonts","extractDataStructures","newProperties","Font","baseFont","baseFontStr","fontFile","length1","length2","length3","fixedPitch","xHeight","italicAngle","cidEncoding","extractWidths","fontChar","renderer","hasBuiltPath","getPathJs","accent","_extraProperties","type3Loaded","sent","exportData","glyphCacheValues","type3Options","type3Evaluator","loadCharProcsPromise","charProcs","fontResources","charProcOperatorList","glyphStream","_removeType3ColorOperators","dummyOperatorList","gStateKey","stateStack","old","txDiff","tyDiff","denominator","opMap","getOPMap","numArgs","variableArgs","J","ri","gs","Q","cm","re","S","W","BT","ET","Tc","Tw","Tz","TL","Tf","Tr","Ts","Td","TD","Tm","Tj","TJ","d0","CS","SC","SCN","sc","scn","RG","rg","sh","BI","ID","EI","Do","MP","BMC","BDC","EMC","BX","EX","BM","BD","true","fa","fal","fals","false","nu","nul","null","MAX_INVALID_PATH_OPS","nonProcessedArgs","_numInvalidPathOPS","opSpec","argsLength","preprocessCommand","CMap","BUILT_IN_CMAPS","MAX_MAP_RANGE","codespaceRanges","numCodespaceRanges","dstLow","dst","nn","codespaceRange","isIdentityCMap","addCodespaceRange","BinaryCMapReader","hexToInt","hexToStr","addHex","incHex","MAX_NUM_SIZE","MAX_ENCODED_NUM_SIZE","BinaryCMapStream","readByte","readNumber","stack","sp","readHexNumber","sequence","dataSize","subitemsCount","readHex","mapOne","readSigned","mapCidRange","readHexSigned","mapBfRange","readString","strToInt","expectString","expectInt","parseBfChar","parseBfRange","mapBfRangeToArray","parseCidChar","parseCidRange","parseCodespaceRange","parseWMode","parseCMapName","parseCMap","previous","embeddedUseCMap","objLoop","extendCMap","createBuiltInCMap","newCMap","useCodespaceRanges","contains","cMapData","parsedCMap","SEAC_ANALYSIS_ENABLED","_cff_parser","_font_renderer","_type1_parser","PRIVATE_USE_AREAS","PDF_GLYPH_SPACE_UNITS","EXPORT_DATA_PROPERTIES","EXPORT_DATA_EXTRA_PROPERTIES","Script","Italic","AllCap","SmallCap","ForceBold","MacStandardGlyphOrdering","adjustWidths","recoverGlyphName","Glyph","operatorListId","isInFont","matchesForCache","OpenTypeFileBuilder","writeInt16","writeInt32","writeData","sfnt","tables","getSearchParams","entriesCount","entrySize","maxPower2","searchRange","rangeShift","toArray","tablesNames","tableName","numTables","tableOffsets","searchParams","checksum","quad","addTable","tag","missingFile","glyphCache","toFontChar","fallbackToSystemFont","fileType","fileSubtype","isTrueTypeFile","isTrueTypeCollectionFile","isOpenTypeFile","isType1File","isCFFFile","getFontFileType","mimetype","cff","CFFFont","Type1Font","convert","checkAndRepair","isOpenType","seacMap","int16","signedInt16","string16","safeString16","buildToFontChar","adjustMapping","charCodeToGlyphId","hasGlyph","newGlyphZeroId","newMap","privateUseAreaIndex","nextAvailableFontCharCode","privateUseOffetEnd","originalCharCode","glyphId","fontCharCode","createCmapTable","numGlyphs","codeIndices","getRanges","bmpLength","trailingRangesCount","segCount","startCount","endCount","idDeltas","idRangeOffsets","glyphsIds","bias","contiguous","startCode","format314","format31012","header31012","createOS2Table","charstrings","override","unitsPerEm","yMax","yMin","ulUnicodeRange1","ulUnicodeRange2","ulUnicodeRange3","ulUnicodeRange4","firstCharIndex","lastCharIndex","getUnicodeRangeFor","ascentScaled","typoAscent","typoDescent","winAscent","winDescent","createPostTable","angle","createNameTable","proto","strings","stringsUnicode","strBufUnicode","platforms","encodings","languages","namesRecordCount","nameTable","strOffset","strs","nameRecord","FontRendererFactory","exportDataProperties","nonStdFontMap","getNonStdFontMap","isStandardFont","isMappedToStandardFont","isNarrow","remeasure","GlyphMapForStandardFonts","getGlyphMapForStandardFonts","SupplementalGlyphMapForArialBlack","getSupplementalGlyphMapForArialBlack","SupplementalGlyphMapForCalibri","getSupplementalGlyphMapForCalibri","isIdentityUnicode","unicodeCharCode","getDingbatsGlyphsUnicode","VALID_TABLES","readTables","hhea","hmtx","maxp","post","readTableEntry","previousPosition","readOpenTypeHeader","ttf","entrySelector","sanitizeGlyph","sourceStart","sourceEnd","destStart","hintsValid","glyphProfile","sizeOfInstructions","glyf","contoursCount","flagsCount","endPoint","instructionsStart","instructionsLength","instructionsEnd","coordinatesLength","xLength","yLength","xyLength","repeat","glyphDataLength","readNameTable","format","numRecords","stringsStart","records","platform","language","record","nameIndex","TTOpsStackDeltas","sanitizeTTProgram","ttContext","funcId","lastEndf","lastDeff","callstack","functionsCalled","tooComplexToFollowFunctions","inFDEF","ifLevel","inELSE","op","functionsStackDeltas","stackTop","functionsDefined","functionsUsed","newStackLength","stackDelta","NaN","foldTTTable","cffFile","ttcData","ttc","numFonts","offsetTable","ttcTag","majorVersion","minorVersion","dsigTag","dsigLength","dsigOffset","readTrueTypeCollectionHeader","potentialHeader","potentialTables","nameEntry","readTrueTypeCollectionData","isTrueType","loca","isComposite","fpgm","prep","numGlyphsOut","dupFirstEntry","maxFunctionDefs","maxSizeOfInstructions","maxZones","cvt","checkInvalidFunctions","cvtData","sanitizeTTPrograms","numOfMetrics","numMissing","sanitizeMetrics","locaLength","indexToLocFormat","numGlyphsPlusOne","sanitizeHead","missingGlyphs","isGlyphLocationsLong","glyphsInfo","itemSize","itemDecode","itemEncode","locaDataSize","locaData","oldGlyfData","oldGlyfDataLength","newGlyfData","locaEntries","writeOffset","simpleGlyph","firstEntryLength","sanitizeGlyphLocations","metricsOverride","propertiesObj","maxpNumGlyphs","glyphNames","valid","glyphNameIndexes","customNames","stringLength","readPostScriptTable","isCidToGidMapEmpty","cmapTable","platformId","encodingId","mappings","hasShortCmap","potentialTable","canBreak","useTable","segIndex","offsetsCount","rangeOffset","offsetIndex","offsets","readCmapTable","cmapPlatformId","cmapEncodingId","cmapMappings","cmapMappingsLength","standardGlyphName","unicodeOrCharCode","glyphZeroId","newMapping","os2","selection","validateOS2Table","CFFParser","duplicateFirstGlyph","compiler","CFFCompiler","compile","namePrototype","builder","tableTag","builtInEncoding","amend","adjustToUnicode","mapping","getGlyphMapping","hasGlyphId","getCharCodes","charCodes","createCharCode","seacs","charset","getCharset","seac","baseGlyphName","accentGlyphName","baseGlyphId","accentGlyphId","accentOffset","baseFontCharCode","accentFontCharCode","tan","cffWidths","charstring","possibleSpaceReplacements","charCodeOf","widthCode","mapSpecialUnicodeValues","charsCache","charsCacheKey","readCharCode","_charToGlyph","buffers","currentBuf","hasCurrentBufErrors","charCodeLength","getCharCodeLength","type1FontGlyphMapping","findBlock","streamBytes","startIndex","streamBytesLength","headerBlockLength","pfbHeader","pfbHeaderPresent","headerBlock","suggestedLength","headerBytes","headerBytesLength","EEXEC_SIGNATURE","streamStartPos","getHeaderBlock","headerBlockParser","Type1Parser","extractFontHeader","eexecBytes","eexecBlock","eexecBlockParser","extractFontProgram","type2Charstrings","getType2Charstrings","subrs","getType2Subrs","wrap","getSeacs","charstringsLen","type1Charstrings","type1Subrs","type2Subrs","CFF","CFFHeader","CFFTopDict","setByName","CFFStrings","globalSubrIndex","CFFIndex","charsetArray","CFFStandardStrings","CFFCharset","charStringsIndex","charStrings","privateDict","CFFPrivateDict","privateData","subrIndex","subrsIndex","charsets","isCIDFont","CFFFDSelect","_charsets","MAX_SUBR_NESTING","NUM_STANDARD_CFF_STRINGS","CharstringValidationData","stackClearing","stem","resetStack","undefStack","CharstringValidationData12","stackFn","seacAnalysisEnabled","parseHeader","parseIndex","topDictIndex","stringIndex","topDictParsed","parseDict","createDict","parseNameIndex","parseStringIndex","parsePrivateDict","hasName","charStringOffset","charStringIndex","fontBBox","fdArrayIndex","dictRaw","fontDict","fdArray","parseCharsets","fdSelect","parseFDSelect","parseEncoding","charStringsAndSeacs","parseCharStrings","localSubrIndex","hdrSize","offSize","parseOperand","parseFloatOperand","operands","cffIndex","offsetSize","offsetStart","offsetEnd","Type","cffDict","pair","setByKey","callDepth","stackSize","validationCommand","subrNumber","parseCharString","hasVStems","firstStackClearing","localSubrToUse","privateDictToUse","fdIndex","getFDIndex","nominalWidth","parentDict","privateOffset","emptyPrivateDictionary","privateDictEnd","dictData","subrsOffset","relativeOffset","removeByName","CFFCharsetPredefinedTypes","ISO_ADOBE","ISOAdobeCharset","EXPERT","ExpertCharset","EXPERT_SUBSET","ExpertSubsetCharset","raw","predefined","ExpertEncoding","dataStart","glyphsCount","rangesCount","gid","supplementsCount","sid","readSupplement","CFFEncoding","glyphZero","objects","CFFDict","keyToNameMap","nameToKeyMap","defaults","types","opcodes","valueLength","layout","createTables","glyphIndex","CFFOffsetTracker","location","dataOffset","offset1","offset2","offset3","offset4","compileHeader","compileNameIndex","xuid","compiled","compileTopDicts","topDictTracker","trackers","compileStringIndex","compileIndex","setEntryLocation","compileEncoding","compileCharset","compileCharStrings","compileFDSelect","fontDictTrackers","compilePrivateDicts","encodeInteger","encodeFloat","EncodeFloatRegExp","nibbles","sanitizedName","dicts","removeCidKeys","fontDictTracker","fontDictData","compileDict","privateDictTracker","privateDictData","offsetTracker","encodeNumber","isTracking","track","writeByteArray","numGlyphsLessNotDef","charsetIndex","numCharsets","warned","getSID","compileTypedArray","lastFD","currentFD","numRanges","lastOffset","encodingName","MacExpertEncoding","__webpack_exports__","_core_utils_js__WEBPACK_IMPORTED_MODULE_0__","ArialNarrow","ArialBlack","Arial","ArialMT","CourierNew","CourierNewPSMT","Helvetica","TimesNewRoman","TimesNewRomanPS","TimesNewRomanPSMT","Calibri","CenturyGothic","ComicSansMS","LucidaConsole","NuptialScript","SegoeUISymbol","Wingdings","Albertus","Aldus","Alexandria","Algerian","Antiqua","Apex","Arno","Aster","Aurora","Baskerville","Bell","Bembo","Benguiat","Bodoni","Bookman","Calisto","Calvert","Capitals","Cambria","Cartier","Caslon","Catull","Centaur","Chaparral","Cheltenham","Clarendon","Clearface","Cochin","Colonna","Constantia","Corona","Ecotype","Egyptienne","Elephant","Excelsior","Fairfield","Folkard","Footlight","FreeSerif","Garamond","Gentium","Georgia","Gloucester","Granjon","Heather","Hercules","Hiroshige","Imprint","Janson","Joanna","Korinna","Lexicon","Literaturnaya","Lucida","Melior","Memphis","Miller","Minion","Modern","Palatino","Perpetua","Plantin","Playbill","Renault","Requiem","Rockwell","Roman","Sabon","Scala","Seagull","Sistina","Souvenir","STIX","Sylfaen","Times","Trajan","Utopia","Versailles","Wanted","Weiss","Windsor","XITS","Dingbats","Symbol","ZapfDingbats","hexStr","nameLen","UnicodeRanges","getSpecialPUASymbols","charsLength","isRTLRangeFor","getLong","getUshort","getSubroutineBias","numSubrs","parseCmap","idDelta","idOffset","parseCff","gsubrs","isCFFCIDFont","lookupCmap","compileCharString","charStringCode","cmds","bezierCurveTo","stems","xa","xb","ya","yb","y3","subrCode","stackClean","subrsBias","achar","bchar","glyphNameMap","gsubrsBias","NOOP","CompiledFont","compiledGlyphs","compiledCharCodeToGlyphId","compileGlyph","compileGlyphImpl","compileGlyf","quadraticCurveTo","numberOfContours","arg1","arg2","scale01","scale10","subglyph","endPtsOfContours","instructionLength","numberOfPoints","startPoint","contour","parseGlyfTable","cffInfo","Type1CharString","COMMAND_MAP","hstem","vstem","vmoveto","rlineto","hlineto","vlineto","rrcurveto","callsubr","flex","drop","endchar","rmoveto","hmoveto","vhcurveto","hvcurveto","lsb","flexing","encoded","wx","sbx","executeCommand","asb","sby","num2","num1","flexArgs","howManyArgs","command","keepStack","stackLength","EEXEC_ENCRYPT_KEY","isHexDigit","discardNumber","decrypted","isSpecial","encrypted","isBinary","digit1","digit2","decryptAscii","readNumberArray","getToken","readInt","readBoolean","readCharStrings","lenIV","program","blueArray","charString","charStringObject","encodingArg","xstep","ystep","paintType","tilingType","ShadingType","FUNCTION_BASED","AXIAL","RADIAL","FREE_FORM_MESH","LATTICE_FORM_MESH","COONS_PATCH_MESH","TENSOR_PATCH_MESH","getPattern","ctx","Shadings","RadialAxial","Mesh","Dummy","SMALL_NUMBER","coordsArr","shadingType","t0","domainArr","extendStart","extendEnd","extendArr","r1","r2","distance","fnObj","createFromArray","colorStops","ratio","cssColor","makeHexColor","background","r0","singularValueDecompose2dScale","MeshStreamReader","tmpCompsBuf","csNumComps","tmpCsCompsBuf","colorFn","hasData","align","readFlag","bitsPerFlag","readCoordinate","bitsPerCoordinate","xi","yi","readComponents","ci","MIN_SPLIT_PATCH_CHUNKS_AMOUNT","MAX_SPLIT_PATCH_CHUNKS_AMOUNT","TRIANGLE_DENSITY","getB","lut","t_","buildB","buildFigureFromPatch","mesh","figure","figures","coords","figureMinX","figureMinY","figureMaxX","figureMaxY","splitXBy","bounds","splitYBy","verticesPerRow","figureCoords","figureColors","cl","cr","c0","c1","c2","c3","bRow","bCol","newColor","updateBounds","decodeContext","patchMesh","operators","ps","verticesLeft","coord","decodeType4Shading","decodeType5Shading","tmp4","decodeType6Shading","decodeType7Shading","coordsPacked","xy","colorsPacked","packData","fnDict","PostScriptEvaluator","PostScriptCompiler","_ps_parser","toNumberArray","cachedFunction","parsedFunction","PDFFunction","parseArray","fnRef","localFunction","_localFunctionCache","outputSize","bps","sampleMul","strBytes","strIdx","constructSampled","constructInterpolated","constructStiched","constructPostScript","typeFn","IR","constructSampledFromIR","constructInterpolatedFromIR","constructStichedFromIR","constructPostScriptFromIR","fromIR","toMultiArray","domain","inputSize","encode","samples","getSampleArray","interpolate","xmin","xmax","ymin","ymax","cubeVertices","cubeN","Float64Array","cubeVertex","domain_2i","domain_2i_1","size_i","e0","n0","n1","rj","fnRefs","fns","dmin","dmax","rmin","rmax","PostScriptLexer","PostScriptParser","numOutputs","numInputs","cache_available","cachedValue","execute","stackIndex","bound","PostScriptStack","initialStack","copy","roll","operator","counter","atan","cos","LN10","sin","AstNode","AstArgument","AstLiteral","AstBinaryOperation","AstMin","AstVariable","AstVariableDefinition","variable","ExpressionBuilderVisitor","parts","buildAddOperation","buildMulOperation","buildSubOperation","buildMinOperation","visit","visitArgument","visitLiteral","visitBinaryOperation","visitMin","visitVariable","visitVariableDefinition","literal","definition","ast1","ast2","tmpVar","instructions","lastRegister","instruction","statementBuilder","expr","nextToken","accept","expect","PostScriptTokenTypes","LBRACE","parseBlock","RBRACE","NUMBER","OPERATOR","parseCondition","conditionLocation","IF","jumpLocation","endOfTrue","IFELSE","PostScriptToken","opCache","opValue","getOperator","startLevel","isLTR","strLength","createBidiText","numBidi","charType","baseTypes","arabicTypes","isOdd","sor","eor","lastType","findUnequal","before","after","setValues","isEven","highestLevel","lowestOddLevel","reverseValues","temp","Courier","space","exclam","quotedbl","numbersign","dollar","percent","ampersand","quoteright","parenleft","parenright","asterisk","plus","comma","hyphen","period","slash","zero","one","two","three","four","five","six","seven","eight","nine","colon","semicolon","less","equal","greater","question","H","I","P","R","T","bracketleft","backslash","bracketright","asciicircum","underscore","quoteleft","o","braceleft","bar","braceright","asciitilde","exclamdown","cent","sterling","fraction","yen","florin","section","currency","quotesingle","quotedblleft","guillemotleft","guilsinglleft","guilsinglright","fi","fl","endash","dagger","daggerdbl","periodcentered","paragraph","bullet","quotesinglbase","quotedblbase","quotedblright","guillemotright","ellipsis","perthousand","questiondown","grave","acute","circumflex","tilde","macron","breve","dotaccent","dieresis","ring","cedilla","hungarumlaut","ogonek","caron","emdash","AE","ordfeminine","Lslash","Oslash","OE","ordmasculine","ae","dotlessi","lslash","oslash","oe","germandbls","Idieresis","eacute","abreve","uhungarumlaut","ecaron","Ydieresis","divide","Yacute","Acircumflex","aacute","Ucircumflex","yacute","scommaaccent","ecircumflex","Uring","Udieresis","aogonek","Uacute","uogonek","Edieresis","Dcroat","commaaccent","copyright","Emacron","ccaron","aring","Ncommaaccent","lacute","agrave","Tcommaaccent","Cacute","atilde","Edotaccent","scaron","scedilla","iacute","lozenge","Rcaron","Gcommaaccent","ucircumflex","acircumflex","Amacron","rcaron","ccedilla","Zdotaccent","Thorn","Omacron","Racute","Sacute","dcaron","Umacron","uring","threesuperior","Ograve","Agrave","Abreve","multiply","uacute","Tcaron","partialdiff","ydieresis","Nacute","icircumflex","Ecircumflex","adieresis","edieresis","cacute","nacute","umacron","Ncaron","Iacute","plusminus","brokenbar","registered","Gbreve","Idotaccent","summation","Egrave","racute","omacron","Zacute","Zcaron","greaterequal","Eth","Ccedilla","lcommaaccent","tcaron","eogonek","Uogonek","Aacute","Adieresis","egrave","zacute","iogonek","Oacute","oacute","amacron","sacute","idieresis","Ocircumflex","Ugrave","Delta","thorn","twosuperior","Odieresis","igrave","ohungarumlaut","Eogonek","dcroat","threequarters","Scedilla","lcaron","Kcommaaccent","Lacute","trademark","edotaccent","Igrave","Imacron","Lcaron","onehalf","lessequal","ocircumflex","ntilde","Uhungarumlaut","Eacute","emacron","gbreve","onequarter","Scaron","Scommaaccent","Ohungarumlaut","degree","ograve","Ccaron","ugrave","radical","Dcaron","rcommaaccent","Ntilde","otilde","Rcommaaccent","Lcommaaccent","Atilde","Aogonek","Aring","Otilde","zdotaccent","Ecaron","Iogonek","kcommaaccent","minus","Icircumflex","ncaron","tcommaaccent","logicalnot","odieresis","udieresis","notequal","gcommaaccent","eth","zcaron","ncommaaccent","onesuperior","imacron","Euro","universal","existential","suchthat","asteriskmath","congruent","Alpha","Beta","Chi","Epsilon","Phi","Gamma","Eta","Iota","theta1","Kappa","Lambda","Mu","Nu","Omicron","Pi","Theta","Rho","Sigma","Tau","Upsilon","sigma1","Omega","Xi","Psi","Zeta","therefore","perpendicular","radicalex","chi","phi","eta","iota","phi1","kappa","lambda","omicron","theta","rho","tau","upsilon","omega1","omega","psi","zeta","similar","Upsilon1","minute","infinity","club","diamond","heart","spade","arrowboth","arrowleft","arrowup","arrowright","arrowdown","proportional","equivalence","approxequal","arrowvertex","arrowhorizex","carriagereturn","aleph","Ifraktur","Rfraktur","weierstrass","circlemultiply","circleplus","emptyset","intersection","union","propersuperset","reflexsuperset","notsubset","propersubset","reflexsubset","notelement","gradient","registerserif","copyrightserif","trademarkserif","product","dotmath","logicaland","logicalor","arrowdblboth","arrowdblleft","arrowdblup","arrowdblright","arrowdbldown","angleleft","registersans","copyrightsans","trademarksans","parenlefttp","parenleftex","parenleftbt","bracketlefttp","bracketleftex","bracketleftbt","bracelefttp","braceleftmid","braceleftbt","braceex","angleright","integral","integraltp","integralex","integralbt","parenrighttp","parenrightex","parenrightbt","bracketrighttp","bracketrightex","bracketrightbt","bracerighttp","bracerightmid","bracerightbt","apple","a2","a202","a3","a4","a5","a119","a118","a117","a11","a12","a13","a14","a15","a16","a105","a17","a18","a19","a20","a21","a22","a23","a24","a25","a26","a27","a28","a6","a7","a8","a9","a10","a29","a30","a31","a32","a33","a34","a35","a36","a37","a38","a39","a40","a41","a42","a43","a44","a45","a46","a47","a48","a49","a50","a51","a52","a53","a54","a55","a56","a57","a58","a59","a60","a61","a62","a63","a64","a65","a66","a67","a68","a69","a70","a71","a72","a73","a74","a203","a75","a204","a76","a77","a78","a79","a81","a82","a83","a84","a97","a98","a99","a100","a89","a90","a93","a94","a91","a92","a205","a85","a206","a86","a87","a88","a95","a96","a101","a102","a103","a104","a106","a107","a108","a112","a111","a110","a109","a120","a121","a122","a123","a124","a125","a126","a127","a128","a129","a130","a131","a132","a133","a134","a135","a136","a137","a138","a139","a140","a141","a142","a143","a144","a145","a146","a147","a148","a149","a150","a151","a152","a153","a154","a155","a156","a157","a158","a159","a160","a161","a163","a164","a196","a165","a192","a166","a167","a168","a169","a170","a171","a172","a173","a162","a174","a175","a176","a177","a178","a179","a193","a180","a199","a181","a200","a182","a201","a183","a184","a197","a185","a194","a198","a186","a195","a187","a188","a189","a190","a191","SEED","MASK_HIGH","MASK_LOW","seed","blockCounts","tailLength","dataUint32","k2","C1","C2","C1_LOW","C2_LOW","hex1","hex2","QueueOptimizer","addState","parentState","checkFn","iterateFn","processFn","InitialState","iCurr","lastProcessed","iFirstSave","curr","iFirstTransform","iFirstPIIXO","maxLineHeight","currentX","currentY","img","imgWidth","imgHeight","kind","iFirstPIMXO","handlePaintSolidColorImageMask","iTransform","transformArgs","isSameImage","firstPIMXOArg0","firstTransformArg0","firstTransformArg1","firstTransformArg2","firstTransformArg3","iPIMXO","images","maskParams","iFirstPIXO","firstPIXOArg0","iFirstSetFont","firstSetFontArg0","firstSetFontArg1","iFirstBeginText","iFirstSetTextMatrix","iFirstShowText","iFirstEndText","iFirst","iEndText","_optimize","NullOptimizer","streamSink","_streamSink","optimizer","_totalLength","weight","_resolved","CHUNK_SIZE","_transfers","decodeAndClamp","addend","coefficient","resizeImageMask","isMask","matte","needsDecode","decodeCoefficients","decodeAddends","isIndexed","maskDict","imageData","smaskData","maskData","computedLength","haveFullData","bufferPos","rowComps","loop1End","loop2End","remainingBits","rgbaBuf","alphaBuf","sw","fillGrayBuffer","opacity","imageOffset","maskOffset","matteRgb","matteR","matteG","matteB","forceRGBA","getImageBytes","newArray","imageLength","maybeUndoPreblend","getComponents","fillOpacity","decodeBuffer","fillRgb","undoPreblend","datasets","xml","_xml_parser","SimpleXMLParser","hasAttributes","parseFromString","documentElement","searchNode","childNodes","SimpleDOMNode","dump","updatedXml","updateXFA","refForXrefTable","baseOffset","xrefTableData","indexes","maxOffset","md5","filesize","time","md5Buffer","md5BufferLen","writeString","computeMD5","sizes","tableLength","bufferLen","footer","objOffset","writeInt","writeValue","writeArray","roundedValue","numberToString","string","writeStream","XMLParserErrorCode","NoError","EndOfDocument","UnterminatedCdat","UnterminatedXmlDeclaration","UnterminatedDoctypeDeclaration","UnterminatedComment","MalformedElement","OutOfMemory","UnterminatedAttributeValue","UnterminatedElement","ElementNeverBegun","isWhitespace","XMLParserBase","onResolveEntity","attributes","skipWs","attrName","attrValue","attrEndChar","attrEndIndex","_resolveEntities","parsed","attrStart","ch2","onError","onEndElement","_parseProcessingInstruction","onPi","onComment","onCdata","q2","complexDoctype","doctypeContent","onDoctype","_parseContent","isClosed","onBeginElement","onText","nodeName","nodeValue","firstChild","nextSibling","parentNode","child","paths","siblingPos","attribute","hasChildNodes","lowerCaseName","_currentFragment","_stack","_errorCode","_hasAttributes","_lowerCaseName","parseXml","isWhitespaceString","lastElement","CallbackKind","DATA","ERROR","StreamKind","CANCEL","CANCEL_COMPLETE","CLOSE","ENQUEUE","PULL","PULL_COMPLETE","START_COMPLETE","wrapReason","sourceName","targetName","comObj","callbackId","streamId","streamSinks","streamControllers","callbackCapabilities","actionHandler","_onComObjOnMessage","event","_processStreamMessage","cbSourceName","cbTargetName","_createStreamSink","addEventListener","ah","_postMessage","queueingStrategy","controller","startCapability","startCall","pullCall","cancelCall","pull","pullCapability","cancel","cancelCapability","isCancelled","lastDesiredSize","sinkCapability","success","_deleteStreamController","allSettled","removeEventListener","_msgHandler","_contentLength","_fullRequestReader","_rangeRequestReaders","PDFWorkerStreamReader","PDFWorkerStreamRangeReader","readers","_isRangeSupported","_isStreamingSupported","_reader","_headersReady","__webpack_module_cache__","moduleId","module","hasOwnProperty","toStringTag","worker"],"mappings":"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,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA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AA,OAAA,GAAA,OAAA,GAAA,OAAA,GAAA,OACAC,KAAA,GAAA,KAAA,GAAA,KAAA,GAAA,KAAA,GAAA,IAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,IAAA,EAAA,IAAA,EAAA,MAAA,EAAA,MAAA,EAAA,MAAA,EAAA,MAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,OAAA,EAAA,OAAA,EAAA,OAAA,EAAA,OAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,MAAA,EAAA,MAAA,EAAA,MAAA,EAAA,MAAA,EAAA,MAAA,EAAA,MAAA,EAAA,MAAA,EAAA,MAAA,EAAA,OAAA,EAAA,OAAA,EAAA,OAAA,EAAA,OAAA,EAAA,OAAA,EAAA,OAAA,EAAA,OAAA,EAAA,OAAA,EAAA,MAAA,EAAA,MAAA,EAAA,MAAA,EAAA,MAAA,EAAA,MAAA,EAAA,MAAA,EAAA,MAAA,EAAA,MAAA,EAAA,MAAA,EAAA,MAAA,EAAA,MAAA,EAAA,MAAA,EAAA,MAAA,EAAA,OAAA,EAAA,OAAA,EAAA,OAAA,EAAA,OAAA,EAAA,OAAA,EAAA,OAAA,EAAA,OAAA,EAAA,MAAA,EAAA,MAAA,EAAA,MAAA,EAAA,MAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,MAAA,EAAA,MAAA,EAAA,MAAA,EAAA,MAAA,EAAA,MAAA,EAAA,MAAA,EAAA,MAAA,EAAA,MAAA,EAAA,MAAA,EAAA,MAAA,EAAA,MAAA,EAAA,MAAA,EAAA,MAAA,EAAA,MAAA,EAAA,MAAA,EAAA,MAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IACAC,KAAA,GAAA,KAAA,GAAA,IAAA,IAdA,IAcA,IAdA,KAcb,EAAAt5C,EAAAkzB,MACA,IAAAlzB,GAAA,mBAAAA,EAAA4jC,KACA,MAAA,IAAA3mC,MAAA,iDAGAP,KAAAsD,OAAAA,EACAtD,KAAAq2C,KAAA,EACAr2C,KAAA09C,SAAAlnB,EAAAzb,GAAA,EACA/a,KAAA29C,OAAAnnB,EAAAqmB,YAAA,EACA78C,KAAA49C,UAAApnB,EAAAsmB,mBAAA,EACA98C,KAAA05C,QAAAljB,EAAAumB,SAAA,KACA/8C,KAAA69C,KAAArnB,EAAAwmB,MAAA,EACA,IAkBAhE,EAlBA8E,EAAAtnB,EAAAymB,WAoBA,IAlBA,OAAAa,QAAA/vC,IAAA+vC,IACAA,GAAA,GAGA99C,KAAA89C,QAAAA,EACA99C,KAAA+9C,MAAAvnB,EAAA0mB,WAAA,EACAl9C,KAAAg+C,WAAA,IAAAv5B,YAAAzkB,KAAA05C,QAAA,GACA15C,KAAAi+C,QAAA,IAAAx5B,YAAAzkB,KAAA05C,QAAA,GACA15C,KAAAg+C,WAAA,GAAAh+C,KAAA05C,QACA15C,KAAAk+C,UAAA,EACAl+C,KAAAm+C,IAAA,EACAn+C,KAAAo+C,WAAAp+C,KAAA09C,SAAA,EACA19C,KAAAq+C,UAAA,EACAr+C,KAAAs+C,SAAA,EACAt+C,KAAAu+C,WAAA,EACAv+C,KAAAw+C,UAAA,EAGA,KAAAxF,EAAAh5C,KAAAy+C,UAAA,MACAz+C,KAAA0+C,SAAA,GAGA,IAAA1F,GACAh5C,KAAA0+C,SAAA,IAGA1+C,KAAA09C,SAAA,IACA19C,KAAAo+C,YAAAp+C,KAAAy+C,UAAA,GAEAz+C,KAAA0+C,SAAA,IAgnBA,OA5mBA9B,EAAAx4B,WACArkB,eACA,GAAAC,KAAAq2C,IACA,OAAA,EAGA,MAAA4H,EAAAj+C,KAAAi+C,QACAD,EAAAh+C,KAAAg+C,WACAtE,EAAA15C,KAAA05C,QACA,IAAAiF,EAAAC,EAAApH,EAAAp5C,EA6UA2nB,EA3UA,GAAA,IAAA/lB,KAAAu+C,WAAA,CAKA,GAJAv+C,KAAAw+C,WACAx+C,KAAAq2C,KAAA,GAGAr2C,KAAAq2C,IACA,OAAA,EAIA,IAAA2C,EAAAd,EAAA2G,EAEA,GAHA7+C,KAAAwxB,KAAA,EAGAxxB,KAAAo+C,WAAA,CACA,IAAAhgD,EAAA,EAAA4/C,EAAA5/C,GAAAs7C,IAAAt7C,EACA6/C,EAAA7/C,GAAA4/C,EAAA5/C,GAUA,IAPA6/C,EAAA7/C,KAAAs7C,EACAuE,EAAA7/C,GAAAs7C,EACAsE,EAAA,GAAA,EACAh+C,KAAAk+C,UAAA,EACAS,EAAA,EACAC,EAAA,EAEAZ,EAAAh+C,KAAAk+C,WAAAxE,GAGA,OAFAV,EAAAh5C,KAAA8+C,kBAGA,KAtGA,EAuGA9+C,KAAA++C,WAAAd,EAAAU,EAAA,GAAAC,GAEAX,EAAAU,EAAA,GAAAjF,IACAiF,GAAA,GAGA,MAEA,KA9GA,EAiHA,GAFA3F,EAAAd,EAAA,EAEA0G,EAAA,CACA,GACA5F,GAAA6F,EAAA7+C,KAAAg/C,sBACAH,GAAA,IAEA,GACA3G,GAAA2G,EAAA7+C,KAAAi/C,sBACAJ,GAAA,QACA,CACA,GACA7F,GAAA6F,EAAA7+C,KAAAi/C,sBACAJ,GAAA,IAEA,GACA3G,GAAA2G,EAAA7+C,KAAAg/C,sBACAH,GAAA,IASA,IANA7+C,KAAA++C,WAAAf,EAAAh+C,KAAAk+C,WAAAlF,EAAA4F,GAEAZ,EAAAh+C,KAAAk+C,WAAAxE,GACA15C,KAAA++C,WAAAf,EAAAh+C,KAAAk+C,WAAAhG,EAAA,EAAA0G,GAGAX,EAAAU,IAAAX,EAAAh+C,KAAAk+C,YAAAD,EAAAU,GAAAjF,GACAiF,GAAA,EAGA,MAEA,KAzIA,EA8IA,GAJA3+C,KAAA++C,WAAAd,EAAAU,GAAA,EAAAC,GAEAA,GAAA,EAEAZ,EAAAh+C,KAAAk+C,WAAAxE,EAGA,MAFAiF,EAEAV,EAAAU,IAAAX,EAAAh+C,KAAAk+C,YAAAD,EAAAU,GAAAjF,GACAiF,GAAA,EAIA,MAEA,KA1JA,EA+JA,GAJA3+C,KAAA++C,WAAAd,EAAAU,GAAA,EAAAC,GAEAA,GAAA,EAEAZ,EAAAh+C,KAAAk+C,WAAAxE,EAGA,MAFAiF,EAEAV,EAAAU,IAAAX,EAAAh+C,KAAAk+C,YAAAD,EAAAU,GAAAjF,GACAiF,GAAA,EAIA,MAEA,KA3KA,EAgLA,GAJA3+C,KAAA++C,WAAAd,EAAAU,GAAA,EAAAC,GAEAA,GAAA,EAEAZ,EAAAh+C,KAAAk+C,WAAAxE,EAGA,MAFAiF,EAEAV,EAAAU,IAAAX,EAAAh+C,KAAAk+C,YAAAD,EAAAU,GAAAjF,GACAiF,GAAA,EAIA,MAEA,KA3LA,EAgMA,GAJA3+C,KAAA++C,WAAAd,EAAAU,GAAAC,GAEAA,GAAA,EAEAZ,EAAAh+C,KAAAk+C,WAAAxE,EAGA,MAFAiF,EAEAV,EAAAU,IAAAX,EAAAh+C,KAAAk+C,YAAAD,EAAAU,GAAAjF,GACAiF,GAAA,EAIA,MAEA,KApMA,EAyMA,GAJA3+C,KAAAk/C,cAAAjB,EAAAU,GAAA,EAAAC,GAEAA,GAAA,EAEAZ,EAAAh+C,KAAAk+C,WAAAxE,EAOA,IANAiF,EAAA,IACAA,IAEAA,EAGAV,EAAAU,IAAAX,EAAAh+C,KAAAk+C,YAAAD,EAAAU,GAAAjF,GACAiF,GAAA,EAIA,MAEA,KAzNA,EA8NA,GAJA3+C,KAAAk/C,cAAAjB,EAAAU,GAAA,EAAAC,GAEAA,GAAA,EAEAZ,EAAAh+C,KAAAk+C,WAAAxE,EAOA,IANAiF,EAAA,IACAA,IAEAA,EAGAV,EAAAU,IAAAX,EAAAh+C,KAAAk+C,YAAAD,EAAAU,GAAAjF,GACAiF,GAAA,EAIA,MAEA,KA9OA,EAmPA,GAJA3+C,KAAAk/C,cAAAjB,EAAAU,GAAA,EAAAC,GAEAA,GAAA,EAEAZ,EAAAh+C,KAAAk+C,WAAAxE,EAOA,IANAiF,EAAA,IACAA,IAEAA,EAGAV,EAAAU,IAAAX,EAAAh+C,KAAAk+C,YAAAD,EAAAU,GAAAjF,GACAiF,GAAA,EAIA,MAEA,KAtQA,EAuQA3+C,KAAA++C,WAAArF,EAAA,GAEA15C,KAAAq2C,KAAA,EACA,MAEA,SACA,EAAA92C,EAAA+J,MAAA,eAEAtJ,KAAA++C,WAAArF,EAAA,GAEA15C,KAAAwxB,KAAA,QAQA,IAJAwsB,EAAA,GAAA,EACAh+C,KAAAk+C,UAAA,EACAU,EAAA,EAEAZ,EAAAh+C,KAAAk+C,WAAAxE,GAAA,CAGA,GAFAV,EAAA,EAEA4F,EACA,GACA5F,GAAA6F,EAAA7+C,KAAAg/C,sBACAH,GAAA,SAEA,GACA7F,GAAA6F,EAAA7+C,KAAAi/C,sBACAJ,GAAA,IAGA7+C,KAAA++C,WAAAf,EAAAh+C,KAAAk+C,WAAAlF,EAAA4F,GAEAA,GAAA,EAIA,IAAAO,GAAA,EAMA,GAJAn/C,KAAA49C,YACA59C,KAAAq+C,YAAA,GAGAr+C,KAAA89C,SAAA99C,KAAAm+C,MAAAn+C,KAAA69C,KAAA,EAEA,CAGA,GAFA7E,EAAAh5C,KAAAy+C,UAAA,IAEAz+C,KAAA29C,OACA,MAxTA,IAwTA3E,GAAA,IAAAA,GACAh5C,KAAA0+C,SAAA,GAEA1F,EAAAh5C,KAAAy+C,UAAA,SAGA,KAAA,IAAAzF,GACAh5C,KAAA0+C,SAAA,GAEA1F,EAAAh5C,KAAAy+C,UAAA,IAIA,IAAAzF,GACAh5C,KAAA0+C,SAAA,IAEAS,GAAA,IAxUA,IAyUAnG,IACAh5C,KAAAq2C,KAAA,QAvBAr2C,KAAAw+C,UAAA,EAiCA,IANAx+C,KAAAq2C,KAAAr2C,KAAA09C,SAAA,IAAA19C,KAAAw+C,WACAx+C,KAAAo+C,YAAAp+C,KAAAy+C,UAAA,GAEAz+C,KAAA0+C,SAAA,IAGA1+C,KAAA89C,SAAAqB,GAAAn/C,KAAA49C,WAGA,GAAA,KAFA5E,EAAAh5C,KAAAy+C,UAAA,KAEA,CASA,GARAz+C,KAAA0+C,SAAA,IAEA1+C,KAAA09C,SAAA,IACA19C,KAAAy+C,UAAA,GAEAz+C,KAAA0+C,SAAA,IAGA1+C,KAAA09C,UAAA,EACA,IAAAt/C,EAAA,EAAAA,EAAA,IAAAA,EAGA,KAFA46C,EAAAh5C,KAAAy+C,UAAA,OAGA,EAAAl/C,EAAA+J,MAAA,iBAAA0vC,GAGAh5C,KAAA0+C,SAAA,IAEA1+C,KAAA09C,SAAA,IACA19C,KAAAy+C,UAAA,GAEAz+C,KAAA0+C,SAAA,IAKA1+C,KAAAq2C,KAAA,QAEA,GAAAr2C,KAAAwxB,KAAAxxB,KAAA29C,OAAA,CACA,OAAA,CAGA,IAxXA,KAsXA3E,EAAAh5C,KAAAy+C,UAAA,KAIA,OADAz+C,KAAAq2C,KAAA,GACA,EAGA,GAAA2C,GAAA,GAAA,EACA,MAGAh5C,KAAA0+C,SAAA,GAGA1+C,KAAA0+C,SAAA,IAEA1+C,KAAA09C,SAAA,IACA19C,KAAA0+C,SAAA,GAEA1+C,KAAAo+C,aAAA,EAAApF,IAIAgF,EAAA,GAAA,EACAh+C,KAAAu+C,WAAAP,EAAAh+C,KAAAk+C,UAAA,GAEAl+C,KAAAu+C,WAAAP,EAAAh+C,KAAAk+C,UAAA,GAGAl+C,KAAAm+C,MAKA,GAAAn+C,KAAAu+C,YAAA,EACAx4B,EAAA,EAAA/lB,KAAAk+C,UAAA,EAAA,IACAl+C,KAAAu+C,YAAA,EAEA,IAAAv+C,KAAAu+C,YAAAP,EAAAh+C,KAAAk+C,WAAAxE,IACA15C,KAAAk+C,YACAl+C,KAAAu+C,WAAAP,EAAAh+C,KAAAk+C,WAAAF,EAAAh+C,KAAAk+C,UAAA,QAEA,CACA1G,EAAA,EACAzxB,EAAA,EAEA,GACA/lB,KAAAu+C,WAAA/G,GACAzxB,IAAAyxB,EAEA,EAAAx3C,KAAAk+C,YACAn4B,GAAA,KAAA,EAAAyxB,GAGAx3C,KAAAu+C,YAAA/G,EACAA,EAAA,IAEAzxB,IAAA/lB,KAAAu+C,WAEA,EAAAv+C,KAAAk+C,YACAn4B,GAAA,KAAA,EAAA/lB,KAAAu+C,YAGA/G,GAAAx3C,KAAAu+C,WACAv+C,KAAAu+C,WAAA,EAEAP,EAAAh+C,KAAAk+C,WAAAxE,GACA15C,KAAAk+C,YACAl+C,KAAAu+C,WAAAP,EAAAh+C,KAAAk+C,WAAAF,EAAAh+C,KAAAk+C,UAAA,IACA1G,EAAA,IACAzxB,IAAAyxB,EACAA,EAAA,UAGAA,GAOA,OAJAx3C,KAAA+9C,QACAh4B,GAAA,KAGAA,GAGAhmB,WAAAq/C,EAAAR,GACA,MAAAZ,EAAAh+C,KAAAg+C,WACA,IAAAE,EAAAl+C,KAAAk+C,UAEAkB,EAAApB,EAAAE,KACAkB,EAAAp/C,KAAA05C,WACA,EAAAn6C,EAAA+J,MAAA,uBACAtJ,KAAAwxB,KAAA,EACA4tB,EAAAp/C,KAAA05C,SAGA,EAAAwE,EAAAU,KACAV,EAGAF,EAAAE,GAAAkB,GAGAp/C,KAAAk+C,UAAAA,GAGAn+C,cAAAq/C,EAAAR,GACA,MAAAZ,EAAAh+C,KAAAg+C,WACA,IAAAE,EAAAl+C,KAAAk+C,UAEA,GAAAkB,EAAApB,EAAAE,GACAkB,EAAAp/C,KAAA05C,WACA,EAAAn6C,EAAA+J,MAAA,uBACAtJ,KAAAwxB,KAAA,EACA4tB,EAAAp/C,KAAA05C,SAGA,EAAAwE,EAAAU,KACAV,EAGAF,EAAAE,GAAAkB,OACA,GAAAA,EAAApB,EAAAE,GAAA,CAOA,IANAkB,EAAA,KACA,EAAA7/C,EAAA+J,MAAA,gBACAtJ,KAAAwxB,KAAA,EACA4tB,EAAA,GAGAlB,EAAA,GAAAkB,EAAApB,EAAAE,EAAA,MACAA,EAGAF,EAAAE,GAAAkB,EAGAp/C,KAAAk+C,UAAAA,GAGAn+C,eAAA8J,EAAAgjB,EAAA6qB,EAAA1e,GACA,MAAAqmB,EAAArmB,GAAA,EAEA,IAAA,IAAA56B,EAAAyL,EAAAzL,GAAAyuB,IAAAzuB,EAAA,CACA,IAAAyN,EAAA7L,KAAAy+C,UAAArgD,GAEA,IAtgBA,IAsgBAyN,EACA,QAAA,EAAA,GAAA,GAOA,GAJAzN,EAAAyuB,IACAhhB,IAAAghB,EAAAzuB,IAGAihD,GAAAxzC,GAAAwzC,EAAA,CACA,MAAAl6B,EAAAuyB,EAAA7rC,EAAAwzC,GAEA,GAAAl6B,EAAA,KAAA/mB,EAGA,OAFA4B,KAAA0+C,SAAAtgD,KAEA,EAAA+mB,EAAA,IAAA,IAKA,QAAA,EAAA,GAAA,IAGAplB,iBACA,IACAolB,EADAtZ,EAAA,EAGA,GAAA7L,KAAA89C,SAIA,GAHAjyC,EAAA7L,KAAAy+C,UAAA,IACAt5B,EAAAi4B,EAAAvxC,KAEAsZ,EAAA,GAAA,EAGA,OAFAnlB,KAAA0+C,SAAAv5B,EAAA,IAEAA,EAAA,OAEA,CACA,MAAAyB,EAAA5mB,KAAAs/C,eAAA,EAAA,EAAAlC,GAEA,GAAAx2B,EAAA,IAAAA,EAAA,GACA,OAAAA,EAAA,GAKA,OADA,EAAArnB,EAAA+J,MAAA,qBAjjBA,GAqjBAvJ,gBACA,IACAolB,EADAtZ,EAAA,EAGA,GAAA7L,KAAA89C,QAAA,CAGA,IA5jBA,KA0jBAjyC,EAAA7L,KAAAy+C,UAAA,KAGA,OAAA,EASA,IALAt5B,EADAtZ,GAAA,GAAA,EACAwxC,EAAAxxC,GAEAyxC,EAAAzxC,GAAA,IAGA,GAAA,EAGA,OAFA7L,KAAA0+C,SAAAv5B,EAAA,IAEAA,EAAA,OAEA,CACA,IAAAyB,EAAA5mB,KAAAs/C,eAAA,EAAA,EAAAhC,GAEA,GAAA12B,EAAA,GACA,OAAAA,EAAA,GAKA,IAFAA,EAAA5mB,KAAAs/C,eAAA,GAAA,GAAAjC,IAEA,GACA,OAAAz2B,EAAA,GAQA,OAJA,EAAArnB,EAAA+J,MAAA,kBAEAtJ,KAAA0+C,SAAA,GAEA,GAGA3+C,gBACA,IAAA8L,EAAAsZ,EAEA,GAAAnlB,KAAA89C,QAAA,CAGA,IAtmBA,KAomBAjyC,EAAA7L,KAAAy+C,UAAA,KAGA,OAAA,EAWA,IAPAt5B,EADAtZ,GAAA,GAAA,EACA0xC,EAAA1xC,GACAA,GAAA,GAAA,GAAAA,GAAA,GAAA,EACA2xC,GAAA3xC,GAAA,GAAA,IAEA4xC,EAAA5xC,GAAA,IAGA,GAAA,EAGA,OAFA7L,KAAA0+C,SAAAv5B,EAAA,IAEAA,EAAA,OAEA,CACA,IAAAyB,EAAA5mB,KAAAs/C,eAAA,EAAA,EAAA7B,GAEA,GAAA72B,EAAA,GACA,OAAAA,EAAA,GAKA,IAFAA,EAAA5mB,KAAAs/C,eAAA,EAAA,GAAA9B,EAAA,KAEA,GACA,OAAA52B,EAAA,GAKA,IAFAA,EAAA5mB,KAAAs/C,eAAA,GAAA,GAAA/B,IAEA,GACA,OAAA32B,EAAA,GAQA,OAJA,EAAArnB,EAAA+J,MAAA,kBAEAtJ,KAAA0+C,SAAA,GAEA,GAGA3+C,UAAA+kB,GACA,IAAAiB,EAEA,KAAA/lB,KAAAq+C,UAAAv5B,GAAA,CACA,IAAA,KAAAiB,EAAA/lB,KAAAsD,OAAA4jC,QACA,OAAA,IAAAlnC,KAAAq+C,WAvpBA,EA2pBAr+C,KAAAs+C,UAAAx5B,EAAA9kB,KAAAq+C,UAAA,OAAA,GAAAv5B,EAGA9kB,KAAAs+C,SAAAt+C,KAAAs+C,UAAA,EAAAv4B,EACA/lB,KAAAq+C,WAAA,EAGA,OAAAr+C,KAAAs+C,UAAAt+C,KAAAq+C,UAAAv5B,EAAA,OAAA,GAAAA,GAGA/kB,SAAA+kB,IACA9kB,KAAAq+C,WAAAv5B,GAAA,IACA9kB,KAAAq+C,UAAA,KAKAzB,EA9qBA,GAirBA/9C,QAAA+9C,gBAAAA,GAIA,CAAAh+C,EAAAC,QAAAC,KAIAC,OAAAC,eAAAH,QAAA,cACAI,OAAA,IAEAJ,QAAAy0C,iBAAA,EAEA,IAAA9zC,EAAAV,EAAA,GAEAotB,EAAAptB,EAAA,IAEAygD,EAAAzgD,EAAA,IAEAS,EAAAT,EAAA,GAEA,MAAAw0C,EAAA,WACA,SAAAA,EAAA1sC,EAAA0rC,EAAApnB,EAAA0c,GACA5nC,KAAA4G,OAAAA,EACA5G,KAAAsyC,YAAAA,EACAtyC,KAAAkrB,KAAAA,EACAlrB,KAAA4nC,OAAAA,EAEA1b,EAAA2pB,aAAAG,KAAAh2C,KAAAsyC,GAoDA,OAjDAgB,EAAAlvB,UAAArlB,OAAAyJ,OAAA0jB,EAAA2pB,aAAAzxB,WACArlB,OAAAC,eAAAs0C,EAAAlvB,UAAA,SACArkB,MACA,OAAA,EAAAR,EAAA8S,QAAArS,KAAA,QAAAA,KAAA4G,OAAAuiB,SAAAnpB,KAAAsyC,eAGAruB,cAAA,IAGAqvB,EAAAlvB,UAAAoyB,aAAA,SAAAC,KAEAnD,EAAAlvB,UAAAmyB,UAAA,WACA,GAAAv2C,KAAAq2C,IACA,OAGA,MAAAmJ,EAAA,IAAAD,EAAAE,WACAvxB,KAEA,IAAA,EAAA1uB,EAAAkpB,QAAA1oB,KAAA4nC,QAAA,CACA,MAAA8X,EAAA1/C,KAAA4nC,OAAAzoC,IAAA,gBAEA,IAAA,EAAAK,EAAA0pB,UAAAw2B,GAAA,CACA,MAAAC,EAAAD,EAAAv2B,WACA+E,EAAAtsB,MACAhB,KAAA++C,EACA91C,MAAA,EACAgjB,IAAA8yB,EAAAzhD,UAKAgwB,EAAAtsB,MACAhB,KAAAZ,KAAA6G,MACAgD,MAAA,EACAgjB,IAAA7sB,KAAA6G,MAAA3I,SAEA,MAAA0C,EAAA4+C,EAAAI,YAAA1xB,GACAwd,EAAA9qC,EAAA1C,OAEA,IAAA,IAAAE,EAAA,EAAAA,EAAAstC,EAAAttC,IACAwC,EAAAxC,IAAA,IAGA4B,KAAAmP,OAAAvO,EACAZ,KAAAo2C,aAAA1K,EACA1rC,KAAAq2C,KAAA,GAGA/C,EA3DA,GA8DAz0C,QAAAy0C,YAAAA,GAIA,CAAA10C,EAAAC,QAAAC,KAIAC,OAAAC,eAAAH,QAAA,cACAI,OAAA,IAEAJ,QAAA4gD,gBAAA,EAEA,IAAAlgD,EAAAT,EAAA,GAEAgB,EAAAhB,EAAA,GAEA+gD,EAAA/gD,EAAA,IAEA49C,EAAA59C,EAAA,UAEAghD,UAAAvgD,EAAA6U,cACArU,YAAAuQ,GACA+T,sBAAA/T,MAKA,IAAAmvC,EAAA,WACA,SAAAM,KAaA,SAAAC,EAAAp/C,EAAAiJ,EAAAgjB,GACA7sB,KAAAY,KAAAA,EACAZ,KAAA6J,MAAAA,EACA7J,KAAA6sB,IAAAA,EAgBA,SAAAozB,EAAAC,EAAAC,EAAAC,GACA,IAAAC,EAAAH,EAAAI,YAAAH,GACAI,EAAA,EAEA,SAAAtE,EAAA/9C,GAGA,IAFA,IAAAwS,EAAA,EAEAtS,EAAA,EAAAA,EAAAF,EAAAE,IAAA,CACA,IAAAoiD,EAAAJ,EAAAK,QAAAJ,EAAAE,GACAA,EAAAA,EAAA,IAAAA,GAAA,EAAAC,EAAA,KAAAD,GAAA,EAAAC,GAAA,IACA9vC,EAAAA,GAAA,EAAA8vC,EAGA,OAAA9vC,IAAA,EAGA,IAAAmjC,EAAAoI,EAAA,GACAh9C,EAAAg9C,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,IAAA,KAAAA,EAAA,IAAA,IAAAA,EAAA,GAAA,GAAAA,EAAA,GAAA,GAAAA,EAAA,GAAA,EAAAA,EAAA,GAEA,OAAA,IAAApI,EACA50C,EACAA,EAAA,GACAA,EAGA,KAGA,SAAAyhD,EAAAR,EAAAE,EAAA3E,GAIA,IAHA,IAAA4E,EAAAH,EAAAI,YAAA,QACAC,EAAA,EAEAniD,EAAA,EAAAA,EAAAq9C,EAAAr9C,IAAA,CACA,IAAAoiD,EAAAJ,EAAAK,QAAAJ,EAAAE,GACAA,EAAAA,GAAA,EAAAC,EAGA,OAAA/E,EAAA,GACA8E,GAAA,GAAA9E,GAAA,EAGA,WAAA8E,EAvEAR,EAAA37B,WACArkB,YAAAyG,GACA,OAAAA,KAAAxG,KACAA,KAAAwG,GAGAxG,KAAAwG,GAAA,IAAAm6C,UAAA,SAWAX,EAAA57B,WACAg8B,cACA,IAAAA,EAAA,IAAAP,EAAAe,kBAAA5gD,KAAAY,KAAAZ,KAAA6J,MAAA7J,KAAA6sB,KACA,OAAA,EAAAttB,EAAA8S,QAAArS,KAAA,UAAAogD,IAGAF,mBACA,IAAAW,EAAA,IAAAd,EACA,OAAA,EAAAxgD,EAAA8S,QAAArS,KAAA,eAAA6gD,KAiDA,IAAAC,GAAA,mBAAA,KAAA,KAAA,KAAA,yBAAA,KAAA,sBAAA,8BAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,oBAAA,KAAA,KAAA,KAAA,6BAAA,KAAA,0BAAA,kCAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,4BAAA,KAAA,yBAAA,iCAAA,sCAAA,KAAA,mCAAA,2CAAA,KAAA,KAAA,KAAA,KAAA,kBAAA,YAAA,cAAA,YAAA,WAAA,SAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,aACAC,KACAn5C,GAAA,EACAo5C,GAAA,IAEAp5C,EAAA,EACAo5C,GAAA,IAEAp5C,EAAA,EACAo5C,GAAA,IAEAp5C,GAAA,EACAo5C,GAAA,IAEAp5C,GAAA,EACAo5C,GAAA,IAEAp5C,EAAA,EACAo5C,GAAA,IAEAp5C,EAAA,EACAo5C,GAAA,IAEAp5C,EAAA,EACAo5C,GAAA,IAEAp5C,GAAA,EACAo5C,EAAA,IAEAp5C,GAAA,EACAo5C,EAAA,IAEAp5C,GAAA,EACAo5C,EAAA,IAEAp5C,GAAA,EACAo5C,EAAA,MAEAp5C,GAAA,EACAo5C,GAAA,IAEAp5C,EAAA,EACAo5C,GAAA,IAEAp5C,EAAA,EACAo5C,GAAA,IAEAp5C,EAAA,EACAo5C,GAAA,IAEAp5C,GAAA,EACAo5C,GAAA,IAEAp5C,GAAA,EACAo5C,GAAA,IAEAp5C,EAAA,EACAo5C,GAAA,IAEAp5C,EAAA,EACAo5C,GAAA,IAEAp5C,EAAA,EACAo5C,GAAA,IAEAp5C,GAAA,EACAo5C,EAAA,IAEAp5C,GAAA,EACAo5C,EAAA,IAEAp5C,GAAA,EACAo5C,EAAA,MAEAp5C,GAAA,EACAo5C,GAAA,IAEAp5C,EAAA,EACAo5C,GAAA,IAEAp5C,EAAA,EACAo5C,GAAA,IAEAp5C,GAAA,EACAo5C,GAAA,IAEAp5C,GAAA,EACAo5C,GAAA,IAEAp5C,EAAA,EACAo5C,GAAA,IAEAp5C,EAAA,EACAo5C,GAAA,IAEAp5C,GAAA,EACAo5C,EAAA,IAEAp5C,GAAA,EACAo5C,EAAA,MAEAp5C,GAAA,EACAo5C,GAAA,IAEAp5C,GAAA,EACAo5C,GAAA,IAEAp5C,GAAA,EACAo5C,GAAA,IAEAp5C,EAAA,EACAo5C,GAAA,IAEAp5C,EAAA,EACAo5C,GAAA,IAEAp5C,GAAA,EACAo5C,EAAA,IAEAp5C,GAAA,EACAo5C,EAAA,IAEAp5C,GAAA,EACAo5C,EAAA,IAEAp5C,GAAA,EACAo5C,EAAA,KAEAC,IACAC,SACAt5C,EAAA,EACAo5C,GAAA,IAEAp5C,EAAA,EACAo5C,GAAA,IAEAp5C,GAAA,EACAo5C,EAAA,IAEAG,YACAv5C,EAAA,EACAo5C,GAAA,IAEAp5C,EAAA,EACAo5C,GAAA,IAEAp5C,GAAA,EACAo5C,EAAA,IAEAp5C,EAAA,EACAo5C,EAAA,IAEAp5C,EAAA,EACAo5C,EAAA,IAEAp5C,GAAA,EACAo5C,EAAA,IAEAp5C,EAAA,EACAo5C,EAAA,IAEAp5C,EAAA,EACAo5C,EAAA,MAGAE,SACAt5C,GAAA,EACAo5C,GAAA,IAEAp5C,EAAA,EACAo5C,GAAA,IAEAp5C,EAAA,EACAo5C,GAAA,IAEAp5C,GAAA,EACAo5C,EAAA,IAEAG,YACAv5C,EAAA,EACAo5C,GAAA,IAEAp5C,GAAA,EACAo5C,EAAA,IAEAp5C,EAAA,EACAo5C,EAAA,IAEAp5C,EAAA,EACAo5C,EAAA,IAEAp5C,EAAA,EACAo5C,EAAA,IAEAp5C,EAAA,EACAo5C,EAAA,MAGAI,GAAA,MAAA,KAAA,IAAA,KACAC,GAAA,GAAA,GA8BA,SAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAArnB,EAAAsnB,EAAAC,GACA,GAAAN,EAAA,CACA,MAAArG,EAAA,IAAA4G,EAAAD,EAAAjhD,KAAAihD,EAAAh4C,MAAAg4C,EAAAh1B,KACA,OAAAk1B,EAAA7G,EAAAsG,EAAAC,GAAA,GAGA,GAAA,IAAAC,IAAApnB,IAAAqnB,GAAA,IAAAC,EAAA1jD,QAAA,IAAA0jD,EAAA,GAAAh6C,IAAA,IAAAg6C,EAAA,GAAAZ,IAAA,IAAAY,EAAA,GAAAh6C,IAAA,IAAAg6C,EAAA,GAAAZ,GAAA,IAAAY,EAAA,GAAAh6C,IAAA,IAAAg6C,EAAA,GAAAZ,IAAA,IAAAY,EAAA,GAAAh6C,IAAA,IAAAg6C,EAAA,GAAAZ,EACA,OAnCA,SAAAQ,EAAAC,EAAAI,GACA,IAEAG,EACA5jD,EACAm7B,EACA0oB,EACA9D,EACA+D,EACAC,EARA/B,EAAAyB,EAAAzB,QACAC,EAAAwB,EAAA3B,aAAAI,YAAA,MAQA8B,KAGA,IAAAhkD,EAAA,EAAAA,EAAAqjD,EAAArjD,IAMA,IALA+/C,EAAAiE,EAAAhkD,GAAA,IAAAyC,WAAA2gD,GACAU,EAAA9jD,EAAA,EAAA+/C,EAAAiE,EAAAhkD,EAAA,GACA+jD,EAAA/jD,EAAA,EAAA+/C,EAAAiE,EAAAhkD,EAAA,GACA4jD,EAAAG,EAAA,IAAA,GAAAA,EAAA,IAAA,GAAAA,EAAA,IAAA,GAAAD,EAAA,IAAA,EAAAA,EAAA,IAAA,EAAAA,EAAA,IAAA,EAAAA,EAAA,IAAA,EAEA3oB,EAAA,EAAAA,EAAAioB,EAAAjoB,IACA4kB,EAAA5kB,GAAA0oB,EAAA7B,EAAAK,QAAAJ,EAAA2B,GACAA,GAVA,MAUAA,IAAA,GAAAzoB,EAAA,EAAAioB,EAAAW,EAAA5oB,EAAA,IAAA,GAAA,IAAAA,EAAA,EAAAioB,EAAAU,EAAA3oB,EAAA,IAAA,EAAA,GAAA0oB,EAIA,OAAAG,EAUAC,CAAAb,EAAAC,EAAAI,GAGA,IAAAS,IAAAhoB,EACAioB,EAAAxB,EAAAW,GAAA15C,OAAA45C,GACAW,EAAA77B,KAAA,SAAA5e,EAAAC,GACA,OAAAD,EAAAk5C,EAAAj5C,EAAAi5C,GAAAl5C,EAAAF,EAAAG,EAAAH,IAEA,IAQAme,EAAAmzB,EARAsJ,EAAAD,EAAArkD,OACAukD,EAAA,IAAA9B,UAAA6B,GACAE,EAAA,IAAA/B,UAAA6B,GACAG,KACAC,EAAA,EACAC,EAAA,EACAC,EAAA,EACAC,EAAA,EAGA,IAAA7J,EAAA,EAAAA,EAAAsJ,EAAAtJ,IACAuJ,EAAAvJ,GAAAqJ,EAAArJ,GAAAtxC,EACA86C,EAAAxJ,GAAAqJ,EAAArJ,GAAA8H,EACA6B,EAAAv9C,KAAA+I,IAAAw0C,EAAAN,EAAArJ,GAAAtxC,GACAk7C,EAAAx9C,KAAAC,IAAAu9C,EAAAP,EAAArJ,GAAAtxC,GACAm7C,EAAAz9C,KAAA+I,IAAA00C,EAAAR,EAAArJ,GAAA8H,GAEA9H,EAAAsJ,EAAA,GAAAD,EAAArJ,GAAA8H,IAAAuB,EAAArJ,EAAA,GAAA8H,GAAAuB,EAAArJ,GAAAtxC,IAAA26C,EAAArJ,EAAA,GAAAtxC,EAAA,EACAg7C,GAAA,GAAAJ,EAAA,EAAAtJ,EAEAyJ,EAAA/gD,KAAAs3C,GAIA,IAAA8J,EAAAL,EAAAzkD,OACA+kD,EAAA,IAAAtC,UAAAqC,GACAE,EAAA,IAAAvC,UAAAqC,GACAG,EAAA,IAAAtH,YAAAmH,GAEA,IAAAj9B,EAAA,EAAAA,EAAAi9B,EAAAj9B,IACAmzB,EAAAyJ,EAAA58B,GACAk9B,EAAAl9B,GAAAw8B,EAAArJ,GAAAtxC,EACAs7C,EAAAn9B,GAAAw8B,EAAArJ,GAAA8H,EACAmC,EAAAp9B,GAAA,GAAAy8B,EAAA,EAAAtJ,EAmBA,IAhBA,IASA3f,EACA6pB,EACAC,EAEA7C,EACAvgB,EAdAqjB,GAAAT,EACAU,GAAAR,EACAS,EAAAhC,EAAAsB,EACAW,EAAArC,EAAAM,GACAvD,EAAA,IAAAt9C,WAAA2gD,GACAY,KACAhC,EAAAyB,EAAAzB,QACAC,EAAAwB,EAAA3B,aAAAI,YAAA,MACAoD,EAAA,EAIA1B,EAAA,EAIA5jD,EAAA,EAAAA,EAAAqjD,EAAArjD,IAAA,CACA,GAAAujD,EAAA,CACA,IAAAgC,EAAAvD,EAAAK,QAAAJ,EAAAoD,GAGA,GAFAC,GAAAC,EAEA,CACAvB,EAAAxgD,KAAAu8C,GACA,UAOA,IAHAA,EAAA,IAAAt9C,WAAAs9C,GACAiE,EAAAxgD,KAAAu8C,GAEA5kB,EAAA,EAAAA,EAAAioB,EAAAjoB,IACA,GAAA+oB,GAAAhoB,EAAAl8B,GAAAm7B,GACA4kB,EAAA5kB,GAAA,MADA,CAKA,GAAAA,GAAA+pB,GAAA/pB,EAAAiqB,GAAAplD,GAAAmlD,EAGA,IAFAvB,EAAAA,GAAA,EAAAY,EAEA1J,EAAA,EAAAA,EAAA8J,EAAA9J,IACAkK,EAAAhlD,EAAA8kD,EAAAhK,GACAmK,EAAA9pB,EAAA0pB,EAAA/J,IACAsH,EAAA4B,EAAAgB,GAAAC,MAGA7C,EAAA2C,EAAAjK,GACA8I,GAAAxB,QAOA,IAHAwB,EAAA,EACA/hB,EAAAuiB,EAAA,EAEAtJ,EAAA,EAAAA,EAAAsJ,EAAAtJ,IAAAjZ,KACAojB,EAAA9pB,EAAAkpB,EAAAvJ,KAEA,GAAAmK,EAAA7B,IACA4B,EAAAhlD,EAAAskD,EAAAxJ,KAEA,IACAsH,EAAA4B,EAAAgB,GAAAC,MAGArB,GAAAxB,GAAAvgB,GAOA,IAAAgiB,EAAA7B,EAAAK,QAAAJ,EAAA2B,GACA7D,EAAA5kB,GAAA0oB,GAIA,OAAAG,EAGA,SAAAwB,EAAApC,EAAAC,EAAAC,EAAAmC,EAAAC,EAAAC,EAAApC,EAAAC,EAAAC,GACA,IAAAmC,EAAA/C,EAAAS,GAAAR,OAEA,IAAAQ,IACAsC,EAAAA,EAAAh8C,QAAA45C,EAAA,MAGA,IAGA1I,EAHA+K,EAAAD,EAAA9lD,OACAgmD,EAAA,IAAApN,WAAAmN,GACAE,EAAA,IAAArN,WAAAmN,GAGA,IAAA/K,EAAA,EAAAA,EAAA+K,EAAA/K,IACAgL,EAAAhL,GAAA8K,EAAA9K,GAAAtxC,EACAu8C,EAAAjL,GAAA8K,EAAA9K,GAAA8H,EAGA,IAAAoD,EAAAnD,EAAAS,GAAAP,UAEA,IAAAO,IACA0C,EAAAA,EAAAp8C,QAAA45C,EAAA,MAGA,IAAAyC,EAAAD,EAAAlmD,OACAomD,EAAA,IAAAxN,WAAAuN,GACAE,EAAA,IAAAzN,WAAAuN,GAEA,IAAAnL,EAAA,EAAAA,EAAAmL,EAAAnL,IACAoL,EAAApL,GAAAkL,EAAAlL,GAAAtxC,EACA28C,EAAArL,GAAAkL,EAAAlL,GAAA8H,EAWA,IARA,IAAAwD,EAAAX,EAAA,GAAA3lD,OACAumD,EAAAZ,EAAA3lD,OACAulD,EAAApC,EAAAK,GACAU,KACAhC,EAAAyB,EAAAzB,QACAC,EAAAwB,EAAA3B,aAAAI,YAAA,MACAoD,EAAA,EAEAtlD,EAAA,EAAAA,EAAAqjD,EAAArjD,IAAA,CACA,GAAAujD,EAAA,CACA,IAAAgC,EAAAvD,EAAAK,QAAAJ,EAAAoD,GAGA,GAFAC,GAAAC,EAGA,MAAA,IAAA7D,EAAA,+BAIA,IAAA3B,EAAA,IAAAt9C,WAAA2gD,GACAY,EAAAxgD,KAAAu8C,GAEA,IAAA,IAAA5kB,EAAA,EAAAA,EAAAioB,EAAAjoB,IAAA,CACA,IAAA6pB,EAAAC,EACArB,EAAA,EAEA,IAAA9I,EAAA,EAAAA,EAAA+K,EAAA/K,IACAkK,EAAAhlD,EAAA+lD,EAAAjL,GACAmK,EAAA9pB,EAAA2qB,EAAAhL,GAEAkK,EAAA,GAAAC,EAAA,GAAAA,GAAA7B,EACAQ,IAAA,EAEAA,EAAAA,GAAA,EAAAI,EAAAgB,GAAAC,GAIA,IAAAnK,EAAA,EAAAA,EAAAmL,EAAAnL,IACAkK,EAAAhlD,EAAAmmD,EAAArL,GAAA6K,EACAV,EAAA9pB,EAAA+qB,EAAApL,GAAA4K,EAEAV,EAAA,GAAAA,GAAAqB,GAAApB,EAAA,GAAAA,GAAAmB,EACAxC,IAAA,EAEAA,EAAAA,GAAA,EAAA6B,EAAAT,GAAAC,GAIA,IAAApB,EAAA7B,EAAAK,QAAAJ,EAAA2B,GACA7D,EAAA5kB,GAAA0oB,GAIA,OAAAG,EAuIA,SAAAsC,EAAAC,EAAAC,EAAApD,EAAAC,EAAAoD,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA3D,EAAA4D,EAAAC,GACA,GAAAf,GAAAC,EACA,MAAA,IAAA9E,EAAA,4CAGA,IACA1hD,EAAA+/C,EADAiE,KAGA,IAAAhkD,EAAA,EAAAA,EAAAqjD,EAAArjD,IAAA,CAGA,GAFA+/C,EAAA,IAAAt9C,WAAA2gD,GAEAqD,EACA,IAAA,IAAAtrB,EAAA,EAAAA,EAAAioB,EAAAjoB,IACA4kB,EAAA5kB,GAAAsrB,EAIAzC,EAAAxgD,KAAAu8C,GAGA,IAAAiC,EAAAyB,EAAAzB,QACAF,EAAA2B,EAAA3B,aACAyF,EAAAhB,GAAAW,EAAAM,YAAAC,OAAAH,IAAAzF,EAAAC,EAAA,OAAAE,GACA0F,EAAA,EAGA,IAFA1nD,EAAA,EAEAA,EAAA0mD,GAAA,CACA,IAAAiB,EAAApB,EAAAW,EAAAM,YAAAC,OAAAH,GAAAzF,EAAAC,EAAA,OAAAE,GACAuF,GAAAI,EAKA,IAJA,IAAAC,EAAArB,EAAAW,EAAAW,YAAAJ,OAAAH,GAAAzF,EAAAC,EAAA,OAAAE,GAEA8F,EADAJ,GAAAE,IAGA,CACA,IAAAG,EAAA,EAEApB,EAAA,IACAoB,EAAAxB,EAAAe,EAAAzJ,SAAAwJ,GAAAxF,EAAAC,EAAA,OAAAE,IAGA,IAAAjI,EAAA4M,EAAAY,EAAAQ,EACAC,EAAAzB,EAAAW,EAAAe,cAAAR,OAAAH,GAAAhF,EAAAR,EAAAE,EAAA6E,GACAqB,EAAA1B,IAAAD,EAAAe,EAAAjF,UAAAR,EAAAC,EAAA,OAAAE,IACAmG,EAAAvB,EAAAoB,GACAI,EAAAD,EAAA,GAAAroD,OACAuoD,EAAAF,EAAAroD,OAEA,GAAAooD,EAAA,CACA,IAAAI,EAAAzG,EAAAC,EAAA,QAAAE,GACAuG,EAAA1G,EAAAC,EAAA,QAAAE,GACAwG,EAAA3G,EAAAC,EAAA,QAAAE,GACAyG,EAAA5G,EAAAC,EAAA,QAAAE,GAGAmG,EAAA3C,EAFA4C,GAAAE,EACAD,GAAAE,EACApB,EAAAgB,GAAAG,GAAA,GAAAE,GAAAD,GAAA,GAAAE,GAAA,EAAArB,EAAA3D,GAGA,IAEAiF,EAAAC,EAAAC,EAFAC,EAAA9O,GAAA,EAAAiN,EAAA,EAAAqB,EAAA,GACAS,EAAAhB,GAAA,EAAAd,EAAAoB,EAAA,EAAA,GAGA,GAAAtB,EAAA,CACA,IAAA4B,EAAA,EAAAA,EAAAL,EAAAK,IAGA,GAFA3I,EAAAiE,EAAA8E,EAAAJ,GAEA,CAIAE,EAAAT,EAAAO,GACA,IAAAK,EAAA7hD,KAAA+I,IAAAmzC,EAAAyF,EAAAT,GAEA,OAAAnB,GACA,KAAA,EACA,IAAA0B,EAAA,EAAAA,EAAAI,EAAAJ,IACA5I,EAAA8I,EAAAF,IAAAC,EAAAD,GAGA,MAEA,KAAA,EACA,IAAAA,EAAA,EAAAA,EAAAI,EAAAJ,IACA5I,EAAA8I,EAAAF,IAAAC,EAAAD,GAGA,MAEA,QACA,MAAA,IAAAjH,cAAAuF,uBAIAa,GAAAO,EAAA,MACA,CACA,IAAAM,EAAA,EAAAA,EAAAN,EAAAM,IAGA,GAFA5I,EAAAiE,EAAA6E,EAAAF,GAQA,OAFAC,EAAAT,EAAAQ,GAEA1B,GACA,KAAA,EACA,IAAAyB,EAAA,EAAAA,EAAAN,EAAAM,IACA3I,EAAA+I,EAAAJ,IAAAE,EAAAF,GAGA,MAEA,KAAA,EACA,IAAAA,EAAA,EAAAA,EAAAN,EAAAM,IACA3I,EAAA+I,EAAAJ,IAAAE,EAAAF,GAGA,MAEA,QACA,MAAA,IAAAhH,cAAAuF,sBAIAa,GAAAM,EAAA,EAGApoD,IACA,IAAAgpD,EAAAzC,EAAAW,EAAA+B,YAAAxB,OAAAH,GAAAzF,EAAAC,EAAA,OAAAE,GAEA,GAAA,OAAAgH,EACA,MAGAlB,GAAAkB,EAAAjC,GAIA,OAAA/C,EA4KA,SAAAkF,EAAA1mD,EAAAiJ,GACA,IAAA09C,KACAA,EAAA/zB,QAAA,EAAA1zB,EAAAwzB,YAAA1yB,EAAAiJ,GACA,IAAA02B,EAAA3/B,EAAAiJ,EAAA,GACA29C,EAAA,GAAAjnB,EAEA,IAAAugB,EAAA0G,GACA,MAAA,IAAA1H,EAAA,yBAAA0H,GAGAD,EAAApgC,KAAAqgC,EACAD,EAAAE,SAAA3G,EAAA0G,GACAD,EAAAG,qBAAA,IAAAnnB,GACA,IAAAonB,KAAA,GAAApnB,GACAqnB,EAAAhnD,EAAAiJ,EAAA,GACAg+C,EAAAD,GAAA,EAAA,EACAE,GAAA,GAAAF,GACAp5B,EAAA3kB,EAAA,EAEA,GAAA,IAAA+9C,EAAA,CACAC,EAAA,WAAA,EAAA/nD,EAAAwzB,YAAA1yB,EAAA4tB,EAAA,GACAA,GAAA,EACA,IAAA3nB,EAAAghD,EAAA,GAAA,EAGA,IAFAC,EAAA,GAAAlnD,EAAA4tB,OAEA3nB,EAAA,GACAihD,EAAAlmD,KAAAhB,EAAA4tB,WAEA,GAAA,IAAAo5B,GAAA,IAAAA,EACA,MAAA,IAAA9H,EAAA,6BAGAyH,EAAAO,WAAAA,EACA,IAAAC,EAAA,EAEAR,EAAA/zB,QAAA,IACAu0B,EAAA,EACAR,EAAA/zB,QAAA,QACAu0B,EAAA,GAGA,IACA3pD,EAAAkK,EADA0/C,KAGA,IAAA5pD,EAAA,EAAAA,EAAAypD,EAAAzpD,IAAA,CACA,IAAAo1B,EAGAA,EADA,IAAAu0B,EACAnnD,EAAA4tB,GACA,IAAAu5B,GACA,EAAAjoD,EAAAuzB,YAAAzyB,EAAA4tB,IAEA,EAAA1uB,EAAAwzB,YAAA1yB,EAAA4tB,GAGAw5B,EAAApmD,KAAA4xB,GACAhF,GAAAu5B,EAeA,GAZAR,EAAAS,WAAAA,EAEAL,GAGAJ,EAAAU,iBAAA,EAAAnoD,EAAAwzB,YAAA1yB,EAAA4tB,GACAA,GAAA,GAHA+4B,EAAAU,gBAAArnD,EAAA4tB,KAMA+4B,EAAArpD,QAAA,EAAA4B,EAAAwzB,YAAA1yB,EAAA4tB,GACAA,GAAA,EAEA,aAAA+4B,EAAArpD,OAAA,CACA,GAAA,KAAAspD,EAkCA,MAAA,IAAA1H,EAAA,kCAjCA,IAAAoI,EAAAC,EAAAvnD,EAAA4tB,GACA45B,EAAAxnD,EAAA4tB,EAAA65B,GACAC,KAAA,EAAAF,GAEAG,EAAA,IAAA1nD,WADA,GAaA,IAVAynD,IACAC,EAAA,GAAA,IACAA,EAAA,GAAA,KAGAA,EAAA,GAAAL,EAAAzG,SAAA,GAAA,IACA8G,EAAA,GAAAL,EAAAzG,QAAA,GAAA,IACA8G,EAAA,GAAAL,EAAAzG,QAAA,EAAA,IACA8G,EAAA,GAAA,IAAAL,EAAAzG,OAEArjD,EAAAowB,EAAAlmB,EAAA1H,EAAA1C,OAAAE,EAAAkK,EAAAlK,IAAA,CAGA,IAFA,IAAAm7B,EAAA,EAEAA,EAhBA,GAgBAgvB,EAAAhvB,KAAA34B,EAAAxC,EAAAm7B,IACAA,IAGA,GApBA,IAoBAA,EAAA,CACAguB,EAAArpD,OAAAE,EArBA,EAsBA,OAIA,GAAA,aAAAmpD,EAAArpD,OACA,MAAA,IAAA4hD,EAAA,6BAQA,OADAyH,EAAAiB,UAAAh6B,EACA+4B,EAGA,SAAAkB,EAAAC,EAAA9nD,EAAAiJ,EAAAgjB,GAIA,IAHA,IAAA87B,KACAn6B,EAAA3kB,EAEA2kB,EAAA3B,GAAA,CACA,IAAA06B,EAAAD,EAAA1mD,EAAA4tB,GACAA,EAAA+4B,EAAAiB,UACA,IAAAI,GACAF,OAAAnB,EACA3mD,KAAAA,GAWA,GARA8nD,EAAAG,eACAD,EAAA/+C,MAAA2kB,EACAA,GAAA+4B,EAAArpD,OACA0qD,EAAA/7B,IAAA2B,GAGAm6B,EAAA/mD,KAAAgnD,GAEA,KAAArB,EAAApgC,KACA,MAIA,GAAAuhC,EAAAG,aACA,IAAA,IAAAzqD,EAAA,EAAAkK,EAAAqgD,EAAAzqD,OAAAE,EAAAkK,EAAAlK,IACAuqD,EAAAvqD,GAAAyL,MAAA2kB,EACAA,GAAAm6B,EAAAvqD,GAAAsqD,OAAAxqD,OACAyqD,EAAAvqD,GAAAyuB,IAAA2B,EAIA,OAAAm6B,EAGA,SAAAR,EAAAvnD,EAAAiJ,GACA,OACA23C,OAAA,EAAA1hD,EAAAwzB,YAAA1yB,EAAAiJ,GACA43C,QAAA,EAAA3hD,EAAAwzB,YAAA1yB,EAAAiJ,EAAA,GACAjC,GAAA,EAAA9H,EAAAwzB,YAAA1yB,EAAAiJ,EAAA,GACAm3C,GAAA,EAAAlhD,EAAAwzB,YAAA1yB,EAAAiJ,EAAA,IACAw7C,oBAAA,EAAAzkD,EAAAiJ,EAAA,KAIA,IAAAw+C,EAAA,GAEA,SAAAS,EAAAF,EAAAG,GACA,IAIAv8B,EAAAo1B,EAAAxjD,EAAA4qD,EAJAN,EAAAE,EAAAF,OACA9nD,EAAAgoD,EAAAhoD,KACA4tB,EAAAo6B,EAAA/+C,MACAgjB,EAAA+7B,EAAA/7B,IAGA,OAAA67B,EAAAvhC,MACA,KAAA,EACA,IAAA8hC,KACAC,GAAA,EAAAppD,EAAAuzB,YAAAzyB,EAAA4tB,GAaA,GAZAy6B,EAAAtE,WAAA,EAAAuE,GACAD,EAAArE,cAAA,EAAAsE,GACAD,EAAAE,kBAAAD,GAAA,EAAA,EACAD,EAAAG,kBAAAF,GAAA,EAAA,EACAD,EAAAI,mBAAAH,GAAA,EAAA,EACAD,EAAAK,6BAAAJ,GAAA,EAAA,EACAD,EAAAM,2BAAA,IAAAL,GACAD,EAAAO,+BAAA,IAAAN,GACAD,EAAA1G,SAAA2G,GAAA,GAAA,EACAD,EAAAQ,mBAAAP,GAAA,GAAA,EACA16B,GAAA,GAEAy6B,EAAAtE,QAAA,CAIA,IAHAqE,EAAA,IAAAC,EAAA1G,SAAA,EAAA,EACAX,KAEAxjD,EAAA,EAAAA,EAAA4qD,EAAA5qD,IACAwjD,EAAAhgD,MACAgG,GAAA,EAAA9H,EAAAqzB,UAAAvyB,EAAA4tB,GACAwyB,GAAA,EAAAlhD,EAAAqzB,UAAAvyB,EAAA4tB,EAAA,KAEAA,GAAA,EAGAy6B,EAAArH,GAAAA,EAGA,GAAAqH,EAAArE,aAAAqE,EAAAQ,mBAAA,CAGA,IAFA7H,KAEAxjD,EAAA,EAAAA,EAAA,EAAAA,IACAwjD,EAAAhgD,MACAgG,GAAA,EAAA9H,EAAAqzB,UAAAvyB,EAAA4tB,GACAwyB,GAAA,EAAAlhD,EAAAqzB,UAAAvyB,EAAA4tB,EAAA,KAEAA,GAAA,EAGAy6B,EAAAzD,aAAA5D,EAGAqH,EAAAS,yBAAA,EAAA5pD,EAAAwzB,YAAA1yB,EAAA4tB,GACAA,GAAA,EACAy6B,EAAAU,oBAAA,EAAA7pD,EAAAwzB,YAAA1yB,EAAA4tB,GACAA,GAAA,EACAhC,GAAAy8B,EAAAP,EAAAl1B,OAAAk1B,EAAAV,WAAApnD,EAAA4tB,EAAA3B,GACA,MAEA,KAAA,EACA,KAAA,EACA,IAAA+8B,KACAA,EAAAtgD,KAAA6+C,EAAAvnD,EAAA4tB,GACAA,GAAA65B,EACA,IAAAwB,GAAA,EAAA/pD,EAAAuzB,YAAAzyB,EAAA4tB,GAaA,GAZAA,GAAA,EACAo7B,EAAAjF,WAAA,EAAAkF,GACAD,EAAAhF,cAAA,EAAAiF,GACAD,EAAAnE,aAAAoE,GAAA,EAAA,EACAD,EAAA7E,UAAA,GAAA6E,EAAAnE,aACAmE,EAAAxE,gBAAAyE,GAAA,EAAA,EACAD,EAAA1E,cAAA,GAAA2E,GACAD,EAAAvE,oBAAAwE,GAAA,EAAA,EACAD,EAAA/E,kBAAAgF,GAAA,EAAA,EACAD,EAAAzE,SAAA0E,GAAA,IAAA,GACAD,EAAAH,mBAAAI,GAAA,GAAA,EAEAD,EAAAjF,QAAA,CACA,IAAAmF,GAAA,EAAAhqD,EAAAuzB,YAAAzyB,EAAA4tB,GACAA,GAAA,EACAo7B,EAAAG,UAAA,EAAAD,EACAF,EAAAI,UAAAF,GAAA,EAAA,EACAF,EAAAK,UAAAH,GAAA,EAAA,EACAF,EAAAM,oBAAAJ,GAAA,EAAA,EACAF,EAAAO,oBAAAL,GAAA,EAAA,EACAF,EAAAQ,oBAAAN,GAAA,GAAA,EACAF,EAAAS,oBAAAP,GAAA,GAAA,EACAF,EAAAU,iCAAA,MAAAR,GAGA,GAAAF,EAAAhF,aAAAgF,EAAAH,mBAAA,CAGA,IAFA7H,KAEAxjD,EAAA,EAAAA,EAAA,EAAAA,IACAwjD,EAAAhgD,MACAgG,GAAA,EAAA9H,EAAAqzB,UAAAvyB,EAAA4tB,GACAwyB,GAAA,EAAAlhD,EAAAqzB,UAAAvyB,EAAA4tB,EAAA,KAEAA,GAAA,EAGAo7B,EAAApE,aAAA5D,EAGAgI,EAAA9E,yBAAA,EAAAhlD,EAAAwzB,YAAA1yB,EAAA4tB,GACAA,GAAA,EACAhC,GAAAo9B,EAAAlB,EAAAV,WAAApnD,EAAA4tB,EAAA3B,GACA,MAEA,KAAA,GACA,MAAA09B,KACAC,EAAA5pD,EAAA4tB,KACA+7B,EAAAhJ,OAAA,EAAAiJ,GACAD,EAAAhI,SAAAiI,GAAA,EAAA,EACAD,EAAAE,aAAA7pD,EAAA4tB,KACA+7B,EAAAG,cAAA9pD,EAAA4tB,KACA+7B,EAAAI,iBAAA,EAAA7qD,EAAAwzB,YAAA1yB,EAAA4tB,GACAA,GAAA,EACAhC,GAAA+9B,EAAA7B,EAAAl1B,OAAA5yB,EAAA4tB,EAAA3B,GACA,MAEA,KAAA,GACA,KAAA,GACA,MAAA+9B,KACAA,EAAAthD,KAAA6+C,EAAAvnD,EAAA4tB,GACAA,GAAA65B,EACA,MAAAwC,EAAAjqD,EAAA4tB,KACAo8B,EAAArJ,OAAA,EAAAsJ,GACAD,EAAArI,SAAAsI,GAAA,EAAA,EACAD,EAAAE,cAAA,EAAAD,GACAD,EAAAvF,oBAAAwF,GAAA,EAAA,EACAD,EAAA/F,kBAAAgG,GAAA,EAAA,EACAD,EAAAG,WAAA,EAAAjrD,EAAAwzB,YAAA1yB,EAAA4tB,GACAA,GAAA,EACAo8B,EAAAI,YAAA,EAAAlrD,EAAAwzB,YAAA1yB,EAAA4tB,GACAA,GAAA,EACAo8B,EAAAK,YAAA,YAAA,EAAAnrD,EAAAwzB,YAAA1yB,EAAA4tB,GACAA,GAAA,EACAo8B,EAAAM,YAAA,YAAA,EAAAprD,EAAAwzB,YAAA1yB,EAAA4tB,GACAA,GAAA,EACAo8B,EAAAO,aAAA,EAAArrD,EAAAuzB,YAAAzyB,EAAA4tB,GACAA,GAAA,EACAo8B,EAAAQ,aAAA,EAAAtrD,EAAAuzB,YAAAzyB,EAAA4tB,GACAA,GAAA,EACAhC,GAAAo+B,EAAAlC,EAAAV,WAAApnD,EAAA4tB,EAAA3B,GACA,MAEA,KAAA,GACA,KAAA,GACA,IAAAw+B,KACAA,EAAA/hD,KAAA6+C,EAAAvnD,EAAA4tB,GACAA,GAAA65B,EACA,IAAAD,EAAAxnD,EAAA4tB,KAKA,GAJA68B,EAAA9J,OAAA,EAAA6G,GACAiD,EAAA9I,SAAA6F,GAAA,EAAA,EACAiD,EAAA1J,cAAA,EAAAyG,IAEAiD,EAAA9J,IAAA,CAIA,IAHAyH,EAAA,IAAAqC,EAAA9I,SAAA,EAAA,EACAX,KAEAxjD,EAAA,EAAAA,EAAA4qD,EAAA5qD,IACAwjD,EAAAhgD,MACAgG,GAAA,EAAA9H,EAAAqzB,UAAAvyB,EAAA4tB,GACAwyB,GAAA,EAAAlhD,EAAAqzB,UAAAvyB,EAAA4tB,EAAA,KAEAA,GAAA,EAGA68B,EAAAzJ,GAAAA,EAGAp1B,GAAA6+B,EAAAzqD,EAAA4tB,EAAA3B,GACA,MAEA,KAAA,GACA,IAAAy+B,GACA9J,OAAA,EAAA1hD,EAAAwzB,YAAA1yB,EAAA4tB,GACAizB,QAAA,EAAA3hD,EAAAwzB,YAAA1yB,EAAA4tB,EAAA,GACA+8B,aAAA,EAAAzrD,EAAAwzB,YAAA1yB,EAAA4tB,EAAA,GACAg9B,aAAA,EAAA1rD,EAAAwzB,YAAA1yB,EAAA4tB,EAAA,KAGA,aAAA88B,EAAA7J,eACA6J,EAAA7J,OAGA,IAAAgK,EAAA7qD,EAAA4tB,EAAA,KACA,EAAA1uB,EAAAuzB,YAAAzyB,EAAA4tB,EAAA,IACA88B,EAAAI,YAAA,EAAAD,GACAH,EAAA1G,cAAA,EAAA6G,GACAH,EAAAzG,kBAAA4G,GAAA,EAAA,EACAH,EAAAjG,oBAAAoG,GAAA,EAAA,EACAH,EAAAK,kBAAA,GAAAF,GACAH,EAAAM,+BAAA,GAAAH,GACAj/B,GAAA8+B,GACA,MAEA,KAAA,GAGA,KAAA,GAGA,KAAA,GACA,MAEA,KAAA,GACA9+B,GAAAk8B,EAAAl1B,OAAA5yB,EAAA4tB,EAAA3B,GACA,MAEA,KAAA,GACA,MAEA,QACA,MAAA,IAAAizB,kBAAA4I,EAAAjB,YAAAiB,EAAAvhC,QAAA,uBAGA,IAAA0kC,EAAA,KAAAnD,EAAAjB,SAEAoE,KAAA9C,GACAA,EAAA8C,GAAA39C,MAAA66C,EAAAv8B,GAIA,SAAAs/B,EAAAnD,EAAAI,GACA,IAAA,IAAA3qD,EAAA,EAAAkK,EAAAqgD,EAAAzqD,OAAAE,EAAAkK,EAAAlK,IACA0qD,EAAAH,EAAAvqD,GAAA2qD,GAoEA,SAAAgD,KAkLA,SAAAC,EAAAC,GACA,IAAAA,EAAA/tD,QACA8B,KAAAksD,OAAA,EACAlsD,KAAAmsD,SAAA,EACAnsD,KAAAosD,aAAAH,EAAA,GACAjsD,KAAAqsD,YAAA,EACArsD,KAAAssD,WAAAL,EAAA,GACAjsD,KAAAusD,cAAA,IAEAvsD,KAAAksD,OAAA,EACAlsD,KAAAmsD,SAAAF,EAAA,GACAjsD,KAAAosD,aAAAH,EAAA,GACAjsD,KAAAqsD,YAAAJ,EAAA,GACAjsD,KAAAssD,WAAAL,EAAA,GACAjsD,KAAAusD,aAAA,UAAAN,EAAA,IAIA,SAAAO,EAAAC,GACAzsD,KAAA0sD,YAEAD,GACAzsD,KAAA2sD,QAAA,EACA3sD,KAAAqsD,YAAAI,EAAAJ,YACArsD,KAAAmsD,SAAAM,EAAAN,SACAnsD,KAAAusD,aAAAE,EAAAF,aACAvsD,KAAAksD,MAAAO,EAAAP,OAEAlsD,KAAA2sD,QAAA,EA0CA,SAAAC,EAAAC,EAAAC,GACAA,GACA9sD,KAAA+sD,kBAAAF,GAGA7sD,KAAAgtD,SAAA,IAAAR,EAAA,MAEA,IAAA,IAAApuD,EAAA,EAAAkK,EAAAukD,EAAA3uD,OAAAE,EAAAkK,EAAAlK,IAAA,CACA,MAAAquD,EAAAI,EAAAzuD,GAEAquD,EAAAL,aAAA,GACApsD,KAAAgtD,SAAAC,UAAAR,EAAAA,EAAAL,aAAA,IAjQAL,EAAA3nC,WACA8oC,kBAAA,SAAA5jD,GACAtJ,KAAAmtD,gBAAA7jD,EACA,IAAA8jD,EAAA9jD,EAAAk4C,MAAA,GAAA,EACAryC,EAAA,IAAA6f,kBAAAo+B,EAAA9jD,EAAAm4C,QAEA,GAAAn4C,EAAAu7C,kBACA,IAAA,IAAAzmD,EAAA,EAAAkK,EAAA6G,EAAAjR,OAAAE,EAAAkK,EAAAlK,IACA+Q,EAAA/Q,GAAA,IAIA4B,KAAAmP,OAAAA,GAEAk+C,WAAA,SAAAC,EAAAlL,GACA,IAQAhkD,EAAAm7B,EAAAg0B,EAAAn6B,EARAk4B,EAAAtrD,KAAAmtD,gBACA3L,EAAA8L,EAAA9L,MACAC,EAAA6L,EAAA7L,OACA2L,EAAA9B,EAAA9J,MAAA,GAAA,EACA6D,EAAAiG,EAAAM,4BAAA0B,EAAAjI,oBAAAiG,EAAAjG,oBACAl2C,EAAAnP,KAAAmP,OACAq+C,EAAA,MAAA,EAAAF,EAAA1lD,GACA6lD,EAAAH,EAAAtM,EAAAoM,GAAAE,EAAA1lD,GAAA,GAGA,OAAAy9C,GACA,KAAA,EACA,IAAAjnD,EAAA,EAAAA,EAAAqjD,EAAArjD,IAAA,CAIA,IAHAmvD,EAAAC,EACAp6B,EAAAq6B,EAEAl0B,EAAA,EAAAA,EAAAioB,EAAAjoB,IACA6oB,EAAAhkD,GAAAm7B,KACApqB,EAAAikB,IAAAm6B,IAGAA,IAAA,KAGAA,EAAA,IACAn6B,KAIAq6B,GAAAL,EAGA,MAEA,KAAA,EACA,IAAAhvD,EAAA,EAAAA,EAAAqjD,EAAArjD,IAAA,CAIA,IAHAmvD,EAAAC,EACAp6B,EAAAq6B,EAEAl0B,EAAA,EAAAA,EAAAioB,EAAAjoB,IACA6oB,EAAAhkD,GAAAm7B,KACApqB,EAAAikB,IAAAm6B,IAGAA,IAAA,KAGAA,EAAA,IACAn6B,KAIAq6B,GAAAL,EAGA,MAEA,QACA,MAAA,IAAAtN,cAAAuF,wBAGAqI,yBAAA,SAAAC,EAAA/sD,EAAAiJ,EAAAgjB,GACA,IAAAygC,EAAAK,EAAArkD,KACAu4C,EAAA,IAAA7B,EAAAp/C,EAAAiJ,EAAAgjB,GACAu1B,EAAAd,EAAAqM,EAAApM,IAAA+L,EAAA9L,MAAA8L,EAAA7L,OAAAkM,EAAApL,SAAAoL,EAAAhM,WAAA,KAAAgM,EAAA/L,GAAAC,GACA7hD,KAAAqtD,WAAAC,EAAAlL,IAEAwL,iCAAA,WACA5tD,KAAA0tD,yBAAAx/C,MAAAlO,KAAA6tD,YAEAC,mBAAA,SAAA7E,EAAA8E,EAAAC,EAAAptD,EAAAiJ,EAAAgjB,GACA,IAAAy4B,EAAAI,EAEAuD,EAAAtE,UACAW,EA2gBA,SAAA2D,EAAAjB,EAAAiG,GACA,IACAC,EACAC,EAgCAC,EAAAC,EAlCAC,EAAA,EAIA,OAAArF,EAAAE,mBACA,KAAA,EACA,KAAA,EACA+E,EAAAK,EAAAtF,EAAAE,kBAAA,GACA,MAEA,KAAA,EACA+E,EAAAM,EAAAF,EAAAtG,EAAAiG,GACAK,IACA,MAEA,QACA,MAAA,IAAAxO,EAAA,+BAGA,OAAAmJ,EAAAG,mBACA,KAAA,EACA,KAAA,EACA+E,EAAAI,EAAAtF,EAAAG,kBAAA,GACA,MAEA,KAAA,EACA+E,EAAAK,EAAAF,EAAAtG,EAAAiG,GACAK,IACA,MAEA,QACA,MAAA,IAAAxO,EAAA,+BAKAmJ,EAAAI,oBACA+E,EAAAI,EAAAF,EAAAtG,EAAAiG,GACAK,KAEAF,EAAAG,EAAA,GAIAF,EADApF,EAAAK,6BACAkF,EAAAF,EAAAtG,EAAAiG,GAEAM,EAAA,GAGA,OACAL,iBAAAA,EACAC,gBAAAA,EACAC,gBAAAA,EACAC,wBAAAA,GAjkBAI,CAAAxF,EAAA+E,EAAAhuD,KAAAiuD,cACAvI,EAAA,IAAA5D,EAAAlhD,EAAAiJ,EAAAgjB,IAGA,IAAA6hC,EAAA1uD,KAAA0uD,QAEAA,IACA1uD,KAAA0uD,QAAAA,MAKA,IAFA,IAAA1J,KAEA5mD,EAAA,EAAAkK,EAAA0lD,EAAA9vD,OAAAE,EAAAkK,EAAAlK,IAAA,CACA,MAAAuwD,EAAAD,EAAAV,EAAA5vD,IAEAuwD,IACA3J,EAAAA,EAAAh9C,OAAA2mD,IAIA,IAAA9M,EAAA,IAAA7B,EAAAp/C,EAAAiJ,EAAAgjB,GACA6hC,EAAAX,GAl/BA,SAAApJ,EAAAC,EAAA8J,EAAA/E,EAAAD,EAAApE,EAAA5D,EAAAE,EAAA2D,EAAAC,EAAA3D,EAAA6D,GACA,GAAAf,GAAAC,EACA,MAAA,IAAA9E,EAAA,mDAGA,IAAA8O,KACAC,EAAA,EACA5J,GAAA,EAAAnlD,EAAAgzB,MAAA47B,EAAAxwD,OAAAyrD,GACAvJ,EAAAyB,EAAAzB,QACAF,EAAA2B,EAAA3B,aACA,IAAA4O,EAAAC,EAEApK,IACAmK,EAAAP,EAAA,GACAQ,KACA9J,EAAA3/C,KAAAC,IAAA0/C,EAAA,IAGA,KAAA2J,EAAA1wD,OAAAyrD,GAAA,CACA,IAAAqF,EAAArK,EAAAW,EAAA4I,iBAAArI,OAAAH,GAAAzF,EAAAC,EAAA,OAAAE,GACAyO,GAAAG,EACA,IAAAC,EAAA,EACAC,EAAA,EACA,MAAAC,EAAAxK,EAAAoK,EAAA7wD,OAAA,EAEA,OAAA,CACA,IAQAkkD,EARAgN,EAAAzK,EAAAW,EAAA6I,gBAAAtI,OAAAH,GAAAzF,EAAAC,EAAA,OAAAE,GAEA,GAAA,OAAAgP,EACA,MAOA,GAHAF,GADAD,GAAAG,EAIAxK,EAAA,CACA,IAAAyK,EAAApP,EAAAC,EAAA,OAAAE,GAEA,GAAAiP,EAAA,EACAjN,EAAAsC,EAAAC,EAAAC,EAAAqK,EAAAJ,EAAA,EAAAQ,EAAA,EAAAX,EAAA1mD,OAAA4mD,GAAA3J,EAAA,EAAA,EAAA,EAAA,EAAAK,EAAAC,EAAAC,EAAA3D,EAAA,EAAA6D,OACA,CACA,IAAAU,EAAA1F,EAAAR,EAAAE,EAAA6E,GACA2B,EAAA3G,EAAAC,EAAA,QAAAE,GACAyG,EAAA5G,EAAAC,EAAA,QAAAE,GACAkP,EAAAlJ,EAAAsI,EAAAxwD,OAAAwwD,EAAAtI,GAAAwI,EAAAxI,EAAAsI,EAAAxwD,QACAkkD,EAAAwB,EAAAqL,EAAAJ,EAAAtJ,EAAA+J,EAAA1I,EAAAC,GAAA,EAAArB,EAAA3D,GAGA+M,EAAAhtD,KAAAwgD,QACAuC,EACAoK,EAAAntD,KAAAqtD,IAEA7M,EAAAd,GAAA,EAAA2N,EAAAJ,EAAAnN,GAAA,EAAA,KAAAE,EAAAC,GACA+M,EAAAhtD,KAAAwgD,IAIA,GAAAuC,IAAAC,EAAA,CACA,MAAA2K,EAAAjK,EAAA8I,gBAAAvI,OAAAH,GAEA,IAAA8J,EAEA,GAHA9J,EAAA9H,YAGA,IAAA2R,EACAC,EAAAC,EAAA/J,EAAAwJ,EAAAL,OACA,CACA,MAAAa,EAAAhK,EAAA74B,IACA8iC,EAAAjK,EAAAl3B,SAAA+gC,EACA7J,EAAA74B,IAAA8iC,EACAH,EAAAzN,EAAA2D,EAAAwJ,EAAAL,GAAA,GACAnJ,EAAA74B,IAAA6iC,EACAhK,EAAAl3B,SAAAmhC,EAGA,MAAAC,EAAAb,EAAA7wD,OAEA,GAAAixD,IAAAS,EAAA,EACAhB,EAAAhtD,KAAA4tD,OACA,CACA,IAAApxD,EACA4iD,EAEA6O,EACAC,EACAvJ,EAHAwJ,EAAA,EAKA,IAAA3xD,EAAA+wD,EAAA/wD,EAAAwxD,EAAAxxD,IAAA,CAKA,IAJA0xD,EAAAf,EAAA3wD,GACAyxD,EAAAE,EAAAD,EACAvJ,KAEAvF,EAAA,EAAAA,EAAA6N,EAAA7N,IACAuF,EAAA3kD,KAAA4tD,EAAAxO,GAAAzyC,SAAAwhD,EAAAF,IAGAjB,EAAAhtD,KAAA2kD,GACAwJ,EAAAF,KAMA,IAAAG,KACAzvB,KACA0vB,GAAA,EACAC,EAAAxB,EAAAxwD,OAAAyrD,EAEA,KAAAppB,EAAAriC,OAAAgyD,GAAA,CAGA,IAFA,IAAAC,EAAAxL,EAAAmK,EAAAjJ,OAAAH,GAAAzF,EAAAC,EAAA,OAAAE,GAEA+P,KACA5vB,EAAA3+B,KAAAquD,GAGAA,GAAAA,EAGA,IAAA,IAAA7xD,EAAA,EAAAkK,EAAAomD,EAAAxwD,OAAAE,EAAAkK,EAAAlK,IACAmiC,EAAAniC,IACA4xD,EAAApuD,KAAA8sD,EAAAtwD,IAIA,IAAA,IAAAm7B,EAAA,EAAAA,EAAAowB,EAAAvrD,IAAAm7B,IACAgH,EAAAniC,IACA4xD,EAAApuD,KAAAgtD,EAAAr1B,IAIA,OAAAy2B,EAi3BAI,CAAAnH,EAAAtE,QAAAsE,EAAArE,WAAAI,EAAAiE,EAAAU,mBAAAV,EAAAS,wBAAApE,EAAA2D,EAAA1G,SAAA0G,EAAArH,GAAAqH,EAAAQ,mBAAAR,EAAAzD,aAAA3D,EAAA6D,IAEA2K,sBAAA,SAAA1C,EAAAK,EAAAptD,EAAAiJ,EAAAgjB,GACA,IAAAygC,EAAAK,EAAArkD,KACA,IAAAg8C,EAAAI,EAIA,IAHA,IAAAgJ,EAAA1uD,KAAA0uD,QACA1J,KAEA5mD,EAAA,EAAAkK,EAAA0lD,EAAA9vD,OAAAE,EAAAkK,EAAAlK,IAAA,CACA,MAAAuwD,EAAAD,EAAAV,EAAA5vD,IAEAuwD,IACA3J,EAAAA,EAAAh9C,OAAA2mD,IAIA,IAAA1J,GAAA,EAAAnlD,EAAAgzB,MAAAkyB,EAAA9mD,QAEAyvD,EAAAhJ,UACAe,EAAA,IAAA5D,EAAAlhD,EAAAiJ,EAAAgjB,GACAy4B,EA6WA,SAAAsE,EAAA5B,EAAAiG,EAAAqC,EAAAC,GACA,MAAA5Y,KAEA,IAAA,IAAAv5C,EAAA,EAAAA,GAAA,GAAAA,IAAA,CACA,MAAAq9C,EAAA8U,EAAAtU,SAAA,GACAtE,EAAA/1C,KAAA,IAAAoqD,GAAA5tD,EAAAq9C,EAAA,EAAA,KAGA,MAAA+U,EAAA,IAAA5D,EAAAjV,GAAA,GACAA,EAAAz5C,OAAA,EAEA,IAAA,IAAAE,EAAA,EAAAA,EAAAkyD,GAAA,CACA,MAAA7U,EAAA+U,EAAA3K,OAAA0K,GAEA,GAAA9U,GAAA,GAAA,CACA,IAAAgV,EAAAC,EAAAn3B,EAEA,OAAAkiB,GACA,KAAA,GACA,GAAA,IAAAr9C,EACA,MAAA,IAAA0hD,EAAA,wCAGA4Q,EAAAH,EAAAtU,SAAA,GAAA,EACAwU,EAAA9Y,EAAAv5C,EAAA,GAAAguD,aACA,MAEA,KAAA,GACAsE,EAAAH,EAAAtU,SAAA,GAAA,EACAwU,EAAA,EACA,MAEA,KAAA,GACAC,EAAAH,EAAAtU,SAAA,GAAA,GACAwU,EAAA,EACA,MAEA,QACA,MAAA,IAAA3Q,EAAA,0CAGA,IAAAvmB,EAAA,EAAAA,EAAAm3B,EAAAn3B,IACAoe,EAAA/1C,KAAA,IAAAoqD,GAAA5tD,EAAAqyD,EAAA,EAAA,KACAryD,SAGAu5C,EAAA/1C,KAAA,IAAAoqD,GAAA5tD,EAAAq9C,EAAA,EAAA,KACAr9C,IAIAmyD,EAAA3S,YACA,MAAAyI,EAAA,IAAAuG,EAAAjV,GAAA,GACA,IACAsO,EACAoB,EACAzB,EAHA0I,EAAA,EAKA,OAAA1E,EAAAG,WACA,KAAA,EACA,KAAA,EACA9D,EAAAsI,EAAA3E,EAAAG,UAAA,GACA,MAEA,KAAA,EACA9D,EAAAuI,EAAAF,EAAAtG,EAAAiG,GACAK,IACA,MAEA,QACA,MAAA,IAAAxO,EAAA,+BAGA,OAAA8J,EAAAI,WACA,KAAA,EACA,KAAA,EACA,KAAA,EACA3C,EAAAkH,EAAA3E,EAAAI,UAAA,GACA,MAEA,KAAA,EACA3C,EAAAmH,EAAAF,EAAAtG,EAAAiG,GACAK,IACA,MAEA,QACA,MAAA,IAAAxO,EAAA,+BAGA,OAAA8J,EAAAK,WACA,KAAA,EACA,KAAA,EACA,KAAA,EACArE,EAAA2I,EAAA3E,EAAAK,UAAA,IACA,MAEA,KAAA,EACArE,EAAA4I,EAAAF,EAAAtG,EAAAiG,GACAK,IACA,MAEA,QACA,MAAA,IAAAxO,EAAA,+BAGA,GAAA8J,EAAAhF,WACA,MAAA,IAAA9E,EAAA,4CAGA,OACAuG,cAAAA,EACAJ,YAAAA,EACAoB,YAAAA,EACAzB,YAAAA,GA9dA+K,CAAAhD,EAAAK,EAAAhuD,KAAAiuD,aAAAjJ,EAAA9mD,OAAAwnD,IAGA,IAAA7D,EAAA,IAAA7B,EAAAp/C,EAAAiJ,EAAAgjB,GACAu1B,EAAAsC,EAAAiJ,EAAAhJ,QAAAgJ,EAAA/I,WAAA0I,EAAA9L,MAAA8L,EAAA7L,OAAAkM,EAAA9I,kBAAA8I,EAAA7I,wBAAA6I,EAAA5I,UAAAC,EAAAC,EAAA0I,EAAAzI,WAAAyI,EAAAxI,SAAAwI,EAAAvI,gBAAAuI,EAAAtI,oBAAAC,EAAAqI,EAAAlE,mBAAAkE,EAAAnI,aAAA3D,EAAA8L,EAAAlI,aAAAC,GACA1lD,KAAAqtD,WAAAC,EAAAlL,IAEAwO,8BAAA,WACA5wD,KAAAqwD,sBAAAniD,MAAAlO,KAAA6tD,YAGA9tD,oBAAAkpD,EAAA8E,EAAAntD,EAAAiJ,EAAAgjB,GACA,IAAAgkC,EAAA7wD,KAAA6wD,SAEAA,IACA7wD,KAAA6wD,SAAAA,MAGA,MAAAhP,EAAA,IAAA7B,EAAAp/C,EAAAiJ,EAAAgjB,GACAgkC,EAAA9C,GAzwBA,SAAAxM,EAAAkJ,EAAAC,EAAAC,EAAApI,EAAAV,GACA,MAAAD,KAEAL,IACAK,EAAAhgD,MACAgG,GAAA6iD,EACAzJ,EAAA,IAGA,IAAAuB,IACAX,EAAAhgD,MACAgG,GAAA,EACAo5C,GAAA,IAEAY,EAAAhgD,MACAgG,EAAA,EACAo5C,GAAA,IAEAY,EAAAhgD,MACAgG,GAAA,EACAo5C,GAAA,MAKA,MACAwO,EAAAlO,EAAAC,GADAoJ,EAAA,GAAAF,EACAC,EAAAnI,GAAA,EAAA,KAAAX,EAAAC,GACAgP,KAEA,IAAA,IAAAzyD,EAAA,EAAAA,GAAAusD,EAAAvsD,IAAA,CACA,MAAA0yD,KACAf,EAAAtF,EAAArsD,EACAyxD,EAAAE,EAAAtF,EAEA,IAAA,IAAAzJ,EAAA,EAAAA,EAAA0J,EAAA1J,IACA8P,EAAAlvD,KAAA4tD,EAAAxO,GAAAzyC,SAAAwhD,EAAAF,IAGAgB,EAAAjvD,KAAAkvD,GAGA,OAAAD,EAguBAE,CAAA9H,EAAA1H,IAAA0H,EAAAwB,aAAAxB,EAAAyB,cAAAzB,EAAA0B,gBAAA1B,EAAA1G,SAAAV,IAGA9hD,0BAAA4tD,EAAAK,EAAAptD,EAAAiJ,EAAAgjB,GACA,MAAAgkC,EAAA7wD,KAAA6wD,SAAA7C,EAAA,IACAV,EAAAK,EAAArkD,KACAu4C,EAAA,IAAA7B,EAAAp/C,EAAAiJ,EAAAgjB,GACAu1B,EApuBA,SAAAb,EAAAsP,EAAAtO,EAAAyO,EAAAC,EAAApM,EAAAiG,EAAAzF,EAAA0F,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAvJ,GAGA,GAAAiJ,EACA,MAAA,IAAAhL,EAAA,yBAGA,GAAA,IAAAuF,EACA,MAAA,IAAAvF,EAAA,YAAAuF,EAAA,wCAGA,MAAA6L,KACA,IAAA9yD,EAAAm7B,EAAA4kB,EAEA,IAAA//C,EAAA,EAAAA,EAAA6yD,EAAA7yD,IAAA,CAGA,GAFA+/C,EAAA,IAAAt9C,WAAAmwD,GAEAnM,EACA,IAAAtrB,EAAA,EAAAA,EAAAy3B,EAAAz3B,IACA4kB,EAAA5kB,GAAAsrB,EAIAqM,EAAAtvD,KAAAu8C,GAGA,MAAAgT,EAAAN,EAAA3yD,OACAkzD,EAAAP,EAAA,GACApG,EAAA2G,EAAA,GAAAlzD,OACAwsD,EAAA0G,EAAAlzD,OACAmzD,GAAA,EAAAvxD,EAAAgzB,MAAAq+B,GACAvP,KAEAL,IACAK,EAAAhgD,MACAgG,EAAA26C,GAAA,EAAA,EAAA,EACAvB,GAAA,IAGA,IAAAuB,IACAX,EAAAhgD,MACAgG,GAAA,EACAo5C,GAAA,IAEAY,EAAAhgD,MACAgG,EAAA,EACAo5C,GAAA,IAEAY,EAAAhgD,MACAgG,GAAA,EACAo5C,GAAA,MAKA,MAAAsQ,KACA,IAAAC,EAAAnP,EAgBAoP,EAAAC,EAAAjR,EAAAkR,EAAAZ,EAAAlpD,EAAAo5C,EAAA2Q,EAAAC,EAdArQ,IACAgQ,EAAA,IAAAzP,EAAAD,EAAAjhD,KAAAihD,EAAAh4C,MAAAg4C,EAAAh1B,MAGA,IAAAzuB,EAAAizD,EAAA,EAAAjzD,GAAA,EAAAA,IAEAgkD,EADAb,EACAQ,EAAAwP,EAAAxG,EAAAC,GAAA,GAEA1J,GAAA,EAAAyJ,EAAAC,EAAAzI,GAAA,EAjEA,KAiEAX,EAAAC,GAGAyP,EAAAlzD,GAAAgkD,EAKA,IAAAoP,EAAA,EAAAA,EAAAxG,EAAAwG,IACA,IAAAC,EAAA,EAAAA,EAAA1G,EAAA0G,IAAA,CAIA,IAHAjR,EAAA,EACAkR,EAAA,EAEAn4B,EAAA83B,EAAA,EAAA93B,GAAA,EAAAA,IACAinB,EAAA8Q,EAAA/3B,GAAAi4B,GAAAC,GAAAjR,EACAkR,GAAAlR,GAAAjnB,EAOA,GAJAu3B,EAAAD,EAAAa,GAEA1Q,EAAAkK,EAAAsG,EAAArG,EAAAsG,EAAArG,GAAA,GADAxjD,EAAAqjD,EAAAuG,EAAApG,EAAAqG,EAAAtG,GAAA,IAGA,GAAAvjD,EAAA6iD,GAAAuG,GAAAhQ,GAAA,GAAAA,EAAA0J,GAAAuG,EACA,IAAA7yD,EAAA,EAAAA,EAAAssD,EAAAtsD,IAIA,IAHAwzD,EAAAV,EAAAlQ,EAAA5iD,GACAuzD,EAAAb,EAAA1yD,GAEAm7B,EAAA,EAAAA,EAAAkxB,EAAAlxB,IACAq4B,EAAAhqD,EAAA2xB,IAAAo4B,EAAAp4B,OAGA,CACA,IAAAs4B,EAAAC,EAEA,IAAA1zD,EAAA,EAAAA,EAAAssD,EAAAtsD,IAGA,MAFA0zD,EAAA9Q,EAAA5iD,GAEA,GAAA0zD,GAAAb,GAOA,IAHAW,EAAAV,EAAAY,GACAH,EAAAb,EAAA1yD,GAEAm7B,EAAA,EAAAA,EAAAkxB,EAAAlxB,KACAs4B,EAAAjqD,EAAA2xB,IAEA,GAAAs4B,EAAAb,IACAY,EAAAC,IAAAF,EAAAp4B,KAQA,OAAA23B,EA0mBAa,CAAApE,EAAApM,IAAAsP,EAAAlD,EAAApL,SAAA+K,EAAA9L,MAAA8L,EAAA7L,OAAAkM,EAAA9I,kBAAA8I,EAAA7C,WAAA6C,EAAAtI,oBAAAsI,EAAA5C,UAAA4C,EAAA3C,WAAA2C,EAAA1C,YAAA0C,EAAAzC,YAAAyC,EAAAxC,YAAAwC,EAAAvC,YAAAvJ,GACA7hD,KAAAqtD,WAAAC,EAAAlL,IAGAriD,oCACAC,KAAAgyD,0BAAA9jD,MAAAlO,KAAA6tD,YAGA9tD,SAAAguD,EAAAntD,EAAAiJ,EAAAgjB,GACA,IAAAohC,EAAAjuD,KAAAiuD,aAEAA,IACAjuD,KAAAiuD,aAAAA,MAGAA,EAAAF,GA2IA,SAAAntD,EAAAiJ,EAAAgjB,GACA,MAAA0T,EAAA3/B,EAAAiJ,GACAooD,EAAA,YAAA,EAAAnyD,EAAAwzB,YAAA1yB,EAAAiJ,EAAA,GACAqoD,EAAA,YAAA,EAAApyD,EAAAwzB,YAAA1yB,EAAAiJ,EAAA,GACA0mD,EAAA,IAAAzO,EAAAlhD,EAAAiJ,EAAA,EAAAgjB,GACAslC,EAAA,GAAA5xB,GAAA,EAAA,GACA6xB,EAAA,GAAA7xB,GAAA,EAAA,GACAssB,KACA,IAAAT,EACAC,EACAgG,EAAAJ,EAEA,GACA7F,EAAAmE,EAAAtU,SAAAkW,GACA9F,EAAAkE,EAAAtU,SAAAmW,GACAvF,EAAAjrD,KAAA,IAAAoqD,GAAAqG,EAAAjG,EAAAC,EAAA,KACAgG,GAAA,GAAAhG,QACAgG,EAAAH,GAEA9F,EAAAmE,EAAAtU,SAAAkW,GACAtF,EAAAjrD,KAAA,IAAAoqD,GAAAiG,EAAA,EAAA7F,EAAA,GAAA,EAAA,WACAA,EAAAmE,EAAAtU,SAAAkW,GACAtF,EAAAjrD,KAAA,IAAAoqD,GAAAkG,EAAA9F,EAAA,GAAA,KAEA,EAAA7rB,IACA6rB,EAAAmE,EAAAtU,SAAAkW,GACAtF,EAAAjrD,KAAA,IAAAoqD,GAAAI,EAAA,MAGA,OAAA,IAAAQ,EAAAC,GAAA,GAxKAyF,CAAA1xD,EAAAiJ,EAAAgjB,KAqCA2/B,EAAApoC,WACArkB,UAAA0sD,EAAAxsB,GACA,MAAAugB,EAAAiM,EAAAH,YAAArsB,EAAA,EAEA,GAAAA,GAAA,EACAjgC,KAAA0sD,SAAAlM,GAAA,IAAAgM,EAAAC,OACA,CACA,IAAAjlB,EAAAxnC,KAAA0sD,SAAAlM,GAEAhZ,IACAxnC,KAAA0sD,SAAAlM,GAAAhZ,EAAA,IAAAglB,EAAA,OAGAhlB,EAAAylB,UAAAR,EAAAxsB,EAAA,KAIAlgC,WAAAwwD,GACA,GAAAvwD,KAAA2sD,OAAA,CACA,GAAA3sD,KAAAksD,MACA,OAAA,KAGA,MAAAqG,EAAAhC,EAAAtU,SAAAj8C,KAAAqsD,aACA,OAAArsD,KAAAmsD,UAAAnsD,KAAAusD,cAAAgG,EAAAA,GAGA,MAAA/qB,EAAAxnC,KAAA0sD,SAAA6D,EAAA9P,WAEA,IAAAjZ,EACA,MAAA,IAAAsY,EAAA,wBAGA,OAAAtY,EAAAgrB,WAAAjC,KAqBA3D,EAAAxoC,WACArkB,OAAAwwD,GACA,OAAAvwD,KAAAgtD,SAAAwF,WAAAjC,IAGAxwD,kBAAA8sD,GACA,MAAA4F,EAAA5F,EAAA3uD,OACA,IAAAw0D,EAAA,EAEA,IAAA,IAAAt0D,EAAA,EAAAA,EAAAq0D,EAAAr0D,IACAs0D,EAAAptD,KAAAC,IAAAmtD,EAAA7F,EAAAzuD,GAAAguD,cAGA,MAAAuG,EAAA,IAAAluC,YAAAiuC,EAAA,GAEA,IAAA,IAAAt0D,EAAA,EAAAA,EAAAq0D,EAAAr0D,IACAu0D,EAAA9F,EAAAzuD,GAAAguD,gBAGA,IAEAwG,EACAC,EACApG,EAJAqG,EAAA,EACAC,EAAA,EAMA,IAFAJ,EAAA,GAAA,EAEAG,GAAAJ,GAAA,CAKA,IAJAK,EAAAA,EAAAJ,EAAAG,EAAA,IAAA,EACAF,EAAAG,EACAF,EAAA,EAEAA,EAAAJ,IACAhG,EAAAI,EAAAgG,IAEAzG,eAAA0G,IACArG,EAAAH,WAAAsG,EACAA,KAGAC,IAGAC,OAsCA,MAAAE,KAEA,SAAAzE,EAAA/6B,GACA,IAMAq5B,EANAnV,EAAAsb,EAAAx/B,GAEA,GAAAkkB,EACA,OAAAA,EAKA,OAAAlkB,GACA,KAAA,EACAq5B,IAAA,EAAA,EAAA,EAAA,IAAA,GAAA,EAAA,EAAA,IAAA,IAAA,EAAA,GAAA,IAAA,MAAA,EAAA,GAAA,IACA,MAEA,KAAA,EACAA,IAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,KAAA,GAAA,EAAA,EAAA,KAAA,GAAA,EAAA,GAAA,KAAA,EAAA,KACA,MAEA,KAAA,EACAA,KAAA,IAAA,EAAA,EAAA,MAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,KAAA,GAAA,EAAA,EAAA,MAAA,IAAA,EAAA,GAAA,IAAA,UAAA,GAAA,EAAA,GAAA,MAAA,EAAA,KACA,MAEA,KAAA,EACAA,IAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,KAAA,GAAA,EAAA,EAAA,KAAA,GAAA,EAAA,GAAA,KACA,MAEA,KAAA,EACAA,KAAA,IAAA,EAAA,EAAA,MAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,KAAA,GAAA,EAAA,EAAA,MAAA,IAAA,EAAA,GAAA,IAAA,UAAA,GAAA,EAAA,GAAA,KACA,MAEA,KAAA,EACAA,KAAA,KAAA,EAAA,GAAA,MAAA,KAAA,EAAA,EAAA,KAAA,IAAA,EAAA,EAAA,KAAA,IAAA,EAAA,EAAA,MAAA,IAAA,EAAA,EAAA,MAAA,GAAA,EAAA,EAAA,MAAA,GAAA,EAAA,EAAA,KAAA,EAAA,EAAA,EAAA,IAAA,IAAA,EAAA,EAAA,IAAA,IAAA,EAAA,EAAA,IAAA,IAAA,EAAA,EAAA,KAAA,KAAA,EAAA,GAAA,MAAA,KAAA,EAAA,GAAA,GAAA,UAAA,KAAA,EAAA,GAAA,KACA,MAEA,KAAA,EACAA,KAAA,KAAA,EAAA,EAAA,KAAA,IAAA,EAAA,EAAA,KAAA,IAAA,EAAA,EAAA,KAAA,IAAA,EAAA,EAAA,MAAA,GAAA,EAAA,EAAA,MAAA,GAAA,EAAA,EAAA,KAAA,EAAA,EAAA,EAAA,KAAA,GAAA,EAAA,EAAA,KAAA,GAAA,EAAA,EAAA,KAAA,IAAA,EAAA,EAAA,KAAA,IAAA,EAAA,EAAA,IAAA,IAAA,EAAA,EAAA,IAAA,KAAA,EAAA,GAAA,KAAA,KAAA,EAAA,GAAA,GAAA,UAAA,KAAA,EAAA,GAAA,KACA,MAEA,KAAA,EACAA,KAAA,GAAA,EAAA,EAAA,OAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,EAAA,KAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,KAAA,EAAA,EAAA,EAAA,KAAA,EAAA,EAAA,EAAA,IAAA,GAAA,EAAA,EAAA,KAAA,GAAA,EAAA,EAAA,KAAA,GAAA,EAAA,EAAA,KAAA,GAAA,EAAA,EAAA,KAAA,IAAA,EAAA,EAAA,KAAA,IAAA,EAAA,EAAA,KAAA,IAAA,EAAA,EAAA,MAAA,IAAA,EAAA,GAAA,MAAA,GAAA,EAAA,GAAA,IAAA,UAAA,KAAA,EAAA,GAAA,MAAA,EAAA,IACA,MAEA,KAAA,EACAA,KAAA,GAAA,EAAA,EAAA,OAAA,GAAA,EAAA,EAAA,OAAA,GAAA,EAAA,EAAA,OAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,EAAA,MAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,KAAA,EAAA,EAAA,EAAA,KAAA,EAAA,EAAA,EAAA,IAAA,GAAA,EAAA,EAAA,KAAA,GAAA,EAAA,EAAA,KAAA,GAAA,EAAA,EAAA,KAAA,IAAA,EAAA,EAAA,KAAA,IAAA,EAAA,EAAA,KAAA,IAAA,EAAA,EAAA,KAAA,IAAA,EAAA,EAAA,MAAA,KAAA,EAAA,GAAA,MAAA,GAAA,EAAA,GAAA,IAAA,UAAA,KAAA,EAAA,GAAA,MAAA,EAAA,IACA,MAEA,KAAA,GACAA,KAAA,GAAA,EAAA,EAAA,OAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,EAAA,MAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,KAAA,EAAA,EAAA,EAAA,KAAA,EAAA,EAAA,EAAA,MAAA,EAAA,EAAA,EAAA,MAAA,EAAA,EAAA,EAAA,IAAA,GAAA,EAAA,EAAA,KAAA,IAAA,EAAA,EAAA,KAAA,IAAA,EAAA,EAAA,KAAA,IAAA,EAAA,EAAA,KAAA,IAAA,EAAA,EAAA,KAAA,IAAA,EAAA,EAAA,KAAA,KAAA,EAAA,GAAA,KAAA,KAAA,EAAA,GAAA,OAAA,GAAA,EAAA,GAAA,IAAA,UAAA,KAAA,EAAA,GAAA,MAAA,EAAA,IACA,MAEA,KAAA,GACAA,IAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,KAAA,EAAA,EAAA,EAAA,KAAA,EAAA,EAAA,EAAA,KAAA,EAAA,EAAA,EAAA,KAAA,GAAA,EAAA,EAAA,KAAA,GAAA,EAAA,EAAA,MAAA,GAAA,EAAA,EAAA,MAAA,GAAA,EAAA,EAAA,MAAA,GAAA,EAAA,EAAA,MAAA,GAAA,EAAA,EAAA,MAAA,IAAA,EAAA,GAAA,MACA,MAEA,KAAA,GACAA,IAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,KAAA,EAAA,EAAA,EAAA,KAAA,EAAA,EAAA,EAAA,KAAA,GAAA,EAAA,EAAA,MAAA,GAAA,EAAA,EAAA,MAAA,GAAA,EAAA,EAAA,MAAA,GAAA,EAAA,EAAA,MAAA,GAAA,EAAA,EAAA,MAAA,GAAA,EAAA,EAAA,MAAA,GAAA,EAAA,GAAA,MACA,MAEA,KAAA,GACAA,IAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,KAAA,EAAA,EAAA,EAAA,KAAA,EAAA,EAAA,EAAA,KAAA,EAAA,EAAA,EAAA,IAAA,GAAA,EAAA,EAAA,KAAA,GAAA,EAAA,EAAA,KAAA,GAAA,EAAA,EAAA,KAAA,GAAA,EAAA,EAAA,KAAA,GAAA,EAAA,EAAA,KAAA,GAAA,EAAA,EAAA,MAAA,IAAA,EAAA,GAAA,MACA,MAEA,KAAA,GACAA,KAAA,EAAA,EAAA,EAAA,KAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,IACA,MAEA,KAAA,GACAA,KAAA,GAAA,EAAA,EAAA,OAAA,EAAA,EAAA,EAAA,MAAA,EAAA,EAAA,EAAA,MAAA,EAAA,EAAA,EAAA,MAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,KAAA,EAAA,EAAA,EAAA,KAAA,EAAA,EAAA,EAAA,KAAA,EAAA,EAAA,EAAA,OAAA,GAAA,EAAA,GAAA,IAAA,UAAA,GAAA,EAAA,GAAA,MACA,MAEA,QACA,MAAA,IAAA/M,sBAAAtsB,oBAGA,IAAA,IAAAp1B,EAAA,EAAAkK,EAAAukD,EAAA3uD,OAAAE,EAAAkK,EAAAlK,IACAyuD,EAAAzuD,GAAA,IAAA4tD,EAAAa,EAAAzuD,IAKA,OAFAs5C,EAAA,IAAAkV,EAAAC,GAAA,GACAmG,EAAAx/B,GAAAkkB,EACAA,EAGA,SAAAoK,EAAAlhD,EAAAiJ,EAAAgjB,GACA7sB,KAAAY,KAAAA,EACAZ,KAAA6J,MAAAA,EACA7J,KAAA6sB,IAAAA,EACA7sB,KAAAwuB,SAAA3kB,EACA7J,KAAAigC,OAAA,EACAjgC,KAAAizD,YAAA,EA4CA,SAAAzE,EAAAx9C,EAAAg3C,EAAAiG,GACA,IAAApqB,EAAA,EAEA,IAAA,IAAAzlC,EAAA,EAAAkK,EAAA0/C,EAAA9pD,OAAAE,EAAAkK,EAAAlK,IAAA,CACA,MAAAs5C,EAAAuW,EAAAjG,EAAA5pD,IAEA,GAAAs5C,EAAA,CACA,GAAA1mC,IAAA6yB,EACA,OAAA6T,EAGA7T,KAIA,MAAA,IAAAic,EAAA,mCAkLA,SAAA2P,EAAAc,EAAA/O,EAAAC,GACA,MAAAW,KAEA,IAAA,IAAApB,EAAA,EAAAA,EAAAS,EAAAT,IAAA,CACA,MAAA7C,EAAA,IAAAt9C,WAAA2gD,GACAY,EAAAxgD,KAAAu8C,GAEA,IAAA,IAAAv2C,EAAA,EAAAA,EAAA45C,EAAA55C,IACAu2C,EAAAv2C,GAAA2oD,EAAA9P,UAGA8P,EAAA3S,YAGA,OAAAwE,EAGA,SAAAL,EAAA7G,EAAAsG,EAAAC,EAAAyR,GACA,MAAAtrB,GACA7sB,GAAA,EACAgiC,QAAAyE,EACAxE,KAAAyE,EACAvE,UAAA,EACAD,WAAAiW,GAEA9S,EAAA,IAAA1D,EAAAE,gBAAA1B,EAAAtT,GACAwa,KACA,IAAA6Q,EACA5c,GAAA,EAEA,IAAA,IAAA2K,EAAA,EAAAA,EAAAS,EAAAT,IAAA,CACA,MAAA7C,EAAA,IAAAt9C,WAAA2gD,GACAY,EAAAxgD,KAAAu8C,GACA,IAAAle,GAAA,EAEA,IAAA,IAAAr4B,EAAA,EAAAA,EAAA45C,EAAA55C,IACAq4B,EAAA,KAGA,KAFAgzB,EAAA7S,EAAAjD,kBAGA8V,EAAA,EACA5c,GAAA,GAGApW,EAAA,GAGAke,EAAAv2C,GAAAqrD,GAAAhzB,EAAA,EACAA,IAIA,GAAAizB,IAAA7c,EAAA,CACA,MAAA8c,EAAA,EAEA,IAAA,IAAA/0D,EAAA,EAAAA,EAAA+0D,IACA,IAAA/S,EAAAjD,eADA/+C,MAOA,OAAAgkD,EAGA,SAAA3C,KAmBA,OA9TAqC,EAAA19B,WACArkB,UACA,GAAAC,KAAAigC,MAAA,EAAA,CACA,GAAAjgC,KAAAwuB,UAAAxuB,KAAA6sB,IACA,MAAA,IAAAizB,EAAA,iCAGA9/C,KAAAizD,YAAAjzD,KAAAY,KAAAZ,KAAAwuB,YACAxuB,KAAAigC,MAAA,EAGA,MAAAugB,EAAAxgD,KAAAizD,aAAAjzD,KAAAigC,MAAA,EAEA,OADAjgC,KAAAigC,QACAugB,GAGAzgD,SAAAqzD,GACA,IACAh1D,EADAwoB,EAAA,EAGA,IAAAxoB,EAAAg1D,EAAA,EAAAh1D,GAAA,EAAAA,IACAwoB,GAAA5mB,KAAAygD,WAAAriD,EAGA,OAAAwoB,GAGA7mB,YACAC,KAAAigC,OAAA,GAGAlgC,OACA,OAAAC,KAAAwuB,UAAAxuB,KAAA6sB,KACA,EAGA7sB,KAAAY,KAAAZ,KAAAwuB,cAyQAixB,EAAAr7B,WACAw7B,YAAA1xB,IApyBA,SAAAA,GAGA,IAFA,IAAA66B,EAAA,IAAAgD,EAEA3tD,EAAA,EAAAkK,EAAA4lB,EAAAhwB,OAAAE,EAAAkK,EAAAlK,IAAA,CACA,IAAAkQ,EAAA4f,EAAA9vB,GACAuqD,EAAAF,KAAAn6C,EAAA1N,KAAA0N,EAAAzE,MAAAyE,EAAAue,KACAi/B,EAAAnD,EAAAI,GAGA,OAAAA,EAAA55C,QA4xBAkkD,CAAAnlC,GAGAnuB,MAAAa,GACA,MAAA0yD,QACAA,EAAA9R,MACAA,EAAAC,OACAA,GAhyBA,SAAA7gD,GACA,MAAAisB,EAAAjsB,EAAA1C,OACA,IAAAswB,EAAA,EAEA,GAAA,MAAA5tB,EAAA4tB,IAAA,KAAA5tB,EAAA4tB,EAAA,IAAA,KAAA5tB,EAAA4tB,EAAA,IAAA,KAAA5tB,EAAA4tB,EAAA,IAAA,KAAA5tB,EAAA4tB,EAAA,IAAA,KAAA5tB,EAAA4tB,EAAA,IAAA,KAAA5tB,EAAA4tB,EAAA,IAAA,KAAA5tB,EAAA4tB,EAAA,GACA,MAAA,IAAAsxB,EAAA,gCAGA,MAAA4I,EAAA3pD,OAAAyJ,OAAA,MACAgmB,GAAA,EACA,MAAA+R,EAAA3/B,EAAA4tB,KACAk6B,EAAAG,eAAA,EAAAtoB,GAEA,EAAAA,IACAmoB,EAAA6K,eAAA,EAAAzzD,EAAAwzB,YAAA1yB,EAAA4tB,GACAA,GAAA,GAGA,MAAAm6B,EAAAF,EAAAC,EAAA9nD,EAAA4tB,EAAA3B,GACAk8B,EAAA,IAAAgD,EACAD,EAAAnD,EAAAI,GACA,MAAAvH,MACAA,EAAAC,OACAA,GACAsH,EAAAoE,gBACAqG,EAAAzK,EAAA55C,OACAmkD,EAAA,IAAAtkC,kBAAAwyB,EAAAC,GACA,IAAAtF,EAAA,EACAjD,EAAA,EAEA,IAAA,IAAA96C,EAAA,EAAAA,EAAAqjD,EAAArjD,IAAA,CACA,IACA+Q,EADAo+C,EAAA,EAGA,IAAA,IAAAh0B,EAAA,EAAAA,EAAAioB,EAAAjoB,IACAg0B,IACAA,EAAA,IACAp+C,EAAAqkD,EAAAta,MAGAoa,EAAAnX,KAAAhtC,EAAAo+C,EAAA,EAAA,IACAA,IAAA,EAIA,OACA+F,QAAAA,EACA9R,MAAAA,EACAC,OAAAA,GAivBAgS,CAAA7yD,GAGA,OAFAZ,KAAAwhD,MAAAA,EACAxhD,KAAAyhD,OAAAA,EACA6R,IAIA7T,EAhoEA,GAmoEA5gD,QAAA4gD,WAAAA,GAIA,CAAA7gD,EAAAC,WAIAE,OAAAC,eAAAH,QAAA,cACAI,OAAA,IAEAJ,QAAA+hD,uBAAA,EACA,MAAA8S,IACAC,GAAA,MACAC,KAAA,EACAC,KAAA,EACAC,WAAA,IAEAH,GAAA,MACAC,KAAA,EACAC,KAAA,EACAC,WAAA,IAEAH,GAAA,KACAC,KAAA,EACAC,KAAA,EACAC,WAAA,IAEAH,GAAA,KACAC,KAAA,EACAC,KAAA,GACAC,WAAA,IAEAH,GAAA,KACAC,KAAA,EACAC,KAAA,GACAC,WAAA,IAEAH,GAAA,IACAC,KAAA,GACAC,KAAA,GACAC,WAAA,IAEAH,GAAA,MACAC,KAAA,EACAC,KAAA,EACAC,WAAA,IAEAH,GAAA,MACAC,KAAA,EACAC,KAAA,GACAC,WAAA,IAEAH,GAAA,MACAC,KAAA,EACAC,KAAA,GACAC,WAAA,IAEAH,GAAA,MACAC,KAAA,GACAC,KAAA,GACAC,WAAA,IAEAH,GAAA,MACAC,KAAA,GACAC,KAAA,GACAC,WAAA,IAEAH,GAAA,KACAC,KAAA,GACAC,KAAA,GACAC,WAAA,IAEAH,GAAA,KACAC,KAAA,GACAC,KAAA,GACAC,WAAA,IAEAH,GAAA,KACAC,KAAA,GACAC,KAAA,GACAC,WAAA,IAEAH,GAAA,MACAC,KAAA,GACAC,KAAA,GACAC,WAAA,IAEAH,GAAA,MACAC,KAAA,GACAC,KAAA,GACAC,WAAA,IAEAH,GAAA,MACAC,KAAA,GACAC,KAAA,GACAC,WAAA,IAEAH,GAAA,MACAC,KAAA,GACAC,KAAA,GACAC,WAAA,IAEAH,GAAA,MACAC,KAAA,GACAC,KAAA,GACAC,WAAA,IAEAH,GAAA,MACAC,KAAA,GACAC,KAAA,GACAC,WAAA,IAEAH,GAAA,MACAC,KAAA,GACAC,KAAA,GACAC,WAAA,IAEAH,GAAA,MACAC,KAAA,GACAC,KAAA,GACAC,WAAA,IAEAH,GAAA,KACAC,KAAA,GACAC,KAAA,GACAC,WAAA,IAEAH,GAAA,KACAC,KAAA,GACAC,KAAA,GACAC,WAAA,IAEAH,GAAA,KACAC,KAAA,GACAC,KAAA,GACAC,WAAA,IAEAH,GAAA,KACAC,KAAA,GACAC,KAAA,GACAC,WAAA,IAEAH,GAAA,KACAC,KAAA,GACAC,KAAA,GACAC,WAAA,IAEAH,GAAA,KACAC,KAAA,GACAC,KAAA,GACAC,WAAA,IAEAH,GAAA,KACAC,KAAA,GACAC,KAAA,GACAC,WAAA,IAEAH,GAAA,KACAC,KAAA,GACAC,KAAA,GACAC,WAAA,IAEAH,GAAA,KACAC,KAAA,GACAC,KAAA,GACAC,WAAA,IAEAH,GAAA,KACAC,KAAA,GACAC,KAAA,GACAC,WAAA,IAEAH,GAAA,KACAC,KAAA,GACAC,KAAA,GACAC,WAAA,IAEAH,GAAA,KACAC,KAAA,GACAC,KAAA,GACAC,WAAA,IAEAH,GAAA,KACAC,KAAA,GACAC,KAAA,GACAC,WAAA,IAEAH,GAAA,IACAC,KAAA,GACAC,KAAA,GACAC,WAAA,IAEAH,GAAA,IACAC,KAAA,GACAC,KAAA,GACAC,WAAA,IAEAH,GAAA,IACAC,KAAA,GACAC,KAAA,GACAC,WAAA,IAEAH,GAAA,IACAC,KAAA,GACAC,KAAA,GACAC,WAAA,IAEAH,GAAA,IACAC,KAAA,GACAC,KAAA,GACAC,WAAA,IAEAH,GAAA,GACAC,KAAA,GACAC,KAAA,GACAC,WAAA,IAEAH,GAAA,GACAC,KAAA,GACAC,KAAA,GACAC,WAAA,IAEAH,GAAA,GACAC,KAAA,GACAC,KAAA,GACAC,WAAA,IAEAH,GAAA,EACAC,KAAA,GACAC,KAAA,GACAC,WAAA,IAEAH,GAAA,EACAC,KAAA,GACAC,KAAA,GACAC,WAAA,IAEAH,GAAA,EACAC,KAAA,GACAC,KAAA,GACAC,WAAA,IAEAH,GAAA,MACAC,KAAA,GACAC,KAAA,GACAC,WAAA,IA2GAj1D,QAAA+hD,wBAvGA7gD,YAAAa,EAAAiJ,EAAAgjB,GACA7sB,KAAAY,KAAAA,EACAZ,KAAA+zD,GAAAlqD,EACA7J,KAAAg0D,QAAAnnC,EACA7sB,KAAAi0D,MAAArzD,EAAAiJ,GACA7J,KAAAk0D,KAAA,EACAl0D,KAAAm0D,SACAn0D,KAAAi0D,MAAAj0D,KAAAi0D,OAAA,EAAA,MAAAj0D,KAAAk0D,MAAA,EAAA,IACAl0D,KAAAk0D,KAAAl0D,KAAAk0D,MAAA,EAAA,MACAl0D,KAAAo0D,IAAA,EACAp0D,KAAA8H,EAAA,MAGA/H,SACA,MAAAa,EAAAZ,KAAAY,KACA,IAAAmzD,EAAA/zD,KAAA+zD,GAEA,MAAAnzD,EAAAmzD,GACAnzD,EAAAmzD,EAAA,GAAA,KACA/zD,KAAAk0D,MAAA,MACAl0D,KAAAo0D,GAAA,IAEAL,IACA/zD,KAAAk0D,MAAAtzD,EAAAmzD,IAAA,EACA/zD,KAAAo0D,GAAA,EACAp0D,KAAA+zD,GAAAA,IAGAA,IACA/zD,KAAAk0D,MAAAH,EAAA/zD,KAAAg0D,QAAApzD,EAAAmzD,IAAA,EAAA,MACA/zD,KAAAo0D,GAAA,EACAp0D,KAAA+zD,GAAAA,GAGA/zD,KAAAk0D,KAAA,QACAl0D,KAAAi0D,OAAAj0D,KAAAk0D,MAAA,GACAl0D,KAAAk0D,MAAA,OAIAn0D,QAAAsgD,EAAA7yC,GACA,IAAA6mD,EAAAhU,EAAA7yC,IAAA,EACA8mD,EAAA,EAAAjU,EAAA7yC,GACA,MAAA+mD,EAAAb,EAAAW,GACAG,EAAAD,EAAAZ,GACA,IAAApuC,EACAzd,EAAA9H,KAAA8H,EAAA0sD,EAEA,GAAAx0D,KAAAi0D,MAAAO,EACA1sD,EAAA0sD,GACA1sD,EAAA0sD,EACAjvC,EAAA+uC,EACAD,EAAAE,EAAAX,OAEA9rD,EAAA0sD,EACAjvC,EAAA,EAAA+uC,EAEA,IAAAC,EAAAT,aACAQ,EAAA/uC,GAGA8uC,EAAAE,EAAAV,UAEA,CAGA,GAFA7zD,KAAAi0D,OAAAO,EAEA,IAAA,MAAA1sD,GAEA,OADA9H,KAAA8H,EAAAA,EACAwsD,EAGAxsD,EAAA0sD,GACAjvC,EAAA,EAAA+uC,EAEA,IAAAC,EAAAT,aACAQ,EAAA/uC,GAGA8uC,EAAAE,EAAAV,OAEAtuC,EAAA+uC,EACAD,EAAAE,EAAAX,MAIA,GACA,IAAA5zD,KAAAo0D,IACAp0D,KAAAm0D,SAGArsD,IAAA,EACA9H,KAAAi0D,MAAAj0D,KAAAi0D,OAAA,EAAA,MAAAj0D,KAAAk0D,MAAA,GAAA,EACAl0D,KAAAk0D,KAAAl0D,KAAAk0D,MAAA,EAAA,MACAl0D,KAAAo0D,WACA,IAAA,MAAAtsD,IAIA,OAFA9H,KAAA8H,EAAAA,EACAu4C,EAAA7yC,GAAA6mD,GAAA,EAAAC,EACA/uC,KASA,CAAA3mB,EAAAC,QAAAC,KAIAC,OAAAC,eAAAH,QAAA,cACAI,OAAA,IAEAJ,QAAAm0C,gBAAA,EAEA,IAAA9mB,EAAAptB,EAAA,IAEAU,EAAAV,EAAA,GAEA21D,EAAA31D,EAAA,IAEAS,EAAAT,EAAA,GAEA,MAAAk0C,EAAA,WACA,SAAAA,EAAApsC,EAAA0rC,EAAApnB,EAAA0c,GACA,IAAA/U,EAEA,MAAA,KAAAA,EAAAjsB,EAAAgoB,YACA,GAAA,MAAAiE,EAAA,CACAjsB,EAAA0zB,MAAA,GACA,MAIAt6B,KAAA4G,OAAAA,EACA5G,KAAAsyC,YAAAA,EACAtyC,KAAAkrB,KAAAA,EACAlrB,KAAA4nC,OAAAA,EAEA1b,EAAA2pB,aAAAG,KAAAh2C,KAAAsyC,GAkEA,OA/DAU,EAAA5uB,UAAArlB,OAAAyJ,OAAA0jB,EAAA2pB,aAAAzxB,WACArlB,OAAAC,eAAAg0C,EAAA5uB,UAAA,SACAjlB,IAAA,WACA,OAAA,EAAAI,EAAA8S,QAAArS,KAAA,QAAAA,KAAA4G,OAAAuiB,SAAAnpB,KAAAsyC,eAEAruB,cAAA,IAGA+uB,EAAA5uB,UAAAoyB,aAAA,SAAAC,KAEAzD,EAAA5uB,UAAAmyB,UAAA,WACA,GAAAv2C,KAAAq2C,IACA,OAGA,MAAAqe,GACAC,qBAAA5mD,EACA6mD,oBAAA7mD,GAEA8mD,EAAA70D,KAAAkrB,KAAAsH,SAAA,SAAA,KAEA,GAAAxyB,KAAA80D,UAAA1sD,MAAAC,QAAAwsD,GAAA,CACA,MAAAE,EAAA/0D,KAAAkrB,KAAA/rB,IAAA,qBAAA,EACA61D,EAAAH,EAAA32D,OACAyf,EAAA,IAAAm5B,WAAAke,GACA,IAAAC,GAAA,EACA,MAAAC,GAAA,GAAAH,GAAA,EAEA,IAAA,IAAA32D,EAAA,EAAAA,EAAA42D,EAAA52D,GAAA,EACAuf,EAAAvf,GAAA,KAAAy2D,EAAAz2D,EAAA,GAAAy2D,EAAAz2D,IAAA,EACAuf,EAAAvf,EAAA,GAAAy2D,EAAAz2D,GAAA82D,EAAA,EAEA,MAAAv3C,EAAAvf,IAAA,IAAAuf,EAAAvf,EAAA,KACA62D,GAAA,GAIAA,IACAP,EAAAC,gBAAAh3C,GAIA,IAAA,EAAAne,EAAAkpB,QAAA1oB,KAAA4nC,QAAA,CACA,MAAAgtB,EAAA50D,KAAA4nC,OAAAzoC,IAAA,kBAEAgT,OAAAC,UAAAwiD,KACAF,EAAAE,eAAAA,GAIA,MAAAO,EAAA,IAAAV,EAAAW,UAAAV,GACAS,EAAAt7B,MAAA75B,KAAA6G,OACA,MAAAjG,EAAAu0D,EAAAE,SACA7T,MAAAxhD,KAAAs1D,UACA7T,OAAAzhD,KAAAu1D,WACAT,SAAA90D,KAAA80D,SACAU,aAAA,IAEAx1D,KAAAmP,OAAAvO,EACAZ,KAAAo2C,aAAAx1C,EAAA1C,OACA8B,KAAAq2C,KAAA,GAGArD,EAlFA,GAqFAn0C,QAAAm0C,WAAAA,GAIA,CAAAp0C,EAAAC,QAAAC,KAIAC,OAAAC,eAAAH,QAAA,cACAI,OAAA,IAEAJ,QAAAu2D,eAAA,EAEA,IAAA71D,EAAAT,EAAA,GAEAgB,EAAAhB,EAAA,SAEA22D,UAAAl2D,EAAA6U,cACArU,YAAAuQ,GACA+T,qBAAA/T,YAKAolD,UAAAn2D,EAAA6U,cACArU,YAAAsM,EAAAspD,GACAtxC,MAAAhY,GACArM,KAAA21D,UAAAA,SAKAC,UAAAr2D,EAAA6U,eAEA,IAAAghD,EAAA,WACA,IAAAS,EAAA,IAAAh1D,YAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,EAAA,EAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,EAAA,EAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,KACAi1D,EAAA,KACAC,EAAA,IACAC,EAAA,KACAC,EAAA,KACAC,EAAA,KACAC,EAAA,KACAC,EAAA,KACAC,EAAA,KAEA,SAAAjB,GAAAT,gBACAA,EAAA,KAAAC,eACAA,GAAA,OAEA50D,KAAAs2D,iBAAA3B,EACA30D,KAAAu2D,gBAAA3B,EAGA,SAAA4B,EAAA1d,EAAAruB,GAOA,IANA,IAEArsB,EACAm7B,EAHA2f,EAAA,EACArtC,KAGA3N,EAAA,GAEAA,EAAA,IAAA46C,EAAA56C,EAAA,IACAA,IAGA2N,EAAAjK,MACA8qD,YACA17C,MAAA,IAEA,IACAmrC,EADAh3B,EAAAtZ,EAAA,GAGA,IAAAzN,EAAA,EAAAA,EAAAF,EAAAE,IAAA,CACA,IAAAm7B,EAAA,EAAAA,EAAAuf,EAAA16C,GAAAm7B,IAAA,CAIA,KAHApU,EAAAtZ,EAAAu7B,OACAslB,SAAAvnC,EAAAnU,OAAAyZ,EAAAyuB,GAEA/zB,EAAAnU,MAAA,GACAmU,EAAAtZ,EAAAu7B,MAMA,IAHAjiB,EAAAnU,QACAnF,EAAAjK,KAAAujB,GAEAtZ,EAAA3N,QAAAE,GACAyN,EAAAjK,KAAAu6C,GACAuQ,YACA17C,MAAA,IAEAmU,EAAAunC,SAAAvnC,EAAAnU,OAAAmrC,EAAAuQ,SACAvnC,EAAAg3B,EAGAjD,IAGA96C,EAAA,EAAAF,IACA2N,EAAAjK,KAAAu6C,GACAuQ,YACA17C,MAAA,IAEAmU,EAAAunC,SAAAvnC,EAAAnU,OAAAmrC,EAAAuQ,SACAvnC,EAAAg3B,GAIA,OAAAtwC,EAAA,GAAA6gD,SAGA,SAAA+J,EAAAxjC,EAAAkrB,EAAAuY,GACA,OAAA,KAAAzjC,EAAA0jC,cAAA,GAAAxY,EAAAuY,GAGA,SAAAE,EAAAh2D,EAAAwyB,EAAAyjC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GAAA,GACA,IAAAC,EAAAR,EAAAQ,YACAC,EAAAT,EAAAS,YACA,MAAAC,EAAAnkC,EACA,IAAAokC,EAAA,EACAC,EAAA,EAEA,SAAAhX,IACA,GAAAgX,EAAA,EAEA,OAAAD,KADAC,EACA,EAKA,GAAA,OAFAD,EAAA52D,EAAAwyB,MAEA,CACA,IAAAskC,EAAA92D,EAAAwyB,KAEA,GAAAskC,EAAA,CACA,GAAA,MAAAA,GAAAN,EAAA,CACAhkC,GAAA,EACA,MAAAuiC,GAAA,EAAA71D,EAAAuzB,YAAAzyB,EAAAwyB,GAGA,GAFAA,GAAA,EAEAuiC,EAAA,GAAAA,IAAAkB,EAAAlB,UACA,MAAA,IAAAD,EAAA,oDAAAC,QAEA,GAAA,MAAA+B,EAAA,CACA,GAAAN,EAAA,CACA,MAAAO,EAAAC,GAAA,IAAAf,EAAAgB,UAAA,EAAA,GAEA,GAAAF,EAAA,GAAAryD,KAAAwyD,MAAAjB,EAAAlB,UAAAgC,IAAA,GACA,MAAA,IAAAjC,EAAA,wGAAAiC,GAIA,MAAA,IAAA/B,EAAA,qDAGA,MAAA,IAAAH,wBAAA+B,GAAA,EAAAE,GAAAprD,SAAA,QAKA,OADAmrD,EAAA,EACAD,IAAA,EAGA,SAAAO,EAAAC,GAGA,IAFA,IAAAxwB,EAAAwwB,IAEA,CAGA,cAFAxwB,EAAAA,EAAAiZ,OAGA,IAAA,SACA,OAAAjZ,EAEA,IAAA,SACA,SAGA,MAAA,IAAAiuB,EAAA,6BAIA,SAAAwC,EAAA/5D,GAGA,IAFA,IAAA4mB,EAAA,EAEA5mB,EAAA,GACA4mB,EAAAA,GAAA,EAAA27B,IACAviD,IAGA,OAAA4mB,EAGA,SAAAozC,EAAAh6D,GACA,GAAA,IAAAA,EACA,OAAA,IAAAuiD,IAAA,GAAA,EAGA,IAAA37B,EAAAmzC,EAAA/5D,GAEA,OAAA4mB,GAAA,GAAA5mB,EAAA,EACA4mB,EAGAA,IAAA,GAAA5mB,GAAA,EAwCA,IAAAi6D,EAAA,EAiCA,IACAC,EADAC,EAAA,EAmFA,IAAAT,EAAA,EAEA,SAAAU,EAAArlC,EAAA4yB,EAAA0S,EAAApa,EAAAuY,GACA,IAAA8B,EAAAD,EAAAlB,EAAA,EACAoB,EAAAF,EAAAlB,EACAO,EAAAY,EAAAvlC,EAAAviB,EAAAytC,EACA,IAAAua,EAAAD,EAAAxlC,EAAA0lC,EAAAjC,EACA,MAAAkC,EAAAnC,EAAAxjC,EAAA2kC,EAAAc,GACA7S,EAAA5yB,EAAA2lC,GAGA,SAAAC,EAAA5lC,EAAA4yB,EAAA0S,GACAX,EAAAW,EAAAtlC,EAAA0jC,cAAA,EACA,IAAA+B,EAAAH,EAAAtlC,EAAA0jC,cACA,MAAAiC,EAAAnC,EAAAxjC,EAAA2kC,EAAAc,GACA7S,EAAA5yB,EAAA2lC,GAGA,IACA3lC,EAAA70B,EAAAm7B,EAAA2f,EAAAp0B,EACAg0C,EAFAC,EAAAjC,EAAA54D,OAMA46D,EAFAxB,EACA,IAAAN,EACA,IAAAE,EAtJA,SAAAjkC,EAAA2lC,GACA,IAAAzgB,EAAA4f,EAAA9kC,EAAA+lC,gBACAC,EAAA,IAAA9gB,EAAA,EAAA+f,EAAA/f,IAAAgf,EACAlkC,EAAAimC,UAAAN,GAAA3lC,EAAAkmC,MAAAF,GAGA,SAAAhmC,EAAA2lC,GACA3lC,EAAAimC,UAAAN,IAAAnY,KAAA0W,GAiJA,IAAAD,EA5IA,SAAAjkC,EAAA2lC,GACA,GAAAT,EAAA,EAEA,YADAA,IAIA,IAAAjf,EAAA8d,EACAvxD,EAAAwxD,EAEA,KAAA/d,GAAAzzC,GAAA,CACA,IAAA2zD,EAAArB,EAAA9kC,EAAAomC,gBACAt1B,EAAA,GAAAq1B,EACAr0C,EAAAq0C,GAAA,EAEA,GAAA,IAAAr1B,EAAA,CAWA,IAAAu1B,EAAAzD,EADA3c,GAAAn0B,GAEAkO,EAAAimC,UAAAN,EAAAU,GAAApB,EAAAn0B,IAAA,GAAAozB,GACAje,QAbA,CACA,GAAAn0B,EAAA,GAAA,CACAozC,EAAAF,EAAAlzC,IAAA,GAAAA,GAAA,EACA,MAGAm0B,GAAA,MAcA,SAAAjmB,EAAA2lC,GACA,IAGA70B,EACAq1B,EAJAlgB,EAAA8d,EACAvxD,EAAAwxD,EACAlyC,EAAA,EAIA,KAAAm0B,GAAAzzC,GAAA,CACA,MAAA8zD,EAAAX,EAAA/C,EAAA3c,GACArF,EAAA5gB,EAAAimC,UAAAK,GAAA,GAAA,EAAA,EAEA,OAAAlB,GACA,KAAA,EAKA,GAJAe,EAAArB,EAAA9kC,EAAAomC,gBAEAt0C,EAAAq0C,GAAA,EAEA,KAHAr1B,EAAA,GAAAq1B,GAIAr0C,EAAA,IACAozC,EAAAF,EAAAlzC,IAAA,GAAAA,GACAszC,EAAA,IAEAtzC,EAAA,GACAszC,EAAA,OAEA,CACA,GAAA,IAAAt0B,EACA,MAAA,IAAA0xB,EAAA,wBAGA2C,EAAAF,EAAAn0B,GACAs0B,EAAAtzC,EAAA,EAAA,EAGA,SAEA,KAAA,EACA,KAAA,EACAkO,EAAAimC,UAAAK,GACAtmC,EAAAimC,UAAAK,IAAA1lB,GAAA4M,KAAA0W,GAIA,MAFApyC,IAGAszC,EAAA,IAAAA,EAAA,EAAA,GAIA,MAEA,KAAA,EACAplC,EAAAimC,UAAAK,GACAtmC,EAAAimC,UAAAK,IAAA1lB,GAAA4M,KAAA0W,IAEAlkC,EAAAimC,UAAAK,GAAAnB,GAAAjB,EACAkB,EAAA,GAGA,MAEA,KAAA,EACAplC,EAAAimC,UAAAK,KACAtmC,EAAAimC,UAAAK,IAAA1lB,GAAA4M,KAAA0W,IAMAje,IAGA,IAAAmf,GAGA,MAFAF,IAGAE,EAAA,IApJA,SAAAplC,EAAA2lC,GACA,IAAAzgB,EAAA4f,EAAA9kC,EAAA+lC,gBACAC,EAAA,IAAA9gB,EAAA,EAAA+f,EAAA/f,GACAllB,EAAAimC,UAAAN,GAAA3lC,EAAAkmC,MAAAF,EACA,IAAA/f,EAAA,EAEA,KAAAA,EAAA,IAAA,CACA,IAAAkgB,EAAArB,EAAA9kC,EAAAomC,gBACAt1B,EAAA,GAAAq1B,EACAr0C,EAAAq0C,GAAA,EAEA,GAAA,IAAAr1B,EAAA,CAUA,IAAAu1B,EAAAzD,EADA3c,GAAAn0B,GAEAkO,EAAAimC,UAAAN,EAAAU,GAAApB,EAAAn0B,GACAmV,QAZA,CACA,GAAAn0B,EAAA,GACA,MAGAm0B,GAAA,MAyKA,IACAsgB,EACAC,EAQAd,EAAAjoD,EAVA6nD,EAAA,EAYA,IAPAkB,EADA,IAAAV,EACAjC,EAAA,GAAAH,cAAAG,EAAA,GAAA4C,gBAEArC,EAAAR,EAAA8C,cAKApB,GAAAkB,GAAA,CACA,IAAAG,EAAA7C,EAAAzxD,KAAA+I,IAAAorD,EAAAlB,EAAAxB,GAAA0C,EAEA,GAAAG,EAAA,EAAA,CACA,IAAAx7D,EAAA,EAAAA,EAAA26D,EAAA36D,IACA04D,EAAA14D,GAAA+6D,KAAA,EAKA,GAFAhB,EAAA,EAEA,IAAAY,EAGA,IAFA9lC,EAAA6jC,EAAA,GAEAhyC,EAAA,EAAAA,EAAA80C,EAAA90C,IACA+zC,EAAA5lC,EAAA6lC,EAAAP,GACAA,SAGA,IAAAzzC,EAAA,EAAAA,EAAA80C,EAAA90C,IAAA,CACA,IAAA1mB,EAAA,EAAAA,EAAA26D,EAAA36D,IAKA,IAJA60B,EAAA6jC,EAAA14D,GACAu6D,EAAA1lC,EAAA0lC,EACAjoD,EAAAuiB,EAAAviB,EAEA6oB,EAAA,EAAAA,EAAA7oB,EAAA6oB,IACA,IAAA2f,EAAA,EAAAA,EAAAyf,EAAAzf,IACAof,EAAArlC,EAAA6lC,EAAAP,EAAAh/B,EAAA2f,GAKAqf,KAQA,GAHAd,EAAA,IACA+B,EAAAK,EAAAj5D,EAAAwyB,IAGA,MAGA,GAAAomC,EAAAM,QAAA,CACA,MAAAC,EAAAH,EAAA,EAAA,aAAA,aACA,EAAAr6D,EAAA2F,sBAAA60D,kCAAAP,EAAAM,WACA1mC,EAAAomC,EAAApmC,OAGA,KAAAomC,EAAAQ,QAAA,OAAAR,EAAAQ,QAAA,OAGA,MAFA5mC,GAAA,EAMA,OAAAA,EAAAmkC,EAGA,SAAA0C,EAAAhnC,EAAAinC,EAAA/0C,GACA,IAEAg1C,EAAAnxC,EAAAC,EAAAmxC,EAAAC,EAAAC,EAAAC,EAAAC,EACAC,EAAAj1C,EAAAE,EAAAE,EAAAC,EAAA60C,EAAAC,EAAAC,EACAziB,EAJA0iB,EAAA5nC,EAAA6nC,kBACA5B,EAAAjmC,EAAAimC,UAKA,IAAA2B,EACA,MAAA,IAAApF,EAAA,wCAGA,IAAA,IAAAtX,EAAA,EAAAA,EAAA,GAAAA,GAAA,EACAsc,EAAAvB,EAAAgB,EAAA/b,GACA34B,EAAA0zC,EAAAgB,EAAA/b,EAAA,GACAz4B,EAAAwzC,EAAAgB,EAAA/b,EAAA,GACAv4B,EAAAszC,EAAAgB,EAAA/b,EAAA,GACAt4B,EAAAqzC,EAAAgB,EAAA/b,EAAA,GACAuc,EAAAxB,EAAAgB,EAAA/b,EAAA,GACAwc,EAAAzB,EAAAgB,EAAA/b,EAAA,GACAyc,EAAA1B,EAAAgB,EAAA/b,EAAA,GACAsc,GAAAI,EAAA1c,GAEA,IAAA34B,EAAAE,EAAAE,EAAAC,EAAA60C,EAAAC,EAAAC,IAaAp1C,GAAAq1C,EAAA1c,EAAA,GACAz4B,GAAAm1C,EAAA1c,EAAA,GACAv4B,GAAAi1C,EAAA1c,EAAA,GACAt4B,GAAAg1C,EAAA1c,EAAA,GACAuc,GAAAG,EAAA1c,EAAA,GACAwc,GAAAE,EAAA1c,EAAA,GACAyc,GAAAC,EAAA1c,EAAA,GAUAn1B,GADAmxC,GARAA,EAAA/D,EAAAqE,EAAA,KAAA,IACAzxC,EAAAotC,EAAAvwC,EAAA,KAAA,GAOA,GAAA,GACAmD,EACAmvB,GARAlvB,EAAAvD,GAQAywC,GAPAiE,EAAAO,GAOAzE,EAAA,KAAA,EACAjtC,EAAAA,EAAAitC,EAAAkE,EAAAjE,EAAA,KAAA,EAGAoE,GADAF,GATAA,EAAAhE,GAAA7wC,EAAAo1C,GAAA,KAAA,IAGAL,EAAAG,GAAA,GAMA,GAAA,GACAH,EAEAD,GADAE,GAVAA,EAAAnE,GAAA7wC,EAAAo1C,GAAA,KAAA,IACAN,EAAA10C,GAAA,GASA,GAAA,GACA00C,EAEAF,GADAD,EAAAA,GALAC,EAAAjiB,GAKA,GAAA,GACAiiB,EAEAnxC,GADAD,EAAAA,EAAAC,EAAA,GAAA,GACAA,EACAkvB,EAAAkiB,EAAApE,EAAAuE,EAAAxE,EAAA,MAAA,GACAqE,EAAAA,EAAArE,EAAAwE,EAAAvE,EAAA,MAAA,GACAuE,EAAAriB,EACAA,EAAAmiB,EAAAvE,EAAAwE,EAAAzE,EAAA,MAAA,GACAwE,EAAAA,EAAAxE,EAAAyE,EAAAxE,EAAA,MAAA,GACAwE,EAAApiB,EACAhzB,EAAAg5B,GAAAgc,EAAAK,EACAr1C,EAAAg5B,EAAA,GAAAgc,EAAAK,EACAr1C,EAAAg5B,EAAA,GAAAn1B,EAAAuxC,EACAp1C,EAAAg5B,EAAA,GAAAn1B,EAAAuxC,EACAp1C,EAAAg5B,EAAA,GAAAl1B,EAAAqxC,EACAn1C,EAAAg5B,EAAA,GAAAl1B,EAAAqxC,EACAn1C,EAAAg5B,EAAA,GAAAic,EAAAC,EACAl1C,EAAAg5B,EAAA,GAAAic,EAAAC,IArDAliB,EAAAie,EAAAqE,EAAA,KAAA,GACAt1C,EAAAg5B,GAAAhG,EACAhzB,EAAAg5B,EAAA,GAAAhG,EACAhzB,EAAAg5B,EAAA,GAAAhG,EACAhzB,EAAAg5B,EAAA,GAAAhG,EACAhzB,EAAAg5B,EAAA,GAAAhG,EACAhzB,EAAAg5B,EAAA,GAAAhG,EACAhzB,EAAAg5B,EAAA,GAAAhG,EACAhzB,EAAAg5B,EAAA,GAAAhG,GAgDA,IAAA,IAAAue,EAAA,EAAAA,EAAA,IAAAA,EACA+D,EAAAt1C,EAAAuxC,GACAlxC,EAAAL,EAAAuxC,EAAA,GACAhxC,EAAAP,EAAAuxC,EAAA,IACA9wC,EAAAT,EAAAuxC,EAAA,IACA7wC,EAAAV,EAAAuxC,EAAA,IACAgE,EAAAv1C,EAAAuxC,EAAA,IACAiE,EAAAx1C,EAAAuxC,EAAA,IACAkE,EAAAz1C,EAAAuxC,EAAA,IAEA,IAAAlxC,EAAAE,EAAAE,EAAAC,EAAA60C,EAAAC,EAAAC,IA+BA5xC,GADAmxC,EAAA,OARAA,EAAA/D,EAAAqE,EAAA,MAAA,KACAzxC,EAAAotC,EAAAvwC,EAAA,MAAA,IAOA,GAAA,IACAmD,EACAmvB,GARAlvB,EAAAvD,GAQAywC,GAPAiE,EAAAO,GAOAzE,EAAA,MAAA,GACAjtC,EAAAA,EAAAitC,EAAAkE,EAAAjE,EAAA,MAAA,GACAiE,EAAAjiB,EAEAoiB,GADAF,GATAA,EAAAhE,GAAA7wC,EAAAo1C,GAAA,MAAA,KAGAL,EAAAG,GAMA,GAAA,GACAH,EAEAD,GADAE,GAVAA,EAAAnE,GAAA7wC,EAAAo1C,GAAA,MAAA,KACAN,EAAA10C,GASA,GAAA,GACA00C,EAKAniB,EAAAkiB,EAAApE,EAAAuE,EAAAxE,EAAA,MAAA,GACAqE,EAAAA,EAAArE,EAAAwE,EAAAvE,EAAA,MAAA,GACAuE,EAAAriB,EACAA,EAAAmiB,EAAAvE,EAAAwE,EAAAzE,EAAA,MAAA,GACAwE,EAAAA,EAAAxE,EAAAyE,EAAAxE,EAAA,MAAA,GAGA6E,GAXAT,EAAAA,EAAAC,EAAA,GAAA,GAWAI,EACAh1C,GAVAwD,EAAAA,EAAAC,EAAA,GAAA,IAOAsxC,EAAApiB,GAIAwiB,EAAA3xC,EAAAuxC,EACA70C,GAXAuD,EAAAD,EAAAC,GAWAqxC,EACAI,EAAAzxC,EAAAqxC,EACA10C,GAfAw0C,EAAAD,EAAAC,GAeAC,EACAx0C,EAAAu0C,EAAAC,GAPAI,EAAAN,EAAAK,GASA,GACAC,EAAA,EACAA,GAAA,KACAA,EAAA,IAEAA,IAAA,EAGAj1C,EAAA,GACAA,EAAA,EACAA,GAAA,KACAA,EAAA,IAEAA,IAAA,EAGAE,EAAA,GACAA,EAAA,EACAA,GAAA,KACAA,EAAA,IAEAA,IAAA,EAGAE,EAAA,GACAA,EAAA,EACAA,GAAA,KACAA,EAAA,IAEAA,IAAA,EAGAC,EAAA,GACAA,EAAA,EACAA,GAAA,KACAA,EAAA,IAEAA,IAAA,EAGA60C,EAAA,GACAA,EAAA,EACAA,GAAA,KACAA,EAAA,IAEAA,IAAA,EAGAC,EAAA,GACAA,EAAA,EACAA,GAAA,KACAA,EAAA,IAEAA,IAAA,EAGAC,EAAA,GACAA,EAAA,EACAA,GAAA,KACAA,EAAA,IAEAA,IAAA,EAGA1B,EAAAgB,EAAAxD,GAAA+D,EACAvB,EAAAgB,EAAAxD,EAAA,GAAAlxC,EACA0zC,EAAAgB,EAAAxD,EAAA,IAAAhxC,EACAwzC,EAAAgB,EAAAxD,EAAA,IAAA9wC,EACAszC,EAAAgB,EAAAxD,EAAA,IAAA7wC,EACAqzC,EAAAgB,EAAAxD,EAAA,IAAAgE,EACAxB,EAAAgB,EAAAxD,EAAA,IAAAiE,EACAzB,EAAAgB,EAAAxD,EAAA,IAAAkE,IA7HAziB,GAHAA,EAAAie,EAAAqE,EAAA,MAAA,KAEA,KACA,EACAtiB,GAAA,KACA,IAEAA,EAAA,MAAA,EAGA+gB,EAAAgB,EAAAxD,GAAAve,EACA+gB,EAAAgB,EAAAxD,EAAA,GAAAve,EACA+gB,EAAAgB,EAAAxD,EAAA,IAAAve,EACA+gB,EAAAgB,EAAAxD,EAAA,IAAAve,EACA+gB,EAAAgB,EAAAxD,EAAA,IAAAve,EACA+gB,EAAAgB,EAAAxD,EAAA,IAAAve,EACA+gB,EAAAgB,EAAAxD,EAAA,IAAAve,EACA+gB,EAAAgB,EAAAxD,EAAA,IAAAve,GAmHA,SAAA4iB,EAAAlE,EAAA5jC,GAKA,IAJA,IAAA0jC,EAAA1jC,EAAA0jC,cACA+C,EAAAzmC,EAAAymC,gBACAsB,EAAA,IAAAC,WAAA,IAEArD,EAAA,EAAAA,EAAA8B,EAAA9B,IACA,IAAA,IAAAc,EAAA,EAAAA,EAAA/B,EAAA+B,IAAA,CACA,IAAAtlC,EAAAqjC,EAAAxjC,EAAA2kC,EAAAc,GACAuB,EAAAhnC,EAAAG,EAAA4nC,GAIA,OAAA/nC,EAAAimC,UAGA,SAAAW,EAAAj5D,EAAAs6D,EAAA7uB,EAAA6uB,GACA,MAAAC,EAAAv6D,EAAA1C,OAAA,EACA,IAAAk9D,EAAA/uB,EAAA6uB,EAAA7uB,EAAA6uB,EAEA,GAAAA,GAAAC,EACA,OAAA,KAGA,IAAAE,GAAA,EAAAv7D,EAAAuzB,YAAAzyB,EAAAs6D,GAEA,GAAAG,GAAA,OAAAA,GAAA,MACA,OACAvB,QAAA,KACAE,OAAAqB,EACAjoC,OAAA8nC,GAMA,IAFA,IAAAI,GAAA,EAAAx7D,EAAAuzB,YAAAzyB,EAAAw6D,KAEAE,GAAA,OAAAA,GAAA,QAAA,CACA,KAAAF,GAAAD,EACA,OAAA,KAGAG,GAAA,EAAAx7D,EAAAuzB,YAAAzyB,EAAAw6D,GAGA,OACAtB,QAAAuB,EAAA/uD,SAAA,IACA0tD,OAAAsB,EACAloC,OAAAgoC,GAogBA,OAhgBAhG,EAAAhxC,WACArkB,MAAAa,GAAA26D,aACAA,EAAA,UAEA,SAAAC,IACA,MAAAt9D,GAAA,EAAA4B,EAAAuzB,YAAAzyB,EAAAwyB,GAEA,IAAAqd,GADArd,GAAA,GACAl1B,EAAA,EACA,IAAAs7D,EAAAK,EAAAj5D,EAAA6vC,EAAArd,GAEAomC,GAAAA,EAAAM,WACA,EAAAv6D,EAAA2F,MAAA,wDAAAs0D,EAAAM,SACArpB,EAAA+oB,EAAApmC,QAGA,IAAA4c,EAAApvC,EAAA2N,SAAA6kB,EAAAqd,GAEA,OADArd,GAAA4c,EAAA9xC,OACA8xC,EAGA,SAAAyrB,EAAA5E,GAIA,IAHA,IAAAQ,EAAA/xD,KAAAyoB,KAAA8oC,EAAA6E,eAAA,EAAA7E,EAAA8E,MACAhC,EAAAr0D,KAAAyoB,KAAA8oC,EAAAlB,UAAA,EAAAkB,EAAA+E,MAEAx9D,EAAA,EAAAA,EAAAy4D,EAAAC,WAAA54D,OAAAE,IAAA,CACA60B,EAAA4jC,EAAAC,WAAA14D,GACA,IAAAu4D,EAAArxD,KAAAyoB,KAAAzoB,KAAAyoB,KAAA8oC,EAAA6E,eAAA,GAAAzoC,EAAA0lC,EAAA9B,EAAA8E,MACAjC,EAAAp0D,KAAAyoB,KAAAzoB,KAAAyoB,KAAA8oC,EAAAlB,UAAA,GAAA1iC,EAAAviB,EAAAmmD,EAAA+E,MACAC,EAAAxE,EAAApkC,EAAA0lC,EACAmD,EAAAnC,EAAA1mC,EAAAviB,EACAqrD,EAAA,GAAAD,GAAAD,EAAA,GACA5oC,EAAAimC,UAAA,IAAA+B,WAAAc,GACA9oC,EAAA0jC,cAAAA,EACA1jC,EAAAymC,gBAAAA,EAGA7C,EAAAQ,YAAAA,EACAR,EAAA8C,cAAAA,EAGA,IAGA9C,EAAAE,EAHA3jC,EAAA,EACA4oC,EAAA,KACAC,EAAA,KAEA,IAAAC,EAAA,EACA,IAAAC,KACAC,KACAC,KACA,IAAA7C,GAAA,EAAA15D,EAAAuzB,YAAAzyB,EAAAwyB,GAGA,GAFAA,GAAA,EAEA,QAAAomC,EACA,MAAA,IAAA/D,EAAA,iBAGA+D,GAAA,EAAA15D,EAAAuzB,YAAAzyB,EAAAwyB,GACAA,GAAA,EAEAkpC,EAAA,KAAA,QAAA9C,GAAA,CACA,IAAAp7D,EAAAm7B,EAAAwU,EAEA,OAAAyrB,GACA,KAAA,MACA,KAAA,MACA,KAAA,MACA,KAAA,MACA,KAAA,MACA,KAAA,MACA,KAAA,MACA,KAAA,MACA,KAAA,MACA,KAAA,MACA,KAAA,MACA,KAAA,MACA,KAAA,MACA,KAAA,MACA,KAAA,MACA,KAAA,MACA,KAAA,MACA,IAAA+C,EAAAf,IAEA,QAAAhC,GACA,KAAA+C,EAAA,IAAA,KAAAA,EAAA,IAAA,KAAAA,EAAA,IAAA,KAAAA,EAAA,IAAA,IAAAA,EAAA,KACAP,GACAjiC,SACAyiC,MAAAD,EAAA,GACAE,MAAAF,EAAA,IAEAG,aAAAH,EAAA,GACAI,SAAAJ,EAAA,IAAA,EAAAA,EAAA,GACAK,SAAAL,EAAA,KAAA,EAAAA,EAAA,IACAM,WAAAN,EAAA,IACAO,YAAAP,EAAA,IACAQ,UAAAR,EAAAhuD,SAAA,GAAA,GAAA,EAAAguD,EAAA,IAAAA,EAAA,OAKA,QAAA/C,GACA,KAAA+C,EAAA,IAAA,MAAAA,EAAA,IAAA,MAAAA,EAAA,IAAA,KAAAA,EAAA,IAAA,MAAAA,EAAA,KACAN,GACAliC,QAAAwiC,EAAA,IAAA,EAAAA,EAAA,GACAS,OAAAT,EAAA,IAAA,EAAAA,EAAA,GACAU,OAAAV,EAAA,IAAA,EAAAA,EAAA,IACAW,cAAAX,EAAA,MAKA,MAEA,KAAA,MACA,MAAAY,GAAA,EAAAr9D,EAAAuzB,YAAAzyB,EAAAwyB,GAKA,IAHA,IACAkmC,EADA8D,EAAAD,GADA/pC,GAAA,GACA,EAGAA,EAAAgqC,GAAA,CACA,IAAAC,EAAAz8D,EAAAwyB,KACAkqC,EAAA,IAAAzhB,YAAA,IAEA,GAAAwhB,GAAA,GAAA,EACA,IAAA9jC,EAAA,EAAAA,EAAA,GAAAA,IACA+/B,EAAAzD,EAAAt8B,GACA+jC,EAAAhE,GAAA14D,EAAAwyB,SAEA,CAAA,GAAAiqC,GAAA,GAAA,EAOA,MAAA,IAAA5H,EAAA,4BANA,IAAAl8B,EAAA,EAAAA,EAAA,GAAAA,IACA+/B,EAAAzD,EAAAt8B,GACA+jC,EAAAhE,IAAA,EAAAx5D,EAAAuzB,YAAAzyB,EAAAwyB,GACAA,GAAA,EAMA+oC,EAAA,GAAAkB,GAAAC,EAGA,MAEA,KAAA,MACA,KAAA,MACA,KAAA,MACA,GAAAzG,EACA,MAAA,IAAApB,EAAA,qCAGAriC,GAAA,GACAyjC,MACA0G,SAAA,QAAA/D,EACA3C,EAAAS,YAAA,QAAAkC,EACA3C,EAAAgB,UAAAj3D,EAAAwyB,KACA,MAAAoqC,GAAA,EAAA19D,EAAAuzB,YAAAzyB,EAAAwyB,GACAA,GAAA,EACAyjC,EAAAlB,UAAA4F,GAAAiC,EACA3G,EAAA6E,gBAAA,EAAA57D,EAAAuzB,YAAAzyB,EAAAwyB,GACAA,GAAA,EACAyjC,EAAAC,cACAD,EAAA4G,gBACA,IACAC,EADAC,EAAA/8D,EAAAwyB,KAEAuoC,EAAA,EACAC,EAAA,EAEA,IAAAx9D,EAAA,EAAAA,EAAAu/D,EAAAv/D,IAAA,CACAs/D,EAAA98D,EAAAwyB,GACA,IAAAulC,EAAA/3D,EAAAwyB,EAAA,IAAA,EACA1iB,EAAA,GAAA9P,EAAAwyB,EAAA,GAEAuoC,EAAAhD,IACAgD,EAAAhD,GAGAiD,EAAAlrD,IACAkrD,EAAAlrD,GAGA,IAAAktD,EAAAh9D,EAAAwyB,EAAA,GACA2a,EAAA8oB,EAAAC,WAAAl1D,MACA+2D,EAAAA,EACAjoD,EAAAA,EACAmtD,eAAAD,EACA9C,kBAAA,OAEAjE,EAAA4G,aAAAC,GAAA3vB,EAAA,EACA3a,GAAA,EAGAyjC,EAAA8E,KAAAA,EACA9E,EAAA+E,KAAAA,EACAH,EAAA5E,GACA,MAEA,KAAA,MACA,MAAAiH,GAAA,EAAAh+D,EAAAuzB,YAAAzyB,EAAAwyB,GAGA,IAFAA,GAAA,EAEAh1B,EAAA,EAAAA,EAAA0/D,GAAA,CACA,IAAAC,EAAAn9D,EAAAwyB,KACA0lB,EAAA,IAAAj4C,WAAA,IACAm9D,EAAA,EAEA,IAAAzkC,EAAA,EAAAA,EAAA,GAAAA,IAAAnG,IACA4qC,GAAAllB,EAAAvf,GAAA34B,EAAAwyB,GAGA,IAAA6qC,EAAA,IAAAp9D,WAAAm9D,GAEA,IAAAzkC,EAAA,EAAAA,EAAAykC,EAAAzkC,IAAAnG,IACA6qC,EAAA1kC,GAAA34B,EAAAwyB,GAGAh1B,GAAA,GAAA4/D,GACAD,GAAA,GAAA,EAAA1B,EAAAD,GAAA,GAAA2B,GAAAvH,EAAA1d,EAAAmlB,GAGA,MAEA,KAAA,MACA7qC,GAAA,EACA2jC,GAAA,EAAAj3D,EAAAuzB,YAAAzyB,EAAAwyB,GACAA,GAAA,EACA,MAEA,KAAA,MACA,MAAAgkC,GAAA,KAAA8E,IAAAX,EACAnoC,GAAA,EACA,IAEAH,EAFAirC,EAAAt9D,EAAAwyB,KACA0jC,KAGA,IAAA14D,EAAA,EAAAA,EAAA8/D,EAAA9/D,IAAA,CACA,MAAA4S,EAAApQ,EAAAwyB,KACA,IAAA+qC,EAAAtH,EAAA4G,aAAAzsD,IACAiiB,EAAA4jC,EAAAC,WAAAqH,IACAntD,MAAAA,EACA,IAAAotD,EAAAx9D,EAAAwyB,KACAH,EAAA+lC,eAAAqD,EAAA+B,GAAA,GACAnrC,EAAAomC,eAAA+C,EAAA,GAAAgC,GACAtH,EAAAl1D,KAAAqxB,GAGA,IAAA+jC,EAAAp2D,EAAAwyB,KACA6jC,EAAAr2D,EAAAwyB,KACAirC,EAAAz9D,EAAAwyB,KAEA,IACA,IAAA2M,EAAA62B,EAAAh2D,EAAAwyB,EAAAyjC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAoH,GAAA,EAAA,GAAAA,EAAAjH,IACAhkC,GAAA2M,EACA,MAAAt8B,GACA,GAAAA,aAAAiyD,EAEA,OADA,EAAAn2D,EAAA2F,SAAAzB,EAAA4I,qDACArM,KAAA65B,MAAAj5B,GACA26D,aAAA93D,EAAAkyD,YAEA,GAAAlyD,aAAAmyD,EAAA,EACA,EAAAr2D,EAAA2F,SAAAzB,EAAA4I,mDACA,MAAAiwD,EAGA,MAAA74D,EAGA,MAEA,KAAA,MACA2vB,GAAA,EACA,MAEA,KAAA,MACA,MAAAxyB,EAAAwyB,IACAA,IAGA,MAEA,QACA,MAAAkrC,GAAAzE,EAAAj5D,EAAAwyB,EAAA,EAAAA,EAAA,GAEA,GAAAkrC,IAAAA,GAAAxE,QAAA,EACA,EAAAv6D,EAAA2F,MAAA,yDAAAo5D,GAAAxE,SACA1mC,EAAAkrC,GAAAlrC,OACA,MAGA,IAAAkrC,IAAAlrC,GAAAxyB,EAAA1C,OAAA,EAAA,EACA,EAAAqB,EAAA2F,MAAA,+FACA,MAAAo3D,EAGA,MAAA,IAAA7G,EAAA,qCAAA+D,EAAAltD,SAAA,KAGAktD,GAAA,EAAA15D,EAAAuzB,YAAAzyB,EAAAwyB,GACAA,GAAA,EASA,IANApzB,KAAAwhD,MAAAqV,EAAA6E,eACA17D,KAAAyhD,OAAAoV,EAAAlB,UACA31D,KAAAg8D,KAAAA,EACAh8D,KAAAi8D,MAAAA,EACAj8D,KAAA82D,cAEA14D,EAAA,EAAAA,EAAAy4D,EAAAC,WAAA54D,OAAAE,IAAA,CACA60B,EAAA4jC,EAAAC,WAAA14D,GACA,IAAA08D,EAAAqB,EAAAlpC,EAAA4qC,gBAEA/C,IACA7nC,EAAA6nC,kBAAAA,GAGA96D,KAAA82D,WAAAl1D,MACAoP,MAAAiiB,EAAAjiB,MACAutD,OAAAxD,EAAAlE,EAAA5jC,GACAurC,OAAAvrC,EAAA0lC,EAAA9B,EAAA8E,KACA8C,OAAAxrC,EAAAviB,EAAAmmD,EAAA+E,KACAjF,cAAA1jC,EAAA0jC,cACA+C,gBAAAzmC,EAAAymC,kBAIA15D,KAAA0+D,cAAA1+D,KAAA82D,WAAA54D,QAIA6B,wBAAAyhD,EAAAC,EAAA+T,GAAA,GACA,IAEAviC,EAAA0rC,EAAAC,EAAAC,EACAj3D,EAAAo5C,EAAA5iD,EAAAm7B,EAAA2f,EACAloC,EAEAutD,EANAC,EAAAx+D,KAAAwhD,MAAAA,EACAid,EAAAz+D,KAAAyhD,OAAAA,EAIAruB,EAAA,EAEAsrC,EAAA1+D,KAAA82D,WAAA54D,OACAwtC,EAAA8V,EAAAC,EAAAid,EACA99D,EAAA,IAAAouB,kBAAA0c,GACAozB,EAAA,IAAAr6C,YAAA+8B,GAEA,IAAAud,EAEA,IAAA3gE,EAAA,EAAAA,EAAAsgE,EAAAtgE,IAAA,CAQA,GAPA60B,EAAAjzB,KAAA82D,WAAA14D,GACAugE,EAAA1rC,EAAAurC,OAAAA,EACAI,EAAA3rC,EAAAwrC,OAAAA,EACArrC,EAAAh1B,EACAmgE,EAAAtrC,EAAAsrC,OACAM,EAAA5rC,EAAA0jC,cAAA,GAAA,EAEAgI,IAAAI,EAAA,CACA,IAAAn3D,EAAA,EAAAA,EAAA45C,EAAA55C,IACA2xB,EAAA,EAAA3xB,EAAA+2D,EACAG,EAAAl3D,IAdA,WAcA2xB,IAAA,EAAA,EAAAA,EAGAwlC,EAAAJ,EAGA,IAAA3d,EAAA,EAAAA,EAAAS,EAAAT,IAIA,IAFAhwC,EAAA6tD,GAtBA,YAqBAtlC,EAAA,EAAAynB,EAAA4d,KACA,EAAArlC,IAAA,EAEA3xB,EAAA,EAAAA,EAAA45C,EAAA55C,IACAhH,EAAAwyB,GAAAmrC,EAAAvtD,EAAA8tD,EAAAl3D,IACAwrB,GAAAsrC,EAKA,IAAA/gD,EAAA3d,KAAAs2D,iBAMA,GAJAd,GAAA,IAAAkJ,GAAA/gD,IACAA,EAAA,IAAAm5B,aAAA,IAAA,KAAA,IAAA,KAAA,IAAA,KAAA,IAAA,OAGAn5B,EACA,IAAAvf,EAAA,EAAAA,EAAAstC,GACA,IAAAnS,EAAA,EAAA2f,EAAA,EAAA3f,EAAAmlC,EAAAnlC,IAAAn7B,IAAA86C,GAAA,EACAt4C,EAAAxC,IAAAwC,EAAAxC,GAAAuf,EAAAu7B,IAAA,GAAAv7B,EAAAu7B,EAAA,GAKA,OAAAt4C,GAGAo+D,+BACA,OAAAh/D,KAAAi8D,QACAj8D,KAAAi8D,MAAAiB,cAGA,IAAAl9D,KAAA0+D,cACA,IAAA1+D,KAAAu2D,kBAEA,KAAAv2D,KAAA82D,WAAA,GAAA9lD,OAAA,KAAAhR,KAAA82D,WAAA,GAAA9lD,OAAA,KAAAhR,KAAA82D,WAAA,GAAA9lD,OAOA,IAAAhR,KAAAu2D,iBAOA0I,iBAAA,SAAAr+D,GAGA,IAFA,IAAAs+D,EAAAC,EAAAC,EAEAhhE,EAAA,EAAAF,EAAA0C,EAAA1C,OAAAE,EAAAF,EAAAE,GAAA,EACA8gE,EAAAt+D,EAAAxC,GACA+gE,EAAAv+D,EAAAxC,EAAA,GACAghE,EAAAx+D,EAAAxC,EAAA,GACAwC,EAAAxC,GAAA8gE,EAAA,QAAA,MAAAE,EACAx+D,EAAAxC,EAAA,GAAA8gE,EAAA,QAAA,KAAAC,EAAA,KAAAC,EACAx+D,EAAAxC,EAAA,GAAA8gE,EAAA,QAAA,MAAAC,EAGA,OAAAv+D,GAEAy+D,kBAAA,SAAAz+D,GAIA,IAHA,IAAAs+D,EAAAC,EAAAC,EAAAlmB,EACA9lB,EAAA,EAEAh1B,EAAA,EAAAF,EAAA0C,EAAA1C,OAAAE,EAAAF,EAAAE,GAAA,EACA8gE,EAAAt+D,EAAAxC,GACA+gE,EAAAv+D,EAAAxC,EAAA,GACAghE,EAAAx+D,EAAAxC,EAAA,GACA86C,EAAAt4C,EAAAxC,EAAA,GACAwC,EAAAwyB,KAAA+rC,IAAA,oBAAAA,EAAA,oBAAAC,EAAA,mBAAAF,EAAA,mBAAAhmB,EAAA,kBAAA,gBAAAkmB,IAAA,oBAAAA,EAAA,oBAAAF,EAAA,mBAAAhmB,EAAA,kBAAAgmB,GAAA,oBAAAA,EAAA,mBAAAhmB,EAAA,iBAAAA,IAAA,oBAAAA,EAAA,kBACAt4C,EAAAwyB,KAAA,iBAAA+rC,GAAA,oBAAAA,EAAA,oBAAAC,EAAA,oBAAAF,EAAA,oBAAAhmB,EAAA,kBAAAkmB,IAAA,oBAAAA,EAAA,mBAAAF,EAAA,oBAAAhmB,EAAA,kBAAAgmB,GAAA,mBAAAA,EAAA,mBAAAhmB,EAAA,iBAAAA,IAAA,oBAAAA,EAAA,kBACAt4C,EAAAwyB,KAAA+rC,IAAA,oBAAAA,EAAA,oBAAAC,EAAA,kBAAAF,EAAA,mBAAAhmB,EAAA,kBAAA,gBAAAkmB,IAAA,oBAAAA,EAAA,oBAAAF,EAAA,oBAAAhmB,EAAA,kBAAAgmB,GAAA,mBAAAA,EAAA,mBAAAhmB,EAAA,kBAAAA,IAAA,oBAAAA,EAAA,iBAGA,OAAAt4C,EAAA2N,SAAA,EAAA6kB,IAEAksC,mBAAA,SAAA1+D,GAGA,IAFA,IAAAs+D,EAAAC,EAAAC,EAEAhhE,EAAA,EAAAF,EAAA0C,EAAA1C,OAAAE,EAAAF,EAAAE,GAAA,EACA8gE,EAAAt+D,EAAAxC,GACA+gE,EAAAv+D,EAAAxC,EAAA,GACAghE,EAAAx+D,EAAAxC,EAAA,GACAwC,EAAAxC,GAAA,QAAA8gE,EAAA,MAAAE,EACAx+D,EAAAxC,EAAA,GAAA,QAAA8gE,EAAA,KAAAC,EAAA,KAAAC,EACAx+D,EAAAxC,EAAA,GAAA,QAAA8gE,EAAA,MAAAC,EAGA,OAAAv+D,GAEA2+D,kBAAA,SAAA3+D,GAIA,IAHA,IAAAmlB,EAAAX,EAAA47B,EAAA9H,EACA9lB,EAAA,EAEAh1B,EAAA,EAAAF,EAAA0C,EAAA1C,OAAAE,EAAAF,EAAAE,GAAA,EACA2nB,EAAAnlB,EAAAxC,GACAgnB,EAAAxkB,EAAAxC,EAAA,GACA4iD,EAAApgD,EAAAxC,EAAA,GACA86C,EAAAt4C,EAAAxC,EAAA,GACAwC,EAAAwyB,KAAA,IAAArN,IAAA,qBAAAA,EAAA,qBAAAX,EAAA,qBAAA47B,EAAA,oBAAA9H,EAAA,oBAAA9zB,GAAA,sBAAAA,EAAA,qBAAA47B,EAAA,qBAAA9H,EAAA,oBAAA8H,IAAA,qBAAAA,EAAA,qBAAA9H,EAAA,mBAAAA,GAAA,qBAAAA,EAAA,mBACAt4C,EAAAwyB,KAAA,IAAArN,GAAA,sBAAAA,EAAA,oBAAAX,EAAA,sBAAA47B,EAAA,qBAAA9H,EAAA,mBAAA9zB,IAAA,sBAAAA,EAAA,qBAAA47B,EAAA,qBAAA9H,EAAA,mBAAA8H,GAAA,qBAAAA,EAAA,sBAAA9H,EAAA,oBAAAA,GAAA,qBAAAA,EAAA,mBACAt4C,EAAAwyB,KAAA,IAAArN,GAAA,sBAAAA,EAAA,sBAAAX,EAAA,qBAAA47B,EAAA,sBAAA9H,EAAA,oBAAA9zB,GAAA,sBAAAA,EAAA,qBAAA47B,EAAA,qBAAA9H,EAAA,oBAAA8H,GAAA,qBAAAA,EAAA,qBAAA9H,EAAA,mBAAAA,GAAA,qBAAAA,EAAA,mBAGA,OAAAt4C,EAAA2N,SAAA,EAAA6kB,IAGArzB,SAAAyhD,MACAA,EAAAC,OACAA,EAAAqT,SACAA,GAAA,EAAAU,YACAA,GAAA,IAEA,GAAAx1D,KAAA0+D,cAAA,EACA,MAAA,IAAAjJ,EAAA,0BAGA,IAAA70D,EAAAZ,KAAAw/D,wBAAAhe,EAAAC,EAAA+T,GAEA,GAAA,IAAAx1D,KAAA0+D,eAAA5J,EAAA,CAKA,IAJA,IAAAppB,EAAA9qC,EAAA1C,OACAuhE,EAAA,IAAAzwC,kBAAA,EAAA0c,GACAtY,EAAA,EAEAh1B,EAAA,EAAAA,EAAAstC,EAAAttC,IAAA,CACA,IAAAshE,EAAA9+D,EAAAxC,GACAqhE,EAAArsC,KAAAssC,EACAD,EAAArsC,KAAAssC,EACAD,EAAArsC,KAAAssC,EAGA,OAAAD,EACA,GAAA,IAAAz/D,KAAA0+D,eAAA1+D,KAAAg/D,yBACA,OAAAh/D,KAAAi/D,iBAAAr+D,GACA,GAAA,IAAAZ,KAAA0+D,cAAA,CACA,GAAA1+D,KAAAg/D,yBACA,OAAAlK,EACA90D,KAAAq/D,kBAAAz+D,GAGAZ,KAAAs/D,mBAAA1+D,GACA,GAAAk0D,EACA,OAAA90D,KAAAu/D,kBAAA3+D,GAIA,OAAAA,IAIAw0D,EAxrCA,GA2rCAv2D,QAAAu2D,UAAAA,GAIA,CAAAx2D,EAAAC,QAAAC,KAIAC,OAAAC,eAAAH,QAAA,cACAI,OAAA,IAEAJ,QAAAo0C,eAAA,EAEA,IAAA/mB,EAAAptB,EAAA,IAEA6gE,EAAA7gE,EAAA,IAEAS,EAAAT,EAAA,GAEA,MAAAm0C,EAAA,WACA,SAAAA,EAAArsC,EAAA0rC,EAAApnB,EAAA0c,GACA5nC,KAAA4G,OAAAA,EACA5G,KAAAsyC,YAAAA,EACAtyC,KAAAkrB,KAAAA,EACAlrB,KAAA4nC,OAAAA,EAEA1b,EAAA2pB,aAAAG,KAAAh2C,KAAAsyC,GAyDA,OAtDAW,EAAA7uB,UAAArlB,OAAAyJ,OAAA0jB,EAAA2pB,aAAAzxB,WACArlB,OAAAC,eAAAi0C,EAAA7uB,UAAA,SACAjlB,IAAA,WACA,OAAA,EAAAI,EAAA8S,QAAArS,KAAA,QAAAA,KAAA4G,OAAAuiB,SAAAnpB,KAAAsyC,eAEAruB,cAAA,IAGAgvB,EAAA7uB,UAAAoyB,aAAA,SAAAC,KAEAxD,EAAA7uB,UAAAmyB,UAAA,WACA,GAAAv2C,KAAAq2C,IACA,OAGA,MAAAupB,EAAA,IAAAD,EAAAE,SACAD,EAAA/lC,MAAA75B,KAAA6G,OACA,MAAA26C,EAAAoe,EAAApe,MACAC,EAAAme,EAAAne,OACAkc,EAAAiC,EAAAjC,gBACAmC,EAAAF,EAAAG,MAAA7hE,OAEA,GAAA,IAAA4hE,EACA9/D,KAAAmP,OAAAywD,EAAAG,MAAA,GAAAlgC,UACA,CACA,MAAAj/B,EAAA,IAAAouB,kBAAAwyB,EAAAC,EAAAkc,GAEA,IAAA,IAAAzkB,EAAA,EAAAA,EAAA4mB,EAAA5mB,IAAA,CACA,MAAA8mB,EAAAJ,EAAAG,MAAA7mB,GACA+mB,EAAAD,EAAAxe,MACA0e,EAAAF,EAAAve,OACA0e,EAAAH,EAAAtlB,KACA0lB,EAAAJ,EAAAK,IACAC,EAAAN,EAAAngC,MACA,IAAA0gC,EAAA,EACAC,GAAAhf,EAAA4e,EAAAD,GAAAxC,EACA,MAAA8C,EAAAjf,EAAAmc,EACA+C,EAAAT,EAAAtC,EAEA,IAAA,IAAApkC,EAAA,EAAAA,EAAA2mC,EAAA3mC,IAAA,CACA,MAAAqgB,EAAA0mB,EAAA/xD,SAAAgyD,EAAAA,EAAAG,GACA9/D,EAAAgN,IAAAgsC,EAAA4mB,GACAD,GAAAG,EACAF,GAAAC,GAIAzgE,KAAAmP,OAAAvO,EAGAZ,KAAAo2C,aAAAp2C,KAAAmP,OAAAjR,OACA8B,KAAAq2C,KAAA,GAGApD,EAhEA,GAmEAp0C,QAAAo0C,UAAAA,GAIA,CAAAr0C,EAAAC,QAAAC,KAIAC,OAAAC,eAAAH,QAAA,cACAI,OAAA,IAEAJ,QAAAghE,cAAA,EAEA,IAAAtgE,EAAAT,EAAA,GAEAgB,EAAAhB,EAAA,GAEA+gD,EAAA/gD,EAAA,UAEA6hE,UAAAphE,EAAA6U,cACArU,YAAAuQ,GACA+T,oBAAA/T,MAKA,IAAAuvD,EAAA,WACA,IAAAe,GACAC,GAAA,EACAC,GAAA,EACAC,GAAA,EACAC,GAAA,GAGA,SAAAnB,IACA7/D,KAAAihE,sBAAA,EAwbA,SAAAC,EAAAjuC,EAAAkuC,GACAluC,EAAAmuC,GAAA97D,KAAAyoB,KAAAozC,EAAAE,MAAApuC,EAAAquC,OACAruC,EAAAsuC,GAAAj8D,KAAAyoB,KAAAozC,EAAAK,KAAAvuC,EAAAquC,OACAruC,EAAAwuC,GAAAn8D,KAAAyoB,KAAAozC,EAAAO,MAAAzuC,EAAA0uC,OACA1uC,EAAA2uC,GAAAt8D,KAAAyoB,KAAAozC,EAAAU,KAAA5uC,EAAA0uC,OACA1uC,EAAAuuB,MAAAvuB,EAAAsuC,GAAAtuC,EAAAmuC,GACAnuC,EAAAwuB,OAAAxuB,EAAA2uC,GAAA3uC,EAAAwuC,GAGA,SAAAK,EAAAC,EAAAjL,GAOA,IANA,IACAkL,EADAb,EAAAY,EAAAE,IAEAlC,KACAmC,EAAA58D,KAAAyoB,MAAAozC,EAAAK,KAAAL,EAAAgB,QAAAhB,EAAAiB,OACAC,EAAA/8D,KAAAyoB,MAAAozC,EAAAU,KAAAV,EAAAmB,QAAAnB,EAAAoB,OAEApmB,EAAA,EAAAA,EAAAkmB,EAAAlmB,IACA,IAAA,IAAAh3B,EAAA,EAAAA,EAAA+8C,EAAA/8C,KACA68C,MACAQ,IAAAl9D,KAAAC,IAAA47D,EAAAgB,OAAAh9C,EAAAg8C,EAAAiB,MAAAjB,EAAAE,OACAW,EAAAS,IAAAn9D,KAAAC,IAAA47D,EAAAmB,OAAAnmB,EAAAglB,EAAAoB,MAAApB,EAAAO,OACAM,EAAAU,IAAAp9D,KAAA+I,IAAA8yD,EAAAgB,QAAAh9C,EAAA,GAAAg8C,EAAAiB,MAAAjB,EAAAK,MACAQ,EAAAW,IAAAr9D,KAAA+I,IAAA8yD,EAAAmB,QAAAnmB,EAAA,GAAAglB,EAAAoB,MAAApB,EAAAU,MACAG,EAAAxgB,MAAAwgB,EAAAU,IAAAV,EAAAQ,IACAR,EAAAvgB,OAAAugB,EAAAW,IAAAX,EAAAS,IACAT,EAAAlL,cACAiJ,EAAAn+D,KAAAogE,GAIAD,EAAAhC,MAAAA,EAGA,IAFA,IAAApC,EAAAwD,EAAAyB,KAEAxkE,EAAA,EAAAkK,EAAAq1D,EAAAv/D,EAAAkK,EAAAlK,IAGA,IAFA,IAAA60B,EAAA6jC,EAAA14D,GAEAm7B,EAAA,EAAAiL,EAAAu7B,EAAA7hE,OAAAq7B,EAAAiL,EAAAjL,IAAA,CACA,IAAAspC,KACAb,EAAAjC,EAAAxmC,GACAspC,EAAAC,KAAAx9D,KAAAyoB,KAAAi0C,EAAAQ,IAAAvvC,EAAAquC,OACAuB,EAAAE,KAAAz9D,KAAAyoB,KAAAi0C,EAAAS,IAAAxvC,EAAA0uC,OACAkB,EAAAG,KAAA19D,KAAAyoB,KAAAi0C,EAAAU,IAAAzvC,EAAAquC,OACAuB,EAAAI,KAAA39D,KAAAyoB,KAAAi0C,EAAAW,IAAA1vC,EAAA0uC,OACAkB,EAAArhB,MAAAqhB,EAAAG,KAAAH,EAAAC,KACAD,EAAAphB,OAAAohB,EAAAI,KAAAJ,EAAAE,KACAf,EAAAlL,WAAA14D,GAAAykE,GAKA,SAAAK,EAAAnB,EAAA9uC,EAAAlO,GACA,IAAAo+C,EAAAlwC,EAAAmwC,sBACAx8C,KAYA,OAVAu8C,EAAAE,iCAIAz8C,EAAA08C,IAAAH,EAAAI,eAAAx+C,GAAAu+C,IACA18C,EAAA48C,IAAAL,EAAAI,eAAAx+C,GAAAy+C,MAJA58C,EAAA08C,IAAA,GACA18C,EAAA48C,IAAA,IAMA58C,EAAA68C,KAAA1+C,EAAA,EAAAzf,KAAA+I,IAAA80D,EAAAO,IAAA98C,EAAA08C,IAAA,GAAAh+D,KAAA+I,IAAA80D,EAAAO,IAAA98C,EAAA08C,KACA18C,EAAA+8C,KAAA5+C,EAAA,EAAAzf,KAAA+I,IAAA80D,EAAAS,IAAAh9C,EAAA48C,IAAA,GAAAl+D,KAAA+I,IAAA80D,EAAAS,IAAAh9C,EAAA48C,KACA58C,EAGA,SAAAi9C,EAAA9B,EAAA+B,EAAAC,GACA,IAAAC,EAAA,GAAAD,EAAAT,IACAW,EAAA,GAAAF,EAAAP,IACAU,EAAA,IAAAJ,EAAAK,SACAC,EAAA,GAAAL,EAAAT,KAAAY,EAAA,GAAA,GACAG,EAAA,GAAAN,EAAAP,KAAAU,EAAA,GAAA,GACAI,EAAAR,EAAAS,KAAAT,EAAAU,KAAAl/D,KAAAyoB,KAAA+1C,EAAAS,KAAAP,GAAA1+D,KAAA+oB,MAAAy1C,EAAAU,KAAAR,GAAA,EACAS,EAAAX,EAAAY,KAAAZ,EAAAa,KAAAr/D,KAAAyoB,KAAA+1C,EAAAY,KAAAT,GAAA3+D,KAAA+oB,MAAAy1C,EAAAa,KAAAV,GAAA,EACAW,EAAAN,EAAAG,EACAX,EAAAe,oBACAb,cAAAA,EACAC,eAAAA,EACAK,iBAAAA,EACAG,iBAAAA,EACAG,aAAAA,EACAR,uBAAAA,EACAC,wBAAAA,GAIA,SAAAS,EAAA/C,EAAAgD,EAAAhB,GACA,IAWA3lE,EAAAm7B,EAAAyrC,EAAAC,EAXAxB,EAAAM,EAAAN,KACAE,EAAAI,EAAAJ,KACAuB,EAAA,GAAAzB,EACA0B,EAAA,GAAAxB,EACAyB,EAAAL,EAAAM,MAAA5B,EACA6B,EAAAP,EAAAQ,MAAA5B,EACA6B,EAAAT,EAAAU,KAAAP,EAAA,GAAAzB,EACAiC,EAAAX,EAAAY,KAAAR,EAAA,GAAAxB,EACAkB,EAAAE,EAAAjB,WAAAe,mBACAe,KACAC,KAGA,IAAAtsC,EAAA+rC,EAAA/rC,EAAAmsC,EAAAnsC,IACA,IAAAn7B,EAAAgnE,EAAAhnE,EAAAonE,EAAApnE,IAAA,EACA4mE,GACAc,IAAA1nE,EACA2nE,IAAAxsC,EACA8rC,KAAAH,EAAA9mE,EACAmnE,KAAAJ,EAAA5rC,EACAksC,KAAAP,GAAA9mE,EAAA,GACAunE,KAAAR,GAAA5rC,EAAA,KAEAysC,MAAA1gE,KAAAC,IAAAw/D,EAAAM,KAAAL,EAAAK,MACAL,EAAAiB,MAAA3gE,KAAAC,IAAAw/D,EAAAQ,KAAAP,EAAAO,MACAP,EAAAkB,MAAA5gE,KAAA+I,IAAA02D,EAAAU,KAAAT,EAAAS,MACAT,EAAAmB,MAAA7gE,KAAA+I,IAAA02D,EAAAY,KAAAX,EAAAW,MACA,IAAAS,EAAA9gE,KAAA+oB,OAAA22C,EAAAgB,MAAAjB,EAAAM,MAAAR,EAAAT,wBACAiC,EAAA/gE,KAAA+oB,OAAA22C,EAAAiB,MAAAlB,EAAAQ,MAAAV,EAAAR,yBAMA,GALAY,EAAAmB,EAAAC,EAAAxB,EAAAP,iBACAU,EAAAC,eAAAA,EACAD,EAAAsB,YAAAvB,EAAA59C,KACA69C,EAAAuB,OAAA,IAEAvB,EAAAkB,OAAAlB,EAAAgB,OAAAhB,EAAAmB,OAAAnB,EAAAiB,OAAA,CAIAL,EAAAhkE,KAAAojE,GACA,IAAAwB,EAAAX,EAAAZ,QAEAl3D,IAAAy4D,GACApoE,EAAAooE,EAAAC,OACAD,EAAAC,OAAAroE,EACAA,EAAAooE,EAAAE,SACAF,EAAAE,OAAAtoE,GAGAm7B,EAAAitC,EAAAG,OACAH,EAAAC,OAAAltC,EACAA,EAAAitC,EAAAI,SACAJ,EAAAI,OAAArtC,IAGAssC,EAAAZ,GAAAuB,GACAC,OAAAroE,EACAuoE,OAAAptC,EACAmtC,OAAAtoE,EACAwoE,OAAArtC,GAIAyrC,EAAAwB,SAAAA,GAIAzB,EAAA8B,qBACA3B,eAAAzB,EACA0B,gBAAAxB,EACAmD,iBAAAtB,EAAAJ,EAAA,EACA2B,iBAAArB,EAAAJ,EAAA,GAEAP,EAAAa,WAAAA,EACAb,EAAAc,UAAAA,EAGA,SAAAmB,EAAAlD,EAAAmB,EAAAgC,GAIA,IAHA,IAAAC,KACAC,EAAArD,EAAAqD,SAEA/oE,EAAA,EAAAkK,EAAA6+D,EAAAjpE,OAAAE,EAAAkK,EAAAlK,IAIA,IAHA,IAAA2mE,EAAAoC,EAAA/oE,GACAwnE,EAAAb,EAAAa,WAEArsC,EAAA,EAAAiL,EAAAohC,EAAA1nE,OAAAq7B,EAAAiL,EAAAjL,IAAA,CACA,IAAAyrC,EAAAY,EAAArsC,GAEAyrC,EAAAC,iBAAAA,GAIAiC,EAAAtlE,KAAAojE,GAIA,OACAiC,YAAAA,EACArB,WAAAsB,GAqRA,SAAAE,EAAAC,EAAAC,EAAAC,EAAAC,EAAA1D,GACA,IAAA2D,EAAAJ,EAAAG,EAAAE,SACAC,EAAAL,EAAAE,EAAAI,UAEA,GAAAH,EAAAF,EAAA/lB,OAAA,GAAAmmB,EAAAJ,EAAA9lB,QAAA,EACA,OAAA,KAGA,IAAAomB,EAAAF,EAAAJ,EAAA/lB,MAAAsiB,EAAAe,mBAAAP,iBACA,OAAAmD,EAAAF,EAAA9lB,OAAAomB,EAGA,SAAAC,EAAA9F,GAQA,IAPA,IAAArE,EAAAqE,EAAAlL,WAAA54D,OACAwpE,EAAAv1D,OAAA41D,UACAH,EAAAz1D,OAAA41D,UACAC,EAAA,EACAC,EAAA,EACAC,EAAA,IAAA9/D,MAAAu1D,GAEA53C,EAAA,EAAAA,EAAA43C,EAAA53C,IAAA,CAUA,IATA,IAAAkN,EAAA+uC,EAAAlL,WAAA/wC,GACAoiD,EAAAl1C,EAAAmwC,sBAAA+E,yBACAC,EAAA,IAAAhgE,MAAA+/D,EAAA,GACAE,EAAAl2D,OAAA41D,UACAO,EAAAn2D,OAAA41D,UACAQ,EAAA,EACAC,EAAA,EACAC,EAAA,EAEA1jD,EAAAojD,EAAApjD,GAAA,IAAAA,EAAA,CACA,IAAA++C,EAAA7wC,EAAAy1C,YAAA3jD,GACA4jD,EAAAF,EAAA3E,EAAAe,mBAAAb,cACA4E,EAAAH,EAAA3E,EAAAe,mBAAAZ,eACAoE,EAAA/iE,KAAA+I,IAAAg6D,EAAAM,GACAL,EAAAhjE,KAAA+I,IAAAi6D,EAAAM,GACAL,EAAAjjE,KAAAC,IAAAgjE,EAAAzE,EAAAe,mBAAAP,kBACAkE,EAAAljE,KAAAC,IAAAijE,EAAA1E,EAAAe,mBAAAJ,kBACA2D,EAAArjD,IACAy8B,MAAAmnB,EACAlnB,OAAAmnB,GAEAH,IAAA,EAGAf,EAAApiE,KAAA+I,IAAAq5D,EAAAW,GACAT,EAAAtiE,KAAA+I,IAAAu5D,EAAAU,GACAN,EAAA1iE,KAAAC,IAAAyiE,EAAAO,GACAN,EAAA3iE,KAAAC,IAAA0iE,EAAAO,GACAN,EAAAniD,IACA2iD,YAAAN,EACAV,SAAAW,EACAT,UAAAU,EACAN,WAAAO,EACAN,WAAAO,GAIA,OACA1R,WAAAoR,EACAR,SAAAA,EACAE,UAAAA,EACAI,WAAAA,EACAC,WAAAA,GAIA,SAAAY,EAAA9G,GAMA,IALA,IAAAZ,EAAAY,EAAAE,IACA6G,EAAA/G,EAAAgH,YAAA/3D,MACAgxD,EAAAD,EAAAhC,MAAA+I,GACAnL,EAAAwD,EAAAyB,KAEA78C,EAAA,EAAAA,EAAA43C,EAAA53C,IAAA,CAMA,IALA,IAAAkN,EAAA+uC,EAAAlL,WAAA/wC,GACAoiD,EAAAl1C,EAAAmwC,sBAAA+E,yBACAO,KACAvB,KAEApiD,EAAA,EAAAA,GAAAojD,EAAApjD,IAAA,CACA,IAUAggD,EAVAiE,EAAA9F,EAAAnB,EAAA9uC,EAAAlO,GACA++C,KACA2E,EAAA,GAAAN,EAAApjD,EAUA,GATA++C,EAAAU,KAAAl/D,KAAAyoB,KAAAkF,EAAA6vC,KAAA2F,GACA3E,EAAAa,KAAAr/D,KAAAyoB,KAAAkF,EAAA8vC,KAAA0F,GACA3E,EAAAS,KAAAj/D,KAAAyoB,KAAAkF,EAAA+vC,KAAAyF,GACA3E,EAAAY,KAAAp/D,KAAAyoB,KAAAkF,EAAAgwC,KAAAwF,GACA3E,EAAAK,SAAAp/C,EACA8+C,EAAA9B,EAAA+B,EAAAkF,GACAN,EAAA9mE,KAAAkiE,GAGA,IAAA/+C,GACAggD,MACA59C,KAAA,KACA49C,EAAAM,KAAA//D,KAAAyoB,KAAAkF,EAAA6vC,KAAA2F,GACA1D,EAAAQ,KAAAjgE,KAAAyoB,KAAAkF,EAAA8vC,KAAA0F,GACA1D,EAAAU,KAAAngE,KAAAyoB,KAAAkF,EAAA+vC,KAAAyF,GACA1D,EAAAY,KAAArgE,KAAAyoB,KAAAkF,EAAAgwC,KAAAwF,GACA1D,EAAAjB,WAAAA,EACAgB,EAAA/C,EAAAgD,EAAAiE,GACA7B,EAAAvlE,KAAAmjE,GACAjB,EAAAqD,UAAApC,OACA,CACA,IAAAkE,EAAA,GAAAd,EAAApjD,EAAA,EACAmkD,MACAnE,MACA59C,KAAA,KACA49C,EAAAM,KAAA//D,KAAAyoB,KAAAkF,EAAA6vC,KAAAmG,EAAA,IACAlE,EAAAQ,KAAAjgE,KAAAyoB,KAAAkF,EAAA8vC,KAAAkG,GACAlE,EAAAU,KAAAngE,KAAAyoB,KAAAkF,EAAA+vC,KAAAiG,EAAA,IACAlE,EAAAY,KAAArgE,KAAAyoB,KAAAkF,EAAAgwC,KAAAgG,GACAlE,EAAAjB,WAAAA,EACAgB,EAAA/C,EAAAgD,EAAAiE,GACA7B,EAAAvlE,KAAAmjE,GACAmE,EAAAtnE,KAAAmjE,IACAA,MACA59C,KAAA,KACA49C,EAAAM,KAAA//D,KAAAyoB,KAAAkF,EAAA6vC,KAAAmG,GACAlE,EAAAQ,KAAAjgE,KAAAyoB,KAAAkF,EAAA8vC,KAAAkG,EAAA,IACAlE,EAAAU,KAAAngE,KAAAyoB,KAAAkF,EAAA+vC,KAAAiG,GACAlE,EAAAY,KAAArgE,KAAAyoB,KAAAkF,EAAAgwC,KAAAgG,EAAA,IACAlE,EAAAjB,WAAAA,EACAgB,EAAA/C,EAAAgD,EAAAiE,GACA7B,EAAAvlE,KAAAmjE,GACAmE,EAAAtnE,KAAAmjE,IACAA,MACA59C,KAAA,KACA49C,EAAAM,KAAA//D,KAAAyoB,KAAAkF,EAAA6vC,KAAAmG,EAAA,IACAlE,EAAAQ,KAAAjgE,KAAAyoB,KAAAkF,EAAA8vC,KAAAkG,EAAA,IACAlE,EAAAU,KAAAngE,KAAAyoB,KAAAkF,EAAA+vC,KAAAiG,EAAA,IACAlE,EAAAY,KAAArgE,KAAAyoB,KAAAkF,EAAAgwC,KAAAgG,EAAA,IACAlE,EAAAjB,WAAAA,EACAgB,EAAA/C,EAAAgD,EAAAiE,GACA7B,EAAAvlE,KAAAmjE,GACAmE,EAAAtnE,KAAAmjE,GACAjB,EAAAqD,SAAA+B,GAIAj2C,EAAAy1C,YAAAA,EACAz1C,EAAAk0C,SAAAA,EAGA,IAAAgC,EAAAnH,EAAAoH,6BAAAD,iBAEA,OAAAA,GACA,KAAA,EACAnH,EAAAqH,gBAAA,IAraA,SAAAtH,GAQA,IAPA,IAAAZ,EAAAY,EAAAE,IACA6G,EAAA/G,EAAAgH,YAAA/3D,MACAgxD,EAAAD,EAAAhC,MAAA+I,GACAQ,EAAAtH,EAAAoH,6BAAAE,YACA3L,EAAAwD,EAAAyB,KACA2G,EAAA,EAEAptB,EAAA,EAAAA,EAAAwhB,EAAAxhB,IACAotB,EAAAjkE,KAAAC,IAAAgkE,EAAAvH,EAAAlL,WAAA3a,GAAAinB,sBAAA+E,0BAGA,IAAAp6B,EAAA,EACAhpB,EAAA,EACA3mB,EAAA,EACA86C,EAAA,EAEAl5C,KAAAwpE,WAAA,WACA,KAAAz7B,EAAAu7B,EAAAv7B,IAAA,CACA,KAAAhpB,GAAAwkD,EAAAxkD,IAAA,CACA,KAAA3mB,EAAAu/D,EAAAv/D,IAAA,CACA,IAAA60B,EAAA+uC,EAAAlL,WAAA14D,GAEA,KAAA2mB,EAAAkO,EAAAmwC,sBAAA+E,0BAAA,CAOA,IAHA,IAAArE,EAAA7wC,EAAAy1C,YAAA3jD,GACA6/C,EAAAd,EAAAe,mBAAAD,aAEA1rB,EAAA0rB,GAAA,CACA,IAAA6E,EAAAzC,EAAAlD,EAAA5qB,EAAAnL,GAEA,OADAmL,IACAuwB,EAGAvwB,EAAA,GAGA96C,EAAA,EAGA2mB,EAAA,EAGA,MAAA,IAAA47C,EAAA,mBAwXA,CAAAoB,GACA,MAEA,KAAA,EACAC,EAAAqH,gBAAA,IAxXA,SAAAtH,GAQA,IAPA,IAAAZ,EAAAY,EAAAE,IACA6G,EAAA/G,EAAAgH,YAAA/3D,MACAgxD,EAAAD,EAAAhC,MAAA+I,GACAQ,EAAAtH,EAAAoH,6BAAAE,YACA3L,EAAAwD,EAAAyB,KACA2G,EAAA,EAEAptB,EAAA,EAAAA,EAAAwhB,EAAAxhB,IACAotB,EAAAjkE,KAAAC,IAAAgkE,EAAAvH,EAAAlL,WAAA3a,GAAAinB,sBAAA+E,0BAGA,IAAApjD,EAAA,EACAgpB,EAAA,EACA3vC,EAAA,EACA86C,EAAA,EAEAl5C,KAAAwpE,WAAA,WACA,KAAAzkD,GAAAwkD,EAAAxkD,IAAA,CACA,KAAAgpB,EAAAu7B,EAAAv7B,IAAA,CACA,KAAA3vC,EAAAu/D,EAAAv/D,IAAA,CACA,IAAA60B,EAAA+uC,EAAAlL,WAAA14D,GAEA,KAAA2mB,EAAAkO,EAAAmwC,sBAAA+E,0BAAA,CAOA,IAHA,IAAArE,EAAA7wC,EAAAy1C,YAAA3jD,GACA6/C,EAAAd,EAAAe,mBAAAD,aAEA1rB,EAAA0rB,GAAA,CACA,IAAA6E,EAAAzC,EAAAlD,EAAA5qB,EAAAnL,GAEA,OADAmL,IACAuwB,EAGAvwB,EAAA,GAGA96C,EAAA,EAGA2vC,EAAA,EAGA,MAAA,IAAA4yB,EAAA,mBA2UA,CAAAoB,GACA,MAEA,KAAA,EACAC,EAAAqH,gBAAA,IA3UA,SAAAtH,GACA,IAKAh0B,EAAAhpB,EAAAgB,EAAAZ,EALAg8C,EAAAY,EAAAE,IACA6G,EAAA/G,EAAAgH,YAAA/3D,MACAgxD,EAAAD,EAAAhC,MAAA+I,GACAQ,EAAAtH,EAAAoH,6BAAAE,YACA3L,EAAAwD,EAAAyB,KAEA2G,EAAA,EAEA,IAAAxjD,EAAA,EAAAA,EAAA43C,EAAA53C,IAAA,CACA,MAAAkN,EAAA+uC,EAAAlL,WAAA/wC,GACAwjD,EAAAjkE,KAAAC,IAAAgkE,EAAAt2C,EAAAmwC,sBAAA+E,0BAGA,IAAAuB,EAAA,IAAA5yB,WAAAyyB,EAAA,GAEA,IAAAxkD,EAAA,EAAAA,GAAAwkD,IAAAxkD,EAAA,CACA,IAAA4kD,EAAA,EAEA,IAAA5jD,EAAA,EAAAA,EAAA43C,IAAA53C,EAAA,CACA,IAAA2iD,EAAA1G,EAAAlL,WAAA/wC,GAAA2iD,YAEA3jD,EAAA2jD,EAAAxqE,SACAyrE,EAAArkE,KAAAC,IAAAokE,EAAAjB,EAAA3jD,GAAA8/C,mBAAAD,eAIA8E,EAAA3kD,GAAA4kD,EAGA57B,EAAA,EACAhpB,EAAA,EACAgB,EAAA,EACAZ,EAAA,EAEAnlB,KAAAwpE,WAAA,WACA,KAAAzkD,GAAAwkD,EAAAxkD,IAAA,CACA,KAAAI,EAAAukD,EAAA3kD,GAAAI,IAAA,CACA,KAAAY,EAAA43C,EAAA53C,IAAA,CACA,MAAAkN,EAAA+uC,EAAAlL,WAAA/wC,GAEA,KAAAhB,EAAAkO,EAAAmwC,sBAAA+E,0BAAA,CAIA,IAAArE,EAAA7wC,EAAAy1C,YAAA3jD,GACA6/C,EAAAd,EAAAe,mBAAAD,aAEA,KAAAz/C,GAAAy/C,GAAA,CAIA,KAAA72B,EAAAu7B,GAAA,CACA,IAAAG,EAAAzC,EAAAlD,EAAA3+C,EAAA4oB,GAEA,OADAA,IACA07B,EAGA17B,EAAA,IAGAhoB,EAAA,EAGAZ,EAAA,EAGA,MAAA,IAAAw7C,EAAA,mBAwQA,CAAAoB,GACA,MAEA,KAAA,EACAC,EAAAqH,gBAAA,IAxQA,SAAAtH,GACA,IAAAZ,EAAAY,EAAAE,IACA6G,EAAA/G,EAAAgH,YAAA/3D,MACAgxD,EAAAD,EAAAhC,MAAA+I,GACAQ,EAAAtH,EAAAoH,6BAAAE,YACA3L,EAAAwD,EAAAyB,KACAW,EAAAuE,EAAA9F,GACA4H,EAAArG,EACAx1B,EAAA,EACAhpB,EAAA,EACAgB,EAAA,EACA8jD,EAAA,EACAC,EAAA,EAEA9pE,KAAAwpE,WAAA,WACA,KAAAM,EAAAF,EAAA3B,WAAA6B,IAAA,CACA,KAAAD,EAAAD,EAAA5B,WAAA6B,IAAA,CACA,KAAA9jD,EAAA43C,EAAA53C,IAAA,CAIA,IAHA,IAAAkN,EAAA+uC,EAAAlL,WAAA/wC,GACAoiD,EAAAl1C,EAAAmwC,sBAAA+E,yBAEApjD,GAAAojD,EAAApjD,IAAA,CACA,IAAA++C,EAAA7wC,EAAAy1C,YAAA3jD,GACAwiD,EAAAhE,EAAAzM,WAAA/wC,GAAA2iD,YAAA3jD,GACAm0B,EAAAkuB,EAAAyC,EAAAC,EAAAvC,EAAAqC,EAAA9F,GAEA,GAAA,OAAA5qB,EAAA,CAIA,KAAAnL,EAAAu7B,GAAA,CACA,IAAAG,EAAAzC,EAAAlD,EAAA5qB,EAAAnL,GAEA,OADAA,IACA07B,EAGA17B,EAAA,GAGAhpB,EAAA,EAGAgB,EAAA,EAGA8jD,EAAA,EAGA,MAAA,IAAAlJ,EAAA,mBAwNA,CAAAoB,GACA,MAEA,KAAA,EACAC,EAAAqH,gBAAA,IAxNA,SAAAtH,GACA,IAAAZ,EAAAY,EAAAE,IACA6G,EAAA/G,EAAAgH,YAAA/3D,MACAgxD,EAAAD,EAAAhC,MAAA+I,GACAQ,EAAAtH,EAAAoH,6BAAAE,YACA3L,EAAAwD,EAAAyB,KACAW,EAAAuE,EAAA9F,GACAj0B,EAAA,EACAhpB,EAAA,EACAgB,EAAA,EACA8jD,EAAA,EACAC,EAAA,EAEA9pE,KAAAwpE,WAAA,WACA,KAAAzjD,EAAA43C,IAAA53C,EAAA,CAKA,IAJA,IAAAkN,EAAA+uC,EAAAlL,WAAA/wC,GACA6jD,EAAArG,EAAAzM,WAAA/wC,GACAoiD,EAAAl1C,EAAAmwC,sBAAA+E,yBAEA2B,EAAAF,EAAA3B,WAAA6B,IAAA,CACA,KAAAD,EAAAD,EAAA5B,WAAA6B,IAAA,CACA,KAAA9kD,GAAAojD,EAAApjD,IAAA,CACA,IAAA++C,EAAA7wC,EAAAy1C,YAAA3jD,GACAwiD,EAAAqC,EAAAlB,YAAA3jD,GACAm0B,EAAAkuB,EAAAyC,EAAAC,EAAAvC,EAAAqC,EAAA9F,GAEA,GAAA,OAAA5qB,EAAA,CAIA,KAAAnL,EAAAu7B,GAAA,CACA,IAAAG,EAAAzC,EAAAlD,EAAA5qB,EAAAnL,GAEA,OADAA,IACA07B,EAGA17B,EAAA,GAGAhpB,EAAA,EAGA8kD,EAAA,EAGAC,EAAA,EAGA,MAAA,IAAAnJ,EAAA,mBAwKA,CAAAoB,GACA,MAEA,QACA,MAAA,IAAApB,mCAAAwI,MAIA,SAAAY,EAAAhI,EAAAnhE,EAAAwyB,EAAAsY,GACA,IACAv8B,EADAqf,EAAA,EAEAw7C,EAAA,EACAC,GAAA,EAEA,SAAAhuB,EAAAxb,GACA,KAAAupC,EAAAvpC,GAAA,CACA,IAAA14B,EAAAnH,EAAAwyB,EAAA5E,GACAA,IAEAy7C,GACA96D,EAAAA,GAAA,EAAApH,EACAiiE,GAAA,EACAC,GAAA,IAEA96D,EAAAA,GAAA,EAAApH,EACAiiE,GAAA,GAGA,MAAAjiE,IACAkiE,GAAA,GAKA,OAAA96D,KADA66D,GAAAvpC,IACA,GAAAA,GAAA,EAGA,SAAAypC,EAAAjrE,GACA,OAAA,MAAA2B,EAAAwyB,EAAA5E,EAAA,IAAA5tB,EAAAwyB,EAAA5E,KAAAvvB,GACAkrE,EAAA,IACA,GACA,MAAAvpE,EAAAwyB,EAAA5E,IAAA5tB,EAAAwyB,EAAA5E,EAAA,KAAAvvB,IACAkrE,EAAA,IACA,GAMA,SAAAA,EAAA1pC,GACAjS,GAAAiS,EAGA,SAAA2pC,IACAJ,EAAA,EAEAC,IACAz7C,IACAy7C,GAAA,GAIA,SAAAI,IACA,GAAA,IAAApuB,EAAA,GACA,OAAA,EAGA,GAAA,IAAAA,EAAA,GACA,OAAA,EAGA,IAAAh9C,EAAAg9C,EAAA,GAEA,OAAAh9C,EAAA,EACAA,EAAA,GAGAA,EAAAg9C,EAAA,IAEA,GACAh9C,EAAA,GAGAA,EAAAg9C,EAAA,IACA,GASA,IANA,IAAA6sB,EAAA/G,EAAAgH,YAAA/3D,MACAgxD,EAAAD,EAAAhC,MAAA+I,GACAwB,EAAAvI,EAAAwI,IAAAD,cACAE,EAAAzI,EAAAwI,IAAAC,cACAnB,EAAArH,EAAAqH,gBAEA76C,EAAAkd,GAAA,CACA0+B,IAEAE,GAAAJ,EAAA,MACAC,EAAA,GAGA,IAAAV,EAAAJ,EAAAG,aAEA,GAAAvtB,EAAA,GAAA,CAQA,IAJA,IAEA+oB,EAFAiC,EAAAwC,EAAAxC,YACAnnC,KAGA1hC,EAAA,EAAAkK,EAAAmhE,EAAA7D,WAAA1nE,OAAAE,EAAAkK,EAAAlK,IAAA,CAEA,IAAAooE,GADAxB,EAAAyE,EAAA7D,WAAAxnE,IACAooE,SACAiE,EAAAzF,EAAAc,IAAAU,EAAAC,OACAiE,EAAA1F,EAAAe,IAAAS,EAAAG,OACAgE,GAAA,EACAC,GAAA,EAGA,QAAA78D,IAAAi3D,EAAA6F,SACAF,IAAA1uB,EAAA,OACA,CAEA,IAAA6uB,EAAAC,EAEA,QAAAh9D,KAHAy4D,EAAAxB,EAAAwB,UAGAsE,cACAA,EAAAtE,EAAAsE,kBACA,CACA,IAAAtpB,EAAAglB,EAAAE,OAAAF,EAAAC,OAAA,EACAhlB,EAAA+kB,EAAAI,OAAAJ,EAAAG,OAAA,EACAmE,EAAA,IAAAE,EAAAxpB,EAAAC,EAAAwlB,GACA8D,EAAA,IAAAE,EAAAzpB,EAAAC,GACA+kB,EAAAsE,cAAAA,EACAtE,EAAAuE,kBAAAA,EAGA,GAAAD,EAAA5wC,MAAAuwC,EAAAC,EAAAzD,GACA,OAAA,CACA,IAAAhrB,EAAA,GAQA,CACA6uB,EAAAI,eAAAjE,GACA,MAPA,IAFA6D,EAAAK,YAEA,CACAnG,EAAA6F,UAAA,EACAF,EAAAC,GAAA,EACA,QAUA,GAAAD,EAAA,CAIA,GAAAC,EAAA,CAIA,KAHAG,EAAAvE,EAAAuE,mBACA7wC,MAAAuwC,EAAAC,KAGA,GAAAzuB,EAAA,IAGA,IAFA8uB,EAAAI,YAGA,WAGAJ,EAAAG,iBAIAlG,EAAAoG,cAAAL,EAAA9rE,MAKA,IAFA,IAAAosE,EAAAhB,IAEApuB,EAAA,IACA+oB,EAAAuB,SAGA,IAAA+E,GAAA,EAAAxrE,EAAAgzB,MAAAu4C,GACA7zB,GAAA6zB,EAAA,GAAAC,EAAAA,EAAA,EAAAA,GAAAtG,EAAAuB,OACAgF,EAAAtvB,EAAAzE,GACA1X,EAAAl+B,MACAojE,UAAAA,EACAqG,aAAAA,EACA3/B,WAAA6/B,KAUA,IANAnB,IAEAI,GACAN,EAAA,KAGApqC,EAAA5hC,OAAA,GAAA,CACA,IAAAstE,EAAA1rC,EAAAG,aAGAlyB,KAFAi3D,EAAAwG,EAAAxG,WAEApkE,OACAokE,EAAApkE,SAGAokE,EAAApkE,KAAAgB,MACAhB,KAAAA,EACAiJ,MAAAupB,EAAA5E,EACA3B,IAAAuG,EAAA5E,EAAAg9C,EAAA9/B,WACA2/B,aAAAG,EAAAH,eAEA78C,GAAAg9C,EAAA9/B,aAIA,OAAAld,EAGA,SAAAi9C,EAAAC,EAAAC,EAAAC,EAAA7G,EAAA8G,EAAAC,EAAAC,EAAAC,GAQA,IAPA,IAAA5K,EAAA2D,EAAAM,KACA5D,EAAAsD,EAAAQ,KACA/jB,EAAAujB,EAAAU,KAAAV,EAAAM,KACAO,EAAAb,EAAAa,WACAqG,EAAA,MAAAlH,EAAA59C,KAAA1U,OAAA,GAAA,EAAA,EACAy5D,EAAA,MAAAnH,EAAA59C,KAAA1U,OAAA,GAAAk5D,EAAA,EAEAvtE,EAAA,EAAAkK,EAAAs9D,EAAA1nE,OAAAE,EAAAkK,IAAAlK,EAAA,CACA,IAAA4mE,EAAAY,EAAAxnE,GACA+tE,EAAAnH,EAAAkB,MAAAlB,EAAAgB,MACAoG,EAAApH,EAAAmB,MAAAnB,EAAAiB,MAEA,GAAA,IAAAkG,GAAA,IAAAC,QAIAr+D,IAAAi3D,EAAApkE,KAAA,CAIA,IAAAyrE,EAAAC,EACAD,EAAA,IAAAE,EAAAJ,EAAAC,EAAApH,EAAAsB,YAAAtB,EAAAoG,cAAAU,GACAQ,EAAA,EACA,IAGA/yC,EAAAiL,EAAAgoC,EAHA5rE,EAAAokE,EAAApkE,KACA+2B,EAAA,EACA0zC,EAAA,EAGA,IAAA9xC,EAAA,EAAAiL,EAAA5jC,EAAA1C,OAAAq7B,EAAAiL,EAAAjL,IACAizC,EAAA5rE,EAAA24B,GACA5B,GAAA60C,EAAA3/C,IAAA2/C,EAAA3iE,MACAwhE,GAAAmB,EAAAnB,aAGA,IAAAoB,EAAA,IAAA5rE,WAAA82B,GACAnJ,EAAA,EAEA,IAAA+K,EAAA,EAAAiL,EAAA5jC,EAAA1C,OAAAq7B,EAAAiL,EAAAjL,IAAA,CAEA,IAAAjrB,GADAk+D,EAAA5rE,EAAA24B,IACA34B,KAAA2N,SAAAi+D,EAAA3iE,MAAA2iE,EAAA3/C,KACA4/C,EAAA7+D,IAAAU,EAAAkgB,GACAA,GAAAlgB,EAAApQ,OAGA,IAAAkiD,EAAA,IAAAP,EAAAe,kBAAA6rB,EAAA,EAAA90C,GAGA,IAFA00C,EAAAK,WAAAtsB,GAEA7mB,EAAA,EAAAA,EAAA8xC,EAAA9xC,IAAA,CACA,OAAA+yC,GACA,KAAA,EACAD,EAAAM,iCACA,MAEA,KAAA,EACAN,EAAAO,6BACA,MAEA,KAAA,EACAP,EAAAQ,iBAEAb,GACAK,EAAAS,0BAMAR,GAAAA,EAAA,GAAA,EAGA,IAKApzB,EAAAp0B,EAAAioD,EALA35C,EAAA4xC,EAAAgB,MAAA5E,GAAA4D,EAAAiB,MAAAxE,GAAAjgB,EACA3N,EAAAw4B,EAAAW,gBACAC,EAAAZ,EAAAa,qBACAC,EAAAd,EAAAc,YACAC,EAAArB,EAAA,EAAA,GAEAv9C,EAAA,EACA,IAAA6+C,EAAA,OAAAtI,EAAA59C,KAEA,IAAAoS,EAAA,EAAAA,EAAA6yC,EAAA7yC,IAAA,CACA,IAAA4kB,EAAA/qB,EAAAouB,EAAA,EACA8rB,EAAA,EAAAnvB,GAAAwtB,EAAAnqB,GAAAyqB,EAAAC,EAEA,IAAAhzB,EAAA,EAAAA,EAAAizB,EAAAjzB,IAAA,CAGA,GAAA,KAFAp0B,EAAAmoD,EAAAz+C,IAEA,CACA1J,GAAAA,EAAAsoD,GAAAvB,EAEA,IAAAh4B,EAAArlB,KACA1J,GAAAA,GAGAioD,EAAAI,EAAA3+C,GACA,IAAAhhB,EAAA6/D,EAAAC,GAAAl6C,GAAA,GAAAA,EAGAs4C,EAAAl+D,GADAu+D,GAAAgB,GAAAjB,EACAhnD,EAEAA,GAAA,GAAAgnD,EAAAiB,GAIA35C,IACA5E,IAGA4E,GAAAouB,EAAA2qB,KAKA,SAAAoB,EAAAxL,EAAAC,EAAAj8C,GAeA,IAdA,IAAAkN,EAAA+uC,EAAAlL,WAAA/wC,GACAq9C,EAAAnwC,EAAAmwC,sBACAoK,EAAAv6C,EAAAu6C,uBACArF,EAAA/E,EAAA+E,yBACAsF,EAAAD,EAAAE,OACAC,EAAAH,EAAAG,gBACAC,EAAAJ,EAAAI,UACA5B,EAAA5I,EAAA4I,uBACAnU,EAAAkK,EAAAjL,WAAA/wC,GAAA8xC,UACAkU,EAAA3I,EAAAyK,yBACAlwD,EAAAouD,EAAA,IAAA+B,EAAA,IAAAC,EACAC,KACAjmE,EAAA,EAEA3J,EAAA,EAAAA,GAAA+pE,EAAA/pE,IAAA,CAMA,IALA,IAAA0lE,EAAA7wC,EAAAy1C,YAAAtqE,GACAojD,EAAAsiB,EAAAS,KAAAT,EAAAU,KACA/iB,EAAAqiB,EAAAY,KAAAZ,EAAAa,KACA+G,EAAA,IAAAuC,aAAAzsB,EAAAC,GAEAloB,EAAA,EAAAiL,EAAAs/B,EAAAqD,SAAAjpE,OAAAq7B,EAAAiL,EAAAjL,IAAA,CACA,IAAA20C,EAAAC,EAEAR,GAIAO,EAAAT,EAAA1lE,GAAAmmE,GACAC,EAAAV,EAAA1lE,GAAAomE,QACApmE,MALAmmE,EAAAT,EAAA,GAAAS,GACAC,EAAAV,EAAA,GAAAU,SAAA/vE,EAAA,EAAA,EAAAA,EAAA,IAOA,IAAA2mE,EAAAjB,EAAAqD,SAAA5tC,GACA60C,EAAAxN,EAAAmE,EAAA59C,MACA0kD,EAAAE,EAAA,EAAA,IAAAlU,EAAAuW,EAAAD,IAAA,EAAAD,EAAA,MACApC,EAAA8B,EAAAO,EAAA,EACA1C,EAAAC,EAAAlqB,EAAAC,EAAAsjB,EAAA8G,EAAAC,EAAAC,EAAAC,GAGAgC,EAAApsE,MACA4/C,MAAAA,EACAC,OAAAA,EACA5hB,MAAA6rC,IAIA,IAAA9kD,EAAAjJ,EAAA0wD,UAAAL,EAAA/6C,EAAA6vC,KAAA7vC,EAAA8vC,MACA,OACAroB,KAAAznB,EAAA6vC,KACAzC,IAAAptC,EAAA8vC,KACAvhB,MAAA56B,EAAA46B,MACAC,OAAA76B,EAAA66B,OACA5hB,MAAAjZ,EAAAiZ,OA6FA,SAAAyuC,EAAAvM,EAAA+G,GAKA,IAJA,IAAA3H,EAAAY,EAAAE,IACAtE,EAAAwD,EAAAyB,KACAZ,EAAAD,EAAAhC,MAAA+I,GAEA/iD,EAAA,EAAAA,EAAA43C,EAAA53C,IAAA,CACA,IAAAkN,EAAA+uC,EAAAlL,WAAA/wC,GACAwoD,OAAAxgE,IAAAg0D,EAAAgH,YAAAyF,IAAAzoD,GAAAg8C,EAAAgH,YAAAyF,IAAAzoD,GAAAg8C,EAAAgH,YAAA0F,IACAx7C,EAAAu6C,uBAAAe,EACA,IAAApL,OAAAp1D,IAAAg0D,EAAAgH,YAAA2F,IAAA3oD,GAAAg8C,EAAAgH,YAAA2F,IAAA3oD,GAAAg8C,EAAAgH,YAAAwB,IACAt3C,EAAAmwC,sBAAAD,EAGAnB,EAAAoH,6BAAArH,EAAAgH,YAAAwB,IAnhDA1K,EAAAz7C,WACAyV,MAAA,SAAAj5B,GACA,IAAA+tE,GAAA,EAAA7uE,EAAAuzB,YAAAzyB,EAAA,GAEA,GAAA,QAAA+tE,EAQA,IAHA,IAAAngD,EAAA,EACAtwB,EAAA0C,EAAA1C,OAEAswB,EAAAtwB,GAAA,CACA,IAAA0wE,EAAA,EACAC,GAAA,EAAA/uE,EAAAwzB,YAAA1yB,EAAA4tB,GACAsgD,GAAA,EAAAhvE,EAAAwzB,YAAA1yB,EAAA4tB,EAAA,GAaA,GAZAA,GAAAogD,EAEA,IAAAC,IACAA,EAAA,YAAA,EAAA/uE,EAAAwzB,YAAA1yB,EAAA4tB,IAAA,EAAA1uB,EAAAwzB,YAAA1yB,EAAA4tB,EAAA,GACAA,GAAA,EACAogD,GAAA,GAGA,IAAAC,IACAA,EAAA3wE,EAAAswB,EAAAogD,GAGAC,EAAAD,EACA,MAAA,IAAAjO,EAAA,0BAGA,IAAAj1B,EAAAmjC,EAAAD,EACAG,GAAA,EAEA,OAAAD,GACA,KAAA,WACAC,GAAA,EACA,MAEA,KAAA,WACA,IAAAC,EAAApuE,EAAA4tB,GAEA,GAAA,IAAAwgD,EAAA,CACA,IAAAC,GAAA,EAAAnvE,EAAAwzB,YAAA1yB,EAAA4tB,EAAA,GAEA,OAAAygD,GACA,KAAA,GACA,KAAA,GACA,KAAA,GACA,MAEA,SACA,EAAA1vE,EAAA2F,MAAA,sBAAA+pE,SAGA,IAAAD,IACA,EAAAzvE,EAAA+J,MAAA,6BAGA,MAEA,KAAA,WACAtJ,KAAAkvE,gBAAAtuE,EAAA4tB,EAAAA,EAAAkd,GACA,MAEA,KAAA,UACA,aAAA,EAAA5rC,EAAAwzB,YAAA1yB,EAAA4tB,KACA,EAAAjvB,EAAA2F,MAAA,yBAGA,MAEA,KAAA,WACA,KAAA,WACA,KAAA,WACA,KAAA,WACA,KAAA,WACA,MAEA,QACA,IAAAiqE,EAAAnhE,OAAAC,aAAA6gE,GAAA,GAAA,IAAAA,GAAA,GAAA,IAAAA,GAAA,EAAA,IAAA,IAAAA,IACA,EAAAvvE,EAAA2F,MAAA,2BAAA4pE,EAAA,KAAAK,EAAA,KAIAJ,IACAvgD,GAAAkd,QAlFA1rC,KAAAkvE,gBAAAtuE,EAAA,EAAAA,EAAA1C,SAsFAkxE,qBAAA,SAAAxoE,GAGA,IAFA,IAAAyoE,EAAAzoE,EAAAgoB,UAEAygD,GAAA,GAAA,CACA,IAAAC,EAAAD,EACAA,EAAAzoE,EAAAgoB,UACA,IAAA/iB,EAAAyjE,GAAA,EAAAD,EAEA,GAAA,QAAAxjE,EAAA,CACAjF,EAAA0zB,KAAA,GACA,IAAAknC,EAAA56D,EAAAmvC,aAAA,EACA8rB,EAAAj7D,EAAAmvC,aAAA,EACAsrB,EAAAz6D,EAAAmvC,aAAA,EACA2rB,EAAA96D,EAAAmvC,aAAA,EACAnvC,EAAA0zB,KAAA,IACA,IAAAsoC,EAAAh8D,EAAAiqC,YAKA,OAJA7wC,KAAAwhD,MAAAggB,EAAAH,EACArhE,KAAAyhD,OAAAogB,EAAAH,EACA1hE,KAAA29D,gBAAAiF,OACA5iE,KAAA+0D,iBAAA,IAKA,MAAA,IAAA4L,EAAA,uCAEAuO,gBAAA,SAAAtuE,EAAAiJ,EAAAgjB,GACA,IAAAk1C,KACAwN,GAAA,EAEA,IAGA,IAFA,IAAA/gD,EAAA3kB,EAEA2kB,EAAA,EAAA3B,GAAA,CACA,IAAAhhB,GAAA,EAAA/L,EAAAuzB,YAAAzyB,EAAA4tB,GACAA,GAAA,EACA,IACA+K,EACAi2C,EACA/B,EACAgC,EACA9B,EACA3L,EANA9jE,EAAA,EAQA,OAAA2N,GACA,KAAA,MACAk2D,EAAA2N,YAAA,EACA,MAEA,KAAA,MACA,MAEA,KAAA,MACAxxE,GAAA,EAAA4B,EAAAuzB,YAAAzyB,EAAA4tB,GACA,IAAA2yC,KACAA,EAAAK,MAAA,EAAA1hE,EAAAwzB,YAAA1yB,EAAA4tB,EAAA,GACA2yC,EAAAU,MAAA,EAAA/hE,EAAAwzB,YAAA1yB,EAAA4tB,EAAA,GACA2yC,EAAAE,OAAA,EAAAvhE,EAAAwzB,YAAA1yB,EAAA4tB,EAAA,IACA2yC,EAAAO,OAAA,EAAA5hE,EAAAwzB,YAAA1yB,EAAA4tB,EAAA,IACA2yC,EAAAiB,OAAA,EAAAtiE,EAAAwzB,YAAA1yB,EAAA4tB,EAAA,IACA2yC,EAAAoB,OAAA,EAAAziE,EAAAwzB,YAAA1yB,EAAA4tB,EAAA,IACA2yC,EAAAgB,QAAA,EAAAriE,EAAAwzB,YAAA1yB,EAAA4tB,EAAA,IACA2yC,EAAAmB,QAAA,EAAAxiE,EAAAwzB,YAAA1yB,EAAA4tB,EAAA,IACA,IAAAmvC,GAAA,EAAA79D,EAAAuzB,YAAAzyB,EAAA4tB,EAAA,IACA2yC,EAAAyB,KAAAjF,EACA,IAAA7G,KACAv9B,EAAA/K,EAAA,GAEA,IAAA,IAAApwB,EAAA,EAAAA,EAAAu/D,EAAAv/D,IAAA,CACA,IAAA60B,GACA4kC,UAAA,GAAA,IAAAj3D,EAAA24B,IACAo2C,YAAA,IAAA/uE,EAAA24B,IACA+nC,MAAA1gE,EAAA24B,EAAA,GACAooC,MAAA/gE,EAAA24B,EAAA,IAEAA,GAAA,EACA2nC,EAAAjuC,EAAAkuC,GACArK,EAAAl1D,KAAAqxB,GAGA8uC,EAAAE,IAAAd,EACAY,EAAAjL,WAAAA,EACAgL,EAAAC,EAAAjL,GACAiL,EAAAyM,OACAzM,EAAA2M,OACA,MAEA,KAAA,MACAxwE,GAAA,EAAA4B,EAAAuzB,YAAAzyB,EAAA4tB,GACA,IAAAohD,KAIA,OAHAr2C,EAAA/K,EAAA,EAGA,IAFAghD,EAAA5uE,EAAA24B,OAGA,KAAA,EACAk2C,EAAA,EACA9B,GAAA,EACA,MAEA,KAAA,EACA8B,EAAA,GACA9B,GAAA,EACA,MAEA,KAAA,EACA8B,EAAA,GACA9B,GAAA,EACA,MAEA,QACA,MAAA,IAAAptE,MAAA,sBAAAivE,GAQA,IALAI,EAAAC,eAAA,IAAAJ,EACAG,EAAAjC,gBAAAA,EACAiC,EAAAhC,UAAA4B,GAAA,EACA/B,KAEAl0C,EAAAr7B,EAAAswB,GAAA,CACA,IAAAshD,KAEA,IAAAL,GACAK,EAAA3B,QAAAvtE,EAAA24B,MAAA,EACAu2C,EAAA5B,GAAA,IAEA4B,EAAA3B,QAAAvtE,EAAA24B,IAAA,EACAu2C,EAAA5B,IAAA,EAAAttE,EAAA24B,KAAA,EAAA34B,EAAA24B,EAAA,GACAA,GAAA,GAGAk0C,EAAA7rE,KAAAkuE,GAGAF,EAAAlC,OAAAD,EAEA1L,EAAA2N,WACA3N,EAAA0M,IAAAmB,GAEA7N,EAAAgH,YAAA0F,IAAAmB,EACA7N,EAAAgH,YAAAyF,QAGA,MAEA,KAAA,MACAtwE,GAAA,EAAA4B,EAAAuzB,YAAAzyB,EAAA4tB,GACA,IAEAuhD,EAFAC,KAaA,OAZAz2C,EAAA/K,EAAA,EAGAuzC,EAAAE,IAAAW,KAAA,IACAmN,EAAAnvE,EAAA24B,MAEAw2C,GAAA,EAAAjwE,EAAAuzB,YAAAzyB,EAAA24B,GACAA,GAAA,GAKA,IAFAi2C,EAAA5uE,EAAA24B,OAGA,KAAA,EACAk2C,EAAA,EACA9B,GAAA,EACA,MAEA,KAAA,EACA8B,EAAA,GACA9B,GAAA,EACA,MAEA,KAAA,EACA8B,EAAA,GACA9B,GAAA,EACA,MAEA,QACA,MAAA,IAAAptE,MAAA,sBAAAivE,GAQA,IALAQ,EAAAH,eAAA,IAAAJ,EACAO,EAAArC,gBAAAA,EACAqC,EAAApC,UAAA4B,GAAA,EACA/B,KAEAl0C,EAAAr7B,EAAAswB,GACAshD,KAEA,IAAAL,GACAK,EAAA3B,QAAAvtE,EAAA24B,MAAA,EACAu2C,EAAA5B,GAAA,IAEA4B,EAAA3B,QAAAvtE,EAAA24B,IAAA,EACAu2C,EAAA5B,IAAA,EAAAttE,EAAA24B,KAAA,EAAA34B,EAAA24B,EAAA,GACAA,GAAA,GAGAk0C,EAAA7rE,KAAAkuE,GAGAE,EAAAtC,OAAAD,EAEA1L,EAAA2N,WACA3N,EAAAyM,IAAAuB,GAAAC,EAEAjO,EAAAgH,YAAAyF,IAAAuB,GAAAC,EAGA,MAEA,KAAA,MACA9xE,GAAA,EAAA4B,EAAAuzB,YAAAzyB,EAAA4tB,GACA,IAAAyhD,KACA12C,EAAA/K,EAAA,EACA,IAAA0hD,EAAAtvE,EAAA24B,KACA02C,EAAA5M,mCAAA,EAAA6M,GACAD,EAAA3F,iBAAA,EAAA4F,GACAD,EAAAzF,iBAAA,EAAA0F,GACAD,EAAA9G,iBAAAvoE,EAAA24B,KACA02C,EAAA3G,aAAA,EAAAxpE,EAAAuzB,YAAAzyB,EAAA24B,GACAA,GAAA,EACA02C,EAAAE,2BAAAvvE,EAAA24B,KACA02C,EAAA9H,yBAAAvnE,EAAA24B,KACA02C,EAAAvM,IAAA,GAAA,GAAA9iE,EAAA24B,MACA02C,EAAArM,IAAA,GAAA,GAAAhjE,EAAA24B,MACA,IAAA62C,EAAAxvE,EAAA24B,KASA,GARA02C,EAAAI,mCAAA,EAAAD,GACAH,EAAAK,6BAAA,EAAAF,GACAH,EAAAM,+BAAA,EAAAH,GACAH,EAAAO,oBAAA,EAAAJ,GACAH,EAAAQ,0BAAA,GAAAL,GACAH,EAAAjE,0BAAA,GAAAoE,GACAH,EAAApC,yBAAAjtE,EAAA24B,KAEA02C,EAAA5M,gCAAA,CAGA,IAFA,IAAAE,KAEAhqC,EAAAr7B,EAAAswB,GAAA,CACA,IAAAkiD,EAAA9vE,EAAA24B,KACAgqC,EAAA3hE,MACA0hE,IAAA,GAAAoN,EACAlN,IAAAkN,GAAA,IAIAT,EAAA1M,eAAAA,EAGA,IAAAoN,KAEAV,EAAAI,iCACAM,EAAA/uE,KAAA,mCAGAquE,EAAAK,2BACAK,EAAA/uE,KAAA,6BAGAquE,EAAAM,6BACAI,EAAA/uE,KAAA,+BAGAquE,EAAAO,kBACAG,EAAA/uE,KAAA,oBAGAquE,EAAAQ,wBACAE,EAAA/uE,KAAA,0BAGA+uE,EAAAzyE,OAAA,IACAqxE,GAAA,GACA,EAAAhwE,EAAA2F,uCAAAyrE,EAAA9uE,KAAA,YAGAkgE,EAAA2N,WACA3N,EAAAwI,IAAA0F,GAEAlO,EAAAgH,YAAAwB,IAAA0F,EACAlO,EAAAgH,YAAA2F,QAGA,MAEA,KAAA,MACAxwE,GAAA,EAAA4B,EAAAuzB,YAAAzyB,EAAA4tB,IACAwzC,MACAhxD,OAAA,EAAAlR,EAAAuzB,YAAAzyB,EAAA4tB,EAAA,GACAwzC,EAAA9jE,QAAA,EAAA4B,EAAAwzB,YAAA1yB,EAAA4tB,EAAA,GACAwzC,EAAAhO,QAAAgO,EAAA9jE,OAAAswB,EAAA,EACAwzC,EAAA4O,UAAAhwE,EAAA4tB,EAAA,GACAwzC,EAAA6O,WAAAjwE,EAAA4tB,EAAA,GACAuzC,EAAA2N,YAAA,EAEA,IAAA1N,EAAA4O,YACA5O,EAAAuI,IAAAxI,EAAAwI,IACAvI,EAAA0M,IAAA3M,EAAA2M,IAAA/oD,MAAA,GACAq8C,EAAAyM,IAAA1M,EAAA0M,IACAzM,EAAAwM,IAAAzM,EAAAyM,IAAA7oD,MAAA,IAGAo8C,EAAAgH,YAAA/G,EACA,MAEA,KAAA,MAGA,KAFAA,EAAAD,EAAAgH,aAEA6H,YACAtC,EAAAvM,EAAAC,EAAAhxD,OACA63D,EAAA9G,IAGA7jE,EAAA8jE,EAAAhO,QAAAxlC,EACAu7C,EAAAhI,EAAAnhE,EAAA4tB,EAAAtwB,GACA,MAEA,KAAA,OACA,EAAAqB,EAAA2F,MAAA,yDAEA,KAAA,MACA,KAAA,MACA,KAAA,MACA,KAAA,MACAhH,GAAA,EAAA4B,EAAAuzB,YAAAzyB,EAAA4tB,GACA,MAEA,QACA,MAAA,IAAAjuB,MAAA,4BAAAsL,EAAAS,SAAA,KAGAkiB,GAAAtwB,GAEA,MAAAuH,GACA,GAAA8pE,GAAAvvE,KAAAihE,qBACA,MAAA,IAAAN,EAAAl7D,EAAA4G,UAEA,EAAA9M,EAAA2F,uCAAAO,EAAA4G,aAIArM,KAAA+/D,MA+/BA,SAAAgC,GAMA,IALA,IAAAZ,EAAAY,EAAAE,IACAnL,EAAAiL,EAAAjL,WACA6G,EAAAwD,EAAAyB,KACAkO,KAEA1yE,EAAA,EAAAkK,EAAAy5D,EAAAhC,MAAA7hE,OAAAE,EAAAkK,EAAAlK,IAAA,CACA,IAEA2nB,EAFAi8C,EAAAD,EAAAhC,MAAA3hE,GACA2yE,KAGA,IAAAhrD,EAAA,EAAAA,EAAA43C,EAAA53C,IACAgrD,EAAAhrD,GAAAwnD,EAAAxL,EAAAC,EAAAj8C,GAGA,IASAka,EAAA7M,EAEAmG,EACAiL,EACAi9B,EACAG,EACAoP,EAfAC,EAAAF,EAAA,GACAG,EAAA,IAAAliD,kBAAAiiD,EAAApxC,MAAA3hC,OAAAy/D,GACA/2C,GACA8zB,KAAAu2B,EAAAv2B,KACA2lB,IAAA4Q,EAAA5Q,IACA7e,MAAAyvB,EAAAzvB,MACAC,OAAAwvB,EAAAxvB,OACA5hB,MAAAqxC,GAGA1jE,EAAA,EAOA,GAAAw0D,EAAAoH,6BAAA+G,2BAAA,CACA,IAAAgB,EAAA,IAAAxT,EACAyT,EAAAL,EAAA,GAAAlxC,MACAwxC,EAAAN,EAAA,GAAAlxC,MACAyxC,EAAAP,EAAA,GAAAlxC,MACA0xC,EAAAJ,EAAAJ,EAAA,GAAAlxC,MAAA,KACAI,EAAA62B,EAAA,GAAAe,UAAA,EACAzkC,EAAA,IAAA,KAAA6M,GACA,IAAAuxC,EAAAxP,EAAAlL,WAAA,GACA2a,EAAA9T,EAAA,EAGA,GAFAn5B,EAAA4sC,EAAAlzE,OAEAszE,EAAApO,sBAAAyK,yBAUA,IAAAt0C,EAAA,EAAAA,EAAAiL,EAAAjL,IAAA/rB,GAAAikE,EAAA,CACAhQ,EAAA2P,EAAA73C,GAAAnG,EACAwuC,EAAAyP,EAAA93C,GACAy3C,EAAAM,EAAA/3C,GACA,MAAAvU,EAAAy8C,GAAAuP,EAAApP,GAAA,GACAsP,EAAA1jE,KAAAwX,EAAAgsD,GAAA/wC,EACAixC,EAAA1jE,KAAAwX,GAAAib,EACAixC,EAAA1jE,KAAAwX,EAAA48C,GAAA3hC,OAhBA,IAAA1G,EAAA,EAAAA,EAAAiL,EAAAjL,IAAA/rB,GAAAikE,EACAhQ,EAAA2P,EAAA73C,GAAAnG,EACAwuC,EAAAyP,EAAA93C,GACAy3C,EAAAM,EAAA/3C,GACA23C,EAAA1jE,KAAAi0D,EAAA,MAAAuP,GAAA/wC,EACAixC,EAAA1jE,KAAAi0D,EAAA,OAAAG,EAAA,OAAAoP,GAAA/wC,EACAixC,EAAA1jE,KAAAi0D,EAAA,MAAAG,GAAA3hC,EAcA,GAAAkxC,EACA,IAAA53C,EAAA,EAAA/rB,EAAA,EAAA+rB,EAAAiL,EAAAjL,IAAA/rB,GAAA,EACA0jE,EAAA1jE,GAAA+jE,EAAAh4C,GAAAnG,GAAA6M,OAIA,IAAAla,EAAA,EAAAA,EAAA43C,EAAA53C,IAAA,CACA,IAAA8Z,EAAAkxC,EAAAhrD,GAAA8Z,MAIA,IAHAI,EAAA62B,EAAA/wC,GAAA8xC,UAAA,EACAzkC,EAAA,IAAA,KAAA6M,GAEAzyB,EAAAuY,EAAAwT,EAAA,EAAAiL,EAAA3E,EAAA3hC,OAAAq7B,EAAAiL,EAAAjL,IACA23C,EAAA1jE,GAAAqyB,EAAAtG,GAAAnG,GAAA6M,EACAzyB,GAAAmwD,EAKAmT,EAAAlvE,KAAAglB,GAGA,OAAAkqD,EArlCAY,CAAA3P,GACA/hE,KAAAwhD,MAAAugB,EAAAE,IAAAT,KAAAO,EAAAE,IAAAZ,MACArhE,KAAAyhD,OAAAsgB,EAAAE,IAAAJ,KAAAE,EAAAE,IAAAP,MACA1hE,KAAA29D,gBAAAoE,EAAAE,IAAAW,OAqmCA,IAAAqI,EAAA,WACA,SAAAA,EAAAzpB,EAAAC,GACA,IAAAkwB,GAAA,EAAA7xE,EAAAgzB,MAAAxtB,KAAAC,IAAAi8C,EAAAC,IAAA,EACAzhD,KAAA4xE,UAEA,IAAA,IAAAxzE,EAAA,EAAAA,EAAAuzE,EAAAvzE,IAAA,CACA,IAAA8T,GACAsvC,MAAAA,EACAC,OAAAA,EACA5hB,UAEA7/B,KAAA4xE,OAAAhwE,KAAAsQ,GACAsvC,EAAAl8C,KAAAyoB,KAAAyzB,EAAA,GACAC,EAAAn8C,KAAAyoB,KAAA0zB,EAAA,IAoDA,OAhDAwpB,EAAA7mD,WACA8V,MAAA,SAAA97B,EAAAm7B,GAKA,IAJA,IAEArnB,EAFA2/D,EAAA,EACA5yE,EAAA,EAGA4yE,EAAA7xE,KAAA4xE,OAAA1zE,QAAA,CACAgU,EAAAlS,KAAA4xE,OAAAC,GACA,IAAA7gE,EAAA5S,EAAAm7B,EAAArnB,EAAAsvC,MAEA,QAAAzzC,IAAAmE,EAAA2tB,MAAA7uB,GAAA,CACA/R,EAAAiT,EAAA2tB,MAAA7uB,GACA,MAGAkB,EAAAlB,MAAAA,EACA5S,IAAA,EACAm7B,IAAA,EACAs4C,IAGAA,KACA3/D,EAAAlS,KAAA4xE,OAAAC,IACAhyC,MAAA3tB,EAAAlB,OAAA/R,EACAe,KAAA6xE,aAAAA,SACA7xE,KAAAf,OAEAisE,eAAA,WACA,IAAAh5D,EAAAlS,KAAA4xE,OAAA5xE,KAAA6xE,cACA3/D,EAAA2tB,MAAA3tB,EAAAlB,UAEAm6D,UAAA,WACA,IAAA0G,EAAA7xE,KAAA6xE,aACA3/D,EAAAlS,KAAA4xE,OAAAC,GACA5yE,EAAAiT,EAAA2tB,MAAA3tB,EAAAlB,OAGA,QAFA6gE,EAEA,GACA7xE,KAAAf,MAAAA,GACA,IAGAe,KAAA6xE,aAAAA,GACA3/D,EAAAlS,KAAA4xE,OAAAC,IACAhyC,MAAA3tB,EAAAlB,OAAA/R,GACA,KAGAgsE,EAjEA,GAoEAD,EAAA,WACA,SAAAA,EAAAxpB,EAAAC,EAAAqwB,GACA,IAAAH,GAAA,EAAA7xE,EAAAgzB,MAAAxtB,KAAAC,IAAAi8C,EAAAC,IAAA,EACAzhD,KAAA4xE,UAEA,IAAA,IAAAxzE,EAAA,EAAAA,EAAAuzE,EAAAvzE,IAAA,CAGA,IAFA,IAAAyhC,EAAA,IAAAh/B,WAAA2gD,EAAAC,GAEAloB,EAAA,EAAAiL,EAAA3E,EAAA3hC,OAAAq7B,EAAAiL,EAAAjL,IACAsG,EAAAtG,GAAAu4C,EAGA,IAAA5/D,GACAsvC,MAAAA,EACAC,OAAAA,EACA5hB,MAAAA,GAEA7/B,KAAA4xE,OAAAhwE,KAAAsQ,GACAsvC,EAAAl8C,KAAAyoB,KAAAyzB,EAAA,GACAC,EAAAn8C,KAAAyoB,KAAA0zB,EAAA,IAgEA,OA5DAupB,EAAA5mD,WACA8V,MAAA,SAAA97B,EAAAm7B,EAAAw4C,GAGA,IAFA,IAAAF,EAAA,EAEAA,EAAA7xE,KAAA4xE,OAAA1zE,QAAA,CACA,IAAAgU,EAAAlS,KAAA4xE,OAAAC,GACA7gE,EAAA5S,EAAAm7B,EAAArnB,EAAAsvC,MACAtvC,EAAAlB,MAAAA,EACA,IAAA/R,EAAAiT,EAAA2tB,MAAA7uB,GAEA,GAAA,MAAA/R,EACA,MAGA,GAAAA,EAAA8yE,EAGA,OAFA/xE,KAAA6xE,aAAAA,EACA7xE,KAAAgyE,mBACA,EAGA5zE,IAAA,EACAm7B,IAAA,EACAs4C,IAIA,OADA7xE,KAAA6xE,aAAAA,EAAA,GACA,GAEA3G,eAAA,SAAA6G,GACA,IAAA7/D,EAAAlS,KAAA4xE,OAAA5xE,KAAA6xE,cACA3/D,EAAA2tB,MAAA3tB,EAAAlB,OAAA+gE,EAAA,EACA/xE,KAAAgyE,mBAEAA,gBAAA,WAKA,IAJA,IAAAC,EAAAjyE,KAAA6xE,aACA3/D,EAAAlS,KAAA4xE,OAAAK,GACAC,EAAAhgE,EAAA2tB,MAAA3tB,EAAAlB,SAEAihE,GAAA,IACA//D,EAAAlS,KAAA4xE,OAAAK,IACApyC,MAAA3tB,EAAAlB,OAAAkhE,GAGA/G,UAAA,WACA,IAAA0G,EAAA7xE,KAAA6xE,aACA3/D,EAAAlS,KAAA4xE,OAAAC,GACA5yE,EAAAiT,EAAA2tB,MAAA3tB,EAAAlB,OAIA,OAHAkB,EAAA2tB,MAAA3tB,EAAAlB,OAAA,QACA6gE,EAEA,KAIA7xE,KAAA6xE,aAAAA,GACA3/D,EAAAlS,KAAA4xE,OAAAC,IACAhyC,MAAA3tB,EAAAlB,OAAA/R,GACA,KAGA+rE,EAnFA,GAsFAuB,EAAA,WACA,IAEA4F,EAAA,IAAAtxE,YAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IACAuxE,EAAA,IAAAvxE,YAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IACAwxE,EAAA,IAAAxxE,YAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAEA,SAAA0rE,EAAA/qB,EAAAC,EAAAsjB,EAAAqG,EAAAU,GAGA,IAAAwG,EAFAtyE,KAAAwhD,MAAAA,EACAxhD,KAAAyhD,OAAAA,EAIA6wB,EADA,OAAAvN,EACAsN,EACA,OAAAtN,EACAqN,EAEAD,EAGAnyE,KAAAsyE,kBAAAA,EACA,IAAAC,EAAA/wB,EAAAC,EAGA,IAAAyrB,EAFAltE,KAAAwyE,sBAAA,IAAA3xE,WAAA0xE,GACAvyE,KAAAgtE,gBAAA,IAAAnsE,WAAA0xE,GAIArF,EADApB,EAAA,GACA,IAAArnD,YAAA8tD,GACAzG,EAAA,EACA,IAAAjwB,YAAA02B,GAEA,IAAA1xE,WAAA0xE,GAGAvyE,KAAAktE,qBAAAA,EACAltE,KAAAyyE,gBAAA,IAAA5xE,WAAA0xE,GACA,IAAApF,EAAA,IAAAtsE,WAAA0xE,GAEA,GAAA,IAAAnH,EACA,IAAA,IAAAhtE,EAAA,EAAAA,EAAAm0E,EAAAn0E,IACA+uE,EAAA/uE,GAAAgtE,EAIAprE,KAAAmtE,YAAAA,EACAntE,KAAAk6B,QAuSA,OApSAqyC,EAAAnoD,WACAsoD,WAAA,SAAAtsB,GACApgD,KAAAogD,QAAAA,GAEAlmB,MAAA,WACAl6B,KAAAqgD,SAAA,IAAAM,UAAA,IACA3gD,KAAAqgD,SAAA,GAAA,EACArgD,KAAAqgD,SAtDA,IAsDA,GACArgD,KAAAqgD,SAtDA,IAsDA,GAEAqyB,yBAAA,SAAAv0B,EAAAw0B,EAAA3hE,GACA,IAKA5S,EALAo0E,EAAAxyE,KAAAwyE,sBACAhxB,EAAAxhD,KAAAwhD,MACAC,EAAAzhD,KAAAyhD,OACA/G,EAAAi4B,EAAA,EACA1G,EAAA0G,EAAA,EAAAnxB,EAGArD,EAAA,IACA//C,EAAA4S,EAAAwwC,EAEA9G,IACA83B,EAAAp0E,EAAA,IAAA,IAGA6tE,IACAuG,EAAAp0E,EAAA,IAAA,IAGAo0E,EAAAp0E,IAAA,GAGA+/C,EAAA,EAAAsD,IACArjD,EAAA4S,EAAAwwC,EAEA9G,IACA83B,EAAAp0E,EAAA,IAAA,IAGA6tE,IACAuG,EAAAp0E,EAAA,IAAA,IAGAo0E,EAAAp0E,IAAA,GAGAs8C,IACA83B,EAAAxhE,EAAA,IAAA,GAGAi7D,IACAuG,EAAAxhE,EAAA,IAAA,GAGAwhE,EAAAxhE,IAAA,KAEA27D,+BAAA,WAeA,IAdA,IAAAvsB,EAAApgD,KAAAogD,QACAoB,EAAAxhD,KAAAwhD,MACAC,EAAAzhD,KAAAyhD,OACAyrB,EAAAltE,KAAAktE,qBACAF,EAAAhtE,KAAAgtE,gBACAwF,EAAAxyE,KAAAwyE,sBACAC,EAAAzyE,KAAAyyE,gBACApyB,EAAArgD,KAAAqgD,SACAuyB,EAAA5yE,KAAAsyE,kBACAnF,EAAAntE,KAAAmtE,YAKA/pB,EAAA,EAAAA,EAAA3B,EAAA2B,GAAA,EACA,IAAA,IAAA7pB,EAAA,EAAAA,EAAAioB,EAAAjoB,IAGA,IAFA,IAAAvoB,EAAAoyC,EAAA5B,EAAAjoB,EAEAs5C,EAAA,EAAAA,EAAA,EAAAA,IAAA7hE,GAAAwwC,EAAA,CACA,IAAApjD,EAAAglD,EAAAyvB,EAEA,GAAAz0E,GAAAqjD,EACA,MAKA,GAFAgxB,EAAAzhE,KAfA,GAiBAk8D,EAAAl8D,IAAAwhE,EAAAxhE,GAAA,CAIA,IAAAgxC,EAAA4wB,EAAAJ,EAAAxhE,IACA8hE,EAAA1yB,EAAAK,QAAAJ,EAAA2B,GAEA,GAAA8wB,EAAA,CACA,IAAAj/B,EAAA7zC,KAAA+yE,cAAA30E,EAAAm7B,EAAAvoB,GACAg8D,EAAAh8D,GAAA6iC,EACAq5B,EAAAl8D,GAAA,EACAhR,KAAA0yE,yBAAAt0E,EAAAm7B,EAAAvoB,GACAyhE,EAAAzhE,IA3BA,EA8BAm8D,EAAAn8D,KACAyhE,EAAAzhE,IAhCA,KAqCA+hE,cAAA,SAAA50B,EAAAw0B,EAAA3hE,GACA,IAIAgiE,EAAAC,EAAAC,EAAAC,EACAnxB,EAAAoxB,EALA5xB,EAAAxhD,KAAAwhD,MACAC,EAAAzhD,KAAAyhD,OACAyrB,EAAAltE,KAAAktE,qBACAF,EAAAhtE,KAAAgtE,gBAGAmG,EAAAR,EAAA,GAAA,IAAAzF,EAAAl8D,EAAA,GAEA2hE,EAAA,EAAAnxB,GAAA,IAAA0rB,EAAAl8D,EAAA,IACAkiE,EAAAlG,EAAAh8D,EAAA,GAEAmiE,GACAF,EAAAjG,EAAAh8D,EAAA,GACAgiE,EAAA,EAAAE,EAAAD,GAEAD,EAAA,EAAAE,EAAAA,GAEAC,GACAF,EAAAjG,EAAAh8D,EAAA,GACAgiE,EAAA,EAAAC,EAAAA,GAEAD,EAAA,EAGA,IAAAK,EAAA,EAAAL,EA2BA,OA1BAG,EAAAh1B,EAAA,GAAA,IAAA+uB,EAAAl8D,EAAAwwC,GAEArD,EAAA,EAAAsD,GAAA,IAAAyrB,EAAAl8D,EAAAwwC,IACA0xB,EAAAlG,EAAAh8D,EAAAwwC,GAEA2xB,GACAF,EAAAjG,EAAAh8D,EAAAwwC,GACAwxB,EAAA,EAAAE,EAAAD,EAAAI,GAEAL,EAAA,EAAAE,EAAAA,EAAAG,GAEAF,GACAF,EAAAjG,EAAAh8D,EAAAwwC,GACAwxB,EAAA,EAAAC,EAAAA,EAAAI,GAEAL,EAAAK,EAGAL,GAAA,GACAhxB,EAAA,EAAAgxB,EACAI,EAAApzE,KAAAogD,QAAAK,QAAAzgD,KAAAqgD,SAAA2B,KAEAA,EAAA,EAAAgxB,EACAI,EAAA,EAAApzE,KAAAogD,QAAAK,QAAAzgD,KAAAqgD,SAAA2B,IAGAoxB,GAEAxG,2BAAA,WAcA,IAbA,IAaA0G,EAbAlzB,EAAApgD,KAAAogD,QACAoB,EAAAxhD,KAAAwhD,MACAC,EAAAzhD,KAAAyhD,OACAyrB,EAAAltE,KAAAktE,qBACAsF,EAAAxyE,KAAAwyE,sBACAnyB,EAAArgD,KAAAqgD,SACA8sB,EAAAntE,KAAAmtE,YACAsF,EAAAzyE,KAAAyyE,gBAGAv0E,EAAAsjD,EAAAC,EACA8xB,EAAA,EAAA/xB,EAEAgyB,EAAA,EAAAA,EAAAt1E,EAAAs1E,EAAAF,EAAA,CACAA,EAAAhuE,KAAA+I,IAAAnQ,EAAAs1E,EAAAD,GAEA,IAAA,IAAAh6C,EAAA,EAAAA,EAAAioB,EAAAjoB,IACA,IAAA,IAAAvoB,EAAAwiE,EAAAj6C,EAAAvoB,EAAAsiE,EAAAtiE,GAAAwwC,EACA,GAAA0rB,EAAAl8D,IAAA,IAVA,EAUAyhE,EAAAzhE,IAAA,CAIA,IAAAgxC,EAAA,GAEA,GAAA,IAfA,EAeAywB,EAAAzhE,IAAA,CACAyhE,EAAAzhE,IAhBA,EAiBA,IAAAyiE,EAAA,IAAAjB,EAAAxhE,GACAgxC,EAAA,IAAAyxB,EAAA,GAAA,GAGA,IAAAjzB,EAAAJ,EAAAK,QAAAJ,EAAA2B,GACAkrB,EAAAl8D,GAAAk8D,EAAAl8D,IAAA,EAAAwvC,EACA2sB,EAAAn8D,KACAyhE,EAAAzhE,IAzBA,KA8BA67D,eAAA,WAkBA,IAjBA,IAeA6G,EAfAtzB,EAAApgD,KAAAogD,QACAoB,EAAAxhD,KAAAwhD,MACAC,EAAAzhD,KAAAyhD,OACA+wB,EAAAxyE,KAAAwyE,sBACAtF,EAAAltE,KAAAktE,qBACAF,EAAAhtE,KAAAgtE,gBACA3sB,EAAArgD,KAAAqgD,SACAuyB,EAAA5yE,KAAAsyE,kBACAnF,EAAAntE,KAAAmtE,YACAsF,EAAAzyE,KAAAyyE,gBAGAkB,EAAAnyB,EACAoyB,EAAA,EAAApyB,EACAqyB,EAAA,EAAAryB,EAGA4B,EAAA,EAAAA,EAAA3B,EAAA2B,EAAAswB,EAAA,CACAA,EAAApuE,KAAA+I,IAAA+0C,EAAA,EAAA3B,GAIA,IAHA,IAAAqyB,EAAA1wB,EAAA5B,EACAuyB,EAAA3wB,EAAA,EAAA3B,EAEAloB,EAAA,EAAAA,EAAAioB,EAAAjoB,IAAA,CACA,IAKAsa,EALA2/B,EAAAM,EAAAv6C,EACAy6C,EAAAD,GAAA,IAAAtB,EAAAe,IAAA,IAAAf,EAAAe,EAAAG,IAAA,IAAAlB,EAAAe,EAAAI,IAAA,IAAAnB,EAAAe,EAAAK,IAAA,IAAArB,EAAAgB,IAAA,IAAAhB,EAAAgB,EAAAG,IAAA,IAAAnB,EAAAgB,EAAAI,IAAA,IAAApB,EAAAgB,EAAAK,GACAhB,EAAA,EACA7hE,EAAAwiE,EACAp1E,EAAAglD,EAGA,GAAA4wB,EAAA,CACA,IAAAC,EAAA7zB,EAAAK,QAAAJ,EApRA,IAsRA,IAAA4zB,EAAA,CACA9G,EAAAqG,KACArG,EAAAqG,EAAAG,KACAxG,EAAAqG,EAAAI,KACAzG,EAAAqG,EAAAK,KACA,SAKA,KAFAhB,EAAAzyB,EAAAK,QAAAJ,EA/RA,KA+RA,EAAAD,EAAAK,QAAAJ,EA/RA,OAkSAjiD,EAAAglD,EAAAyvB,EACA7hE,GAAA6hE,EAAArxB,GAGA3N,EAAA7zC,KAAA+yE,cAAA30E,EAAAm7B,EAAAvoB,GACAg8D,EAAAh8D,GAAA6iC,EACAq5B,EAAAl8D,GAAA,EACAhR,KAAA0yE,yBAAAt0E,EAAAm7B,EAAAvoB,GACAyhE,EAAAzhE,IAzCA,EA0CAA,EAAAwiE,EAEA,IAAA,IAAAU,EAAA9wB,EAAA8wB,GAAA91E,EAAA81E,IAAAljE,GAAAwwC,EACA2rB,EAAAn8D,KAGA6hE,IAGA,IAAAz0E,EAAAglD,EAAAyvB,EAAAz0E,EAAAs1E,EAAAt1E,IAAA4S,GAAAwwC,EACA,IAAA0rB,EAAAl8D,IAAA,IArDA,EAqDAyhE,EAAAzhE,IAAA,CAIA,IAAAgxC,EAAA4wB,EAAAJ,EAAAxhE,IACA8hE,EAAA1yB,EAAAK,QAAAJ,EAAA2B,GAEA,IAAA8wB,IACAj/B,EAAA7zC,KAAA+yE,cAAA30E,EAAAm7B,EAAAvoB,GACAg8D,EAAAh8D,GAAA6iC,EACAq5B,EAAAl8D,GAAA,EACAhR,KAAA0yE,yBAAAt0E,EAAAm7B,EAAAvoB,GACAyhE,EAAAzhE,IAhEA,GAmEAm8D,EAAAn8D,SAKA87D,wBAAA,WACA,IAAA1sB,EAAApgD,KAAAogD,QACAC,EAAArgD,KAAAqgD,SACAiP,EAAAlP,EAAAK,QAAAJ,EA5UA,KA4UA,EAAAD,EAAAK,QAAAJ,EA5UA,KA4UA,EAAAD,EAAAK,QAAAJ,EA5UA,KA4UA,EAAAD,EAAAK,QAAAJ,EA5UA,IA8UA,GAAA,KAAAiP,EACA,MAAA,IAAAqR,EAAA,iCAIA4L,EApVA,GAuVA4H,EAAA,WACA,SAAAA,KAsHA,OApHAA,EAAA/vD,UAAAiqD,UAAA,SAAAlH,EAAAiN,EAAAja,GAGA,IAFA,IAAAka,EAAAlN,EAAA,GAEA/oE,EAAA,EAAAkK,EAAA6+D,EAAAjpE,OAAAE,EAAAkK,EAAAlK,IACAi2E,EAAAr0E,KAAAs0E,QAAAD,EAAAlN,EAAA/oE,GAAAg2E,EAAAja,GAGA,OAAAka,GAGAF,EAAA/vD,UAAAmwD,OAAA,SAAAplE,EAAAikB,EAAAnJ,GACA,IAAA4oD,EAAAz/C,EAAA,EACAohD,EAAAphD,EAAA,EACA8gD,EAAA9gD,EAAAnJ,EAAA,EACAwqD,EAAArhD,EAAAnJ,EACA9a,EAAA0jE,KAAA1jE,EAAAqlE,KACArlE,EAAAslE,KAAAtlE,EAAA+kE,KACA/kE,EAAA0jE,KAAA1jE,EAAAqlE,KACArlE,EAAAslE,KAAAtlE,EAAA+kE,KACA/kE,EAAA0jE,KAAA1jE,EAAAqlE,KACArlE,EAAAslE,KAAAtlE,EAAA+kE,KACA/kE,EAAA0jE,GAAA1jE,EAAAqlE,GACArlE,EAAAslE,GAAAtlE,EAAA+kE,IAGAC,EAAA/vD,UAAAkwD,QAAA,SAAAD,EAAAK,EAAAN,EAAAja,GACA,IAMA/7D,EAAAm7B,EAAA2f,EAAAnL,EAAA4mC,EAAAjkE,EANAkkE,EAAAP,EAAA7yB,MACAqzB,EAAAR,EAAA5yB,OACAqzB,EAAAT,EAAAx0C,MACA2hB,EAAAkzB,EAAAlzB,MACAC,EAAAizB,EAAAjzB,OACA5hB,EAAA60C,EAAA70C,MAGA,IAAAqZ,EAAA,EAAA96C,EAAA,EAAAA,EAAAy2E,EAAAz2E,IAGA,IAFA2vC,EAAA,EAAA3vC,EAAAojD,EAEAjoB,EAAA,EAAAA,EAAAq7C,EAAAr7C,IAAA2f,IAAAnL,GAAA,EACAlO,EAAAkO,GAAA+mC,EAAA57B,GAIA47B,EAAAT,EAAAx0C,MAAA,KACA,IACAk1C,EAAA,IAAA9G,aAAAzsB,EAAA,GAEA,GAAA,IAAAA,GACA,GAAA,IAAA,EAAA4yB,GACA,IAAA1jE,EAAA,EAAAwoC,EAAA,EAAAxoC,EAAA+wC,EAAA/wC,IAAAwoC,GAAAsI,EACA3hB,EAAAqZ,IAAA,QAIA,IAAAxoC,EAAA,EAAAwoC,EAAA,EAAAxoC,EAAA+wC,EAAA/wC,IAAAwoC,GAAAsI,EACAuzB,EAAAnnE,IAAAiyB,EAAAtxB,SAAA2qC,EAAAA,EAAAsI,GAXA,GAYAxhD,KAAAu0E,OAAAQ,EAZA,EAYAvzB,GACAxhD,KAAA2H,OAAAotE,EAbA,EAaAvzB,GACA3hB,EAAAjyB,IAAAmnE,EAAAxmE,SAdA,EAAA,EAcAizC,GAAAtI,GAIA,IAAA87B,EAAA,GACAC,KAEA,IAAA72E,EAAA,EAAAA,EAAA42E,EAAA52E,IACA62E,EAAArzE,KAAA,IAAAqsE,aAAAxsB,EAAA,IAGA,IAAA15C,EACAmtE,EAAA,EAGA,GAFAb,EA3BA,EA2BA5yB,EAEA,IAAAA,GACA,GAAA,IAAA,EAAA0Y,GACA,IAAAwa,EAAA,EAAAA,EAAAnzB,EAAAmzB,IACA90C,EAAA80C,IAAA,QAIA,IAAAA,EAAA,EAAAA,EAAAnzB,EAAAmzB,IAAA,CACA,GAAA,IAAAO,EAAA,CAGA,IAFAF,EAAA1vE,KAAA+I,IAAAmzC,EAAAmzB,EAAAK,GAEA97B,EAAAy7B,EAAA5mC,EAxCA,EAwCAA,EAAAsmC,EAAAn7B,GAAAsI,EAAAzT,IACA,IAAAhmC,EAAA,EAAAA,EAAAitE,EAAAjtE,IACAktE,EAAAltE,GAAAgmC,GAAAlO,EAAAqZ,EAAAnxC,GAIAmtE,EAAAF,EAIA,IAAA7lE,EAAA8lE,IADAC,GAKA,GAHAl1E,KAAAu0E,OAAAplE,EAnDA,EAmDAsyC,GACAzhD,KAAA2H,OAAAwH,EApDA,EAoDAsyC,GAEA,IAAAyzB,EAGA,IAFAh8B,EAAAy7B,EAAAK,EAAA,EAEAjnC,EAzDA,EAyDAA,EAAAsmC,EAAAn7B,GAAAsI,EAAAzT,IACA,IAAAhmC,EAAA,EAAAA,EAAAitE,EAAAjtE,IACA83B,EAAAqZ,EAAAnxC,GAAAktE,EAAAltE,GAAAgmC,GAOA,OACAyT,MAAAA,EACAC,OAAAA,EACA5hB,MAAAA,IAIAs0C,EAvHA,GA0HApG,EAAA,WACA,SAAAA,IACAoG,EAAAn+B,KAAAh2C,MAwFA,OArFA+tE,EAAA3pD,UAAArlB,OAAAyJ,OAAA2rE,EAAA/vD,WAEA2pD,EAAA3pD,UAAAzc,OAAA,SAAAC,EAAAwrB,EAAAl1B,GACA,IAEAq7B,EAAAzU,EAAAqwD,EAAAjuC,EAFA+Q,EAAA/5C,GAAA,EAGAk3E,GAAA,kBACAC,GAAA,iBACAC,EAAA,iBACAzJ,EAAA,iBACA9wD,EAAA,kBAIA,IAFAwe,GARAnG,GAAA,GAQA,EAEAtO,EAAAmzB,EAAA,EAAAnzB,IAAAyU,GAAA,EACA3xB,EAAA2xB,IAJA,kBAUA,IAFA47C,EAAAtJ,EAAAjkE,GADA2xB,EAAAnG,EAAA,GACA,GAEAtO,EAAAmzB,EAAA,EAAAnzB,MACAoiB,EAAA2kC,EAAAjkE,EAAA2xB,EAAA,GACA3xB,EAAA2xB,GAAAxe,EAAAnT,EAAA2xB,GAAA47C,EAAAjuC,EAEApiB,KAJAyU,GAAA,EAMA47C,EAAAtJ,EAAAjkE,GADA2xB,GAAA,GACA,GACA3xB,EAAA2xB,GAAAxe,EAAAnT,EAAA2xB,GAAA47C,EAAAjuC,EASA,IAFAiuC,EAAAG,EAAA1tE,GADA2xB,EAAAnG,EAAA,GACA,GAEAtO,EAAAmzB,EAAA,EAAAnzB,MACAoiB,EAAAouC,EAAA1tE,EAAA2xB,EAAA,GACA3xB,EAAA2xB,IAAA47C,EAAAjuC,EAEApiB,KAJAyU,GAAA,EAMA47C,EAAAG,EAAA1tE,GADA2xB,GAAA,GACA,GACA3xB,EAAA2xB,IAAA47C,EAAAjuC,EASA,IAFAiuC,EAAAE,EAAAztE,GADA2xB,EAAAnG,GACA,GAEAtO,EAAAmzB,EAAA,EAAAnzB,MACAoiB,EAAAmuC,EAAAztE,EAAA2xB,EAAA,GACA3xB,EAAA2xB,IAAA47C,EAAAjuC,EAEApiB,KAJAyU,GAAA,EAMA47C,EAAAE,EAAAztE,GADA2xB,GAAA,GACA,GACA3xB,EAAA2xB,IAAA47C,EAAAjuC,EAMA,GAAA,IAAA+Q,EAIA,IAFAk9B,EAAAC,EAAAxtE,GADA2xB,EAAAnG,EAAA,GACA,GAEAtO,EAAAmzB,EAAAnzB,MACAoiB,EAAAkuC,EAAAxtE,EAAA2xB,EAAA,GACA3xB,EAAA2xB,IAAA47C,EAAAjuC,EAEApiB,KAJAyU,GAAA,EAMA47C,EAAAC,EAAAxtE,GADA2xB,GAAA,GACA,GACA3xB,EAAA2xB,IAAA47C,EAAAjuC,GAQA6mC,EA1FA,GA6FAD,EAAA,WACA,SAAAA,IACAqG,EAAAn+B,KAAAh2C,MAmBA,OAhBA8tE,EAAA1pD,UAAArlB,OAAAyJ,OAAA2rE,EAAA/vD,WAEA0pD,EAAA1pD,UAAAzc,OAAA,SAAAC,EAAAwrB,EAAAl1B,GACA,IAEAq7B,EAAAzU,EAFAmzB,EAAA/5C,GAAA,EAIA,IAAAq7B,EAHAnG,GAAA,EAGAtO,EAAAmzB,EAAA,EAAAnzB,IAAAyU,GAAA,EACA3xB,EAAA2xB,IAAA3xB,EAAA2xB,EAAA,GAAA3xB,EAAA2xB,EAAA,GAAA,GAAA,EAGA,IAAAA,EAAAnG,EAAA,EAAAtO,EAAAmzB,EAAAnzB,IAAAyU,GAAA,EACA3xB,EAAA2xB,IAAA3xB,EAAA2xB,EAAA,GAAA3xB,EAAA2xB,EAAA,IAAA,GAIAu0C,EArBA,GAwBA,OAAAjO,EAlwEA,GAqwEAhhE,QAAAghE,SAAAA,GAIA,CAAAjhE,EAAAC,QAAAC,KAIAC,OAAAC,eAAAH,QAAA,cACAI,OAAA,IAEAJ,QAAA02E,MAAA12E,QAAA22E,MAAA32E,QAAA2qC,uBAAA3qC,QAAA42E,gBAAA52E,QAAA62E,gBAAA72E,QAAA82E,gBAAA92E,QAAAi+B,aAAAj+B,QAAA+2E,cAAA/2E,QAAAg3E,aAAAh3E,QAAAi3E,kBAAA,EAEA,IAAAv2E,EAAAT,EAAA,GAEAU,EAAAV,EAAA,GAEAotB,EAAAptB,EAAA,IAEA82E,EAAA,WACA,SAAAA,EAAA/sE,GACA7I,KAAA8H,EAAA,EACA9H,KAAA+H,EAAA,EACA,IACA3J,EAEA6vC,EAHAlK,EAAA,IAAAljC,WAAA,KAEA04B,EAAA,EAEAw8C,EAAAltE,EAAA3K,OAEA,IAAAE,EAAA,EAAAA,EAAA,MAAAA,EACA2lC,EAAA3lC,GAAAA,EAGA,IAAAA,EAAA,EAAAA,EAAA,MAAAA,EACA6vC,EAAAlK,EAAA3lC,GACAm7B,EAAAA,EAAA0U,EAAAplC,EAAAzK,EAAA23E,GAAA,IACAhyC,EAAA3lC,GAAA2lC,EAAAxK,GACAwK,EAAAxK,GAAA0U,EAGAjuC,KAAA+jC,EAAAA,EA+BA,OA5BA6xC,EAAAxxD,WACA4xD,aAAA,SAAAp1E,GACA,IAAAxC,EAEA6vC,EACAgoC,EAFAnxD,EAAAlkB,EAAA1C,OAGA4J,EAAA9H,KAAA8H,EACAC,EAAA/H,KAAA+H,EACAg8B,EAAA/jC,KAAA+jC,EACAw6B,EAAA,IAAA19D,WAAAikB,GAEA,IAAA1mB,EAAA,EAAAA,EAAA0mB,IAAA1mB,EAEA6vC,EAAAlK,EADAj8B,EAAAA,EAAA,EAAA,KAGAmuE,EAAAlyC,EADAh8B,EAAAA,EAAAkmC,EAAA,KAEAlK,EAAAj8B,GAAAmuE,EACAlyC,EAAAh8B,GAAAkmC,EACAswB,EAAAngE,GAAAwC,EAAAxC,GAAA2lC,EAAAkK,EAAAgoC,EAAA,KAKA,OAFAj2E,KAAA8H,EAAAA,EACA9H,KAAA+H,EAAAA,EACAw2D,IAGAqX,EAAAxxD,UAAA8xD,aAAAN,EAAAxxD,UAAA4xD,aACAJ,EAAAxxD,UAAAlb,QAAA0sE,EAAAxxD,UAAA4xD,aACAJ,EApDA,GAuDA/2E,QAAA+2E,cAAAA,EAEA,IAAA94C,EAAA,WACA,IAAA/X,EAAA,IAAAlkB,YAAA,EAAA,GAAA,GAAA,GAAA,EAAA,GAAA,GAAA,GAAA,EAAA,GAAA,GAAA,GAAA,EAAA,GAAA,GAAA,GAAA,EAAA,EAAA,GAAA,GAAA,EAAA,EAAA,GAAA,GAAA,EAAA,EAAA,GAAA,GAAA,EAAA,EAAA,GAAA,GAAA,EAAA,GAAA,GAAA,GAAA,EAAA,GAAA,GAAA,GAAA,EAAA,GAAA,GAAA,GAAA,EAAA,GAAA,GAAA,GAAA,EAAA,GAAA,GAAA,GAAA,EAAA,GAAA,GAAA,GAAA,EAAA,GAAA,GAAA,GAAA,EAAA,GAAA,GAAA,KACAq4C,EAAA,IAAApC,aAAA,WAAA,UAAA,WAAA,YAAA,UAAA,YAAA,YAAA,SAAA,YAAA,YAAA,OAAA,WAAA,YAAA,UAAA,WAAA,YAAA,WAAA,WAAA,WAAA,WAAA,UAAA,UAAA,WAAA,UAAA,WAAA,YAAA,UAAA,YAAA,YAAA,SAAA,YAAA,YAAA,QAAA,WAAA,YAAA,UAAA,WAAA,YAAA,WAAA,WAAA,WAAA,WAAA,UAAA,UAAA,WAAA,UAAA,WAAA,WAAA,UAAA,YAAA,YAAA,SAAA,YAAA,YAAA,SAAA,WAAA,YAAA,UAAA,WAAA,YAAA,WAAA,WAAA,WAAA,YA6EA,OA3EA,SAAAl2C,EAAAwyB,EAAAl1B,GACA,IAMAE,EAAAm7B,EAAAzU,EANAqxD,EAAA,WACAC,GAAA,UACAC,GAAA,WACAC,EAAA,UACAC,EAAAr4E,EAAA,IAAA,GACAs4E,EAAA,IAAA31E,WAAA01E,GAGA,IAAAn4E,EAAA,EAAAA,EAAAF,IAAAE,EACAo4E,EAAAp4E,GAAAwC,EAAAwyB,KAGAojD,EAAAp4E,KAAA,IACA0mB,EAAAyxD,EAAA,EAEA,KAAAn4E,EAAA0mB,GACA0xD,EAAAp4E,KAAA,EAGAo4E,EAAAp4E,KAAAF,GAAA,EAAA,IACAs4E,EAAAp4E,KAAAF,GAAA,EAAA,IACAs4E,EAAAp4E,KAAAF,GAAA,GAAA,IACAs4E,EAAAp4E,KAAAF,GAAA,GAAA,IACAs4E,EAAAp4E,KAAAF,IAAA,GAAA,IACAs4E,EAAAp4E,KAAA,EACAo4E,EAAAp4E,KAAA,EACAo4E,EAAAp4E,KAAA,EACA,IAAAq4E,EAAA,IAAA3/B,WAAA,IAEA,IAAA14C,EAAA,EAAAA,EAAAm4E,GAAA,CACA,IAAAh9C,EAAA,EAAAA,EAAA,KAAAA,EAAAn7B,GAAA,EACAq4E,EAAAl9C,GAAAi9C,EAAAp4E,GAAAo4E,EAAAp4E,EAAA,IAAA,EAAAo4E,EAAAp4E,EAAA,IAAA,GAAAo4E,EAAAp4E,EAAA,IAAA,GAGA,IAIAs4E,EACA1xD,EALAld,EAAAquE,EACApuE,EAAAquE,EACArwD,EAAAswD,EACA9wD,EAAA+wD,EAIA,IAAA/8C,EAAA,EAAAA,EAAA,KAAAA,EAAA,CACAA,EAAA,IACAm9C,EAAA3uE,EAAAge,GAAAhe,EAAAwd,EACAP,EAAAuU,GACAA,EAAA,IACAm9C,EAAAnxD,EAAAxd,GAAAwd,EAAAQ,EACAf,EAAA,EAAAuU,EAAA,EAAA,IACAA,EAAA,IACAm9C,EAAA3uE,EAAAge,EAAAR,EACAP,EAAA,EAAAuU,EAAA,EAAA,KAEAm9C,EAAA3wD,GAAAhe,GAAAwd,GACAP,EAAA,EAAAuU,EAAA,IAGA,IAAA0U,EAAA1oB,EACAoxD,EAAA7uE,EAAA4uE,EAAAx9B,EAAA3f,GAAAk9C,EAAAzxD,GAAA,EACAjf,EAAAgf,EAAAwU,GACAhU,EAAAQ,EACAA,EAAAhe,EACAA,EAAAA,GAAA4uE,GAAA5wE,EAAA4wE,IAAA,GAAA5wE,GAAA,EACA+B,EAAAmmC,EAGAkoC,EAAAA,EAAAruE,EAAA,EACAsuE,EAAAA,EAAAruE,EAAA,EACAsuE,EAAAA,EAAAtwD,EAAA,EACAuwD,EAAAA,EAAA/wD,EAAA,EAGA,OAAA,IAAA1kB,YAAA,IAAAs1E,EAAAA,GAAA,EAAA,IAAAA,GAAA,GAAA,IAAAA,IAAA,GAAA,IAAA,IAAAC,EAAAA,GAAA,EAAA,IAAAA,GAAA,GAAA,IAAAA,IAAA,GAAA,IAAA,IAAAC,EAAAA,GAAA,EAAA,IAAAA,GAAA,GAAA,IAAAA,IAAA,GAAA,IAAA,IAAAC,EAAAA,GAAA,EAAA,IAAAA,GAAA,GAAA,IAAAA,IAAA,GAAA,OA5EA,GAkFAz3E,QAAAi+B,aAAAA,EAEA,IAAA85C,EAAA,WACA,SAAAA,EAAAC,EAAAC,GACA92E,KAAA+2E,KAAA,EAAAF,EACA72E,KAAAg3E,IAAA,EAAAF,EA+EA,OA5EAF,EAAAxyD,WACA6yD,IAAA,SAAAC,GACAl3E,KAAA+2E,MAAAG,EAAAH,KACA/2E,KAAAg3E,KAAAE,EAAAF,KAEAG,IAAA,SAAAD,GACAl3E,KAAA+2E,MAAAG,EAAAH,KACA/2E,KAAAg3E,KAAAE,EAAAF,KAEAI,GAAA,SAAAF,GACAl3E,KAAA+2E,MAAAG,EAAAH,KACA/2E,KAAAg3E,KAAAE,EAAAF,KAEAK,WAAA,SAAAC,GACAA,GAAA,IACAt3E,KAAAg3E,IAAAh3E,KAAA+2E,OAAAO,EAAA,GAAA,EACAt3E,KAAA+2E,KAAA,IAEA/2E,KAAAg3E,IAAAh3E,KAAAg3E,MAAAM,EAAAt3E,KAAA+2E,MAAA,GAAAO,EACAt3E,KAAA+2E,KAAA/2E,KAAA+2E,OAAAO,EAAA,IAGAC,UAAA,SAAAD,GACAA,GAAA,IACAt3E,KAAA+2E,KAAA/2E,KAAAg3E,KAAAM,EAAA,GACAt3E,KAAAg3E,IAAA,IAEAh3E,KAAA+2E,KAAA/2E,KAAA+2E,MAAAO,EAAAt3E,KAAAg3E,MAAA,GAAAM,EACAt3E,KAAAg3E,IAAAh3E,KAAAg3E,KAAAM,IAGAE,YAAA,SAAAF,GACA,IAAAN,EAAAD,EAEA,GAAAO,GACAP,EAAA/2E,KAAAg3E,IACAA,EAAAh3E,KAAA+2E,OAEAC,EAAAh3E,KAAAg3E,IACAD,EAAA/2E,KAAA+2E,MAGAO,GAAA,GACAt3E,KAAAg3E,IAAAA,IAAAM,EAAAP,GAAA,GAAAO,EACAt3E,KAAA+2E,KAAAA,IAAAO,EAAAN,GAAA,GAAAM,GAEAG,IAAA,WACAz3E,KAAA+2E,MAAA/2E,KAAA+2E,KACA/2E,KAAAg3E,KAAAh3E,KAAAg3E,KAEAnrD,IAAA,SAAAqrD,GACA,IAAAQ,GAAA13E,KAAAg3E,MAAA,IAAAE,EAAAF,MAAA,GACAW,GAAA33E,KAAA+2E,OAAA,IAAAG,EAAAH,OAAA,GAEAW,EAAA,aACAC,GAAA,GAGA33E,KAAAg3E,IAAA,EAAAU,EACA13E,KAAA+2E,KAAA,EAAAY,GAEAC,OAAA,SAAA/wE,EAAAusB,GACAvsB,EAAAusB,GAAApzB,KAAA+2E,OAAA,GAAA,IACAlwE,EAAAusB,EAAA,GAAApzB,KAAA+2E,MAAA,GAAA,IACAlwE,EAAAusB,EAAA,GAAApzB,KAAA+2E,MAAA,EAAA,IACAlwE,EAAAusB,EAAA,GAAA,IAAApzB,KAAA+2E,KACAlwE,EAAAusB,EAAA,GAAApzB,KAAAg3E,MAAA,GAAA,IACAnwE,EAAAusB,EAAA,GAAApzB,KAAAg3E,KAAA,GAAA,IACAnwE,EAAAusB,EAAA,GAAApzB,KAAAg3E,KAAA,EAAA,IACAnwE,EAAAusB,EAAA,GAAA,IAAApzB,KAAAg3E,KAEAplE,OAAA,SAAAslE,GACAl3E,KAAA+2E,KAAAG,EAAAH,KACA/2E,KAAAg3E,IAAAE,EAAAF,MAGAJ,EAlFA,GAqFAjB,EAAA,WACA,SAAAkC,EAAAjwE,EAAAkd,GACA,OAAAld,IAAAkd,EAAAld,GAAA,GAAAkd,EAGA,SAAA+N,EAAAjrB,EAAAo5C,EAAAsY,GACA,OAAA1xD,EAAAo5C,GAAAp5C,EAAA0xD,EAGA,SAAAwe,EAAAlwE,EAAAo5C,EAAAsY,GACA,OAAA1xD,EAAAo5C,EAAAp5C,EAAA0xD,EAAAtY,EAAAsY,EAGA,SAAAye,EAAAnwE,GACA,OAAAiwE,EAAAjwE,EAAA,GAAAiwE,EAAAjwE,EAAA,IAAAiwE,EAAAjwE,EAAA,IAGA,SAAAowE,EAAApwE,GACA,OAAAiwE,EAAAjwE,EAAA,GAAAiwE,EAAAjwE,EAAA,IAAAiwE,EAAAjwE,EAAA,IAGA,SAAAqwE,EAAArwE,GACA,OAAAiwE,EAAAjwE,EAAA,GAAAiwE,EAAAjwE,EAAA,IAAAA,IAAA,EAOA,IAAAsxC,GAAA,WAAA,WAAA,WAAA,WAAA,UAAA,WAAA,WAAA,WAAA,WAAA,UAAA,UAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,UAAA,UAAA,UAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,UAAA,UAAA,UAAA,UAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,UAAA,UAAA,UAAA,UAAA,UAAA,UAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,YAmFA,OAjFA,SAAAt4C,EAAAwyB,EAAAl1B,GACA,IAUAE,EAAAm7B,EAAAzU,EAVAqxD,EAAA,WACAC,EAAA,WACAC,EAAA,WACAC,EAAA,WACA4B,EAAA,WACAC,EAAA,WACAC,EAAA,UACAC,EAAA,WACA9B,EAAA,GAAAjxE,KAAAyoB,MAAA7vB,EAAA,GAAA,IACAs4E,EAAA,IAAA31E,WAAA01E,GAGA,IAAAn4E,EAAA,EAAAA,EAAAF,IAAAE,EACAo4E,EAAAp4E,GAAAwC,EAAAwyB,KAGAojD,EAAAp4E,KAAA,IACA0mB,EAAAyxD,EAAA,EAEA,KAAAn4E,EAAA0mB,GACA0xD,EAAAp4E,KAAA,EAGAo4E,EAAAp4E,KAAA,EACAo4E,EAAAp4E,KAAA,EACAo4E,EAAAp4E,KAAA,EACAo4E,EAAAp4E,KAAAF,IAAA,GAAA,IACAs4E,EAAAp4E,KAAAF,GAAA,GAAA,IACAs4E,EAAAp4E,KAAAF,GAAA,GAAA,IACAs4E,EAAAp4E,KAAAF,GAAA,EAAA,IACAs4E,EAAAp4E,KAAAF,GAAA,EAAA,IACA,IAAAu4E,EAAA,IAAAhyD,YAAA,IAEA,IAAArmB,EAAA,EAAAA,EAAAm4E,GAAA,CACA,IAAAh9C,EAAA,EAAAA,EAAA,KAAAA,EACAk9C,EAAAl9C,GAAAi9C,EAAAp4E,IAAA,GAAAo4E,EAAAp4E,EAAA,IAAA,GAAAo4E,EAAAp4E,EAAA,IAAA,EAAAo4E,EAAAp4E,EAAA,GACAA,GAAA,EAGA,IAAAm7B,EAAA,GAAAA,EAAA,KAAAA,EACAk9C,EAAAl9C,GAAA,GA9CAs+C,EADAjwE,EA+CA6uE,EAAAl9C,EAAA,GA9CA,IAAAs+C,EAAAjwE,EAAA,IAAAA,IAAA,IA8CA6uE,EAAAl9C,EAAA,GAAA0+C,EAAAxB,EAAAl9C,EAAA,KAAAk9C,EAAAl9C,EAAA,IAGA,IAQA++C,EACAvxB,EATAj/C,EAAAquE,EACApuE,EAAAquE,EACArwD,EAAAswD,EACA9wD,EAAA+wD,EACA7wE,EAAAyyE,EACAxB,EAAAyB,EACAnzD,EAAAozD,EACAzf,EAAA0f,EAIA,IAAA9+C,EAAA,EAAAA,EAAA,KAAAA,EACA++C,EAAA3f,EAAAqf,EAAAvyE,GAAAotB,EAAAptB,EAAAixE,EAAA1xD,GAAAk0B,EAAA3f,GAAAk9C,EAAAl9C,GACAwtB,EAAAgxB,EAAAjwE,GAAAgwE,EAAAhwE,EAAAC,EAAAge,GACA4yC,EAAA3zC,EACAA,EAAA0xD,EACAA,EAAAjxE,EACAA,EAAA8f,EAAA+yD,EAAA,EACA/yD,EAAAQ,EACAA,EAAAhe,EACAA,EAAAD,EACAA,EAAAwwE,EAAAvxB,EAAA,EAGAovB,EAAAA,EAAAruE,EAAA,EACAsuE,EAAAA,EAAAruE,EAAA,EACAsuE,EAAAA,EAAAtwD,EAAA,EACAuwD,EAAAA,EAAA/wD,EAAA,EACA2yD,EAAAA,EAAAzyE,EAAA,EACA0yE,EAAAA,EAAAzB,EAAA,EACA0B,EAAAA,EAAApzD,EAAA,EACAqzD,EAAAA,EAAA1f,EAAA,EAjFA,IAAA/wD,EAoFA,OAAA,IAAA/G,YAAAs1E,GAAA,GAAA,IAAAA,GAAA,GAAA,IAAAA,GAAA,EAAA,IAAA,IAAAA,EAAAC,GAAA,GAAA,IAAAA,GAAA,GAAA,IAAAA,GAAA,EAAA,IAAA,IAAAA,EAAAC,GAAA,GAAA,IAAAA,GAAA,GAAA,IAAAA,GAAA,EAAA,IAAA,IAAAA,EAAAC,GAAA,GAAA,IAAAA,GAAA,GAAA,IAAAA,GAAA,EAAA,IAAA,IAAAA,EAAA4B,GAAA,GAAA,IAAAA,GAAA,GAAA,IAAAA,GAAA,EAAA,IAAA,IAAAA,EAAAC,GAAA,GAAA,IAAAA,GAAA,GAAA,IAAAA,GAAA,EAAA,IAAA,IAAAA,EAAAC,GAAA,GAAA,IAAAA,GAAA,GAAA,IAAAA,GAAA,EAAA,IAAA,IAAAA,EAAAC,GAAA,GAAA,IAAAA,GAAA,GAAA,IAAAA,GAAA,EAAA,IAAA,IAAAA,KA7GA,GAmHAx5E,QAAA82E,gBAAAA,EAEA,IAAAF,EAAA,WACA,SAAA5iD,EAAAjM,EAAAhf,EAAAo5C,EAAAsY,EAAArrB,GACArnB,EAAAhV,OAAAhK,GACAgf,EAAAqwD,IAAAj2B,GACA/S,EAAAr8B,OAAAhK,GACAqmC,EAAAwpC,MACAxpC,EAAAgpC,IAAA3d,GACA1yC,EAAAuwD,IAAAlpC,GAGA,SAAA6pC,EAAAlxD,EAAAhf,EAAAo5C,EAAAsY,EAAArrB,GACArnB,EAAAhV,OAAAhK,GACAgf,EAAAqwD,IAAAj2B,GACA/S,EAAAr8B,OAAAhK,GACAqmC,EAAAgpC,IAAA3d,GACA1yC,EAAAuwD,IAAAlpC,GACAA,EAAAr8B,OAAAovC,GACA/S,EAAAgpC,IAAA3d,GACA1yC,EAAAuwD,IAAAlpC,GAGA,SAAA8pC,EAAAnxD,EAAAhf,EAAAqmC,GACArnB,EAAAhV,OAAAhK,GACAgf,EAAA4wD,YAAA,IACAvpC,EAAAr8B,OAAAhK,GACAqmC,EAAAupC,YAAA,IACA5wD,EAAAuwD,IAAAlpC,GACAA,EAAAr8B,OAAAhK,GACAqmC,EAAAupC,YAAA,IACA5wD,EAAAuwD,IAAAlpC,GAGA,SAAA+pC,EAAApxD,EAAAhf,EAAAqmC,GACArnB,EAAAhV,OAAAhK,GACAgf,EAAA4wD,YAAA,IACAvpC,EAAAr8B,OAAAhK,GACAqmC,EAAAupC,YAAA,IACA5wD,EAAAuwD,IAAAlpC,GACAA,EAAAr8B,OAAAhK,GACAqmC,EAAAupC,YAAA,IACA5wD,EAAAuwD,IAAAlpC,GAGA,SAAAgqC,EAAArxD,EAAAhf,EAAAqmC,GACArnB,EAAAhV,OAAAhK,GACAgf,EAAA4wD,YAAA,GACAvpC,EAAAr8B,OAAAhK,GACAqmC,EAAAupC,YAAA,GACA5wD,EAAAuwD,IAAAlpC,GACAA,EAAAr8B,OAAAhK,GACAqmC,EAAAopC,WAAA,GACAzwD,EAAAuwD,IAAAlpC,GAGA,SAAAsqC,EAAA3xD,EAAAhf,EAAAqmC,GACArnB,EAAAhV,OAAAhK,GACAgf,EAAA4wD,YAAA,IACAvpC,EAAAr8B,OAAAhK,GACAqmC,EAAAupC,YAAA,IACA5wD,EAAAuwD,IAAAlpC,GACAA,EAAAr8B,OAAAhK,GACAqmC,EAAAopC,WAAA,GACAzwD,EAAAuwD,IAAAlpC,GAGA,IAAAiL,GAAA,IAAA09B,EAAA,WAAA,YAAA,IAAAA,EAAA,WAAA,WAAA,IAAAA,EAAA,WAAA,YAAA,IAAAA,EAAA,WAAA,YAAA,IAAAA,EAAA,UAAA,YAAA,IAAAA,EAAA,WAAA,YAAA,IAAAA,EAAA,WAAA,YAAA,IAAAA,EAAA,WAAA,YAAA,IAAAA,EAAA,WAAA,YAAA,IAAAA,EAAA,UAAA,YAAA,IAAAA,EAAA,UAAA,YAAA,IAAAA,EAAA,WAAA,YAAA,IAAAA,EAAA,WAAA,YAAA,IAAAA,EAAA,WAAA,WAAA,IAAAA,EAAA,WAAA,WAAA,IAAAA,EAAA,WAAA,YAAA,IAAAA,EAAA,WAAA,YAAA,IAAAA,EAAA,WAAA,WAAA,IAAAA,EAAA,UAAA,YAAA,IAAAA,EAAA,UAAA,YAAA,IAAAA,EAAA,UAAA,YAAA,IAAAA,EAAA,WAAA,YAAA,IAAAA,EAAA,WAAA,YAAA,IAAAA,EAAA,WAAA,YAAA,IAAAA,EAAA,WAAA,YAAA,IAAAA,EAAA,WAAA,WAAA,IAAAA,EAAA,WAAA,YAAA,IAAAA,EAAA,WAAA,YAAA,IAAAA,EAAA,WAAA,YAAA,IAAAA,EAAA,WAAA,YAAA,IAAAA,EAAA,UAAA,YAAA,IAAAA,EAAA,UAAA,WAAA,IAAAA,EAAA,UAAA,YAAA,IAAAA,EAAA,UAAA,YAAA,IAAAA,EAAA,WAAA,YAAA,IAAAA,EAAA,WAAA,YAAA,IAAAA,EAAA,WAAA,YAAA,IAAAA,EAAA,WAAA,YAAA,IAAAA,EAAA,WAAA,YAAA,IAAAA,EAAA,WAAA,WAAA,IAAAA,EAAA,WAAA,YAAA,IAAAA,EAAA,WAAA,YAAA,IAAAA,EAAA,WAAA,YAAA,IAAAA,EAAA,WAAA,WAAA,IAAAA,EAAA,WAAA,YAAA,IAAAA,EAAA,WAAA,YAAA,IAAAA,EAAA,WAAA,YAAA,IAAAA,EAAA,UAAA,WAAA,IAAAA,EAAA,UAAA,YAAA,IAAAA,EAAA,UAAA,YAAA,IAAAA,EAAA,UAAA,YAAA,IAAAA,EAAA,UAAA,YAAA,IAAAA,EAAA,UAAA,YAAA,IAAAA,EAAA,WAAA,YAAA,IAAAA,EAAA,WAAA,YAAA,IAAAA,EAAA,WAAA,YAAA,IAAAA,EAAA,WAAA,YAAA,IAAAA,EAAA,WAAA,YAAA,IAAAA,EAAA,WAAA,YAAA,IAAAA,EAAA,WA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A,IACA,QACA,IACA,aACA,IACA,aACA,KACA,aACA,MACA,SACA,MACA,SACA,IACA,cACA,MACA,cACA,KACA,IACA,GACA,UACA,KACA,aACA,KACA,YACA,KACA,aACA,KACA,cACA,KACA,OACA,IACA,QACA,IACA,aACA,KACA,aACA,MACA,aACA,MACA,SACA,MACA,UACA,IACA,IACA,GACA,aACA,KACA,SACA,IACA,QACA,MACA,aACA,MACA,SACA,IACA,WACA,IACA,gBACA,KACA,gBACA,MACA,UACA,KACA,cACA,IACA,OACA,IACA,aACA,IACA,eACA,MACA,cACA,KACA,uBACA,KACA,cACA,KACA,gCACA,KACA,uBACA,KACA,sBACA,KACA,eACA,KACA,wBACA,KACA,4BACA,KACA,MACA,IACA,QACA,IACA,kBACA,MACA,aACA,MACA,aACA,KACA,SACA,MACA,IACA,GACA,KACA,IACA,UACA,IACA,aACA,KACA,WACA,IACA,SACA,IACA,WACA,KACA,UACA,KACA,mBACA,KACA,SACA,IACA,aACA,KACA,YACA,KACA,aACA,KACA,YACA,KACA,QACA,KACA,aACA,IACA,QACA,IACA,WACA,MACA,gBACA,MACA,gBACA,MACA,gBACA,MACA,eACA,IACA,cACA,KACA,aACA,KACA,aACA,MACA,iBACA,MACA,SACA,IACA,SACA,MACA,UACA,IACA,KACA,IACA,UACA,IACA,uBACA,KACA,cACA,KACA,eACA,KACA,IACA,GACA,SACA,IACA,cACA,MACA,SACA,IACA,SACA,IACA,gBACA,KACA,cACA,KACA,UACA,KACA,cACA,IACA,mBACA,KACA,mBACA,KACA,sBACA,KACA,mBACA,KACA,uBACA,KACA,mBACA,MACA,mBACA,KACA,YACA,KACA,YACA,IACA,YACA,IACA,iBACA,MACA,OACA,IACA,aACA,IACA,YACA,KACA,aACA,KACA,SACA,IACA,cACA,MACA,aACA,KACA,aACA,KACA,aACA,KACA,iBACA,IACA,oBACA,KACA,aACA,KACA,cACA,KACA,UACA,IACA,eACA,KACA,eACA,KACA,aACA,KACA,aACA,MACA,aACA,KACA,sBACA,KACA,MACA,IACA,gBACA,KACA,iBACA,KACA,UACA,IACA,QACA,IACA,UACA,IACA,eACA,IACA,aACA,KACA,YACA,IACA,oBACA,KACA,aACA,KACA,sBACA,KACA,MACA,IACA,SACA,MACA,MACA,IACA,aACA,KACA,WACA,IACA,MACA,IACA,WACA,MACA,SACA,KACA,cACA,KACA,OACA,KACA,MACA,IACA,WACA,IACA,cACA,IACA,IACA,GACA,UACA,KACA,aACA,KACA,cACA,KACA,YACA,IACA,QACA,IACA,eACA,KACA,YACA,KACA,aACA,MACA,YACA,KACA,SACA,MACA,IACA,GACA,WACA,MACA,SACA,IACA,QACA,IACA,eACA,IACA,eACA,KACA,SACA,IACA,SACA,IACA,WACA,IACA,UACA,KACA,cACA,IACA,eACA,IACA,OACA,IACA,aACA,IACA,aACA,KACA,eACA,KACA,wBACA,KACA,oBACA,KACA,oBACA,KACA,QACA,IACA,cACA,KACA,cACA,KACA,UACA,KACA,aACA,MACA,QACA,MACA,aACA,MACA,SACA,MACA,aACA,IACA,UACA,IACA,IACA,GACA,SACA,KACA,SACA,KACA,SACA,KACA,SACA,KACA,WACA,MACA,sBACA,KACA,sBACA,KACA,mBACA,KACA,OACA,IACA,cACA,KACA,WACA,KACA,UACA,KACA,cACA,IACA,YACA,KACA,aACA,KACA,YACA,KACA,aACA,MACA,aACA,KACA,aACA,IACA,SACA,MACA,eACA,MACA,oBACA,MACA,WACA,MACA,IACA,GACA,aACA,KACA,KACA,IACA,aACA,KACA,SACA,IACA,cACA,MACA,SACA,IACA,SACA,IACA,UACA,KACA,cACA,IACA,mBACA,MACA,YACA,KACA,YACA,IACA,YACA,IACA,iBACA,KACA,oBACA,KACA,iBACA,MACA,OACA,IACA,aACA,IACA,YACA,KACA,kBACA,KACA,aACA,KACA,WACA,KACA,SACA,IACA,cACA,MACA,aACA,KACA,aACA,KACA,iBACA,IACA,kBACA,KACA,UACA,IACA,kBACA,KACA,aACA,MACA,cACA,KACA,aACA,KACA,UACA,IACA,OACA,IACA,cACA,IACA,eACA,IACA,YACA,IACA,SACA,MACA,UACA,IACA,SACA,IACA,cACA,KACA,kBACA,KACA,0BACA,KACA,IACA,GACA,aACA,KACA,UACA,KACA,cACA,IACA,aACA,KACA,eACA,KACA,aACA,MACA,SACA,MACA,IACA,GACA,WACA,MACA,WACA,MACA,oBACA,KACA,SACA,KACA,aACA,KACA,sBACA,KACA,iBACA,KACA,QACA,IACA,mBACA,KACA,2BACA,KACA,SACA,IACA,WACA,IACA,UACA,KACA,eACA,IACA,YACA,KACA,cACA,KACA,cACA,KACA,cACA,KACA,aACA,IACA,QACA,IACA,cACA,KACA,aACA,KACA,aACA,MACA,gBACA,KACA,aACA,IACA,cACA,KACA,SACA,MACA,IACA,GACA,KACA,IACA,KACA,MACA,SACA,IACA,SACA,IACA,SACA,IACA,WACA,IACA,UACA,KACA,mBACA,KACA,eACA,IACA,OACA,IACA,aACA,IACA,YACA,KACA,kBACA,KACA,eACA,KACA,KACA,IACA,cACA,KACA,aACA,KACA,aACA,MACA,SACA,IACA,cACA,MACA,SACA,MACA,IACA,GACA,WACA,MACA,SACA,MACA,cACA,MACA,SACA,KACA,UACA,KACA,aACA,KACA,YACA,KACA,cACA,KACA,aACA,MACA,SACA,MACA,UACA,IACA,KACA,IACA,IACA,GACA,KACA,IACA,SACA,IACA,SACA,IACA,WACA,IACA,UACA,KACA,mBACA,KACA,eACA,IACA,aACA,KACA,YACA,KACA,YACA,IACA,YACA,KACA,KACA,IACA,cACA,KACA,aACA,KACA,aACA,MACA,cACA,KACA,SACA,MACA,SACA,IACA,cACA,MACA,KACA,IACA,IACA,GACA,KACA,IACA,UACA,MACA,SACA,IACA,cACA,MACA,kBACA,KACA,0BACA,KACA,SACA,IACA,SACA,IACA,iBACA,IACA,UACA,KACA,cACA,IACA,mBACA,KACA,sBACA,KACA,mBACA,KACA,uBACA,KACA,mBACA,MACA,mBACA,KACA,YACA,KACA,YACA,IACA,YACA,IACA,YACA,IACA,oBACA,KACA,iBACA,MACA,YACA,KACA,cACA,MACA,SACA,IACA,cACA,MACA,aACA,KACA,MACA,KACA,aACA,KACA,QACA,IACA,aACA,KACA,gBACA,KACA,aACA,KACA,iBACA,KACA,aACA,KACA,gBACA,IACA,KACA,IACA,iBACA,IACA,UACA,IACA,eACA,KACA,eACA,KACA,QACA,KACA,gBACA,KACA,aACA,IACA,qBACA,KACA,qBACA,KACA,aACA,IACA,UACA,IACA,eACA,IACA,aACA,MACA,WACA,KACA,UACA,IACA,gBACA,IACA,QACA,IACA,SACA,IACA,cACA,IACA,cACA,MACA,SACA,MACA,eACA,IACA,aACA,KACA,SACA,IACA,cACA,KACA,iBACA,KACA,cACA,MACA,IACA,GACA,SACA,KACA,UACA,KACA,aACA,KACA,aACA,KACA,cACA,KACA,uBACA,KACA,MACA,IACA,QACA,IACA,KACA,IACA,eACA,KACA,aACA,MACA,MACA,IACA,cACA,KACA,SACA,MACA,IACA,GACA,UACA,KACA,aACA,MACA,SACA,MACA,IACA,GACA,aACA,KACA,SACA,IACA,SACA,IACA,WACA,IACA,UACA,KACA,eACA,IACA,YACA,IACA,aACA,KACA,YACA,KACA,kBACA,KACA,cACA,KACA,WACA,KACA,MACA,IACA,YACA,MACA,iBACA,IACA,aACA,KACA,aACA,MACA,SACA,MACA,iBACA,IACA,yBACA,IACA,IACA,GACA,WACA,KACA,WACA,KACA,WACA,KACA,WACA,KACA,WACA,KACA,WACA,KACA,WACA,KACA,WACA,KACA,WACA,KACA,WACA,KACA,WACA,KACA,WACA,KACA,WACA,KACA,WACA,KACA,WACA,KACA,WACA,KACA,WACA,KACA,WACA,KACA,WACA,KACA,WACA,KACA,WACA,KACA,WACA,KACA,WACA,KACA,WACA,KACA,WACA,KACA,WACA,KACA,WACA,KACA,WACA,KACA,WACA,KACA,WACA,KACA,WACA,KACA,WACA,KACA,WACA,KACA,WACA,KACA,WACA,KACA,WACA,KACA,WACA,KACA,WACA,KACA,WACA,KACA,WACA,KACA,SACA,IACA,kBACA,KACA,aACA,IACA,SACA,IACA,kBACA,KACA,cACA,MACA,WACA,IACA,QACA,IACA,gBACA,KACA,wBACA,KACA,UACA,KACA,cACA,IACA,eACA,IACA,aACA,KACA,YACA,KACA,qBACA,KACA,cACA,KACA,aACA,KACA,cACA,KACA,cACA,KACA,gBACA,KACA,aACA,IACA,eACA,KACA,cACA,KACA,QACA,IACA,WACA,KACA,aACA,MACA,mBACA,KACA,SACA,MACA,cACA,IACA,IACA,GACA,MACA,IACA,OACA,IACA,SACA,IACA,WACA,IACA,UACA,KACA,mBACA,KACA,eACA,IACA,aACA,KACA,YACA,KACA,aACA,KACA,sBACA,KACA,WACA,KACA,gBACA,KACA,QACA,IACA,QACA,IACA,QACA,IACA,aACA,MACA,aACA,KACA,aACA,MACA,eACA,KACA,aACA,KACA,aACA,MACA,aACA,KACA,WACA,IACA,UACA,IACA,UACA,IACA,iBACA,IACA,cACA,KACA,eACA,KACA,SACA,MACA,cACA,KACA,WACA,KACA,IACA,GACA,SACA,IACA,cACA,MACA,SACA,IACA,SACA,IACA,UACA,KACA,cACA,IACA,mBACA,KACA,mBACA,MACA,YACA,KACA,YACA,IACA,YACA,IACA,YACA,IACA,iBACA,IACA,iBACA,KACA,iBACA,IACA,oBACA,KACA,iBACA,IACA,kBACA,IACA,iBACA,MACA,YACA,KACA,SACA,IACA,cACA,MACA,aACA,KACA,QACA,IACA,aACA,KACA,gBACA,KACA,aACA,KACA,iBACA,KACA,aACA,KACA,gBACA,IACA,wBACA,KACA,iBACA,IACA,aACA,KACA,UACA,IACA,kBACA,KACA,kBACA,KACA,aACA,MACA,UACA,IACA,UACA,IACA,WACA,IACA,8BACA,IACA,iBACA,IACA,kBACA,IACA,iCACA,IACA,oBACA,IACA,eACA,IACA,QACA,IACA,iBACA,KACA,SACA,MACA,oBACA,KACA,0BACA,KACA,SACA,IACA,cACA,KACA,cACA,KACA,IACA,GACA,UACA,KACA,YACA,KACA,aACA,KACA,cACA,KACA,QACA,IACA,aACA,MACA,aACA,KACA,SACA,MACA,SACA,KACA,IACA,GACA,SACA,KACA,UACA,KACA,cACA,IACA,YACA,KACA,aACA,KACA,YACA,KACA,SACA,KACA,aACA,MACA,SACA,MACA,IACA,GACA,UACA,KACA,YACA,KACA,aACA,KACA,cACA,KACA,KACA,IACA,aACA,MACA,SACA,MACA,IACA,GACA,SACA,IACA,cACA,MACA,cACA,KACA,UACA,KACA,cACA,IACA,YACA,IACA,iBACA,MACA,aACA,KACA,YACA,KACA,eACA,KACA,uBACA,KACA,SACA,KACA,QACA,IACA,aACA,KACA,aACA,KACA,aACA,KACA,eACA,KACA,aACA,MACA,SACA,MACA,SACA,KACA,iBACA,KACA,yBACA,KACA,oBACA,KACA,4BACA,KACA,IACA,GACA,aACA,KACA,SACA,IACA,SACA,IACA,cACA,MACA,UACA,KACA,cACA,KACA,OACA,IACA,aACA,IACA,YACA,KACA,aACA,KACA,sBACA,KACA,qBACA,KACA,OACA,IACA,cACA,KACA,mBACA,KACA,cACA,KACA,uBACA,KACA,sBACA,KACA,aACA,KACA,aACA,MACA,SACA,MACA,UACA,IACA,IACA,GACA,YACA,KACA,SACA,IACA,SACA,KACA,aACA,KACA,aACA,KACA,kBACA,KACA,aACA,MACA,qBACA,KACA,kBACA,KACA,sBACA,KACA,2BACA,KACA,uBACA,KACA,WACA,KACA,YACA,MACA,SACA,IACA,cACA,KACA,iBACA,KACA,iBACA,KACA,cACA,KACA,kBACA,KACA,cACA,KACA,SACA,IACA,UACA,KACA,cACA,IACA,mBACA,KACA,sBACA,KACA,mBACA,KACA,uBACA,KACA,mBACA,KACA,QACA,IACA,gBACA,IACA,WACA,IACA,YACA,IACA,YACA,KACA,cACA,IACA,eACA,IACA,YACA,KACA,YACA,IACA,gBACA,KACA,QACA,KACA,YACA,IACA,oBACA,KACA,kBACA,IACA,YACA,KACA,aaACA,KACA,YACA,KACA,aACA,MACA,SACA,KACA,cACA,KACA,aACA,KACA,aACA,KACA,kBACA,KACA,YACA,KACA,iBACA,MACA,mBACA,MACA,kBACA,MACA,iBACA,IACA,qBACA,KACA,kBACA,KACA,sBACA,KACA,YACA,MACA,qBACA,MACA,UACA,MACA,OACA,KACA,aACA,KACA,mBACA,MACA,kBACA,MACA,uBACA,KACA,4BACA,MACA,uBACA,KACA,4BACA,MACA,aACA,KACA,kBACA,MACA,uBACA,KACA,4BACA,MACA,oBACA,KACA,yBACA,MACA,2BACA,MACA,0BACA,MACA,kBACA,MACA,mBACA,MACA,QACA,KACA,WACA,KACA,QACA,IACA,aACA,IACA,UACA,IACA,aACA,MACA,YACA,GACA,qBACA,MACA,iBACA,MACA,WACA,MACA,aACA,MACA,cACA,MACA,iBACA,MACA,kBACA,MACA,iBACA,KACA,QACA,KACA,mBACA,MACA,2BACA,MACA,oBACA,MACA,4BACA,MACA,YACA,KACA,aACA,KACA,WACA,KACA,YACA,IACA,eACA,KACA,kBACA,KACA,eACA,KACA,mBACA,KACA,UACA,IACA,eACA,MACA,SACA,KACA,qBACA,KACA,gBACA,IACA,QACA,MACA,aACA,KACA,cACA,KACA,qBACA,KACA,qBACA,KACA,eACA,MACA,cACA,MACA,MACA,KACA,iBACA,KACA,QACA,IACA,aACA,IACA,aACA,KACA,YACA,KACA,gBACA,KACA,gBACA,KACA,iBACA,KACA,cACA,KACA,eACA,KACA,eACA,KACA,eACA,KACA,gBACA,KACA,aACA,KACA,YACA,KACA,gBACA,KACA,iBACA,KACA,iBACA,KACA,mBACA,IACA,mBACA,IACA,oBACA,IACA,iBACA,IACA,eACA,MACA,YACA,KACA,eACA,KACA,qBACA,KACA,qBACA,KACA,iBACA,KACA,aACA,KACA,sBACA,KACA,kBACA,MACA,qBACA,KACA,kBACA,KACA,eACA,KACA,gBACA,KACA,UACA,KACA,YACA,KACA,eACA,KACA,kBACA,KACA,cACA,KACA,oBACA,KACA,eACA,KACA,eACA,KACA,cACA,MACA,cACA,GACA,uBACA,MACA,aACA,IACA,sBACA,MACA,UACA,IACA,gBACA,IACA,iBACA,MACA,iBACA,MACA,0BACA,MACA,WACA,GACA,uBACA,KACA,iBACA,KACA,eACA,KACA,oBACA,MACA,gBACA,MACA,WACA,KACA,YACA,MACA,sBACA,KACA,KACA,GACA,SACA,IACA,cACA,MACA,UACA,MACA,UACA,IACA,YACA,KACA,aACA,MACA,SACA,KACA,aACA,KACA,aACA,KACA,sBACA,KACA,kBACA,KACA,qBACA,KACA,kBACA,KACA,sBACA,KACA,eACA,KACA,cACA,KACA,OACA,KACA,mBACA,MACA,aACA,KACA,IACA,GACA,YACA,KACA,YACA,GACA,qBACA,MACA,SACA,KACA,aACA,KACA,aACA,KACA,aACA,MACA,WACA,KACA,aACA,MACA,MACA,IACA,eACA,MACA,YACA,MACA,UACA,KACA,aACA,KACA,YACA,KACA,uBACA,KACA,UACA,KACA,aACA,KACA,YACA,KACA,iBACA,MACA,mBACA,MACA,aACA,MACA,kBACA,MACA,uBACA,MACA,wBACA,MACA,qBACA,MACA,aACA,MACA,cACA,KACA,MACA,KACA,OACA,IACA,kBACA,IACA,YACA,MACA,kBACA,MACA,YACA,KACA,gBACA,MACA,aACA,KACA,UACA,KACA,cACA,KACA,cACA,KACA,QACA,IACA,aACA,MACA,aACA,MACA,gBACA,IACA,gBACA,KACA,aACA,MACA,cACA,KACA,eACA,KACA,4BACA,KACA,2BACA,KACA,4BACA,KACA,6BACA,MACA,qCACA,MACA,8BACA,MACA,sCACA,MACA,yBACA,KACA,0BACA,KACA,iBACA,KACA,4BACA,KACA,6BACA,KACA,mBACA,KACA,mBACA,KACA,cACA,KACA,YACA,KACA,yBACA,KACA,0BACA,KACA,+BACA,KACA,0BACA,KACA,QACA,KACA,aACA,KACA,QACA,KACA,aACA,MACA,eACA,KACA,aACA,MACA,aACA,MACA,SACA,KACA,WACA,MACA,UACA,MACA,YACA,IACA,cACA,MACA,eACA,MACA,qBACA,MACA,iBACA,MACA,cACA,MACA,oBACA,MACA,aACA,IACA,eACA,MACA,gBACA,MACA,sBACA,MACA,kBACA,MACA,eACA,MACA,qBACA,MACA,cACA,GACA,gBACA,MACA,gBACA,MACA,uBACA,MACA,gBACA,MACA,eACA,GACA,iBACA,MACA,iBACA,MACA,wBACA,MACA,iBACA,MACA,QACA,IACA,gBACA,IACA,WACA,IACA,wBACA,IACA,mBACA,IACA,yBACA,IACA,iBACA,IACA,yBACA,IACA,YACA,IACA,UACA,IACA,YACA,MACA,UACA,IACA,aACA,MACA,aACA,MACA,SACA,KACA,gBACA,KACA,iBACA,KACA,WACA,KACA,IACA,GACA,aACA,KACA,YACA,KACA,SACA,IACA,SACA,KACA,aACA,KACA,aACA,KACA,YACA,MACA,qBACA,KACA,iBACA,IACA,kBACA,KACA,sBACA,KACA,WACA,KACA,SACA,KACA,QACA,IACA,gBACA,IACA,WACA,IACA,iBACA,KACA,YACA,MACA,SACA,IACA,WACA,IACA,gBACA,KACA,UACA,KACA,cACA,IACA,QACA,IACA,OACA,IACA,aACA,IACA,WACA,MACA,UACA,IACA,aACA,IACA,OACA,IACA,aACA,KACA,eACA,MACA,gBACA,MACA,eACA,MACA,eACA,MACA,cACA,KACA,aACA,KACA,UACA,KACA,cACA,KACA,cACA,KACA,aACA,MACA,uBACA,KACA,YACA,MACA,cACA,KACA,gCACA,KACA,uBACA,KACA,sBACA,KACA,eACA,KACA,wBACA,KACA,4BACA,KACA,MACA,IACA,uBACA,MACA,sBACA,MACA,sBACA,MACA,gBACA,MACA,qBACA,MACA,eACA,KACA,cACA,KACA,eACA,KACA,cACA,KACA,QACA,IACA,qBACA,MACA,oBACA,MACA,oBACA,MACA,cACA,MACA,mBACA,MACA,oBACA,MACA,SACA,KACA,eACA,IACA,iBACA,KACA,WACA,KACA,aACA,KACA,mBACA,MACA,0BACA,KACA,2BACA,KACA,aACA,IACA,qBACA,IACA,gBACA,IACA,QACA,KACA,gBACA,IACA,cACA,IACA,eACA,IACA,iBACA,IACA,OACA,KACA,gBACA,KACA,gBACA,KACA,gBACA,MACA,aACA,MACA,kBACA,MACA,aACA,KACA,QACA,GACA,gBACA,KACA,iBACA,MACA,YACA,KACA,aACA,MACA,yBACA,IACA,qBACA,IACA,QACA,GACA,gBACA,IACA,qBACA,IACA,cACA,MACA,cACA,KACA,gBACA,KACA,gBACA,MACA,iBACA,MACA,wBACA,IACA,mBACA,IACA,aACA,MACA,gBACA,MACA,sBACA,IACA,iBACA,IACA,UACA,KACA,YACA,KACA,kBACA,KACA,UACA,KACA,aACA,EACA,aACA,EACA,YACA,EACA,aACA,GACA,YACA,GACA,aACA,GACA,aACA,GACA,aACA,GACA,aACA,GACA,aACA,IACA,aACA,GACA,YACA,GACA,aACA,EACA,aACA,EACA,aACA,GACA,aACA,GACA,aACA,EACA,YACA,GACA,YACA,GACA,YACA,GACA,YACA,EACA,YACA,GACA,aACA,GACA,cACA,EACA,YACA,GACA,YACA,GACA,YACA,GACA,aACA,EACA,aACA,EACA,aACA,GACA,aACA,GACA,YACA,GACA,YACA,GACA,YACA,IACA,gBACA,MACA,iBACA,MACA,oBACA,MACA,6BACA,MACA,4BACA,MACA,qBACA,MACA,8BACA,MACA,6BACA,MACA,oBACA,MACA,WACA,MACA,gBACA,MACA,SACA,KACA,WACA,KACA,aACA,IACA,WACA,KACA,UACA,KACA,WACA,IACA,WACA,MACA,UACA,MACA,WACA,MACA,UACA,MACA,IACA,IACA,aACA,KACA,YACA,KACA,YACA,KACA,SACA,KACA,iBACA,MACA,mBACA,MACA,kBACA,MACA,SACA,KACA,eACA,KACA,SACA,KACA,YACA,KACA,aACA,KACA,aACA,KACA,aACA,MACA,aACA,MACA,YACA,KACA,QACA,KACA,cACA,MACA,oBACA,MACA,cACA,KACA,iBACA,MACA,cACA,KACA,iBACA,KACA,uBACA,KACA,iBACA,KACA,QACA,KACA,cACA,KACA,kBACA,KACA,2BACA,KACA,WACA,MACA,sBACA,MACA,8BACA,MACA,uBACA,MACA,+BACA,MACA,0BACA,IACA,eACA,KACA,gBACA,KACA,WACA,KACA,WACA,MACA,cACA,IACA,cACA,KACA,aACA,KACA,gBACA,IACA,iBACA,IACA,cACA,IACA,iBACA,KACA,0BACA,IACA,YACA,MACA,WACA,MACA,SACA,IACA,WACA,KACA,UACA,KACA,mBACA,KACA,SACA,IACA,aACA,KACA,UACA,KACA,cACA,KACA,cACA,KACA,aACA,KACA,kBACA,MACA,YACA,KACA,cACA,KACA,WACA,KACA,eACA,KACA,eACA,KACA,aACA,KACA,YACA,KACA,yBACA,KACA,0BACA,KACA,aACA,KACA,SACA,IACA,aACA,KACA,aACA,MACA,YACA,KACA,aACA,MACA,aACA,KACA,cACA,KACA,QACA,IACA,cACA,IACA,sCACA,KACA,OACA,IACA,aACA,KACA,UACA,KACA,cACA,KACA,cACA,KACA,QACA,IACA,iBACA,IACA,oBACA,IACA,UACA,KACA,mBACA,KACA,WACA,IACA,gBACA,MACA,mBACA,IACA,cACA,IACA,gBACA,MACA,gBACA,IACA,aACA,MACA,aACA,MACA,YACA,MACA,SACA,IACA,UACA,KACA,gBACA,KACA,cACA,KACA,UACA,KACA,aACA,KACA,WACA,MACA,UACA,IACA,aACA,MACA,UACA,KACA,cACA,KACA,YACA,KACA,aACA,MACA,aACA,MACA,SACA,GACA,iBACA,MACA,kBACA,MACA,iBACA,MACA,cACA,MACA,iBACA,MACA,OACA,KACA,aACA,MACA,YACA,IACA,eACA,IACA,cACA,IACA,eACA,IACA,cACA,MACA,WACA,IACA,WACA,MACA,qBACA,IACA,UACA,KACA,eACA,KACA,iBACA,MACA,uBACA,MACA,mBACA,IACA,cACA,IACA,SACA,KACA,YACA,MACA,QACA,IACA,UACA,IACA,aACA,MACA,aACA,MACA,KACA,IACA,WACA,IACA,UACA,IACA,SACA,IACA,uBACA,KACA,cACA,KACA,eACA,KACA,IACA,IACA,SACA,IACA,QACA,KACA,WACA,KACA,YACA,MACA,SACA,IACA,cACA,KACA,kBACA,KACA,uBACA,KACA,2BACA,KACA,SACA,IACA,gBACA,KACA,cACA,KACA,kBACA,KACA,UACA,KACA,cACA,IACA,mBACA,KACA,mBACA,KACA,sBACA,KACA,mBACA,KACA,uBACA,KACA,mBACA,KACA,YACA,KACA,YACA,IACA,QACA,KACA,YACA,IACA,OACA,IACA,aACA,IACA,YACA,KACA,aACA,KACA,kBACA,KACA,aACA,KACA,SACA,IACA,YACA,KACA,aACA,KACA,aACA,MACA,YACA,MACA,aACA,KACA,aACA,MACA,QACA,GACA,cACA,KACA,eACA,KACA,cACA,KACA,8BACA,MACA,YACA,KACA,iBACA,KACA,gBACA,KACA,iBACA,KACA,gBACA,KACA,gBACA,KACA,kBACA,KACA,gBACA,MACA,mBACA,KACA,wBACA,MACA,gBACA,KACA,iBACA,MACA,gBACA,MACA,aACA,KACA,cACA,KACA,eACA,KACA,aACA,KACA,gBACA,KACA,YACA,KACA,iBACA,IACA,oBACA,KACA,YACA,MACA,qBACA,MACA,kBACA,KACA,UACA,MACA,aACA,KACA,UACA,KACA,eACA,KACA,cACA,KACA,eACA,KACA,cACA,KACA,WACA,KACA,mBACA,KACA,UACA,IACA,eACA,KACA,eACA,KACA,aACA,KACA,SACA,KACA,iBACA,MACA,aACA,MACA,uBACA,KACA,WACA,KACA,aACA,MACA,aACA,KACA,SACA,KACA,iBACA,MACA,sBACA,KACA,MACA,IACA,cACA,MACA,gBACA,KACA,iBACA,KACA,UACA,KACA,UACA,IACA,WACA,MACA,QACA,IACA,cACA,IACA,gBACA,IACA,sBACA,IACA,oBACA,IACA,SACA,KACA,UACA,IACA,eACA,IACA,QACA,GACA,iBACA,MACA,aACA,MACA,gBACA,KACA,cACA,KACA,aACA,MACA,aACA,KACA,YACA,IACA,oBACA,KACA,aACA,KACA,sBACA,KACA,MACA,IACA,UACA,IACA,aACA,KACA,sBACA,KACA,kBACA,IACA,mBACA,IACA,iBACA,MACA,iBACA,MACA,0BACA,MACA,YACA,KACA,YACA,MACA,MACA,IACA,aACA,KACA,WACA,IACA,MACA,IACA,SACA,KACA,cACA,KACA,qBACA,KACA,yBACA,KACA,gBACA,KACA,oBACA,KACA,UACA,IACA,WACA,MACA,OACA,KACA,oBACA,KACA,iBACA,KACA,qBACA,KACA,SACA,GACA,iBACA,KACA,YACA,KACA,aACA,IACA,kBACA,MACA,kBACA,MACA,cACA,MACA,cACA,KACA,MACA,IACA,WACA,IACA,UACA,IACA,cACA,IACA,UACA,IACA,IACA,IACA,SACA,KACA,aACA,KACA,aACA,KACA,cACA,KACA,iBACA,KACA,iBACA,KACA,YACA,MACA,UACA,KACA,aACA,KACA,YACA,KACA,cACA,KACA,iBACA,MACA,mBACA,MACA,kBACA,MACA,YACA,IACA,SACA,KACA,KACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,KACA,MACA,gBACA,KACA,eACA,KACA,gBACA,KACA,aACA,KACA,YACA,KACA,aACA,KACA,WACA,KACA,iBACA,MACA,uBACA,MACA,iBACA,KACA,WACA,KACA,iBACA,KACA,WACA,KACA,iBACA,KACA,UACA,KACA,gBACA,KACA,aACA,KACA,mBACA,KACA,mBACA,IACA,UACA,KACA,eACA,KACA,OACA,GACA,aACA,KACA,cACA,KACA,aACA,KACA,6BACA,MACA,WACA,KACA,cACA,KACA,eACA,KACA,eACA,KACA,iBACA,KACA,eACA,MACA,uBACA,MACA,eACA,KACA,gBACA,MACA,eACA,MACA,YACA,KACA,aACA,KACA,cACA,KACA,YACA,KACA,eACA,KACA,WACA,KACA,KACA,MACA,SACA,IACA,aACA,MACA,WACA,MACA,YACA,KACA,WACA,KACA,cACA,KACA,SACA,KACA,OACA,GACA,aACA,KACA,cACA,KACA,aACA,KACA,6BACA,MACA,WACA,KACA,eACA,KACA,eACA,KACA,iBACA,KACA,eACA,MACA,uBACA,MACA,eACA,KACA,gBACA,MACA,uBACA,KACA,eACA,MACA,YACA,KACA,aACA,KACA,cACA,KACA,YACA,KACA,eACA,KACA,iBACA,KACA,gBACA,KACA,iBACA,KACA,WACA,KACA,oBACA,IACA,SACA,KACA,WACA,KACA,QACA,KACA,IACA,IACA,YACA,KACA,SACA,IACA,SACA,KACA,YACA,KACA,iBACA,MACA,mBACA,MACA,kBACA,MACA,aACA,KACA,aACA,KACA,aACA,MACA,aACA,MACA,QACA,IACA,kBACA,IACA,gBACA,IACA,eACA,KACA,YACA,MACA,SACA,IACA,SACA,IACA,WACA,IACA,UACA,KACA,cACA,IACA,eACA,IACA,OACA,IACA,aACA,IACA,aACA,KACA,aACA,MACA,aACA,MACA,qBACA,KACA,qBACA,KACA,eACA,KACA,qBACA,KACA,aACA,IACA,wBACA,KACA,kBACA,KACA,WACA,MACA,aACA,KACA,eACA,KACA,UACA,KACA,cACA,KACA,cACA,KACA,cACA,KACA,mBACA,MACA,qBACA,MACA,oBACA,MACA,wBACA,KACA,oBACA,KACA,oBACA,KACA,WACA,KACA,eACA,KACA,QACA,IACA,YACA,MACA,aACA,MACA,aACA,MACA,cACA,KACA,QACA,KACA,cACA,MACA,oBACA,MACA,cACA,KACA,cACA,KACA,wBACA,IACA,cACA,IACA,sBACA,IACA,iBACA,IACA,sBACA,IACA,yBACA,IACA,8BACA,IACA,oBACA,IACA,4BACA,IACA,UACA,KACA,aACA,MACA,aACA,MACA,aACA,MACA,SACA,KACA,YACA,MACA,WACA,KACA,QACA,GACA,gBACA,IACA,WACA,IACA,YACA,IACA,YACA,KACA,cACA,IACA,iBACA,MACA,eACA,IACA,UACA,GACA,eACA,KACA,qBACA,KACA,mBACA,MACA,sBACA,KACA,gBACA,KACA,mBACA,KACA,eACA,MACA,UACA,IACA,UACA,IACA,aACA,MACA,gBACA,IACA,iBACA,IACA,gBACA,KACA,iBACA,KACA,aACA,MACA,eACA,MACA,WACA,MACA,IACA,IACA,sBACA,KACA,iBACA,KACA,YACA,KACA,sBACA,KACA,SACA,KACA,aACA,KACA,aACA,KACA,YACA,KACA,iBACA,MACA,mBACA,MACA,aACA,MACA,kBACA,MACA,cACA,MACA,aACA,MACA,sBACA,MACA,iBACA,KACA,cACA,KACA,iBACA,KACA,eACA,MACA,mBACA,KACA,oBACA,KACA,qBACA,KACA,WACA,MACA,aACA,KACA,eACA,KACA,eACA,KACA,eACA,KACA,mBACA,KACA,yBACA,KACA,0BACA,KACA,uBACA,KACA,cACA,KACA,gBACA,KACA,gBACA,KACA,gBACA,KACA,oBACA,KACA,0BACA,KACA,2BACA,KACA,wBACA,KACA,aACA,KACA,eACA,KACA,eACA,KACA,eACA,KACA,mBACA,KACA,yBACA,KACA,0BACA,KACA,uBACA,KACA,OACA,IACA,YACA,MACA,cACA,KACA,WACA,KACA,UACA,KACA,cACA,IACA,YACA,KACA,aACA,KACA,YACA,KACA,KACA,KACA,QACA,KACA,iBACA,KACA,iBACA,KACA,WACA,MACA,iBACA,MACA,kBACA,KACA,YACA,KACA,WACA,KACA,uBACA,MACA,uBACA,MACA,iBACA,MACA,2BACA,MACA,8BACA,MACA,yBACA,MACA,mBACA,MACA,aACA,MACA,wBACA,MACA,kBACA,MACA,kBACA,MACA,aACA,MACA,sBACA,MACA,kBACA,MACA,WACA,IACA,eACA,MACA,MACA,KACA,YACA,KACA,QACA,IACA,gBACA,IACA,qBACA,MACA,oBACA,MACA,oBACA,MACA,cACA,MACA,mBACA,MACA,aACA,MACA,aACA,MACA,sBACA,MACA,QACA,KACA,UACA,KACA,UACA,KACA,UACA,KACA,cACA,KACA,oBACA,KACA,qBACA,KACA,kBACA,KACA,aACA,KACA,aACA,MACA,aACA,KACA,YACA,KACA,aACA,MACA,aACA,MACA,sBACA,MACA,QACA,KACA,UACA,KACA,UACA,KACA,UACA,KACA,cACA,KACA,oBACA,KACA,qBACA,KACA,kBACA,KACA,eACA,KACA,gBACA,IACA,UACA,IACA,0BACA,IACA,wBACA,IACA,aACA,MACA,aACA,KACA,gBACA,KACA,UACA,IACA,aACA,KACA,QACA,KACA,SACA,KACA,YACA,IACA,UACA,IACA,aACA,MACA,eACA,MACA,aACA,MACA,sBACA,MACA,eACA,IACA,kBACA,IACA,KACA,IACA,SACA,GACA,iBACA,MACA,kBACA,MACA,cACA,MACA,iBACA,MACA,YACA,KACA,IACA,IACA,SACA,IACA,aACA,KACA,WACA,KACA,YACA,MACA,SACA,IACA,SACA,IACA,UACA,KACA,cACA,IACA,YACA,KACA,YACA,IACA,uBACA,MACA,sBACA,MACA,2BACA,MACA,uBACA,MACA,0BACA,MACA,mBACA,MACA,mBACA,MACA,uBACA,MACA,iCACA,MACA,2BACA,MACA,wBACA,MACA,6BACA,MACA,6BACA,MACA,2BACA,MACA,6BACA,MACA,4BACA,MACA,uBACA,MACA,uBACA,MACA,wBACA,MACA,2BACA,MACA,yBACA,MACA,wBACA,MACA,wBACA,MACA,uBACA,MACA,4BACA,MACA,wBACA,MACA,uBACA,MACA,uBACA,MACA,oBACA,MACA,yBACA,MACA,wBACA,MACA,4BACA,MACA,2BACA,MACA,yBACA,MACA,0BACA,MACA,uBACA,MACA,0BACA,MACA,mBACA,MACA,0BACA,MACA,wBACA,MACA,wBACA,MACA,sBACA,MACA,4BACA,MACA,wBACA,MACA,uBACA,MACA,kBACA,MACA,uBACA,MACA,sBACA,MACA,sBACA,MACA,qBACA,MACA,uBACA,MACA,sBACA,MACA,QACA,KACA,YACA,IACA,iBACA,KACA,oBACA,KACA,YACA,KACA,kBACA,KACA,aACA,KACA,qBACA,MACA,oBACA,MACA,oBACA,MACA,cACA,MACA,mBACA,MACA,SACA,IACA,YACA,KACA,YACA,KACA,YACA,MACA,aACA,KACA,YACA,KACA,aACA,KACA,SACA,KACA,aACA,KACA,aACA,KACA,kBACA,KACA,iBACA,IACA,kBACA,KACA,qBACA,KACA,kBACA,KACA,sBACA,KACA,KACA,IACA,YACA,MACA,qBACA,MACA,UACA,MACA,OACA,IACA,aACA,KACA,UACA,IACA,kBACA,KACA,4BACA,KACA,iBACA,KACA,aACA,MACA,YACA,KACA,WACA,KACA,cACA,KACA,WACA,KACA,iBACA,KACA,aACA,KACA,aACA,MACA,cACA,KACA,aACA,KACA,eACA,KACA,aACA,MACA,YACA,KACA,YACA,KACA,eACA,KACA,aACA,KACA,UACA,IACA,OACA,IACA,eACA,IACA,oBACA,IACA,YACA,IACA,YACA,IACA,SACA,KACA,cACA,KACA,iBACA,MACA,iBACA,MACA,0BACA,MACA,gBACA,KACA,UACA,IACA,YACA,MACA,oBACA,MACA,oBACA,MACA,SACA,IACA,cACA,KACA,aACA,MACA,aACA,KACA,oBACA,KACA,iBACA,KACA,qBACA,KACA,kBACA,KACA,0BACA,KACA,IACA,IACA,aACA,KACA,YACA,KACA,SACA,KACA,aACA,KACA,aACA,KACA,YACA,MACA,SACA,IACA,UACA,KACA,cACA,IACA,eACA,IACA,iBACA,IACA,aACA,KACA,aACA,KACA,kBACA,MACA,oBACA,MACA,mBACA,MACA,YACA,KACA,iBACA,MACA,aACA,KACA,UACA,KACA,cACA,KACA,cACA,KACA,eACA,KACA,MACA,MACA,aACA,MACA,SACA,KACA,YACA,IACA,IACA,IACA,oBACA,KACA,YACA,KACA,SACA,KACA,aACA,KACA,sBACA,KACA,SACA,KACA,MACA,KACA,YACA,KACA,YACA,MACA,kBACA,MACA,iBACA,MACA,YACA,KACA,mBACA,MACA,kBACA,MACA,gBACA,MACA,aACA,KACA,aACA,KACA,aACA,MACA,iBACA,KACA,aACA,MACA,sBACA,MACA,QACA,IACA,mBACA,KACA,sBACA,MACA,wBACA,MACA,sBACA,MACA,2BACA,MACA,gBACA,MACA,oBACA,KACA,iCACA,KACA,kBACA,MACA,WACA,MACA,cACA,KACA,iBACA,KACA,mBACA,KACA,+BACA,MACA,2BACA,KACA,YACA,MACA,aACA,MACA,SACA,IACA,WACA,IACA,UACA,KACA,eACA,IACA,YACA,KACA,cACA,KACA,aACA,MACA,aACA,MACA,sBACA,MACA,cACA,KACA,kBACA,MACA,eACA,IACA,aACA,KACA,cACA,KACA,UACA,KACA,cACA,KACA,cACA,KACA,aACA,KACA,kBACA,MACA,oBACA,MACA,mBACA,MACA,aACA,IACA,WACA,KACA,eACA,KACA,uBACA,MACA,sBACA,MACA,sBACA,MACA,gBACA,MACA,qBACA,MACA,cACA,KACA,cACA,KACA,eACA,KACA,eACA,KACA,aACA,KACA,QACA,IACA,iBACA,KACA,YACA,MACA,aACA,MACA,aACA,MACA,sBACA,MACA,mBACA,MACA,oBACA,MACA,aACA,MACA,sBACA,MACA,qBACA,MACA,qBACA,MACA,eACA,MACA,oBACA,MACA,mBACA,MACA,cACA,KACA,aACA,KACA,WACA,MACA,gBACA,MACA,aACA,MACA,kBACA,MACA,aACA,MACA,aACA,MACA,YACA,KACA,aACA,MACA,sBACA,MACA,cACA,MACA,gBACA,KACA,uBACA,MACA,aACA,IACA,SACA,KACA,YACA,MACA,cACA,KACA,WACA,MACA,UACA,IACA,aACA,MACA,aACA,MACA,sBACA,MACA,WACA,MACA,WACA,MACA,IACA,IACA,YACA,KACA,SACA,IACA,SACA,KACA,aACA,KACA,aACA,KACA,kBACA,KACA,qBACA,MACA,+BACA,MACA,kCACA,MACA,+BACA,MACA,kCACA,MACA,wBACA,MACA,+BACA,MACA,kCACA,MACA,YACA,KACA,SACA,IACA,eACA,IACA,QACA,KACA,cACA,MACA,oBACA,MACA,cACA,KACA,iBACA,MACA,sBACA,MACA,mBACA,MACA,uBACA,MACA,uBACA,MACA,0BACA,MACA,kBACA,MACA,0BACA,MACA,uBACA,MACA,cACA,KACA,OACA,IACA,QACA,IACA,YACA,MACA,SACA,IACA,WACA,IACA,UACA,KACA,mBACA,KACA,eACA,IACA,OACA,IACA,aACA,IACA,YACA,KACA,kBACA,KACA,oBACA,IACA,mBACA,IACA,OACA,GACA,YACA,KACA,qBACA,KACA,gBACA,MACA,mBACA,KACA,gBACA,KACA,gBACA,KACA,YACA,MACA,OACA,IACA,UACA,KACA,iBACA,IACA,OACA,KACA,eACA,KACA,KACA,IACA,cACA,KACA,KACA,MACA,UACA,KACA,cACA,KACA,aACA,KACA,WACA,KACA,mBACA,KACA,gBACA,KACA,4BACA,KACA,yBACA,KACA,eACA,IACA,aACA,MACA,WACA,MACA,cACA,KACA,aACA,KACA,aACA,IACA,qBACA,KACA,YACA,KACA,aACA,KACA,QACA,IACA,oBACA,MACA,aACA,IACA,gBACA,MACA,UACA,KACA,SACA,KACA,SACA,IACA,UACA,KACA,YACA,MACA,UACA,KACA,SACA,KACA,kBACA,KACA,eACA,KACA,2BACA,KACA,wBACA,KACA,WACA,MACA,IACA,IACA,YACA,KACA,SACA,IACA,iBACA,IACA,YACA,IACA,eACA,IACA,kBACA,MACA,SACA,KACA,SACA,KACA,aACA,KACA,aACA,KACA,iBACA,KACA,qBACA,KACA,aACA,MACA,yBACA,MACA,0BACA,MACA,kBACA,KACA,2BACA,MACA,mBACA,MACA,oBACA,MACA,YACA,KACA,qBACA,MACA,qBACA,MACA,iBACA,KACA,oBACA,MACA,gBACA,KACA,oBACA,MACA,qBACA,MACA,aACA,KACA,sBACA,MACA,oBACA,MACA,qBACA,MACA,aACA,KACA,sBACA,MACA,eACA,KACA,aACA,MACA,sBACA,MACA,OACA,KACA,gBACA,MACA,cACA,KACA,OACA,KACA,qBACA,KACA,WACA,MACA,YACA,MACA,WACA,MACA,UACA,KACA,eACA,MACA,aACA,KACA,YACA,KACA,aACA,KACA,kBACA,MACA,oBACA,MACA,mBACA,MACA,wBACA,MACA,yBACA,MACA,gBACA,MACA,aACA,MACA,iBACA,MACA,aACA,MACA,sBACA,MACA,MACA,KACA,YACA,MACA,kBACA,MACA,YACA,KACA,cACA,KACA,eACA,KACA,qBACA,KACA,yBACA,KACA,mBACA,KACA,QACA,IACA,YACA,MACA,6BACA,MACA,SACA,IACA,qBACA,MACA,oBACA,MACA,oBACA,MACA,cACA,MACA,qBACA,MACA,mBACA,MACA,mBACA,MACA,kBACA,MACA,aACA,MACA,aACA,MACA,sBACA,MACA,QACA,KACA,gBACA,IACA,cACA,KACA,WACA,IACA,YACA,KACA,SACA,KACA,kBACA,MACA,aACA,MACA,iBACA,IACA,WACA,MACA,gBACA,MACA,aACA,MACA,kBACA,MACA,aACA,MACA,aACA,MACA,aACA,MACA,sBACA,MACA,YACA,MACA,WACA,KACA,eACA,MACA,sBACA,MACA,SACA,KACA,YACA,MACA,WACA,MACA,YACA,MACA,UACA,IACA,KACA,IACA,MACA,IACA,YACA,MACA,cACA,KACA,WACA,KACA,YACA,MACA,UACA,IACA,YACA,MACA,aACA,MACA,aACA,MACA,sBACA,MACA,YACA,MACA,WACA,IACA,YACA,MACA,cACA,KACA,kBACA,KACA,cACA,KACA,iBACA,KACA,gBACA,KACA,iBACA,KACA,YACA,MACA,YACA,MACA,YACA,MACA,eACA,MACA,WACA,MACA,eACA,MACA,WACA,MACA,IACA,IACA,YACA,KACA,QACA,KACA,SACA,IACA,SACA,KACA,aACA,KACA,aACA,KACA,aACA,MACA,aACA,MACA,sBACA,MACA,cACA,IACA,WACA,MACA,YACA,MACA,UACA,IACA,SACA,IACA,WACA,IACA,UACA,KACA,mBACA,KACA,eACA,IACA,aACA,KACA,YACA,KACA,aACA,MACA,aACA,MACA,sBACA,MACA,gBACA,KACA,WACA,MACA,aACA,KACA,UACA,KACA,cACA,KACA,cACA,KACA,aACA,KACA,YACA,MACA,YACA,IACA,iBACA,IACA,qBACA,MACA,oBACA,MACA,mBACA,MACA,oBACA,MACA,mBACA,MACA,cACA,MACA,qBACA,MACA,mBACA,MACA,kBACA,MACA,oBACA,MACA,aACA,MACA,aACA,MACA,sBACA,MACA,mBACA,MACA,eACA,KACA,OACA,GACA,aACA,KACA,cACA,KACA,aACA,KACA,6BACA,MACA,WACA,KACA,eACA,KACA,eACA,KACA,iBACA,KACA,eACA,MACA,uBACA,MACA,eACA,KACA,gBACA,MACA,eACA,MACA,YACA,KACA,aACA,KACA,cACA,KACA,YACA,KACA,eACA,KACA,iBACA,KACA,gBACA,KACA,iBACA,KACA,WACA,KACA,KACA,IACA,cACA,KACA,YACA,MACA,qBACA,MACA,gBACA,IACA,aACA,KACA,aACA,MACA,WACA,MACA,aACA,KACA,UACA,KACA,cACA,KACA,cACA,KACA,WACA,KACA,aACA,MACA,aACA,MACA,sBACA,MACA,mBACA,IACA,YACA,KACA,WACA,KACA,aACA,KACA,kBACA,MACA,mBACA,KACA,wBACA,MACA,oBACA,MACA,wBACA,MACA,yBACA,MACA,mBACA,MACA,wBACA,MACA,yBACA,MACA,sBACA,MACA,cACA,KACA,aACA,KACA,eACA,KACA,WACA,KACA,aACA,KACA,qBACA,KACA,oBACA,KACA,eACA,KACA,UACA,KACA,kBACA,KACA,cACA,KACA,cACA,KACA,YACA,KACA,cACA,KACA,cACA,KACA,cACA,KACA,SACA,KACA,WACA,MACA,YACA,KACA,SACA,IACA,KACA,IACA,aACA,MACA,aACA,MACA,sBACA,MACA,eACA,KACA,YACA,KACA,gBACA,KACA,gBACA,KACA,aACA,GACA,sBACA,MACA,kBACA,MACA,mBACA,IACA,wBACA,IACA,SACA,KACA,MACA,KACA,YACA,MACA,kBACA,MACA,YACA,KACA,WACA,MACA,WACA,MACA,aACA,KACA,UACA,KACA,cACA,KACA,cACA,KACA,IACA,IACA,SACA,IACA,WACA,KACA,UACA,IACA,kBACA,KACA,0BACA,KACA,WACA,KACA,YACA,MACA,SACA,IACA,cACA,KACA,kBACA,KACA,uBACA,KACA,2BACA,KACA,SACA,IACA,UACA,KACA,cACA,IACA,mBACA,KACA,sBACA,KACA,mBACA,KACA,uBACA,KACA,mBACA,KACA,YACA,KACA,YACA,IACA,YACA,IACA,QACA,KACA,YACA,IACA,oBACA,KACA,YACA,KACA,KACA,IACA,WACA,MACA,SACA,IACA,YACA,IACA,SACA,IACA,YACA,KACA,aACA,KACA,YACA,MACA,aACA,KACA,QACA,IACA,aACA,KACA,gBACA,KACA,aACA,KACA,iBACA,KACA,aACA,KACA,gBACA,IACA,KACA,IACA,iBACA,IACA,YACA,MACA,qBACA,MACA,UACA,MACA,YACA,KACA,UACA,IACA,eACA,KACA,eACA,KACA,SACA,KACA,QACA,IACA,SACA,IACA,gBACA,KACA,mBACA,IACA,qBACA,KACA,qBACA,KACA,aACA,IACA,aACA,KACA,UACA,IACA,eACA,IACA,aACA,MACA,MACA,GACA,YACA,KACA,aACA,KACA,YACA,KACA,4BACA,MACA,UACA,KACA,iBACA,KACA,YACA,KACA,YACA,MACA,cACA,KACA,cACA,KACA,gBACA,KACA,UACA,IACA,cACA,MACA,sBACA,MACA,cACA,KACA,eACA,MACA,sBACA,KACA,cACA,MACA,WACA,KACA,YACA,KACA,aACA,KACA,aACA,IACA,WACA,KACA,cACA,IACA,UACA,KACA,WACA,KACA,UACA,IACA,gBACA,IACA,aACA,KACA,kBACA,KACA,QACA,IACA,SACA,KACA,aACA,KACA,SACA,KACA,cACA,IACA,eACA,IACA,aACA,KACA,aACA,KACA,sBACA,KACA,SACA,IACA,cACA,IACA,iBACA,MACA,iBACA,MACA,0BACA,MACA,eACA,IACA,YACA,MACA,aACA,KACA,SACA,IACA,cACA,KACA,iBACA,KACA,aACA,MACA,WACA,KACA,qBACA,MACA,cACA,IACA,iBACA,MACA,kBACA,MACA,eACA,MACA,YACA,IACA,oBACA,KACA,iBACA,KACA,qBACA,KACA,IACA,IACA,eACA,MACA,iBACA,MACA,YACA,KACA,SACA,KACA,SACA,KACA,WACA,KACA,SACA,KACA,aACA,KACA,aACA,KACA,aACA,MACA,gBACA,KACA,aACA,MACA,4BACA,KACA,mBACA,KACA,gBACA,MACA,YACA,IACA,WACA,KACA,YACA,GACA,wBACA,MACA,cACA,MACA,cACA,MACA,oBACA,KACA,qBACA,MACA,iBACA,MACA,oBACA,KACA,cACA,MACA,oBACA,MACA,aACA,GACA,yBACA,MACA,eACA,MACA,eACA,MACA,qBACA,KACA,sBACA,MACA,kBACA,MACA,qBACA,KACA,eACA,MACA,qBACA,MACA,cACA,KACA,cACA,KACA,eACA,KACA,WACA,MACA,QACA,KACA,UACA,KACA,UACA,KACA,UACA,KACA,cACA,KACA,oBACA,KACA,qBACA,KACA,kBACA,KACA,cACA,KACA,YACA,MACA,UACA,KACA,aACA,KACA,KACA,KACA,aACA,KACA,WACA,MACA,iBACA,MACA,cACA,MACA,sBACA,MACA,YACA,KACA,cACA,KACA,WACA,KACA,iBACA,MACA,mBACA,MACA,aACA,MACA,kBACA,MACA,aACA,MACA,uBACA,KACA,eACA,MACA,UACA,GACA,gBACA,KACA,mBACA,MACA,eACA,MACA,SACA,GACA,iBACA,KACA,iBACA,IACA,kBACA,MACA,iBACA,MACA,kBACA,MACA,cACA,MACA,iBACA,MACA,sBACA,IACA,gBACA,KACA,cACA,KACA,SACA,KACA,WACA,MACA,aACA,KACA,UACA,KACA,cACA,KACA,cACA,KACA,MACA,IACA,OACA,IACA,uBACA,MACA,sBACA,MACA,sBACA,MACA,gBACA,MACA,qBACA,MACA,WACA,IACA,cACA,KACA,iBACA,IACA,QACA,IACA,cACA,KACA,eACA,KACA,iBACA,KACA,KACA,IACA,qBACA,MACA,oBACA,MACA,mBACA,MACA,oBACA,MACA,oBACA,MACA,cACA,MACA,mBACA,MACA,wBACA,MACA,kBACA,MACA,wBACA,MACA,qBACA,MACA,oBACA,MACA,aACA,MACA,aACA,MACA,gBACA,IACA,eACA,KACA,OACA,GACA,eACA,IACA,aACA,KACA,YACA,IACA,UACA,IACA,gBACA,MACA,YACA,MACA,eACA,KACA,aACA,MACA,WACA,MACA,aACA,MACA,yBACA,KACA,yBACA,KACA,0BACA,KACA,uBACA,KACA,aACA,MACA,YACA,KACA,aACA,MACA,iBACA,MACA,SACA,KACA,WACA,KACA,eACA,KACA,WACA,IACA,gBACA,KACA,UACA,KACA,aACA,KACA,gBACA,MACA,YACA,KACA,eACA,KACA,iBACA,KACA,aACA,KACA,eACA,KACA,MACA,IACA,cACA,KACA,2BACA,KACA,WACA,MACA,aACA,MACA,aACA,MACA,WACA,MACA,WACA,MACA,IACA,IACA,SACA,KACA,cACA,KACA,YACA,KACA,iBACA,MACA,mBACA,MACA,kBACA,MACA,SACA,KACA,WACA,KACA,WACA,KACA,WACA,KACA,WACA,KACA,WACA,KACA,WACA,KACA,WACA,KACA,eACA,KACA,qBACA,KACA,oBACA,KACA,0BACA,KACA,2BACA,KACA,wBACA,KACA,sBACA,KACA,mBACA,KACA,mBACA,KACA,YACA,MACA,UACA,KACA,QACA,IACA,aACA,MACA,MACA,KACA,YACA,MACA,kBACA,MACA,YACA,KACA,SACA,KACA,cACA,KACA,SACA,KACA,WACA,KACA,WACA,KACA,WACA,KACA,eACA,KACA,qBACA,KACA,sBACA,KACA,mBACA,KACA,WACA,GACA,iBACA,KACA,mBACA,KACA,eACA,IACA,oBACA,MACA,gBACA,IACA,oBACA,MACA,gBACA,MACA,WACA,GACA,eACA,KACA,eACA,KACA,oBACA,MACA,gBACA,MACA,wBACA,MACA,gBACA,KACA,YACA,KACA,oBACA,KACA,gBACA,KACA,aACA,KACA,cACA,IACA,iBACA,KACA,cACA,GACA,uBACA,MACA,IACA,IACA,aACA,KACA,YACA,KACA,SACA,IACA,SACA,KACA,UACA,KACA,YACA,MACA,iBACA,MACA,wBACA,MACA,YACA,MACA,OACA,KACA,aACA,KACA,aACA,KACA,aACA,KACA,aACA,MACA,aACA,MACA,sBACA,MACA,yBACA,KACA,0BACA,KACA,WACA,IACA,QACA,KACA,YACA,MACA,SACA,IACA,WACA,IACA,UACA,KACA,eACA,IACA,YACA,IACA,aACA,KACA,YACA,KACA,kBACA,KACA,gBACA,KACA,eACA,KACA,iBACA,KACA,aACA,IACA,eACA,MACA,gBACA,MACA,YACA,KACA,cACA,KACA,iBACA,MACA,aACA,MACA,aACA,MACA,sBACA,MACA,OACA,KACA,mBACA,MACA,aACA,KACA,gBACA,KACA,cACA,KACA,qBACA,KACA,gBACA,KACA,YACA,IACA,oBACA,IACA,aACA,KACA,UACA,KACA,MACA,IACA,QACA,IACA,cACA,IACA,sBACA,IACA,iBACA,KACA,gBACA,IACA,qBACA,MACA,oBACA,MACA,oBACA,MACA,mBACA,MACA,oBACA,MACA,wBACA,MACA,cACA,MACA,mBACA,MACA,qBACA,MACA,mBACA,MACA,qBACA,MACA,mBACA,MACA,uBACA,MACA,kBACA,MACA,qBACA,MACA,oBACA,MACA,yBACA,MACA,aACA,KACA,oBACA,IACA,gBACA,KACA,aACA,MACA,aACA,MACA,sBACA,MACA,OACA,IACA,eACA,IACA,UACA,IACA,eACA,IACA,uBACA,KACA,uBACA,IACA,uBACA,IACA,gBACA,IACA,wBACA,IACA,wBACA,IACA,iBACA,IACA,gBACA,MACA,aACA,KACA,WACA,IACA,iBACA,IACA,aACA,MACA,aACA,MACA,aACA,MACA,sBACA,MACA,YACA,KACA,SACA,KACA,aACA,KACA,UACA,KACA,cACA,KACA,aACA,KACA,kBACA,MACA,mBACA,KACA,gBACA,KACA,oBACA,KACA,4BACA,KACA,yBACA,KACA,6BACA,KACA,YACA,MACA,UACA,KACA,UACA,IACA,kBACA,IACA,aACA,MACA,aACA,MACA,sBACA,MACA,mBACA,KACA,mBACA,KACA,SACA,MACA,SACA,KACA,kBACA,KACA,eACA,KACA,mBACA,KACA,2BACA,KACA,wBACA,KACA,4BACA,KACA,IACA,IACA,YACA,KACA,SACA,IACA,kBACA,KACA,YACA,KACA,SACA,KACA,iBACA,MACA,mBACA,MACA,kBACA,MACA,aACA,KACA,aACA,KACA,aACA,MACA,aACA,MACA,sBACA,MACA,kCACA,MACA,SACA,KACA,eACA,MACA,qBACA,MACA,eACA,KACA,aACA,KACA,aACA,KACA,qBACA,KACA,oBACA,KACA,aACA,KACA,YACA,KACA,YACA,KACA,iBACA,MACA,aACA,KACA,gBACA,MACA,YACA,KACA,YACA,KACA,kBACA,MACA,cACA,KACA,iBACA,MACA,aACA,KACA,YACA,KACA,aACA,KACA,YACA,MACA,SACA,IACA,kBACA,KACA,WACA,IACA,QACA,IACA,gBACA,KACA,wBACA,KACA,YACA,IACA,UACA,KACA,cACA,IACA,eACA,IACA,aACA,KACA,YACA,KACA,qBACA,KACA,kBACA,IACA,SACA,KACA,oBACA,IACA,UACA,IACA,aACA,KACA,kBACA,MACA,oBACA,MACA,mBACA,MACA,QACA,KACA,UACA,KACA,UACA,KACA,UACA,KACA,cACA,KACA,oBACA,KACA,qBACA,KACA,gBACA,KACA,kBACA,KACA,cACA,KACA,aACA,MACA,aACA,MACA,sBACA,MACA,YACA,GACA,kBACA,KACA,qBACA,MACA,iBACA,MACA,qBACA,MACA,8BACA,MACA,cACA,MACA,cACA,MACA,QACA,GACA,cACA,KACA,eACA,KACA,cACA,KACA,8BACA,MACA,YACA,KACA,eACA,KACA,gBACA,KACA,gBACA,KACA,kBACA,KACA,gBACA,MACA,wBACA,MACA,gBACA,KACA,iBACA,MACA,gBACA,MACA,aACA,KACA,cACA,KACA,eACA,KACA,aACA,KACA,gBACA,KACA,kBACA,KACA,iBACA,KACA,kBACA,KACA,YACA,KACA,YACA,IACA,cACA,KACA,aACA,KACA,cACA,KACA,eACA,KACA,oBACA,MACA,uBACA,MACA,oBACA,MACA,oBACA,MACA,uBACA,MACA,QACA,KACA,YACA,KACA,aACA,KACA,cACA,KACA,UACA,KACA,cACA,KACA,cACA,KACA,mBACA,KACA,aACA,MACA,gBACA,KACA,cACA,KACA,mBACA,MACA,qBACA,MACA,oBACA,MACA,aACA,IACA,SACA,KACA,eACA,KACA,QACA,KACA,WACA,KACA,UACA,KACA,UACA,KACA,UACA,KACA,cACA,KACA,oBACA,KACA,qBACA,KACA,kBACA,KACA,eACA,KACA,cACA,KACA,OACA,KACA,aACA,MACA,mBACA,MACA,oBACA,MACA,0BACA,MACA,mBACA,MACA,yBACA,MACA,gBACA,KACA,aACA,KACA,cACA,MACA,oBACA,MACA,aACA,MACA,mBACA,MACA,QACA,IACA,QACA,IACA,SACA,IACA,aACA,IACA,yBACA,KACA,aACA,MACA,aACA,MACA,sBACA,MACA,cACA,KACA,kBACA,KACA,UACA,KACA,eACA,KACA,oBACA,MACA,mBACA,MACA,kBACA,MACA,mBACA,MACA,mBACA,MACA,aACA,MACA,kBACA,MACA,kBACA,MACA,kBACA,MACA,mBACA,MACA,MACA,GACA,YACA,KACA,aACA,KACA,YACA,KACA,4BACA,MACA,UACA,KACA,cACA,KACA,cACA,KACA,gBACA,KACA,cACA,MACA,sBACA,MACA,cACA,KACA,eACA,MACA,cACA,MACA,WACA,KACA,YACA,KACA,aACA,KACA,WACA,KACA,cACA,KACA,gBACA,KACA,oCACA,KACA,eACA,KACA,gBACA,KACA,UACA,KACA,QACA,GACA,iBACA,MACA,QACA,IACA,iBACA,KACA,YACA,KACA,aACA,MACA,iBACA,KACA,aACA,IACA,mBACA,KACA,aACA,MACA,aACA,MACA,sBACA,MACA,wBACA,IACA,yBACA,IACA,aACA,KACA,aACA,KACA,WACA,KACA,YACA,KACA,QACA,GACA,kBACA,GACA,QACA,KACA,iBACA,KACA,iBACA,KACA,SACA,KACA,iBACA,IACA,WACA,MACA,WACA,MACA,+BACA,KACA,uBACA,KACA,WACA,MACA,WACA,MACA,kBACA,MACA,WACA,MACA,YACA,MACA,WACA,MACA,YACA,MACA,WACA,MACA,iBACA,MACA,iCACA,KACA,kCACA,KACA,kCACA,KACA,qBACA,KACA,4BACA,KACA,WACA,MACA,aACA,KACA,UACA,KACA,cACA,KACA,mBACA,MACA,mBACA,MACA,mBACA,MACA,oBACA,MACA,mBACA,MACA,mBACA,MACA,kBACA,MACA,oBACA,MACA,YACA,MACA,WACA,IACA,oBACA,MACA,uBACA,IACA,wBACA,IACA,SACA,KACA,iBACA,KACA,gBACA,KACA,WACA,KACA,WACA,KACA,aACA,MACA,aACA,MACA,sBACA,MACA,cACA,KACA,YACA,KACA,MACA,KACA,WACA,KACA,mBACA,KACA,kBACA,KACA,WACA,MACA,kBACA,MACA,IACA,IACA,YACA,KACA,WACA,KACA,WACA,KACA,SACA,KACA,aACA,KACA,aACA,KACA,YACA,KACA,iBACA,MACA,mBACA,MACA,aACA,MACA,kBACA,MACA,mBACA,MACA,aACA,MACA,sBACA,MACA,gBACA,KACA,MACA,IACA,MACA,KACA,WACA,MACA,YACA,MACA,kBACA,MACA,YACA,KACA,OACA,IACA,YACA,MACA,SACA,IACA,SACA,IACA,WACA,IACA,cACA,KACA,mBACA,MACA,qBACA,MACA,oBACA,MACA,UACA,KACA,mBACA,KACA,eACA,IACA,YACA,KACA,aACA,KACA,YACA,KACA,aACA,KACA,sBACA,KACA,YACA,KACA,iBACA,MACA,sBACA,MACA,uBACA,MACA,mBACA,MACA,aACA,MACA,uBACA,MACA,wBACA,MACA,mBACA,KACA,wBACA,MACA,kBACA,MACA,uBACA,MACA,wBACA,MACA,qBACA,MACA,aACA,MACA,sBACA,MACA,YACA,KACA,iBACA,KACA,sBACA,KACA,sBACA,KACA,YACA,KACA,sBACA,MACA,WACA,KACA,YACA,KACA,WACA,KACA,OACA,IACA,MACA,KACA,YACA,MACA,kBACA,MACA,YACA,KACA,gBACA,KACA,cACA,KACA,kBACA,KACA,aACA,KACA,UACA,KACA,cACA,KACA,cACA,KACA,aACA,KACA,kBACA,MACA,yBACA,MACA,0BACA,MACA,kBACA,KACA,2BACA,MACA,aACA,KACA,kBACA,MACA,oBACA,MACA,mBACA,MACA,cACA,KACA,YACA,KACA,QACA,IACA,SACA,IACA,mBACA,IACA,uBACA,MACA,sBACA,MACA,sBACA,MACA,gBACA,MACA,qBACA,MACA,iBACA,KACA,gBACA,KACA,iBACA,KACA,oBACA,KACA,QACA,IACA,iBACA,KACA,QACA,IACA,gBACA,KACA,cACA,KACA,eACA,KACA,eACA,KACA,mBACA,KACA,2BACA,KACA,4BACA,KACA,QACA,GACA,cACA,KACA,eACA,KACA,cACA,KACA,8BACA,MACA,YACA,KACA,eACA,KACA,gBACA,KACA,gBACA,KACA,kBACA,KACA,gBACA,MACA,wBACA,MACA,gBACA,KACA,iBACA,MACA,wBACA,KACA,gBACA,MACA,aACA,KACA,cACA,KACA,eACA,KACA,gBACA,IACA,sBACA,MACA,aACA,KACA,gBACA,IACA,YACA,KACA,YACA,MACA,aACA,MACA,aACA,MACA,sBACA,MACA,sBACA,MACA,qBACA,MACA,qBACA,MACA,eACA,MACA,oBACA,MACA,QACA,IACA,gBACA,IACA,WACA,IACA,YACA,IACA,iBACA,IACA,gBACA,KACA,kBACA,IACA,mBACA,IACA,cACA,KACA,eACA,KACA,mBACA,KACA,gBACA,KACA,mBACA,KACA,eACA,KACA,aACA,KACA,aACA,MACA,aACA,KACA,aACA,MACA,aACA,MACA,sBACA,MACA,sBACA,IACA,qBACA,IACA,iBACA,IACA,gBACA,IACA,gBACA,IACA,WACA,IACA,UACA,IACA,UACA,IACA,QACA,IACA,YACA,MACA,cACA,KACA,2BACA,MACA,gCACA,MACA,mCACA,MACA,4BACA,MACA,iCACA,MACA,oCACA,MACA,YACA,KACA,eACA,IACA,SACA,KACA,YACA,KACA,gBACA,MACA,iBACA,MACA,iBACA,IACA,UACA,KACA,UACA,KACA,UACA,KACA,UACA,KACA,KACA,IACA,QACA,KACA,cACA,MACA,oBACA,MACA,cACA,KACA,cACA,KACA,QACA,KACA,UACA,KACA,UACA,KACA,UACA,KACA,cACA,KACA,oBACA,KACA,qBACA,KACA,kBACA,KACA,eACA,KACA,YACA,MACA,aACA,KACA,UACA,KACA,cACA,KACA,cACA,KACA,aACA,KACA,kBACA,MACA,oBACA,MACA,mBACA,MACA,cACA,KACA,WACA,KACA,eACA,KACA,eACA,KACA,UACA,IACA,aACA,MACA,aACA,MACA,sBACA,MACA,kBACA,MACA,kBACA,MACA,2BACA,MACA,eACA,KACA,cACA,KACA,eACA,KACA,cACA,KACA,eACA,KACA,iBACA,MACA,cACA,KACA,eACA,KACA,MACA,GACA,YACA,KACA,aACA,KACA,YACA,KACA,4BACA,MACA,UACA,KACA,iBACA,KACA,eACA,KACA,uBACA,MACA,cACA,KACA,cACA,KACA,gBACA,KACA,cACA,MACA,sBACA,MACA,cACA,KACA,eACA,MACA,sBACA,KACA,cACA,MACA,WACA,KACA,YACA,KACA,aACA,KACA,WACA,KACA,YACA,IACA,cACA,IACA,UACA,KACA,YACA,KACA,IACA,IACA,SACA,IACA,OACA,IACA,WACA,KACA,YACA,MACA,SACA,IACA,SACA,IACA,UACA,KACA,cACA,IACA,mBACA,KACA,YACA,KACA,aACA,KACA,YACA,IACA,YACA,IACA,QACA,KACA,YACA,IACA,iBACA,IACA,iBACA,KACA,iBACA,IACA,oBACA,KACA,iBACA,IACA,kBACA,IACA,YACA,KACA,SACA,IACA,YACA,KACA,YACA,KACA,YACA,MACA,aACA,KACA,QACA,IACA,aACA,KACA,gBACA,KACA,aACA,KACA,iBACA,KACA,aACA,KACA,gBACA,IACA,wBACA,KACA,iBACA,IACA,YACA,MACA,qBACA,MACA,aACA,KACA,UACA,MACA,UACA,IACA,kBACA,KACA,kBACA,KACA,iBACA,KACA,aACA,MACA,aACA,GACA,gBACA,KACA,sBACA,MACA,qBACA,MACA,iBACA,MACA,QACA,KACA,YACA,KACA,UACA,IACA,SACA,KACA,UACA,KACA,iBACA,KACA,UACA,IACA,kBACA,IACA,uBACA,IACA,eACA,IACA,eACA,IACA,iBACA,IACA,YACA,IACA,cACA,KACA,QACA,IACA,iBACA,KACA,iBACA,MACA,iBACA,MACA,0BACA,MACA,oBACA,KACA,0BACA,KACA,SACA,IACA,cACA,KACA,cACA,KACA,YACA,KACA,SACA,KACA,aACA,KACA,aACA,KACA,kBACA,KACA,qBACA,KACA,kBACA,KACA,sBACA,KACA,oBACA,KACA,iBACA,KACA,qBACA,KACA,IACA,IACA,SACA,KACA,aACA,KACA,aACA,KACA,aACA,MACA,MACA,KACA,YACA,MACA,cACA,MACA,kBACA,MACA,YACA,KACA,WACA,MACA,iBACA,MACA,eACA,KACA,eACA,KACA,UACA,KACA,YACA,KACA,aACA,KACA,YACA,KACA,iBACA,MACA,mBACA,MACA,kBACA,MACA,aACA,MACA,QACA,KACA,cACA,IACA,uBACA,IACA,uBACA,IACA,qBACA,IACA,kBACA,IACA,cACA,KACA,QACA,IACA,aACA,MACA,gBACA,KACA,aACA,KACA,iBACA,KACA,iBACA,KACA,cACA,KACA,kBACA,KACA,aACA,MACA,aACA,KACA,0BACA,MACA,0BACA,MACA,iBACA,MACA,0BACA,MACA,aACA,MACA,SACA,KACA,SACA,KACA,UACA,IACA,aACA,MACA,aACA,MACA,IACA,IACA,SACA,KACA,YACA,MACA,aACA,MACA,aACA,MACA,sBACA,MACA,WACA,MACA,kBACA,MACA,kBACA,MACA,cACA,MACA,WACA,MACA,yBACA,MACA,YACA,KACA,iBACA,MACA,sBACA,KACA,2BACA,MACA,WACA,MACA,UACA,KACA,cACA,IACA,YACA,KACA,aACA,KACA,YACA,KACA,aACA,MACA,cACA,KACA,aACA,MACA,WACA,MACA,YACA,MACA,SACA,KACA,cACA,KACA,cACA,KACA,qBACA,KACA,yBACA,MACA,iCACA,MACA,0BACA,MACA,kCACA,MACA,eACA,KACA,0CACA,KACA,iCACA,KACA,4BACA,KACA,iCACA,KACA,4BACA,KACA,6BACA,MACA,8BACA,MACA,kCACA,KACA,6BACA,KACA,mBACA,KACA,mBACA,KACA,cACA,KACA,YACA,KACA,iBACA,KACA,gCACA,MACA,iCACA,MACA,+BACA,KACA,0BACA,KACA,aACA,MACA,aACA,MACA,WACA,MACA,aACA,MACA,aACA,MACA,aACA,MACA,sBACA,MACA,MACA,KACA,eACA,MACA,aACA,KACA,SACA,KACA,QACA,KACA,YACA,IACA,UACA,IACA,OACA,IACA,IACA,IACA,YACA,IACA,YACA,MACA,UACA,KACA,YACA,KACA,aACA,KACA,cACA,KACA,KACA,IACA,aACA,MACA,SACA,KACA,YACA,IACA,IACA,IACA,cACA,MACA,YACA,KACA,SACA,IACA,SACA,KACA,YACA,MACA,aACA,KACA,aACA,KACA,aACA,MACA,aACA,MACA,sBACA,MACA,WACA,MACA,eACA,KACA,kBACA,MACA,kBACA,MACA,2BACA,MACA,cACA,KACA,UACA,KACA,cACA,IACA,YACA,IACA,aACA,KACA,YACA,KACA,YACA,KACA,kBACA,KACA,uBACA,MACA,iBACA,MACA,sBACA,KACA,2BACA,MACA,6BACA,MACA,4BACA,MACA,mBACA,MACA,kBACA,MACA,uBACA,MACA,wBACA,MACA,qBACA,MACA,0BACA,KACA,WACA,MACA,MACA,IACA,eACA,MACA,YACA,MACA,oBACA,MACA,qBACA,KACA,yBACA,KACA,eACA,KACA,uBACA,KACA,iBACA,MACA,wBACA,MACA,qBACA,MACA,cACA,KACA,SACA,KACA,QACA,IACA,aACA,KACA,aACA,KACA,aACA,KACA,WACA,MACA,UACA,KACA,eACA,KACA,aACA,MACA,MACA,KACA,YACA,MACA,kBACA,MACA,YACA,KACA,eACA,KACA,oBACA,MACA,aACA,MACA,YACA,MACA,aACA,MACA,sBACA,MACA,WACA,MACA,kBACA,MACA,kBACA,MACA,2BACA,MACA,WACA,KACA,cACA,MACA,aACA,MACA,YACA,KACA,aACA,KACA,SACA,KACA,gBACA,IACA,wBACA,IACA,KACA,IACA,QACA,KACA,YACA,IACA,SACA,KACA,UACA,IACA,aACA,MACA,YACA,MACA,aACA,MACA,sBACA,MACA,WACA,MACA,iBACA,KACA,yBACA,KACA,oBACA,KACA,4BACA,KACA,kBACA,MACA,kBACA,MACA,2BACA,MACA,aACA,MACA,cACA,MACA,aACA,KACA,UACA,KACA,IACA,IACA,aACA,KACA,SACA,IACA,SACA,KACA,aACA,KACA,YACA,KACA,iBACA,MACA,mBACA,MACA,aACA,MACA,kBACA,MACA,aACA,KACA,kBACA,MACA,aACA,MACA,mBACA,KACA,mBACA,KACA,cACA,KACA,QACA,KACA,cACA,MACA,oBACA,MACA,cACA,KACA,YACA,MACA,SACA,IACA,UACA,KACA,cACA,KACA,QACA,IACA,OACA,IACA,aACA,IACA,YACA,KACA,aACA,KACA,sBACA,KACA,qBACA,KACA,aACA,MACA,aACA,MACA,OACA,GACA,aACA,KACA,cACA,KACA,WACA,KACA,eACA,KACA,eACA,KACA,iBACA,KACA,eACA,KACA,gBACA,MACA,eACA,MACA,cACA,KACA,eACA,KACA,WACA,KACA,kBACA,MACA,qBACA,KACA,iBACA,KACA,OACA,IACA,aACA,MACA,cACA,KACA,mBACA,KACA,cACA,KACA,uBACA,KACA,sBACA,KACA,aACA,MACA,aACA,MACA,cACA,KACA,aACA,KACA,aACA,MACA,aACA,MACA,aACA,MACA,SACA,KACA,iBACA,IACA,UACA,IACA,aACA,MACA,aACA,MACA,UACA,EACA,oBACA,KACA,oBACA,KACA,qBACA,KACA,qBACA,KACA,qBACA,KACA,qBACA,KACA,sBACA,KACA,sBACA,KACA,gBACA,KACA,iBACA,KACA,mBACA,KACA,mBACA,KACA,iBACA,KACA,iBACA,KACA,oBACA,KACA,oBACA,KACA,iBACA,KACA,iBACA,KACA,eACA,KACA,eACA,KACA,gBACA,KACA,gBACA,KACA,SACA,KACA,oBACA,MACA,qBACA,MACA,kBACA,MACA,mBACA,MACA,eACA,IACA,eACA,IACA,gBACA,IACA,gBACA,IACA,gBACA,IACA,gBACA,IACA,iBACA,IACA,iBACA,IACA,iBACA,GACA,iBACA,GACA,kBACA,GACA,kBACA,GACA,kBACA,GACA,kBACA,GACA,mBACA,GACA,mBACA,GACA,iBACA,KACA,iBACA,KACA,kBACA,KACA,kBACA,KACA,kBACA,KACA,kBACA,KACA,mBACA,KACA,mBACA,KACA,mBACA,KACA,gBACA,KACA,wBACA,KACA,qBACA,KACA,oBACA,KACA,iBACA,KACA,sBACA,KACA,mBACA,KACA,mBACA,KACA,gBACA,KACA,eACA,KACA,eACA,KACA,gBACA,KACA,gBACA,KACA,gBACA,KACA,gBACA,KACA,iBACA,KACA,iBACA,KACA,UACA,IACA,WACA,IACA,YACA,IACA,WACA,KACA,kBACA,KACA,eACA,KACA,sBACA,KACA,mBACA,KACA,oBACA,KACA,iBACA,KACA,mBACA,KACA,gBACA,KACA,eACA,GACA,eACA,GACA,gBACA,GACA,gBACA,GACA,gBACA,GACA,gBACA,GACA,iBACA,GACA,iBACA,GACA,QACA,KACA,iBACA,KACA,cACA,KACA,aACA,KACA,aACA,KACA,cACA,KACA,cACA,KACA,YACA,KACA,YACA,KACA,gBACA,KACA,WACA,GACA,WACA,GACA,YACA,GACA,YACA,GACA,mBACA,KACA,gBACA,KACA,YACA,IACA,aACA,IACA,cACA,IACA,eACA,KACA,oBACA,KACA,iBACA,KACA,iBACA,KACA,cACA,KACA,YACA,KACA,gBACA,KACA,gBACA,QAGA6vF,GAAA,EAAA8Y,EAAA3oG,4BAAA,WACA,OACA,QACA,GACA,KACA,KACA,KACA,KACA,OACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,OACA,KACA,OACA,KACA,OACA,KACA,MACA,KACA,MACA,KACA,MACA,KACA,MACA,KACA,MACA,KACA,MACA,KACA,OACA,IACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,KACA,MACA,KACA,MACA,KACA,MACA,KACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,KACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,KACA,MACA,MACA,MACA,KACA,MACA,MACA,OACA,MACA,MACA,MACA,OACA,MACA,MACA,KACA,MACA,KACA,MACA,KACA,MACA,MACA,MACA,KACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,OACA,MACA,OACA,MACA,OACA,MACA,OACA,MACA,OACA,MACA,OACA,MACA,OACA,MACA,OACA,MACA,OACA,KACA,OACA,KACA,OACA,KACA,OACA,KACA,OACA,KACA,OACA,KACA,OACA,KACA,OACA,KACA,OACA,KACA,OACA,KACA,OACA,KACA,OACA,KACA,OACA,KACA,OACA,KACA,OACA,MACA,OACA,MACA,OACA,MACA,OACA,MACA,OACA,MACA,OACA,MACA,OACA,MACA,OACA,MACA,OACA,MACA,OACA,MACA,OACA,MACA,OACA,MACA,OACA,MACA,OACA,MACA,OACA,MACA,OACA,MACA,OACA,MACA,OACA,MACA,OACA,MACA,OACA,MACA,OACA,MACA,OACA,MACA,OACA,MACA,OACA,MACA,OACA,MACA,OACA,MACA,OACA,MACA,OACA,MACA,OACA,MACA,OACA,MACA,OACA,MACA,OACA,KACA,OACA,KACA,OACA,KACA,OACA,MACA,OACA,MACA,OACA,MACA,OACA,MACA,OACA,MACA,OACA,MACA,OACA,MACA,OACA,MACA,OACA,MACA,OACA,MACA,OACA,MACA,OACA,MACA,OACA,MACA,OACA,MACA,OACA,MACA,OACA,MACA,OACA,MACA,OACA,MACA,OACA,MACA,OACA,MACA,OACA,MACA,OACA,MACA,OACA,MACA,OACA,MACA,OACA,MACA,OACA,MACA,OACA,MACA,OACA,MACA,OACA,MACA,OACA,MACA,OACA,MACA,OACA,MACA,OACA,MACA,OACA,MACA,OACA,MACA,OACA,MACA,OACA,MACA,OACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,OACA,MACA,MACA,MACA,OACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,UACA,MAOA,CAAAxzB,EAAAC,QAAAC,KAIAC,OAAAC,eAAAH,QAAA,cACAI,OAAA,IAEAJ,QAAAswG,gBAAAtwG,QAAAijH,kCAAAjjH,QAAA+iH,qCAAA/iH,QAAAqvG,cAAArvG,QAAAivG,cAAAjvG,QAAAuiH,iBAAAviH,QAAA6iH,iCAAA,EAEA,IAAA5hH,EAAAhB,EAAA,GAEA,MAAAovG,GAAA,EAAApuG,EAAA6yB,uBAAA,SAAAwlB,GACAA,EAAA6iF,YAAA,YACA7iF,EAAA,oBAAA,iBACAA,EAAA,0BAAA,wBACAA,EAAA,sBAAA,oBACAA,EAAA8iF,WAAA,YACA9iF,EAAA,mBAAA,iBACAA,EAAA,yBAAA,wBACAA,EAAA,qBAAA,oBACAA,EAAA,eAAA,YACAA,EAAA,oBAAA,iBACAA,EAAA,0BAAA,wBACAA,EAAA,sBAAA,oBACAA,EAAA+iF,MAAA,YACA/iF,EAAA,cAAA,iBACAA,EAAA,oBAAA,wBACAA,EAAA,gBAAA,oBACAA,EAAA,sBAAA,wBACAA,EAAA,gBAAA,iBA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AA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,KAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,KACAC,GAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,KAAA,KAAA,GAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,MAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,K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","file":"../skylark-pdfjs-worker-all.js","sourcesContent":["define('skylark-langx-ns/_attach',[],function(){\r\n    return  function attach(obj1,path,obj2) {\r\n        if (typeof path == \"string\") {\r\n            path = path.split(\".\");//[path]\r\n        };\r\n        var length = path.length,\r\n            ns=obj1,\r\n            i=0,\r\n            name = path[i++];\r\n\r\n        while (i < length) {\r\n            ns = ns[name] = ns[name] || {};\r\n            name = path[i++];\r\n        }\r\n\r\n        ns[name] = obj2 || {};\r\n        return ns[name];\r\n    }\r\n});\ndefine('skylark-langx-ns/ns',[\r\n    \"./_attach\"\r\n], function(_attach) {\r\n    var skylark = {\r\n    \tattach : function(path,obj) {\r\n    \t\treturn _attach(skylark,path,obj);\r\n    \t}\r\n    };\r\n    return skylark;\r\n});\r\n\ndefine('skylark-langx-ns/main',[\r\n\t\"./ns\"\r\n],function(skylark){\r\n\treturn skylark;\r\n});\ndefine('skylark-langx-ns', ['skylark-langx-ns/main'], function (main) { return main; });\n\ndefine('skylark-langx/skylark',[\r\n    \"skylark-langx-ns\"\r\n], function(ns) {\r\n\treturn ns;\r\n});\r\n\ndefine('skylark-pdfjs-worker/worker',[\n],function(){\n\nreturn /******/ (() => { // webpackBootstrap\n/******/ \t\"use strict\";\n/******/ \tvar __webpack_modules__ = ([\n/* 0 */\n/***/ ((__unused_webpack_module, exports, __w_pdfjs_require__) => {\n\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nObject.defineProperty(exports, \"WorkerMessageHandler\", ({\n  enumerable: true,\n  get: function () {\n    return _worker.WorkerMessageHandler;\n  }\n}));\n\nvar _worker = __w_pdfjs_require__(1);\n\nconst pdfjsVersion = '2.7.570';\nconst pdfjsBuild = 'f2c7338b0';\n\n/***/ }),\n/* 1 */\n/***/ ((__unused_webpack_module, exports, __w_pdfjs_require__) => {\n\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.WorkerTask = exports.WorkerMessageHandler = void 0;\n\nvar _util = __w_pdfjs_require__(2);\n\nvar _primitives = __w_pdfjs_require__(5);\n\nvar _pdf_manager = __w_pdfjs_require__(6);\n\nvar _writer = __w_pdfjs_require__(46);\n\nvar _is_node = __w_pdfjs_require__(4);\n\nvar _message_handler = __w_pdfjs_require__(48);\n\nvar _worker_stream = __w_pdfjs_require__(49);\n\nvar _core_utils = __w_pdfjs_require__(8);\n\nclass WorkerTask {\n  constructor(name) {\n    this.name = name;\n    this.terminated = false;\n    this._capability = (0, _util.createPromiseCapability)();\n  }\n\n  get finished() {\n    return this._capability.promise;\n  }\n\n  finish() {\n    this._capability.resolve();\n  }\n\n  terminate() {\n    this.terminated = true;\n  }\n\n  ensureNotTerminated() {\n    if (this.terminated) {\n      throw new Error(\"Worker task was terminated\");\n    }\n  }\n\n}\n\nexports.WorkerTask = WorkerTask;\n\nclass WorkerMessageHandler {\n  static setup(handler, port) {\n    var testMessageProcessed = false;\n    handler.on(\"test\", function wphSetupTest(data) {\n      if (testMessageProcessed) {\n        return;\n      }\n\n      testMessageProcessed = true;\n\n      if (!(data instanceof Uint8Array)) {\n        handler.send(\"test\", null);\n        return;\n      }\n\n      const supportTransfers = data[0] === 255;\n      handler.postMessageTransfers = supportTransfers;\n      handler.send(\"test\", {\n        supportTransfers\n      });\n    });\n    handler.on(\"configure\", function wphConfigure(data) {\n      (0, _util.setVerbosityLevel)(data.verbosity);\n    });\n    handler.on(\"GetDocRequest\", function wphSetupDoc(data) {\n      return WorkerMessageHandler.createDocumentHandler(data, port);\n    });\n  }\n\n  static createDocumentHandler(docParams, port) {\n    var pdfManager;\n    var terminated = false;\n    var cancelXHRs = null;\n    var WorkerTasks = [];\n    const verbosity = (0, _util.getVerbosityLevel)();\n    const apiVersion = docParams.apiVersion;\n    const workerVersion = '2.7.570';\n\n    if (apiVersion !== workerVersion) {\n      throw new Error(`The API version \"${apiVersion}\" does not match ` + `the Worker version \"${workerVersion}\".`);\n    }\n\n    const enumerableProperties = [];\n\n    for (const property in []) {\n      enumerableProperties.push(property);\n    }\n\n    if (enumerableProperties.length) {\n      throw new Error(\"The `Array.prototype` contains unexpected enumerable properties: \" + enumerableProperties.join(\", \") + \"; thus breaking e.g. `for...in` iteration of `Array`s.\");\n    }\n\n    if (typeof ReadableStream === \"undefined\") {\n      throw new Error(\"The browser/environment lacks native support for critical \" + \"functionality used by the PDF.js library (e.g. `ReadableStream`); \" + \"please use an `es5`-build instead.\");\n    }\n\n    var docId = docParams.docId;\n    var docBaseUrl = docParams.docBaseUrl;\n    var workerHandlerName = docParams.docId + \"_worker\";\n    var handler = new _message_handler.MessageHandler(workerHandlerName, docId, port);\n    handler.postMessageTransfers = docParams.postMessageTransfers;\n\n    function ensureNotTerminated() {\n      if (terminated) {\n        throw new Error(\"Worker was terminated\");\n      }\n    }\n\n    function startWorkerTask(task) {\n      WorkerTasks.push(task);\n    }\n\n    function finishWorkerTask(task) {\n      task.finish();\n      var i = WorkerTasks.indexOf(task);\n      WorkerTasks.splice(i, 1);\n    }\n\n    async function loadDocument(recoveryMode) {\n      await pdfManager.ensureDoc(\"checkHeader\");\n      await pdfManager.ensureDoc(\"parseStartXRef\");\n      await pdfManager.ensureDoc(\"parse\", [recoveryMode]);\n\n      if (!recoveryMode) {\n        await pdfManager.ensureDoc(\"checkFirstPage\");\n      }\n\n      const [numPages, fingerprint] = await Promise.all([pdfManager.ensureDoc(\"numPages\"), pdfManager.ensureDoc(\"fingerprint\")]);\n      return {\n        numPages,\n        fingerprint\n      };\n    }\n\n    function getPdfManager(data, evaluatorOptions) {\n      var pdfManagerCapability = (0, _util.createPromiseCapability)();\n      let newPdfManager;\n      var source = data.source;\n\n      if (source.data) {\n        try {\n          newPdfManager = new _pdf_manager.LocalPdfManager(docId, source.data, source.password, evaluatorOptions, docBaseUrl);\n          pdfManagerCapability.resolve(newPdfManager);\n        } catch (ex) {\n          pdfManagerCapability.reject(ex);\n        }\n\n        return pdfManagerCapability.promise;\n      }\n\n      var pdfStream,\n          cachedChunks = [];\n\n      try {\n        pdfStream = new _worker_stream.PDFWorkerStream(handler);\n      } catch (ex) {\n        pdfManagerCapability.reject(ex);\n        return pdfManagerCapability.promise;\n      }\n\n      var fullRequest = pdfStream.getFullReader();\n      fullRequest.headersReady.then(function () {\n        if (!fullRequest.isRangeSupported) {\n          return;\n        }\n\n        var disableAutoFetch = source.disableAutoFetch || fullRequest.isStreamingSupported;\n        newPdfManager = new _pdf_manager.NetworkPdfManager(docId, pdfStream, {\n          msgHandler: handler,\n          password: source.password,\n          length: fullRequest.contentLength,\n          disableAutoFetch,\n          rangeChunkSize: source.rangeChunkSize\n        }, evaluatorOptions, docBaseUrl);\n\n        for (let i = 0; i < cachedChunks.length; i++) {\n          newPdfManager.sendProgressiveData(cachedChunks[i]);\n        }\n\n        cachedChunks = [];\n        pdfManagerCapability.resolve(newPdfManager);\n        cancelXHRs = null;\n      }).catch(function (reason) {\n        pdfManagerCapability.reject(reason);\n        cancelXHRs = null;\n      });\n      var loaded = 0;\n\n      var flushChunks = function () {\n        var pdfFile = (0, _util.arraysToBytes)(cachedChunks);\n\n        if (source.length && pdfFile.length !== source.length) {\n          (0, _util.warn)(\"reported HTTP length is different from actual\");\n        }\n\n        try {\n          newPdfManager = new _pdf_manager.LocalPdfManager(docId, pdfFile, source.password, evaluatorOptions, docBaseUrl);\n          pdfManagerCapability.resolve(newPdfManager);\n        } catch (ex) {\n          pdfManagerCapability.reject(ex);\n        }\n\n        cachedChunks = [];\n      };\n\n      var readPromise = new Promise(function (resolve, reject) {\n        var readChunk = function ({\n          value,\n          done\n        }) {\n          try {\n            ensureNotTerminated();\n\n            if (done) {\n              if (!newPdfManager) {\n                flushChunks();\n              }\n\n              cancelXHRs = null;\n              return;\n            }\n\n            loaded += (0, _util.arrayByteLength)(value);\n\n            if (!fullRequest.isStreamingSupported) {\n              handler.send(\"DocProgress\", {\n                loaded,\n                total: Math.max(loaded, fullRequest.contentLength || 0)\n              });\n            }\n\n            if (newPdfManager) {\n              newPdfManager.sendProgressiveData(value);\n            } else {\n              cachedChunks.push(value);\n            }\n\n            fullRequest.read().then(readChunk, reject);\n          } catch (e) {\n            reject(e);\n          }\n        };\n\n        fullRequest.read().then(readChunk, reject);\n      });\n      readPromise.catch(function (e) {\n        pdfManagerCapability.reject(e);\n        cancelXHRs = null;\n      });\n\n      cancelXHRs = function (reason) {\n        pdfStream.cancelAllRequests(reason);\n      };\n\n      return pdfManagerCapability.promise;\n    }\n\n    function setupDoc(data) {\n      function onSuccess(doc) {\n        ensureNotTerminated();\n        handler.send(\"GetDoc\", {\n          pdfInfo: doc\n        });\n      }\n\n      function onFailure(ex) {\n        ensureNotTerminated();\n\n        if (ex instanceof _util.PasswordException) {\n          var task = new WorkerTask(`PasswordException: response ${ex.code}`);\n          startWorkerTask(task);\n          handler.sendWithPromise(\"PasswordRequest\", ex).then(function ({\n            password\n          }) {\n            finishWorkerTask(task);\n            pdfManager.updatePassword(password);\n            pdfManagerReady();\n          }).catch(function () {\n            finishWorkerTask(task);\n            handler.send(\"DocException\", ex);\n          });\n        } else if (ex instanceof _util.InvalidPDFException || ex instanceof _util.MissingPDFException || ex instanceof _util.UnexpectedResponseException || ex instanceof _util.UnknownErrorException) {\n          handler.send(\"DocException\", ex);\n        } else {\n          handler.send(\"DocException\", new _util.UnknownErrorException(ex.message, ex.toString()));\n        }\n      }\n\n      function pdfManagerReady() {\n        ensureNotTerminated();\n        loadDocument(false).then(onSuccess, function (reason) {\n          ensureNotTerminated();\n\n          if (!(reason instanceof _core_utils.XRefParseException)) {\n            onFailure(reason);\n            return;\n          }\n\n          pdfManager.requestLoadedStream();\n          pdfManager.onLoadedStream().then(function () {\n            ensureNotTerminated();\n            loadDocument(true).then(onSuccess, onFailure);\n          });\n        });\n      }\n\n      ensureNotTerminated();\n      var evaluatorOptions = {\n        maxImageSize: data.maxImageSize,\n        disableFontFace: data.disableFontFace,\n        ignoreErrors: data.ignoreErrors,\n        isEvalSupported: data.isEvalSupported,\n        fontExtraProperties: data.fontExtraProperties\n      };\n      getPdfManager(data, evaluatorOptions).then(function (newPdfManager) {\n        if (terminated) {\n          newPdfManager.terminate(new _util.AbortException(\"Worker was terminated.\"));\n          throw new Error(\"Worker was terminated\");\n        }\n\n        pdfManager = newPdfManager;\n        pdfManager.onLoadedStream().then(function (stream) {\n          handler.send(\"DataLoaded\", {\n            length: stream.bytes.byteLength\n          });\n        });\n      }).then(pdfManagerReady, onFailure);\n    }\n\n    handler.on(\"GetPage\", function wphSetupGetPage(data) {\n      return pdfManager.getPage(data.pageIndex).then(function (page) {\n        return Promise.all([pdfManager.ensure(page, \"rotate\"), pdfManager.ensure(page, \"ref\"), pdfManager.ensure(page, \"userUnit\"), pdfManager.ensure(page, \"view\")]).then(function ([rotate, ref, userUnit, view]) {\n          return {\n            rotate,\n            ref,\n            userUnit,\n            view\n          };\n        });\n      });\n    });\n    handler.on(\"GetPageIndex\", function wphSetupGetPageIndex({\n      ref\n    }) {\n      const pageRef = _primitives.Ref.get(ref.num, ref.gen);\n\n      return pdfManager.ensureCatalog(\"getPageIndex\", [pageRef]);\n    });\n    handler.on(\"GetDestinations\", function wphSetupGetDestinations(data) {\n      return pdfManager.ensureCatalog(\"destinations\");\n    });\n    handler.on(\"GetDestination\", function wphSetupGetDestination(data) {\n      return pdfManager.ensureCatalog(\"getDestination\", [data.id]);\n    });\n    handler.on(\"GetPageLabels\", function wphSetupGetPageLabels(data) {\n      return pdfManager.ensureCatalog(\"pageLabels\");\n    });\n    handler.on(\"GetPageLayout\", function wphSetupGetPageLayout(data) {\n      return pdfManager.ensureCatalog(\"pageLayout\");\n    });\n    handler.on(\"GetPageMode\", function wphSetupGetPageMode(data) {\n      return pdfManager.ensureCatalog(\"pageMode\");\n    });\n    handler.on(\"GetViewerPreferences\", function (data) {\n      return pdfManager.ensureCatalog(\"viewerPreferences\");\n    });\n    handler.on(\"GetOpenAction\", function (data) {\n      return pdfManager.ensureCatalog(\"openAction\");\n    });\n    handler.on(\"GetAttachments\", function wphSetupGetAttachments(data) {\n      return pdfManager.ensureCatalog(\"attachments\");\n    });\n    handler.on(\"GetJavaScript\", function wphSetupGetJavaScript(data) {\n      return pdfManager.ensureCatalog(\"javaScript\");\n    });\n    handler.on(\"GetDocJSActions\", function wphSetupGetDocJSActions(data) {\n      return pdfManager.ensureCatalog(\"jsActions\");\n    });\n    handler.on(\"GetPageJSActions\", function ({\n      pageIndex\n    }) {\n      return pdfManager.getPage(pageIndex).then(function (page) {\n        return page.jsActions;\n      });\n    });\n    handler.on(\"GetOutline\", function wphSetupGetOutline(data) {\n      return pdfManager.ensureCatalog(\"documentOutline\");\n    });\n    handler.on(\"GetOptionalContentConfig\", function (data) {\n      return pdfManager.ensureCatalog(\"optionalContentConfig\");\n    });\n    handler.on(\"GetPermissions\", function (data) {\n      return pdfManager.ensureCatalog(\"permissions\");\n    });\n    handler.on(\"GetMetadata\", function wphSetupGetMetadata(data) {\n      return Promise.all([pdfManager.ensureDoc(\"documentInfo\"), pdfManager.ensureCatalog(\"metadata\")]);\n    });\n    handler.on(\"GetMarkInfo\", function wphSetupGetMarkInfo(data) {\n      return pdfManager.ensureCatalog(\"markInfo\");\n    });\n    handler.on(\"GetData\", function wphSetupGetData(data) {\n      pdfManager.requestLoadedStream();\n      return pdfManager.onLoadedStream().then(function (stream) {\n        return stream.bytes;\n      });\n    });\n    handler.on(\"GetStats\", function wphSetupGetStats(data) {\n      return pdfManager.ensureXRef(\"stats\");\n    });\n    handler.on(\"GetAnnotations\", function ({\n      pageIndex,\n      intent\n    }) {\n      return pdfManager.getPage(pageIndex).then(function (page) {\n        return page.getAnnotationsData(intent);\n      });\n    });\n    handler.on(\"GetFieldObjects\", function (data) {\n      return pdfManager.ensureDoc(\"fieldObjects\");\n    });\n    handler.on(\"HasJSActions\", function (data) {\n      return pdfManager.ensureDoc(\"hasJSActions\");\n    });\n    handler.on(\"GetCalculationOrderIds\", function (data) {\n      return pdfManager.ensureDoc(\"calculationOrderIds\");\n    });\n    handler.on(\"SaveDocument\", function ({\n      numPages,\n      annotationStorage,\n      filename\n    }) {\n      pdfManager.requestLoadedStream();\n      const promises = [pdfManager.onLoadedStream(), pdfManager.ensureCatalog(\"acroForm\"), pdfManager.ensureDoc(\"xref\"), pdfManager.ensureDoc(\"startXRef\")];\n\n      for (let pageIndex = 0; pageIndex < numPages; pageIndex++) {\n        promises.push(pdfManager.getPage(pageIndex).then(function (page) {\n          const task = new WorkerTask(`Save: page ${pageIndex}`);\n          startWorkerTask(task);\n          return page.save(handler, task, annotationStorage).finally(function () {\n            finishWorkerTask(task);\n          });\n        }));\n      }\n\n      return Promise.all(promises).then(function ([stream, acroForm, xref, startXRef, ...refs]) {\n        let newRefs = [];\n\n        for (const ref of refs) {\n          newRefs = ref.filter(x => x !== null).reduce((a, b) => a.concat(b), newRefs);\n        }\n\n        if (newRefs.length === 0) {\n          return stream.bytes;\n        }\n\n        const xfa = acroForm instanceof _primitives.Dict && acroForm.get(\"XFA\") || [];\n        let xfaDatasets = null;\n\n        if (Array.isArray(xfa)) {\n          for (let i = 0, ii = xfa.length; i < ii; i += 2) {\n            if (xfa[i] === \"datasets\") {\n              xfaDatasets = xfa[i + 1];\n            }\n          }\n        } else {\n          (0, _util.warn)(\"Unsupported XFA type.\");\n        }\n\n        let newXrefInfo = Object.create(null);\n\n        if (xref.trailer) {\n          const infoObj = Object.create(null);\n          const xrefInfo = xref.trailer.get(\"Info\") || null;\n\n          if (xrefInfo instanceof _primitives.Dict) {\n            xrefInfo.forEach((key, value) => {\n              if ((0, _util.isString)(key) && (0, _util.isString)(value)) {\n                infoObj[key] = (0, _util.stringToPDFString)(value);\n              }\n            });\n          }\n\n          newXrefInfo = {\n            rootRef: xref.trailer.getRaw(\"Root\") || null,\n            encrypt: xref.trailer.getRaw(\"Encrypt\") || null,\n            newRef: xref.getNewRef(),\n            infoRef: xref.trailer.getRaw(\"Info\") || null,\n            info: infoObj,\n            fileIds: xref.trailer.getRaw(\"ID\") || null,\n            startXRef,\n            filename\n          };\n        }\n\n        xref.resetNewRef();\n        return (0, _writer.incrementalUpdate)({\n          originalData: stream.bytes,\n          xrefInfo: newXrefInfo,\n          newRefs,\n          xref,\n          datasetsRef: xfaDatasets\n        });\n      });\n    });\n    handler.on(\"GetOperatorList\", function wphSetupRenderPage(data, sink) {\n      var pageIndex = data.pageIndex;\n      pdfManager.getPage(pageIndex).then(function (page) {\n        var task = new WorkerTask(`GetOperatorList: page ${pageIndex}`);\n        startWorkerTask(task);\n        const start = verbosity >= _util.VerbosityLevel.INFOS ? Date.now() : 0;\n        page.getOperatorList({\n          handler,\n          sink,\n          task,\n          intent: data.intent,\n          renderInteractiveForms: data.renderInteractiveForms,\n          annotationStorage: data.annotationStorage\n        }).then(function (operatorListInfo) {\n          finishWorkerTask(task);\n\n          if (start) {\n            (0, _util.info)(`page=${pageIndex + 1} - getOperatorList: time=` + `${Date.now() - start}ms, len=${operatorListInfo.length}`);\n          }\n\n          sink.close();\n        }, function (reason) {\n          finishWorkerTask(task);\n\n          if (task.terminated) {\n            return;\n          }\n\n          handler.send(\"UnsupportedFeature\", {\n            featureId: _util.UNSUPPORTED_FEATURES.errorOperatorList\n          });\n          sink.error(reason);\n        });\n      });\n    });\n    handler.on(\"GetTextContent\", function wphExtractText(data, sink) {\n      var pageIndex = data.pageIndex;\n\n      sink.onPull = function (desiredSize) {};\n\n      sink.onCancel = function (reason) {};\n\n      pdfManager.getPage(pageIndex).then(function (page) {\n        var task = new WorkerTask(\"GetTextContent: page \" + pageIndex);\n        startWorkerTask(task);\n        const start = verbosity >= _util.VerbosityLevel.INFOS ? Date.now() : 0;\n        page.extractTextContent({\n          handler,\n          task,\n          sink,\n          normalizeWhitespace: data.normalizeWhitespace,\n          combineTextItems: data.combineTextItems\n        }).then(function () {\n          finishWorkerTask(task);\n\n          if (start) {\n            (0, _util.info)(`page=${pageIndex + 1} - getTextContent: time=` + `${Date.now() - start}ms`);\n          }\n\n          sink.close();\n        }, function (reason) {\n          finishWorkerTask(task);\n\n          if (task.terminated) {\n            return;\n          }\n\n          sink.error(reason);\n        });\n      });\n    });\n    handler.on(\"FontFallback\", function (data) {\n      return pdfManager.fontFallback(data.id, handler);\n    });\n    handler.on(\"Cleanup\", function wphCleanup(data) {\n      return pdfManager.cleanup(true);\n    });\n    handler.on(\"Terminate\", function wphTerminate(data) {\n      terminated = true;\n      const waitOn = [];\n\n      if (pdfManager) {\n        pdfManager.terminate(new _util.AbortException(\"Worker was terminated.\"));\n        const cleanupPromise = pdfManager.cleanup();\n        waitOn.push(cleanupPromise);\n        pdfManager = null;\n      } else {\n        (0, _primitives.clearPrimitiveCaches)();\n      }\n\n      if (cancelXHRs) {\n        cancelXHRs(new _util.AbortException(\"Worker was terminated.\"));\n      }\n\n      WorkerTasks.forEach(function (task) {\n        waitOn.push(task.finished);\n        task.terminate();\n      });\n      return Promise.all(waitOn).then(function () {\n        handler.destroy();\n        handler = null;\n      });\n    });\n    handler.on(\"Ready\", function wphReady(data) {\n      setupDoc(docParams);\n      docParams = null;\n    });\n    return workerHandlerName;\n  }\n\n  static initializeFromPort(port) {\n    var handler = new _message_handler.MessageHandler(\"worker\", \"main\", port);\n    WorkerMessageHandler.setup(handler, port);\n    handler.send(\"ready\", null);\n  }\n\n}\n\nexports.WorkerMessageHandler = WorkerMessageHandler;\n\nfunction isMessagePort(maybePort) {\n  return typeof maybePort.postMessage === \"function\" && \"onmessage\" in maybePort;\n}\n\nif (typeof window === \"undefined\" && !_is_node.isNodeJS && typeof self !== \"undefined\" && isMessagePort(self)) {\n  WorkerMessageHandler.initializeFromPort(self);\n}\n\n/***/ }),\n/* 2 */\n/***/ ((__unused_webpack_module, exports, __w_pdfjs_require__) => {\n\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.arrayByteLength = arrayByteLength;\nexports.arraysToBytes = arraysToBytes;\nexports.assert = assert;\nexports.bytesToString = bytesToString;\nexports.createPromiseCapability = createPromiseCapability;\nexports.createValidAbsoluteUrl = createValidAbsoluteUrl;\nexports.encodeToXmlString = encodeToXmlString;\nexports.escapeString = escapeString;\nexports.getModificationDate = getModificationDate;\nexports.getVerbosityLevel = getVerbosityLevel;\nexports.info = info;\nexports.isArrayBuffer = isArrayBuffer;\nexports.isArrayEqual = isArrayEqual;\nexports.isAscii = isAscii;\nexports.isBool = isBool;\nexports.isNum = isNum;\nexports.isSameOrigin = isSameOrigin;\nexports.isString = isString;\nexports.objectFromEntries = objectFromEntries;\nexports.objectSize = objectSize;\nexports.removeNullCharacters = removeNullCharacters;\nexports.setVerbosityLevel = setVerbosityLevel;\nexports.shadow = shadow;\nexports.string32 = string32;\nexports.stringToBytes = stringToBytes;\nexports.stringToPDFString = stringToPDFString;\nexports.stringToUTF16BEString = stringToUTF16BEString;\nexports.stringToUTF8String = stringToUTF8String;\nexports.unreachable = unreachable;\nexports.utf8StringToString = utf8StringToString;\nexports.warn = warn;\nexports.VerbosityLevel = exports.Util = exports.UNSUPPORTED_FEATURES = exports.UnknownErrorException = exports.UnexpectedResponseException = exports.TextRenderingMode = exports.StreamType = exports.PermissionFlag = exports.PasswordResponses = exports.PasswordException = exports.PageActionEventType = exports.OPS = exports.MissingPDFException = exports.IsLittleEndianCached = exports.IsEvalSupportedCached = exports.InvalidPDFException = exports.ImageKind = exports.IDENTITY_MATRIX = exports.FormatError = exports.FontType = exports.FONT_IDENTITY_MATRIX = exports.DocumentActionEventType = exports.createObjectURL = exports.CMapCompressionType = exports.BaseException = exports.AnnotationType = exports.AnnotationStateModelType = exports.AnnotationReviewState = exports.AnnotationReplyType = exports.AnnotationMarkedState = exports.AnnotationFlag = exports.AnnotationFieldFlag = exports.AnnotationBorderStyleType = exports.AnnotationActionEventType = exports.AbortException = void 0;\n\n__w_pdfjs_require__(3);\n\nconst IDENTITY_MATRIX = [1, 0, 0, 1, 0, 0];\nexports.IDENTITY_MATRIX = IDENTITY_MATRIX;\nconst FONT_IDENTITY_MATRIX = [0.001, 0, 0, 0.001, 0, 0];\nexports.FONT_IDENTITY_MATRIX = FONT_IDENTITY_MATRIX;\nconst PermissionFlag = {\n  PRINT: 0x04,\n  MODIFY_CONTENTS: 0x08,\n  COPY: 0x10,\n  MODIFY_ANNOTATIONS: 0x20,\n  FILL_INTERACTIVE_FORMS: 0x100,\n  COPY_FOR_ACCESSIBILITY: 0x200,\n  ASSEMBLE: 0x400,\n  PRINT_HIGH_QUALITY: 0x800\n};\nexports.PermissionFlag = PermissionFlag;\nconst TextRenderingMode = {\n  FILL: 0,\n  STROKE: 1,\n  FILL_STROKE: 2,\n  INVISIBLE: 3,\n  FILL_ADD_TO_PATH: 4,\n  STROKE_ADD_TO_PATH: 5,\n  FILL_STROKE_ADD_TO_PATH: 6,\n  ADD_TO_PATH: 7,\n  FILL_STROKE_MASK: 3,\n  ADD_TO_PATH_FLAG: 4\n};\nexports.TextRenderingMode = TextRenderingMode;\nconst ImageKind = {\n  GRAYSCALE_1BPP: 1,\n  RGB_24BPP: 2,\n  RGBA_32BPP: 3\n};\nexports.ImageKind = ImageKind;\nconst AnnotationType = {\n  TEXT: 1,\n  LINK: 2,\n  FREETEXT: 3,\n  LINE: 4,\n  SQUARE: 5,\n  CIRCLE: 6,\n  POLYGON: 7,\n  POLYLINE: 8,\n  HIGHLIGHT: 9,\n  UNDERLINE: 10,\n  SQUIGGLY: 11,\n  STRIKEOUT: 12,\n  STAMP: 13,\n  CARET: 14,\n  INK: 15,\n  POPUP: 16,\n  FILEATTACHMENT: 17,\n  SOUND: 18,\n  MOVIE: 19,\n  WIDGET: 20,\n  SCREEN: 21,\n  PRINTERMARK: 22,\n  TRAPNET: 23,\n  WATERMARK: 24,\n  THREED: 25,\n  REDACT: 26\n};\nexports.AnnotationType = AnnotationType;\nconst AnnotationStateModelType = {\n  MARKED: \"Marked\",\n  REVIEW: \"Review\"\n};\nexports.AnnotationStateModelType = AnnotationStateModelType;\nconst AnnotationMarkedState = {\n  MARKED: \"Marked\",\n  UNMARKED: \"Unmarked\"\n};\nexports.AnnotationMarkedState = AnnotationMarkedState;\nconst AnnotationReviewState = {\n  ACCEPTED: \"Accepted\",\n  REJECTED: \"Rejected\",\n  CANCELLED: \"Cancelled\",\n  COMPLETED: \"Completed\",\n  NONE: \"None\"\n};\nexports.AnnotationReviewState = AnnotationReviewState;\nconst AnnotationReplyType = {\n  GROUP: \"Group\",\n  REPLY: \"R\"\n};\nexports.AnnotationReplyType = AnnotationReplyType;\nconst AnnotationFlag = {\n  INVISIBLE: 0x01,\n  HIDDEN: 0x02,\n  PRINT: 0x04,\n  NOZOOM: 0x08,\n  NOROTATE: 0x10,\n  NOVIEW: 0x20,\n  READONLY: 0x40,\n  LOCKED: 0x80,\n  TOGGLENOVIEW: 0x100,\n  LOCKEDCONTENTS: 0x200\n};\nexports.AnnotationFlag = AnnotationFlag;\nconst AnnotationFieldFlag = {\n  READONLY: 0x0000001,\n  REQUIRED: 0x0000002,\n  NOEXPORT: 0x0000004,\n  MULTILINE: 0x0001000,\n  PASSWORD: 0x0002000,\n  NOTOGGLETOOFF: 0x0004000,\n  RADIO: 0x0008000,\n  PUSHBUTTON: 0x0010000,\n  COMBO: 0x0020000,\n  EDIT: 0x0040000,\n  SORT: 0x0080000,\n  FILESELECT: 0x0100000,\n  MULTISELECT: 0x0200000,\n  DONOTSPELLCHECK: 0x0400000,\n  DONOTSCROLL: 0x0800000,\n  COMB: 0x1000000,\n  RICHTEXT: 0x2000000,\n  RADIOSINUNISON: 0x2000000,\n  COMMITONSELCHANGE: 0x4000000\n};\nexports.AnnotationFieldFlag = AnnotationFieldFlag;\nconst AnnotationBorderStyleType = {\n  SOLID: 1,\n  DASHED: 2,\n  BEVELED: 3,\n  INSET: 4,\n  UNDERLINE: 5\n};\nexports.AnnotationBorderStyleType = AnnotationBorderStyleType;\nconst AnnotationActionEventType = {\n  E: \"Mouse Enter\",\n  X: \"Mouse Exit\",\n  D: \"Mouse Down\",\n  U: \"Mouse Up\",\n  Fo: \"Focus\",\n  Bl: \"Blur\",\n  PO: \"PageOpen\",\n  PC: \"PageClose\",\n  PV: \"PageVisible\",\n  PI: \"PageInvisible\",\n  K: \"Keystroke\",\n  F: \"Format\",\n  V: \"Validate\",\n  C: \"Calculate\"\n};\nexports.AnnotationActionEventType = AnnotationActionEventType;\nconst DocumentActionEventType = {\n  WC: \"WillClose\",\n  WS: \"WillSave\",\n  DS: \"DidSave\",\n  WP: \"WillPrint\",\n  DP: \"DidPrint\"\n};\nexports.DocumentActionEventType = DocumentActionEventType;\nconst PageActionEventType = {\n  O: \"PageOpen\",\n  C: \"PageClose\"\n};\nexports.PageActionEventType = PageActionEventType;\nconst StreamType = {\n  UNKNOWN: \"UNKNOWN\",\n  FLATE: \"FLATE\",\n  LZW: \"LZW\",\n  DCT: \"DCT\",\n  JPX: \"JPX\",\n  JBIG: \"JBIG\",\n  A85: \"A85\",\n  AHX: \"AHX\",\n  CCF: \"CCF\",\n  RLX: \"RLX\"\n};\nexports.StreamType = StreamType;\nconst FontType = {\n  UNKNOWN: \"UNKNOWN\",\n  TYPE1: \"TYPE1\",\n  TYPE1C: \"TYPE1C\",\n  CIDFONTTYPE0: \"CIDFONTTYPE0\",\n  CIDFONTTYPE0C: \"CIDFONTTYPE0C\",\n  TRUETYPE: \"TRUETYPE\",\n  CIDFONTTYPE2: \"CIDFONTTYPE2\",\n  TYPE3: \"TYPE3\",\n  OPENTYPE: \"OPENTYPE\",\n  TYPE0: \"TYPE0\",\n  MMTYPE1: \"MMTYPE1\"\n};\nexports.FontType = FontType;\nconst VerbosityLevel = {\n  ERRORS: 0,\n  WARNINGS: 1,\n  INFOS: 5\n};\nexports.VerbosityLevel = VerbosityLevel;\nconst CMapCompressionType = {\n  NONE: 0,\n  BINARY: 1,\n  STREAM: 2\n};\nexports.CMapCompressionType = CMapCompressionType;\nconst OPS = {\n  dependency: 1,\n  setLineWidth: 2,\n  setLineCap: 3,\n  setLineJoin: 4,\n  setMiterLimit: 5,\n  setDash: 6,\n  setRenderingIntent: 7,\n  setFlatness: 8,\n  setGState: 9,\n  save: 10,\n  restore: 11,\n  transform: 12,\n  moveTo: 13,\n  lineTo: 14,\n  curveTo: 15,\n  curveTo2: 16,\n  curveTo3: 17,\n  closePath: 18,\n  rectangle: 19,\n  stroke: 20,\n  closeStroke: 21,\n  fill: 22,\n  eoFill: 23,\n  fillStroke: 24,\n  eoFillStroke: 25,\n  closeFillStroke: 26,\n  closeEOFillStroke: 27,\n  endPath: 28,\n  clip: 29,\n  eoClip: 30,\n  beginText: 31,\n  endText: 32,\n  setCharSpacing: 33,\n  setWordSpacing: 34,\n  setHScale: 35,\n  setLeading: 36,\n  setFont: 37,\n  setTextRenderingMode: 38,\n  setTextRise: 39,\n  moveText: 40,\n  setLeadingMoveText: 41,\n  setTextMatrix: 42,\n  nextLine: 43,\n  showText: 44,\n  showSpacedText: 45,\n  nextLineShowText: 46,\n  nextLineSetSpacingShowText: 47,\n  setCharWidth: 48,\n  setCharWidthAndBounds: 49,\n  setStrokeColorSpace: 50,\n  setFillColorSpace: 51,\n  setStrokeColor: 52,\n  setStrokeColorN: 53,\n  setFillColor: 54,\n  setFillColorN: 55,\n  setStrokeGray: 56,\n  setFillGray: 57,\n  setStrokeRGBColor: 58,\n  setFillRGBColor: 59,\n  setStrokeCMYKColor: 60,\n  setFillCMYKColor: 61,\n  shadingFill: 62,\n  beginInlineImage: 63,\n  beginImageData: 64,\n  endInlineImage: 65,\n  paintXObject: 66,\n  markPoint: 67,\n  markPointProps: 68,\n  beginMarkedContent: 69,\n  beginMarkedContentProps: 70,\n  endMarkedContent: 71,\n  beginCompat: 72,\n  endCompat: 73,\n  paintFormXObjectBegin: 74,\n  paintFormXObjectEnd: 75,\n  beginGroup: 76,\n  endGroup: 77,\n  beginAnnotations: 78,\n  endAnnotations: 79,\n  beginAnnotation: 80,\n  endAnnotation: 81,\n  paintJpegXObject: 82,\n  paintImageMaskXObject: 83,\n  paintImageMaskXObjectGroup: 84,\n  paintImageXObject: 85,\n  paintInlineImageXObject: 86,\n  paintInlineImageXObjectGroup: 87,\n  paintImageXObjectRepeat: 88,\n  paintImageMaskXObjectRepeat: 89,\n  paintSolidColorImageMask: 90,\n  constructPath: 91\n};\nexports.OPS = OPS;\nconst UNSUPPORTED_FEATURES = {\n  unknown: \"unknown\",\n  forms: \"forms\",\n  javaScript: \"javaScript\",\n  smask: \"smask\",\n  shadingPattern: \"shadingPattern\",\n  font: \"font\",\n  errorTilingPattern: \"errorTilingPattern\",\n  errorExtGState: \"errorExtGState\",\n  errorXObject: \"errorXObject\",\n  errorFontLoadType3: \"errorFontLoadType3\",\n  errorFontState: \"errorFontState\",\n  errorFontMissing: \"errorFontMissing\",\n  errorFontTranslate: \"errorFontTranslate\",\n  errorColorSpace: \"errorColorSpace\",\n  errorOperatorList: \"errorOperatorList\",\n  errorFontToUnicode: \"errorFontToUnicode\",\n  errorFontLoadNative: \"errorFontLoadNative\",\n  errorFontGetPath: \"errorFontGetPath\",\n  errorMarkedContent: \"errorMarkedContent\"\n};\nexports.UNSUPPORTED_FEATURES = UNSUPPORTED_FEATURES;\nconst PasswordResponses = {\n  NEED_PASSWORD: 1,\n  INCORRECT_PASSWORD: 2\n};\nexports.PasswordResponses = PasswordResponses;\nlet verbosity = VerbosityLevel.WARNINGS;\n\nfunction setVerbosityLevel(level) {\n  if (Number.isInteger(level)) {\n    verbosity = level;\n  }\n}\n\nfunction getVerbosityLevel() {\n  return verbosity;\n}\n\nfunction info(msg) {\n  if (verbosity >= VerbosityLevel.INFOS) {\n    console.log(`Info: ${msg}`);\n  }\n}\n\nfunction warn(msg) {\n  if (verbosity >= VerbosityLevel.WARNINGS) {\n    console.log(`Warning: ${msg}`);\n  }\n}\n\nfunction unreachable(msg) {\n  throw new Error(msg);\n}\n\nfunction assert(cond, msg) {\n  if (!cond) {\n    unreachable(msg);\n  }\n}\n\nfunction isSameOrigin(baseUrl, otherUrl) {\n  let base;\n\n  try {\n    base = new URL(baseUrl);\n\n    if (!base.origin || base.origin === \"null\") {\n      return false;\n    }\n  } catch (e) {\n    return false;\n  }\n\n  const other = new URL(otherUrl, base);\n  return base.origin === other.origin;\n}\n\nfunction _isValidProtocol(url) {\n  if (!url) {\n    return false;\n  }\n\n  switch (url.protocol) {\n    case \"http:\":\n    case \"https:\":\n    case \"ftp:\":\n    case \"mailto:\":\n    case \"tel:\":\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nfunction createValidAbsoluteUrl(url, baseUrl) {\n  if (!url) {\n    return null;\n  }\n\n  try {\n    const absoluteUrl = baseUrl ? new URL(url, baseUrl) : new URL(url);\n\n    if (_isValidProtocol(absoluteUrl)) {\n      return absoluteUrl;\n    }\n  } catch (ex) {}\n\n  return null;\n}\n\nfunction shadow(obj, prop, value) {\n  Object.defineProperty(obj, prop, {\n    value,\n    enumerable: true,\n    configurable: true,\n    writable: false\n  });\n  return value;\n}\n\nconst BaseException = function BaseExceptionClosure() {\n  function BaseException(message) {\n    if (this.constructor === BaseException) {\n      unreachable(\"Cannot initialize BaseException.\");\n    }\n\n    this.message = message;\n    this.name = this.constructor.name;\n  }\n\n  BaseException.prototype = new Error();\n  BaseException.constructor = BaseException;\n  return BaseException;\n}();\n\nexports.BaseException = BaseException;\n\nclass PasswordException extends BaseException {\n  constructor(msg, code) {\n    super(msg);\n    this.code = code;\n  }\n\n}\n\nexports.PasswordException = PasswordException;\n\nclass UnknownErrorException extends BaseException {\n  constructor(msg, details) {\n    super(msg);\n    this.details = details;\n  }\n\n}\n\nexports.UnknownErrorException = UnknownErrorException;\n\nclass InvalidPDFException extends BaseException {}\n\nexports.InvalidPDFException = InvalidPDFException;\n\nclass MissingPDFException extends BaseException {}\n\nexports.MissingPDFException = MissingPDFException;\n\nclass UnexpectedResponseException extends BaseException {\n  constructor(msg, status) {\n    super(msg);\n    this.status = status;\n  }\n\n}\n\nexports.UnexpectedResponseException = UnexpectedResponseException;\n\nclass FormatError extends BaseException {}\n\nexports.FormatError = FormatError;\n\nclass AbortException extends BaseException {}\n\nexports.AbortException = AbortException;\nconst NullCharactersRegExp = /\\x00/g;\n\nfunction removeNullCharacters(str) {\n  if (typeof str !== \"string\") {\n    warn(\"The argument for removeNullCharacters must be a string.\");\n    return str;\n  }\n\n  return str.replace(NullCharactersRegExp, \"\");\n}\n\nfunction bytesToString(bytes) {\n  assert(bytes !== null && typeof bytes === \"object\" && bytes.length !== undefined, \"Invalid argument for bytesToString\");\n  const length = bytes.length;\n  const MAX_ARGUMENT_COUNT = 8192;\n\n  if (length < MAX_ARGUMENT_COUNT) {\n    return String.fromCharCode.apply(null, bytes);\n  }\n\n  const strBuf = [];\n\n  for (let i = 0; i < length; i += MAX_ARGUMENT_COUNT) {\n    const chunkEnd = Math.min(i + MAX_ARGUMENT_COUNT, length);\n    const chunk = bytes.subarray(i, chunkEnd);\n    strBuf.push(String.fromCharCode.apply(null, chunk));\n  }\n\n  return strBuf.join(\"\");\n}\n\nfunction stringToBytes(str) {\n  assert(typeof str === \"string\", \"Invalid argument for stringToBytes\");\n  const length = str.length;\n  const bytes = new Uint8Array(length);\n\n  for (let i = 0; i < length; ++i) {\n    bytes[i] = str.charCodeAt(i) & 0xff;\n  }\n\n  return bytes;\n}\n\nfunction arrayByteLength(arr) {\n  if (arr.length !== undefined) {\n    return arr.length;\n  }\n\n  assert(arr.byteLength !== undefined, \"arrayByteLength - invalid argument.\");\n  return arr.byteLength;\n}\n\nfunction arraysToBytes(arr) {\n  const length = arr.length;\n\n  if (length === 1 && arr[0] instanceof Uint8Array) {\n    return arr[0];\n  }\n\n  let resultLength = 0;\n\n  for (let i = 0; i < length; i++) {\n    resultLength += arrayByteLength(arr[i]);\n  }\n\n  let pos = 0;\n  const data = new Uint8Array(resultLength);\n\n  for (let i = 0; i < length; i++) {\n    let item = arr[i];\n\n    if (!(item instanceof Uint8Array)) {\n      if (typeof item === \"string\") {\n        item = stringToBytes(item);\n      } else {\n        item = new Uint8Array(item);\n      }\n    }\n\n    const itemLength = item.byteLength;\n    data.set(item, pos);\n    pos += itemLength;\n  }\n\n  return data;\n}\n\nfunction string32(value) {\n  return String.fromCharCode(value >> 24 & 0xff, value >> 16 & 0xff, value >> 8 & 0xff, value & 0xff);\n}\n\nfunction objectSize(obj) {\n  return Object.keys(obj).length;\n}\n\nfunction objectFromEntries(iterable) {\n  return Object.assign(Object.create(null), Object.fromEntries(iterable));\n}\n\nfunction isLittleEndian() {\n  const buffer8 = new Uint8Array(4);\n  buffer8[0] = 1;\n  const view32 = new Uint32Array(buffer8.buffer, 0, 1);\n  return view32[0] === 1;\n}\n\nconst IsLittleEndianCached = {\n  get value() {\n    return shadow(this, \"value\", isLittleEndian());\n  }\n\n};\nexports.IsLittleEndianCached = IsLittleEndianCached;\n\nfunction isEvalSupported() {\n  try {\n    new Function(\"\");\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nconst IsEvalSupportedCached = {\n  get value() {\n    return shadow(this, \"value\", isEvalSupported());\n  }\n\n};\nexports.IsEvalSupportedCached = IsEvalSupportedCached;\nconst hexNumbers = [...Array(256).keys()].map(n => n.toString(16).padStart(2, \"0\"));\n\nclass Util {\n  static makeHexColor(r, g, b) {\n    return `#${hexNumbers[r]}${hexNumbers[g]}${hexNumbers[b]}`;\n  }\n\n  static transform(m1, m2) {\n    return [m1[0] * m2[0] + m1[2] * m2[1], m1[1] * m2[0] + m1[3] * m2[1], m1[0] * m2[2] + m1[2] * m2[3], m1[1] * m2[2] + m1[3] * m2[3], m1[0] * m2[4] + m1[2] * m2[5] + m1[4], m1[1] * m2[4] + m1[3] * m2[5] + m1[5]];\n  }\n\n  static applyTransform(p, m) {\n    const xt = p[0] * m[0] + p[1] * m[2] + m[4];\n    const yt = p[0] * m[1] + p[1] * m[3] + m[5];\n    return [xt, yt];\n  }\n\n  static applyInverseTransform(p, m) {\n    const d = m[0] * m[3] - m[1] * m[2];\n    const xt = (p[0] * m[3] - p[1] * m[2] + m[2] * m[5] - m[4] * m[3]) / d;\n    const yt = (-p[0] * m[1] + p[1] * m[0] + m[4] * m[1] - m[5] * m[0]) / d;\n    return [xt, yt];\n  }\n\n  static getAxialAlignedBoundingBox(r, m) {\n    const p1 = Util.applyTransform(r, m);\n    const p2 = Util.applyTransform(r.slice(2, 4), m);\n    const p3 = Util.applyTransform([r[0], r[3]], m);\n    const p4 = Util.applyTransform([r[2], r[1]], m);\n    return [Math.min(p1[0], p2[0], p3[0], p4[0]), Math.min(p1[1], p2[1], p3[1], p4[1]), Math.max(p1[0], p2[0], p3[0], p4[0]), Math.max(p1[1], p2[1], p3[1], p4[1])];\n  }\n\n  static inverseTransform(m) {\n    const d = m[0] * m[3] - m[1] * m[2];\n    return [m[3] / d, -m[1] / d, -m[2] / d, m[0] / d, (m[2] * m[5] - m[4] * m[3]) / d, (m[4] * m[1] - m[5] * m[0]) / d];\n  }\n\n  static apply3dTransform(m, v) {\n    return [m[0] * v[0] + m[1] * v[1] + m[2] * v[2], m[3] * v[0] + m[4] * v[1] + m[5] * v[2], m[6] * v[0] + m[7] * v[1] + m[8] * v[2]];\n  }\n\n  static singularValueDecompose2dScale(m) {\n    const transpose = [m[0], m[2], m[1], m[3]];\n    const a = m[0] * transpose[0] + m[1] * transpose[2];\n    const b = m[0] * transpose[1] + m[1] * transpose[3];\n    const c = m[2] * transpose[0] + m[3] * transpose[2];\n    const d = m[2] * transpose[1] + m[3] * transpose[3];\n    const first = (a + d) / 2;\n    const second = Math.sqrt((a + d) * (a + d) - 4 * (a * d - c * b)) / 2;\n    const sx = first + second || 1;\n    const sy = first - second || 1;\n    return [Math.sqrt(sx), Math.sqrt(sy)];\n  }\n\n  static normalizeRect(rect) {\n    const r = rect.slice(0);\n\n    if (rect[0] > rect[2]) {\n      r[0] = rect[2];\n      r[2] = rect[0];\n    }\n\n    if (rect[1] > rect[3]) {\n      r[1] = rect[3];\n      r[3] = rect[1];\n    }\n\n    return r;\n  }\n\n  static intersect(rect1, rect2) {\n    function compare(a, b) {\n      return a - b;\n    }\n\n    const orderedX = [rect1[0], rect1[2], rect2[0], rect2[2]].sort(compare);\n    const orderedY = [rect1[1], rect1[3], rect2[1], rect2[3]].sort(compare);\n    const result = [];\n    rect1 = Util.normalizeRect(rect1);\n    rect2 = Util.normalizeRect(rect2);\n\n    if (orderedX[0] === rect1[0] && orderedX[1] === rect2[0] || orderedX[0] === rect2[0] && orderedX[1] === rect1[0]) {\n      result[0] = orderedX[1];\n      result[2] = orderedX[2];\n    } else {\n      return null;\n    }\n\n    if (orderedY[0] === rect1[1] && orderedY[1] === rect2[1] || orderedY[0] === rect2[1] && orderedY[1] === rect1[1]) {\n      result[1] = orderedY[1];\n      result[3] = orderedY[2];\n    } else {\n      return null;\n    }\n\n    return result;\n  }\n\n}\n\nexports.Util = Util;\nconst PDFStringTranslateTable = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x2D8, 0x2C7, 0x2C6, 0x2D9, 0x2DD, 0x2DB, 0x2DA, 0x2DC, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x2022, 0x2020, 0x2021, 0x2026, 0x2014, 0x2013, 0x192, 0x2044, 0x2039, 0x203A, 0x2212, 0x2030, 0x201E, 0x201C, 0x201D, 0x2018, 0x2019, 0x201A, 0x2122, 0xFB01, 0xFB02, 0x141, 0x152, 0x160, 0x178, 0x17D, 0x131, 0x142, 0x153, 0x161, 0x17E, 0, 0x20AC];\n\nfunction stringToPDFString(str) {\n  const length = str.length,\n        strBuf = [];\n\n  if (str[0] === \"\\xFE\" && str[1] === \"\\xFF\") {\n    for (let i = 2; i < length; i += 2) {\n      strBuf.push(String.fromCharCode(str.charCodeAt(i) << 8 | str.charCodeAt(i + 1)));\n    }\n  } else if (str[0] === \"\\xFF\" && str[1] === \"\\xFE\") {\n    for (let i = 2; i < length; i += 2) {\n      strBuf.push(String.fromCharCode(str.charCodeAt(i + 1) << 8 | str.charCodeAt(i)));\n    }\n  } else {\n    for (let i = 0; i < length; ++i) {\n      const code = PDFStringTranslateTable[str.charCodeAt(i)];\n      strBuf.push(code ? String.fromCharCode(code) : str.charAt(i));\n    }\n  }\n\n  return strBuf.join(\"\");\n}\n\nfunction escapeString(str) {\n  return str.replace(/([()\\\\\\n\\r])/g, match => {\n    if (match === \"\\n\") {\n      return \"\\\\n\";\n    } else if (match === \"\\r\") {\n      return \"\\\\r\";\n    }\n\n    return `\\\\${match}`;\n  });\n}\n\nfunction isAscii(str) {\n  return /^[\\x00-\\x7F]*$/.test(str);\n}\n\nfunction stringToUTF16BEString(str) {\n  const buf = [\"\\xFE\\xFF\"];\n\n  for (let i = 0, ii = str.length; i < ii; i++) {\n    const char = str.charCodeAt(i);\n    buf.push(String.fromCharCode(char >> 8 & 0xff));\n    buf.push(String.fromCharCode(char & 0xff));\n  }\n\n  return buf.join(\"\");\n}\n\nfunction stringToUTF8String(str) {\n  return decodeURIComponent(escape(str));\n}\n\nfunction utf8StringToString(str) {\n  return unescape(encodeURIComponent(str));\n}\n\nfunction isBool(v) {\n  return typeof v === \"boolean\";\n}\n\nfunction isNum(v) {\n  return typeof v === \"number\";\n}\n\nfunction isString(v) {\n  return typeof v === \"string\";\n}\n\nfunction isArrayBuffer(v) {\n  return typeof v === \"object\" && v !== null && v.byteLength !== undefined;\n}\n\nfunction isArrayEqual(arr1, arr2) {\n  if (arr1.length !== arr2.length) {\n    return false;\n  }\n\n  return arr1.every(function (element, index) {\n    return element === arr2[index];\n  });\n}\n\nfunction getModificationDate(date = new Date()) {\n  const buffer = [date.getUTCFullYear().toString(), (date.getUTCMonth() + 1).toString().padStart(2, \"0\"), date.getUTCDate().toString().padStart(2, \"0\"), date.getUTCHours().toString().padStart(2, \"0\"), date.getUTCMinutes().toString().padStart(2, \"0\"), date.getUTCSeconds().toString().padStart(2, \"0\")];\n  return buffer.join(\"\");\n}\n\nfunction createPromiseCapability() {\n  const capability = Object.create(null);\n  let isSettled = false;\n  Object.defineProperty(capability, \"settled\", {\n    get() {\n      return isSettled;\n    }\n\n  });\n  capability.promise = new Promise(function (resolve, reject) {\n    capability.resolve = function (data) {\n      isSettled = true;\n      resolve(data);\n    };\n\n    capability.reject = function (reason) {\n      isSettled = true;\n      reject(reason);\n    };\n  });\n  return capability;\n}\n\nconst createObjectURL = function createObjectURLClosure() {\n  const digits = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n  return function createObjectURL(data, contentType, forceDataSchema = false) {\n    if (!forceDataSchema && URL.createObjectURL) {\n      const blob = new Blob([data], {\n        type: contentType\n      });\n      return URL.createObjectURL(blob);\n    }\n\n    let buffer = `data:${contentType};base64,`;\n\n    for (let i = 0, ii = data.length; i < ii; i += 3) {\n      const b1 = data[i] & 0xff;\n      const b2 = data[i + 1] & 0xff;\n      const b3 = data[i + 2] & 0xff;\n      const d1 = b1 >> 2,\n            d2 = (b1 & 3) << 4 | b2 >> 4;\n      const d3 = i + 1 < ii ? (b2 & 0xf) << 2 | b3 >> 6 : 64;\n      const d4 = i + 2 < ii ? b3 & 0x3f : 64;\n      buffer += digits[d1] + digits[d2] + digits[d3] + digits[d4];\n    }\n\n    return buffer;\n  };\n}();\n\nexports.createObjectURL = createObjectURL;\nconst XMLEntities = {\n  0x3c: \"&lt;\",\n  0x3e: \"&gt;\",\n  0x26: \"&amp;\",\n  0x22: \"&quot;\",\n  0x27: \"&apos;\"\n};\n\nfunction encodeToXmlString(str) {\n  const buffer = [];\n  let start = 0;\n\n  for (let i = 0, ii = str.length; i < ii; i++) {\n    const char = str.codePointAt(i);\n\n    if (0x20 <= char && char <= 0x7e) {\n      const entity = XMLEntities[char];\n\n      if (entity) {\n        if (start < i) {\n          buffer.push(str.substring(start, i));\n        }\n\n        buffer.push(entity);\n        start = i + 1;\n      }\n    } else {\n      if (start < i) {\n        buffer.push(str.substring(start, i));\n      }\n\n      buffer.push(`&#x${char.toString(16).toUpperCase()};`);\n\n      if (char > 0xd7ff && (char < 0xe000 || char > 0xfffd)) {\n        i++;\n      }\n\n      start = i + 1;\n    }\n  }\n\n  if (buffer.length === 0) {\n    return str;\n  }\n\n  if (start < str.length) {\n    buffer.push(str.substring(start, str.length));\n  }\n\n  return buffer.join(\"\");\n}\n\n/***/ }),\n/* 3 */\n/***/ ((__unused_webpack_module, __unused_webpack_exports, __w_pdfjs_require__) => {\n\n\n\nvar _is_node = __w_pdfjs_require__(4);\n\n;\n\n/***/ }),\n/* 4 */\n/***/ ((__unused_webpack_module, exports) => {\n\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.isNodeJS = void 0;\nconst isNodeJS = typeof process === \"object\" && process + \"\" === \"[object process]\" && !process.versions.nw && !(process.versions.electron && process.type && process.type !== \"browser\");\nexports.isNodeJS = isNodeJS;\n\n/***/ }),\n/* 5 */\n/***/ ((__unused_webpack_module, exports, __w_pdfjs_require__) => {\n\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.clearPrimitiveCaches = clearPrimitiveCaches;\nexports.isCmd = isCmd;\nexports.isDict = isDict;\nexports.isEOF = isEOF;\nexports.isName = isName;\nexports.isRef = isRef;\nexports.isRefsEqual = isRefsEqual;\nexports.isStream = isStream;\nexports.RefSetCache = exports.RefSet = exports.Ref = exports.Name = exports.EOF = exports.Dict = exports.Cmd = void 0;\n\nvar _util = __w_pdfjs_require__(2);\n\nvar EOF = {};\nexports.EOF = EOF;\n\nvar Name = function NameClosure() {\n  let nameCache = Object.create(null);\n\n  function Name(name) {\n    this.name = name;\n  }\n\n  Name.prototype = {};\n\n  Name.get = function Name_get(name) {\n    var nameValue = nameCache[name];\n    return nameValue ? nameValue : nameCache[name] = new Name(name);\n  };\n\n  Name._clearCache = function () {\n    nameCache = Object.create(null);\n  };\n\n  return Name;\n}();\n\nexports.Name = Name;\n\nvar Cmd = function CmdClosure() {\n  let cmdCache = Object.create(null);\n\n  function Cmd(cmd) {\n    this.cmd = cmd;\n  }\n\n  Cmd.prototype = {};\n\n  Cmd.get = function Cmd_get(cmd) {\n    var cmdValue = cmdCache[cmd];\n    return cmdValue ? cmdValue : cmdCache[cmd] = new Cmd(cmd);\n  };\n\n  Cmd._clearCache = function () {\n    cmdCache = Object.create(null);\n  };\n\n  return Cmd;\n}();\n\nexports.Cmd = Cmd;\n\nvar Dict = function DictClosure() {\n  var nonSerializable = function nonSerializableClosure() {\n    return nonSerializable;\n  };\n\n  function Dict(xref) {\n    this._map = Object.create(null);\n    this.xref = xref;\n    this.objId = null;\n    this.suppressEncryption = false;\n    this.__nonSerializable__ = nonSerializable;\n  }\n\n  Dict.prototype = {\n    assignXref: function Dict_assignXref(newXref) {\n      this.xref = newXref;\n    },\n\n    get size() {\n      return Object.keys(this._map).length;\n    },\n\n    get(key1, key2, key3) {\n      let value = this._map[key1];\n\n      if (value === undefined && key2 !== undefined) {\n        value = this._map[key2];\n\n        if (value === undefined && key3 !== undefined) {\n          value = this._map[key3];\n        }\n      }\n\n      if (value instanceof Ref && this.xref) {\n        return this.xref.fetch(value, this.suppressEncryption);\n      }\n\n      return value;\n    },\n\n    async getAsync(key1, key2, key3) {\n      let value = this._map[key1];\n\n      if (value === undefined && key2 !== undefined) {\n        value = this._map[key2];\n\n        if (value === undefined && key3 !== undefined) {\n          value = this._map[key3];\n        }\n      }\n\n      if (value instanceof Ref && this.xref) {\n        return this.xref.fetchAsync(value, this.suppressEncryption);\n      }\n\n      return value;\n    },\n\n    getArray(key1, key2, key3) {\n      let value = this.get(key1, key2, key3);\n\n      if (!Array.isArray(value) || !this.xref) {\n        return value;\n      }\n\n      value = value.slice();\n\n      for (let i = 0, ii = value.length; i < ii; i++) {\n        if (!(value[i] instanceof Ref)) {\n          continue;\n        }\n\n        value[i] = this.xref.fetch(value[i], this.suppressEncryption);\n      }\n\n      return value;\n    },\n\n    getRaw: function Dict_getRaw(key) {\n      return this._map[key];\n    },\n    getKeys: function Dict_getKeys() {\n      return Object.keys(this._map);\n    },\n    getRawValues: function Dict_getRawValues() {\n      return Object.values(this._map);\n    },\n    set: function Dict_set(key, value) {\n      this._map[key] = value;\n    },\n    has: function Dict_has(key) {\n      return this._map[key] !== undefined;\n    },\n    forEach: function Dict_forEach(callback) {\n      for (var key in this._map) {\n        callback(key, this.get(key));\n      }\n    }\n  };\n\n  Dict.empty = function () {\n    const emptyDict = new Dict(null);\n\n    emptyDict.set = (key, value) => {\n      (0, _util.unreachable)(\"Should not call `set` on the empty dictionary.\");\n    };\n\n    return emptyDict;\n  }();\n\n  Dict.merge = function ({\n    xref,\n    dictArray,\n    mergeSubDicts = false\n  }) {\n    const mergedDict = new Dict(xref);\n\n    if (!mergeSubDicts) {\n      for (const dict of dictArray) {\n        if (!(dict instanceof Dict)) {\n          continue;\n        }\n\n        for (const [key, value] of Object.entries(dict._map)) {\n          if (mergedDict._map[key] === undefined) {\n            mergedDict._map[key] = value;\n          }\n        }\n      }\n\n      return mergedDict.size > 0 ? mergedDict : Dict.empty;\n    }\n\n    const properties = new Map();\n\n    for (const dict of dictArray) {\n      if (!(dict instanceof Dict)) {\n        continue;\n      }\n\n      for (const [key, value] of Object.entries(dict._map)) {\n        let property = properties.get(key);\n\n        if (property === undefined) {\n          property = [];\n          properties.set(key, property);\n        }\n\n        property.push(value);\n      }\n    }\n\n    for (const [name, values] of properties) {\n      if (values.length === 1 || !(values[0] instanceof Dict)) {\n        mergedDict._map[name] = values[0];\n        continue;\n      }\n\n      const subDict = new Dict(xref);\n\n      for (const dict of values) {\n        if (!(dict instanceof Dict)) {\n          continue;\n        }\n\n        for (const [key, value] of Object.entries(dict._map)) {\n          if (subDict._map[key] === undefined) {\n            subDict._map[key] = value;\n          }\n        }\n      }\n\n      if (subDict.size > 0) {\n        mergedDict._map[name] = subDict;\n      }\n    }\n\n    properties.clear();\n    return mergedDict.size > 0 ? mergedDict : Dict.empty;\n  };\n\n  return Dict;\n}();\n\nexports.Dict = Dict;\n\nvar Ref = function RefClosure() {\n  let refCache = Object.create(null);\n\n  function Ref(num, gen) {\n    this.num = num;\n    this.gen = gen;\n  }\n\n  Ref.prototype = {\n    toString: function Ref_toString() {\n      if (this.gen === 0) {\n        return `${this.num}R`;\n      }\n\n      return `${this.num}R${this.gen}`;\n    }\n  };\n\n  Ref.get = function (num, gen) {\n    const key = gen === 0 ? `${num}R` : `${num}R${gen}`;\n    const refValue = refCache[key];\n    return refValue ? refValue : refCache[key] = new Ref(num, gen);\n  };\n\n  Ref._clearCache = function () {\n    refCache = Object.create(null);\n  };\n\n  return Ref;\n}();\n\nexports.Ref = Ref;\n\nclass RefSet {\n  constructor(parent = null) {\n    this._set = new Set(parent && parent._set);\n  }\n\n  has(ref) {\n    return this._set.has(ref.toString());\n  }\n\n  put(ref) {\n    this._set.add(ref.toString());\n  }\n\n  remove(ref) {\n    this._set.delete(ref.toString());\n  }\n\n  forEach(callback) {\n    for (const ref of this._set.values()) {\n      callback(ref);\n    }\n  }\n\n  clear() {\n    this._set.clear();\n  }\n\n}\n\nexports.RefSet = RefSet;\n\nclass RefSetCache {\n  constructor() {\n    this._map = new Map();\n  }\n\n  get size() {\n    return this._map.size;\n  }\n\n  get(ref) {\n    return this._map.get(ref.toString());\n  }\n\n  has(ref) {\n    return this._map.has(ref.toString());\n  }\n\n  put(ref, obj) {\n    this._map.set(ref.toString(), obj);\n  }\n\n  putAlias(ref, aliasRef) {\n    this._map.set(ref.toString(), this.get(aliasRef));\n  }\n\n  forEach(callback) {\n    for (const value of this._map.values()) {\n      callback(value);\n    }\n  }\n\n  clear() {\n    this._map.clear();\n  }\n\n}\n\nexports.RefSetCache = RefSetCache;\n\nfunction isEOF(v) {\n  return v === EOF;\n}\n\nfunction isName(v, name) {\n  return v instanceof Name && (name === undefined || v.name === name);\n}\n\nfunction isCmd(v, cmd) {\n  return v instanceof Cmd && (cmd === undefined || v.cmd === cmd);\n}\n\nfunction isDict(v, type) {\n  return v instanceof Dict && (type === undefined || isName(v.get(\"Type\"), type));\n}\n\nfunction isRef(v) {\n  return v instanceof Ref;\n}\n\nfunction isRefsEqual(v1, v2) {\n  return v1.num === v2.num && v1.gen === v2.gen;\n}\n\nfunction isStream(v) {\n  return typeof v === \"object\" && v !== null && v.getBytes !== undefined;\n}\n\nfunction clearPrimitiveCaches() {\n  Cmd._clearCache();\n\n  Name._clearCache();\n\n  Ref._clearCache();\n}\n\n/***/ }),\n/* 6 */\n/***/ ((__unused_webpack_module, exports, __w_pdfjs_require__) => {\n\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.NetworkPdfManager = exports.LocalPdfManager = void 0;\n\nvar _util = __w_pdfjs_require__(2);\n\nvar _chunked_stream = __w_pdfjs_require__(7);\n\nvar _core_utils = __w_pdfjs_require__(8);\n\nvar _document = __w_pdfjs_require__(9);\n\nvar _stream = __w_pdfjs_require__(12);\n\nclass BasePdfManager {\n  constructor() {\n    if (this.constructor === BasePdfManager) {\n      (0, _util.unreachable)(\"Cannot initialize BasePdfManager.\");\n    }\n  }\n\n  get docId() {\n    return this._docId;\n  }\n\n  get password() {\n    return this._password;\n  }\n\n  get docBaseUrl() {\n    let docBaseUrl = null;\n\n    if (this._docBaseUrl) {\n      const absoluteUrl = (0, _util.createValidAbsoluteUrl)(this._docBaseUrl);\n\n      if (absoluteUrl) {\n        docBaseUrl = absoluteUrl.href;\n      } else {\n        (0, _util.warn)(`Invalid absolute docBaseUrl: \"${this._docBaseUrl}\".`);\n      }\n    }\n\n    return (0, _util.shadow)(this, \"docBaseUrl\", docBaseUrl);\n  }\n\n  onLoadedStream() {\n    (0, _util.unreachable)(\"Abstract method `onLoadedStream` called\");\n  }\n\n  ensureDoc(prop, args) {\n    return this.ensure(this.pdfDocument, prop, args);\n  }\n\n  ensureXRef(prop, args) {\n    return this.ensure(this.pdfDocument.xref, prop, args);\n  }\n\n  ensureCatalog(prop, args) {\n    return this.ensure(this.pdfDocument.catalog, prop, args);\n  }\n\n  getPage(pageIndex) {\n    return this.pdfDocument.getPage(pageIndex);\n  }\n\n  fontFallback(id, handler) {\n    return this.pdfDocument.fontFallback(id, handler);\n  }\n\n  cleanup(manuallyTriggered = false) {\n    return this.pdfDocument.cleanup(manuallyTriggered);\n  }\n\n  async ensure(obj, prop, args) {\n    (0, _util.unreachable)(\"Abstract method `ensure` called\");\n  }\n\n  requestRange(begin, end) {\n    (0, _util.unreachable)(\"Abstract method `requestRange` called\");\n  }\n\n  requestLoadedStream() {\n    (0, _util.unreachable)(\"Abstract method `requestLoadedStream` called\");\n  }\n\n  sendProgressiveData(chunk) {\n    (0, _util.unreachable)(\"Abstract method `sendProgressiveData` called\");\n  }\n\n  updatePassword(password) {\n    this._password = password;\n  }\n\n  terminate(reason) {\n    (0, _util.unreachable)(\"Abstract method `terminate` called\");\n  }\n\n}\n\nclass LocalPdfManager extends BasePdfManager {\n  constructor(docId, data, password, evaluatorOptions, docBaseUrl) {\n    super();\n    this._docId = docId;\n    this._password = password;\n    this._docBaseUrl = docBaseUrl;\n    this.evaluatorOptions = evaluatorOptions;\n    const stream = new _stream.Stream(data);\n    this.pdfDocument = new _document.PDFDocument(this, stream);\n    this._loadedStreamPromise = Promise.resolve(stream);\n  }\n\n  async ensure(obj, prop, args) {\n    const value = obj[prop];\n\n    if (typeof value === \"function\") {\n      return value.apply(obj, args);\n    }\n\n    return value;\n  }\n\n  requestRange(begin, end) {\n    return Promise.resolve();\n  }\n\n  requestLoadedStream() {}\n\n  onLoadedStream() {\n    return this._loadedStreamPromise;\n  }\n\n  terminate(reason) {}\n\n}\n\nexports.LocalPdfManager = LocalPdfManager;\n\nclass NetworkPdfManager extends BasePdfManager {\n  constructor(docId, pdfNetworkStream, args, evaluatorOptions, docBaseUrl) {\n    super();\n    this._docId = docId;\n    this._password = args.password;\n    this._docBaseUrl = docBaseUrl;\n    this.msgHandler = args.msgHandler;\n    this.evaluatorOptions = evaluatorOptions;\n    this.streamManager = new _chunked_stream.ChunkedStreamManager(pdfNetworkStream, {\n      msgHandler: args.msgHandler,\n      length: args.length,\n      disableAutoFetch: args.disableAutoFetch,\n      rangeChunkSize: args.rangeChunkSize\n    });\n    this.pdfDocument = new _document.PDFDocument(this, this.streamManager.getStream());\n  }\n\n  async ensure(obj, prop, args) {\n    try {\n      const value = obj[prop];\n\n      if (typeof value === \"function\") {\n        return value.apply(obj, args);\n      }\n\n      return value;\n    } catch (ex) {\n      if (!(ex instanceof _core_utils.MissingDataException)) {\n        throw ex;\n      }\n\n      await this.requestRange(ex.begin, ex.end);\n      return this.ensure(obj, prop, args);\n    }\n  }\n\n  requestRange(begin, end) {\n    return this.streamManager.requestRange(begin, end);\n  }\n\n  requestLoadedStream() {\n    this.streamManager.requestAllChunks();\n  }\n\n  sendProgressiveData(chunk) {\n    this.streamManager.onReceiveData({\n      chunk\n    });\n  }\n\n  onLoadedStream() {\n    return this.streamManager.onLoadedStream();\n  }\n\n  terminate(reason) {\n    this.streamManager.abort(reason);\n  }\n\n}\n\nexports.NetworkPdfManager = NetworkPdfManager;\n\n/***/ }),\n/* 7 */\n/***/ ((__unused_webpack_module, exports, __w_pdfjs_require__) => {\n\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.ChunkedStreamManager = exports.ChunkedStream = void 0;\n\nvar _util = __w_pdfjs_require__(2);\n\nvar _core_utils = __w_pdfjs_require__(8);\n\nclass ChunkedStream {\n  constructor(length, chunkSize, manager) {\n    this.bytes = new Uint8Array(length);\n    this.start = 0;\n    this.pos = 0;\n    this.end = length;\n    this.chunkSize = chunkSize;\n    this._loadedChunks = new Set();\n    this.numChunks = Math.ceil(length / chunkSize);\n    this.manager = manager;\n    this.progressiveDataLength = 0;\n    this.lastSuccessfulEnsureByteChunk = -1;\n  }\n\n  getMissingChunks() {\n    const chunks = [];\n\n    for (let chunk = 0, n = this.numChunks; chunk < n; ++chunk) {\n      if (!this._loadedChunks.has(chunk)) {\n        chunks.push(chunk);\n      }\n    }\n\n    return chunks;\n  }\n\n  getBaseStreams() {\n    return [this];\n  }\n\n  get numChunksLoaded() {\n    return this._loadedChunks.size;\n  }\n\n  allChunksLoaded() {\n    return this.numChunksLoaded === this.numChunks;\n  }\n\n  onReceiveData(begin, chunk) {\n    const chunkSize = this.chunkSize;\n\n    if (begin % chunkSize !== 0) {\n      throw new Error(`Bad begin offset: ${begin}`);\n    }\n\n    const end = begin + chunk.byteLength;\n\n    if (end % chunkSize !== 0 && end !== this.bytes.length) {\n      throw new Error(`Bad end offset: ${end}`);\n    }\n\n    this.bytes.set(new Uint8Array(chunk), begin);\n    const beginChunk = Math.floor(begin / chunkSize);\n    const endChunk = Math.floor((end - 1) / chunkSize) + 1;\n\n    for (let curChunk = beginChunk; curChunk < endChunk; ++curChunk) {\n      this._loadedChunks.add(curChunk);\n    }\n  }\n\n  onReceiveProgressiveData(data) {\n    let position = this.progressiveDataLength;\n    const beginChunk = Math.floor(position / this.chunkSize);\n    this.bytes.set(new Uint8Array(data), position);\n    position += data.byteLength;\n    this.progressiveDataLength = position;\n    const endChunk = position >= this.end ? this.numChunks : Math.floor(position / this.chunkSize);\n\n    for (let curChunk = beginChunk; curChunk < endChunk; ++curChunk) {\n      this._loadedChunks.add(curChunk);\n    }\n  }\n\n  ensureByte(pos) {\n    if (pos < this.progressiveDataLength) {\n      return;\n    }\n\n    const chunk = Math.floor(pos / this.chunkSize);\n\n    if (chunk === this.lastSuccessfulEnsureByteChunk) {\n      return;\n    }\n\n    if (!this._loadedChunks.has(chunk)) {\n      throw new _core_utils.MissingDataException(pos, pos + 1);\n    }\n\n    this.lastSuccessfulEnsureByteChunk = chunk;\n  }\n\n  ensureRange(begin, end) {\n    if (begin >= end) {\n      return;\n    }\n\n    if (end <= this.progressiveDataLength) {\n      return;\n    }\n\n    const chunkSize = this.chunkSize;\n    const beginChunk = Math.floor(begin / chunkSize);\n    const endChunk = Math.floor((end - 1) / chunkSize) + 1;\n\n    for (let chunk = beginChunk; chunk < endChunk; ++chunk) {\n      if (!this._loadedChunks.has(chunk)) {\n        throw new _core_utils.MissingDataException(begin, end);\n      }\n    }\n  }\n\n  nextEmptyChunk(beginChunk) {\n    const numChunks = this.numChunks;\n\n    for (let i = 0; i < numChunks; ++i) {\n      const chunk = (beginChunk + i) % numChunks;\n\n      if (!this._loadedChunks.has(chunk)) {\n        return chunk;\n      }\n    }\n\n    return null;\n  }\n\n  hasChunk(chunk) {\n    return this._loadedChunks.has(chunk);\n  }\n\n  get length() {\n    return this.end - this.start;\n  }\n\n  get isEmpty() {\n    return this.length === 0;\n  }\n\n  getByte() {\n    const pos = this.pos;\n\n    if (pos >= this.end) {\n      return -1;\n    }\n\n    if (pos >= this.progressiveDataLength) {\n      this.ensureByte(pos);\n    }\n\n    return this.bytes[this.pos++];\n  }\n\n  getUint16() {\n    const b0 = this.getByte();\n    const b1 = this.getByte();\n\n    if (b0 === -1 || b1 === -1) {\n      return -1;\n    }\n\n    return (b0 << 8) + b1;\n  }\n\n  getInt32() {\n    const b0 = this.getByte();\n    const b1 = this.getByte();\n    const b2 = this.getByte();\n    const b3 = this.getByte();\n    return (b0 << 24) + (b1 << 16) + (b2 << 8) + b3;\n  }\n\n  getBytes(length, forceClamped = false) {\n    const bytes = this.bytes;\n    const pos = this.pos;\n    const strEnd = this.end;\n\n    if (!length) {\n      if (strEnd > this.progressiveDataLength) {\n        this.ensureRange(pos, strEnd);\n      }\n\n      const subarray = bytes.subarray(pos, strEnd);\n      return forceClamped ? new Uint8ClampedArray(subarray) : subarray;\n    }\n\n    let end = pos + length;\n\n    if (end > strEnd) {\n      end = strEnd;\n    }\n\n    if (end > this.progressiveDataLength) {\n      this.ensureRange(pos, end);\n    }\n\n    this.pos = end;\n    const subarray = bytes.subarray(pos, end);\n    return forceClamped ? new Uint8ClampedArray(subarray) : subarray;\n  }\n\n  peekByte() {\n    const peekedByte = this.getByte();\n\n    if (peekedByte !== -1) {\n      this.pos--;\n    }\n\n    return peekedByte;\n  }\n\n  peekBytes(length, forceClamped = false) {\n    const bytes = this.getBytes(length, forceClamped);\n    this.pos -= bytes.length;\n    return bytes;\n  }\n\n  getByteRange(begin, end) {\n    if (begin < 0) {\n      begin = 0;\n    }\n\n    if (end > this.end) {\n      end = this.end;\n    }\n\n    if (end > this.progressiveDataLength) {\n      this.ensureRange(begin, end);\n    }\n\n    return this.bytes.subarray(begin, end);\n  }\n\n  skip(n) {\n    if (!n) {\n      n = 1;\n    }\n\n    this.pos += n;\n  }\n\n  reset() {\n    this.pos = this.start;\n  }\n\n  moveStart() {\n    this.start = this.pos;\n  }\n\n  makeSubStream(start, length, dict) {\n    if (length) {\n      if (start + length > this.progressiveDataLength) {\n        this.ensureRange(start, start + length);\n      }\n    } else {\n      if (start >= this.progressiveDataLength) {\n        this.ensureByte(start);\n      }\n    }\n\n    function ChunkedStreamSubstream() {}\n\n    ChunkedStreamSubstream.prototype = Object.create(this);\n\n    ChunkedStreamSubstream.prototype.getMissingChunks = function () {\n      const chunkSize = this.chunkSize;\n      const beginChunk = Math.floor(this.start / chunkSize);\n      const endChunk = Math.floor((this.end - 1) / chunkSize) + 1;\n      const missingChunks = [];\n\n      for (let chunk = beginChunk; chunk < endChunk; ++chunk) {\n        if (!this._loadedChunks.has(chunk)) {\n          missingChunks.push(chunk);\n        }\n      }\n\n      return missingChunks;\n    };\n\n    ChunkedStreamSubstream.prototype.allChunksLoaded = function () {\n      if (this.numChunksLoaded === this.numChunks) {\n        return true;\n      }\n\n      return this.getMissingChunks().length === 0;\n    };\n\n    const subStream = new ChunkedStreamSubstream();\n    subStream.pos = subStream.start = start;\n    subStream.end = start + length || this.end;\n    subStream.dict = dict;\n    return subStream;\n  }\n\n}\n\nexports.ChunkedStream = ChunkedStream;\n\nclass ChunkedStreamManager {\n  constructor(pdfNetworkStream, args) {\n    this.length = args.length;\n    this.chunkSize = args.rangeChunkSize;\n    this.stream = new ChunkedStream(this.length, this.chunkSize, this);\n    this.pdfNetworkStream = pdfNetworkStream;\n    this.disableAutoFetch = args.disableAutoFetch;\n    this.msgHandler = args.msgHandler;\n    this.currRequestId = 0;\n    this._chunksNeededByRequest = new Map();\n    this._requestsByChunk = new Map();\n    this._promisesByRequest = new Map();\n    this.progressiveDataLength = 0;\n    this.aborted = false;\n    this._loadedStreamCapability = (0, _util.createPromiseCapability)();\n  }\n\n  onLoadedStream() {\n    return this._loadedStreamCapability.promise;\n  }\n\n  sendRequest(begin, end) {\n    const rangeReader = this.pdfNetworkStream.getRangeReader(begin, end);\n\n    if (!rangeReader.isStreamingSupported) {\n      rangeReader.onProgress = this.onProgress.bind(this);\n    }\n\n    let chunks = [],\n        loaded = 0;\n    const promise = new Promise((resolve, reject) => {\n      const readChunk = chunk => {\n        try {\n          if (!chunk.done) {\n            const data = chunk.value;\n            chunks.push(data);\n            loaded += (0, _util.arrayByteLength)(data);\n\n            if (rangeReader.isStreamingSupported) {\n              this.onProgress({\n                loaded\n              });\n            }\n\n            rangeReader.read().then(readChunk, reject);\n            return;\n          }\n\n          const chunkData = (0, _util.arraysToBytes)(chunks);\n          chunks = null;\n          resolve(chunkData);\n        } catch (e) {\n          reject(e);\n        }\n      };\n\n      rangeReader.read().then(readChunk, reject);\n    });\n    promise.then(data => {\n      if (this.aborted) {\n        return;\n      }\n\n      this.onReceiveData({\n        chunk: data,\n        begin\n      });\n    });\n  }\n\n  requestAllChunks() {\n    const missingChunks = this.stream.getMissingChunks();\n\n    this._requestChunks(missingChunks);\n\n    return this._loadedStreamCapability.promise;\n  }\n\n  _requestChunks(chunks) {\n    const requestId = this.currRequestId++;\n    const chunksNeeded = new Set();\n\n    this._chunksNeededByRequest.set(requestId, chunksNeeded);\n\n    for (const chunk of chunks) {\n      if (!this.stream.hasChunk(chunk)) {\n        chunksNeeded.add(chunk);\n      }\n    }\n\n    if (chunksNeeded.size === 0) {\n      return Promise.resolve();\n    }\n\n    const capability = (0, _util.createPromiseCapability)();\n\n    this._promisesByRequest.set(requestId, capability);\n\n    const chunksToRequest = [];\n\n    for (const chunk of chunksNeeded) {\n      let requestIds = this._requestsByChunk.get(chunk);\n\n      if (!requestIds) {\n        requestIds = [];\n\n        this._requestsByChunk.set(chunk, requestIds);\n\n        chunksToRequest.push(chunk);\n      }\n\n      requestIds.push(requestId);\n    }\n\n    if (chunksToRequest.length > 0) {\n      const groupedChunksToRequest = this.groupChunks(chunksToRequest);\n\n      for (const groupedChunk of groupedChunksToRequest) {\n        const begin = groupedChunk.beginChunk * this.chunkSize;\n        const end = Math.min(groupedChunk.endChunk * this.chunkSize, this.length);\n        this.sendRequest(begin, end);\n      }\n    }\n\n    return capability.promise.catch(reason => {\n      if (this.aborted) {\n        return;\n      }\n\n      throw reason;\n    });\n  }\n\n  getStream() {\n    return this.stream;\n  }\n\n  requestRange(begin, end) {\n    end = Math.min(end, this.length);\n    const beginChunk = this.getBeginChunk(begin);\n    const endChunk = this.getEndChunk(end);\n    const chunks = [];\n\n    for (let chunk = beginChunk; chunk < endChunk; ++chunk) {\n      chunks.push(chunk);\n    }\n\n    return this._requestChunks(chunks);\n  }\n\n  requestRanges(ranges = []) {\n    const chunksToRequest = [];\n\n    for (const range of ranges) {\n      const beginChunk = this.getBeginChunk(range.begin);\n      const endChunk = this.getEndChunk(range.end);\n\n      for (let chunk = beginChunk; chunk < endChunk; ++chunk) {\n        if (!chunksToRequest.includes(chunk)) {\n          chunksToRequest.push(chunk);\n        }\n      }\n    }\n\n    chunksToRequest.sort(function (a, b) {\n      return a - b;\n    });\n    return this._requestChunks(chunksToRequest);\n  }\n\n  groupChunks(chunks) {\n    const groupedChunks = [];\n    let beginChunk = -1;\n    let prevChunk = -1;\n\n    for (let i = 0, ii = chunks.length; i < ii; ++i) {\n      const chunk = chunks[i];\n\n      if (beginChunk < 0) {\n        beginChunk = chunk;\n      }\n\n      if (prevChunk >= 0 && prevChunk + 1 !== chunk) {\n        groupedChunks.push({\n          beginChunk,\n          endChunk: prevChunk + 1\n        });\n        beginChunk = chunk;\n      }\n\n      if (i + 1 === chunks.length) {\n        groupedChunks.push({\n          beginChunk,\n          endChunk: chunk + 1\n        });\n      }\n\n      prevChunk = chunk;\n    }\n\n    return groupedChunks;\n  }\n\n  onProgress(args) {\n    this.msgHandler.send(\"DocProgress\", {\n      loaded: this.stream.numChunksLoaded * this.chunkSize + args.loaded,\n      total: this.length\n    });\n  }\n\n  onReceiveData(args) {\n    const chunk = args.chunk;\n    const isProgressive = args.begin === undefined;\n    const begin = isProgressive ? this.progressiveDataLength : args.begin;\n    const end = begin + chunk.byteLength;\n    const beginChunk = Math.floor(begin / this.chunkSize);\n    const endChunk = end < this.length ? Math.floor(end / this.chunkSize) : Math.ceil(end / this.chunkSize);\n\n    if (isProgressive) {\n      this.stream.onReceiveProgressiveData(chunk);\n      this.progressiveDataLength = end;\n    } else {\n      this.stream.onReceiveData(begin, chunk);\n    }\n\n    if (this.stream.allChunksLoaded()) {\n      this._loadedStreamCapability.resolve(this.stream);\n    }\n\n    const loadedRequests = [];\n\n    for (let curChunk = beginChunk; curChunk < endChunk; ++curChunk) {\n      const requestIds = this._requestsByChunk.get(curChunk);\n\n      if (!requestIds) {\n        continue;\n      }\n\n      this._requestsByChunk.delete(curChunk);\n\n      for (const requestId of requestIds) {\n        const chunksNeeded = this._chunksNeededByRequest.get(requestId);\n\n        if (chunksNeeded.has(curChunk)) {\n          chunksNeeded.delete(curChunk);\n        }\n\n        if (chunksNeeded.size > 0) {\n          continue;\n        }\n\n        loadedRequests.push(requestId);\n      }\n    }\n\n    if (!this.disableAutoFetch && this._requestsByChunk.size === 0) {\n      let nextEmptyChunk;\n\n      if (this.stream.numChunksLoaded === 1) {\n        const lastChunk = this.stream.numChunks - 1;\n\n        if (!this.stream.hasChunk(lastChunk)) {\n          nextEmptyChunk = lastChunk;\n        }\n      } else {\n        nextEmptyChunk = this.stream.nextEmptyChunk(endChunk);\n      }\n\n      if (Number.isInteger(nextEmptyChunk)) {\n        this._requestChunks([nextEmptyChunk]);\n      }\n    }\n\n    for (const requestId of loadedRequests) {\n      const capability = this._promisesByRequest.get(requestId);\n\n      this._promisesByRequest.delete(requestId);\n\n      capability.resolve();\n    }\n\n    this.msgHandler.send(\"DocProgress\", {\n      loaded: this.stream.numChunksLoaded * this.chunkSize,\n      total: this.length\n    });\n  }\n\n  onError(err) {\n    this._loadedStreamCapability.reject(err);\n  }\n\n  getBeginChunk(begin) {\n    return Math.floor(begin / this.chunkSize);\n  }\n\n  getEndChunk(end) {\n    return Math.floor((end - 1) / this.chunkSize) + 1;\n  }\n\n  abort(reason) {\n    this.aborted = true;\n\n    if (this.pdfNetworkStream) {\n      this.pdfNetworkStream.cancelAllRequests(reason);\n    }\n\n    for (const capability of this._promisesByRequest.values()) {\n      capability.reject(reason);\n    }\n  }\n\n}\n\nexports.ChunkedStreamManager = ChunkedStreamManager;\n\n/***/ }),\n/* 8 */\n/***/ ((__unused_webpack_module, exports, __w_pdfjs_require__) => {\n\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.collectActions = collectActions;\nexports.escapePDFName = escapePDFName;\nexports.getArrayLookupTableFactory = getArrayLookupTableFactory;\nexports.getInheritableProperty = getInheritableProperty;\nexports.getLookupTableFactory = getLookupTableFactory;\nexports.isWhiteSpace = isWhiteSpace;\nexports.log2 = log2;\nexports.parseXFAPath = parseXFAPath;\nexports.readInt8 = readInt8;\nexports.readUint16 = readUint16;\nexports.readUint32 = readUint32;\nexports.toRomanNumerals = toRomanNumerals;\nexports.XRefParseException = exports.XRefEntryException = exports.MissingDataException = void 0;\n\nvar _util = __w_pdfjs_require__(2);\n\nvar _primitives = __w_pdfjs_require__(5);\n\nfunction getLookupTableFactory(initializer) {\n  let lookup;\n  return function () {\n    if (initializer) {\n      lookup = Object.create(null);\n      initializer(lookup);\n      initializer = null;\n    }\n\n    return lookup;\n  };\n}\n\nfunction getArrayLookupTableFactory(initializer) {\n  let lookup;\n  return function () {\n    if (initializer) {\n      let arr = initializer();\n      initializer = null;\n      lookup = Object.create(null);\n\n      for (let i = 0, ii = arr.length; i < ii; i += 2) {\n        lookup[arr[i]] = arr[i + 1];\n      }\n\n      arr = null;\n    }\n\n    return lookup;\n  };\n}\n\nclass MissingDataException extends _util.BaseException {\n  constructor(begin, end) {\n    super(`Missing data [${begin}, ${end})`);\n    this.begin = begin;\n    this.end = end;\n  }\n\n}\n\nexports.MissingDataException = MissingDataException;\n\nclass XRefEntryException extends _util.BaseException {}\n\nexports.XRefEntryException = XRefEntryException;\n\nclass XRefParseException extends _util.BaseException {}\n\nexports.XRefParseException = XRefParseException;\n\nfunction getInheritableProperty({\n  dict,\n  key,\n  getArray = false,\n  stopWhenFound = true\n}) {\n  const LOOP_LIMIT = 100;\n  let loopCount = 0;\n  let values;\n\n  while (dict) {\n    const value = getArray ? dict.getArray(key) : dict.get(key);\n\n    if (value !== undefined) {\n      if (stopWhenFound) {\n        return value;\n      }\n\n      if (!values) {\n        values = [];\n      }\n\n      values.push(value);\n    }\n\n    if (++loopCount > LOOP_LIMIT) {\n      (0, _util.warn)(`getInheritableProperty: maximum loop count exceeded for \"${key}\"`);\n      break;\n    }\n\n    dict = dict.get(\"Parent\");\n  }\n\n  return values;\n}\n\nconst ROMAN_NUMBER_MAP = [\"\", \"C\", \"CC\", \"CCC\", \"CD\", \"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\", \"\", \"X\", \"XX\", \"XXX\", \"XL\", \"L\", \"LX\", \"LXX\", \"LXXX\", \"XC\", \"\", \"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\", \"VIII\", \"IX\"];\n\nfunction toRomanNumerals(number, lowerCase = false) {\n  (0, _util.assert)(Number.isInteger(number) && number > 0, \"The number should be a positive integer.\");\n  const romanBuf = [];\n  let pos;\n\n  while (number >= 1000) {\n    number -= 1000;\n    romanBuf.push(\"M\");\n  }\n\n  pos = number / 100 | 0;\n  number %= 100;\n  romanBuf.push(ROMAN_NUMBER_MAP[pos]);\n  pos = number / 10 | 0;\n  number %= 10;\n  romanBuf.push(ROMAN_NUMBER_MAP[10 + pos]);\n  romanBuf.push(ROMAN_NUMBER_MAP[20 + number]);\n  const romanStr = romanBuf.join(\"\");\n  return lowerCase ? romanStr.toLowerCase() : romanStr;\n}\n\nfunction log2(x) {\n  if (x <= 0) {\n    return 0;\n  }\n\n  return Math.ceil(Math.log2(x));\n}\n\nfunction readInt8(data, offset) {\n  return data[offset] << 24 >> 24;\n}\n\nfunction readUint16(data, offset) {\n  return data[offset] << 8 | data[offset + 1];\n}\n\nfunction readUint32(data, offset) {\n  return (data[offset] << 24 | data[offset + 1] << 16 | data[offset + 2] << 8 | data[offset + 3]) >>> 0;\n}\n\nfunction isWhiteSpace(ch) {\n  return ch === 0x20 || ch === 0x09 || ch === 0x0d || ch === 0x0a;\n}\n\nfunction parseXFAPath(path) {\n  const positionPattern = /(.+)\\[([0-9]+)\\]$/;\n  return path.split(\".\").map(component => {\n    const m = component.match(positionPattern);\n\n    if (m) {\n      return {\n        name: m[1],\n        pos: parseInt(m[2], 10)\n      };\n    }\n\n    return {\n      name: component,\n      pos: 0\n    };\n  });\n}\n\nfunction escapePDFName(str) {\n  const buffer = [];\n  let start = 0;\n\n  for (let i = 0, ii = str.length; i < ii; i++) {\n    const char = str.charCodeAt(i);\n\n    if (char < 0x21 || char > 0x7e || char === 0x23 || char === 0x28 || char === 0x29 || char === 0x3c || char === 0x3e || char === 0x5b || char === 0x5d || char === 0x7b || char === 0x7d || char === 0x2f || char === 0x25) {\n      if (start < i) {\n        buffer.push(str.substring(start, i));\n      }\n\n      buffer.push(`#${char.toString(16)}`);\n      start = i + 1;\n    }\n  }\n\n  if (buffer.length === 0) {\n    return str;\n  }\n\n  if (start < str.length) {\n    buffer.push(str.substring(start, str.length));\n  }\n\n  return buffer.join(\"\");\n}\n\nfunction _collectJS(entry, xref, list, parents) {\n  if (!entry) {\n    return;\n  }\n\n  let parent = null;\n\n  if ((0, _primitives.isRef)(entry)) {\n    if (parents.has(entry)) {\n      return;\n    }\n\n    parent = entry;\n    parents.put(parent);\n    entry = xref.fetch(entry);\n  }\n\n  if (Array.isArray(entry)) {\n    for (const element of entry) {\n      _collectJS(element, xref, list, parents);\n    }\n  } else if (entry instanceof _primitives.Dict) {\n    if ((0, _primitives.isName)(entry.get(\"S\"), \"JavaScript\") && entry.has(\"JS\")) {\n      const js = entry.get(\"JS\");\n      let code;\n\n      if ((0, _primitives.isStream)(js)) {\n        code = (0, _util.bytesToString)(js.getBytes());\n      } else {\n        code = js;\n      }\n\n      code = (0, _util.stringToPDFString)(code);\n\n      if (code) {\n        list.push(code);\n      }\n    }\n\n    _collectJS(entry.getRaw(\"Next\"), xref, list, parents);\n  }\n\n  if (parent) {\n    parents.remove(parent);\n  }\n}\n\nfunction collectActions(xref, dict, eventType) {\n  const actions = Object.create(null);\n\n  if (dict.has(\"AA\")) {\n    const additionalActions = dict.get(\"AA\");\n\n    for (const key of additionalActions.getKeys()) {\n      const action = eventType[key];\n\n      if (!action) {\n        continue;\n      }\n\n      const actionDict = additionalActions.getRaw(key);\n      const parents = new _primitives.RefSet();\n      const list = [];\n\n      _collectJS(actionDict, xref, list, parents);\n\n      if (list.length > 0) {\n        actions[action] = list;\n      }\n    }\n  }\n\n  if (dict.has(\"A\")) {\n    const actionDict = dict.get(\"A\");\n    const parents = new _primitives.RefSet();\n    const list = [];\n\n    _collectJS(actionDict, xref, list, parents);\n\n    if (list.length > 0) {\n      actions.Action = list;\n    }\n  }\n\n  return (0, _util.objectSize)(actions) > 0 ? actions : null;\n}\n\n/***/ }),\n/* 9 */\n/***/ ((__unused_webpack_module, exports, __w_pdfjs_require__) => {\n\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.PDFDocument = exports.Page = void 0;\n\nvar _util = __w_pdfjs_require__(2);\n\nvar _obj = __w_pdfjs_require__(10);\n\nvar _primitives = __w_pdfjs_require__(5);\n\nvar _core_utils = __w_pdfjs_require__(8);\n\nvar _stream = __w_pdfjs_require__(12);\n\nvar _annotation = __w_pdfjs_require__(25);\n\nvar _crypto = __w_pdfjs_require__(22);\n\nvar _parser = __w_pdfjs_require__(11);\n\nvar _operator_list = __w_pdfjs_require__(44);\n\nvar _evaluator = __w_pdfjs_require__(27);\n\nconst DEFAULT_USER_UNIT = 1.0;\nconst LETTER_SIZE_MEDIABOX = [0, 0, 612, 792];\n\nfunction isAnnotationRenderable(annotation, intent) {\n  return intent === \"display\" && annotation.viewable || intent === \"print\" && annotation.printable;\n}\n\nclass Page {\n  constructor({\n    pdfManager,\n    xref,\n    pageIndex,\n    pageDict,\n    ref,\n    globalIdFactory,\n    fontCache,\n    builtInCMapCache,\n    globalImageCache,\n    nonBlendModesSet\n  }) {\n    this.pdfManager = pdfManager;\n    this.pageIndex = pageIndex;\n    this.pageDict = pageDict;\n    this.xref = xref;\n    this.ref = ref;\n    this.fontCache = fontCache;\n    this.builtInCMapCache = builtInCMapCache;\n    this.globalImageCache = globalImageCache;\n    this.nonBlendModesSet = nonBlendModesSet;\n    this.evaluatorOptions = pdfManager.evaluatorOptions;\n    this.resourcesPromise = null;\n    const idCounters = {\n      obj: 0\n    };\n    this._localIdFactory = class extends globalIdFactory {\n      static createObjId() {\n        return `p${pageIndex}_${++idCounters.obj}`;\n      }\n\n    };\n  }\n\n  _getInheritableProperty(key, getArray = false) {\n    const value = (0, _core_utils.getInheritableProperty)({\n      dict: this.pageDict,\n      key,\n      getArray,\n      stopWhenFound: false\n    });\n\n    if (!Array.isArray(value)) {\n      return value;\n    }\n\n    if (value.length === 1 || !(0, _primitives.isDict)(value[0])) {\n      return value[0];\n    }\n\n    return _primitives.Dict.merge({\n      xref: this.xref,\n      dictArray: value\n    });\n  }\n\n  get content() {\n    return this.pageDict.get(\"Contents\");\n  }\n\n  get resources() {\n    return (0, _util.shadow)(this, \"resources\", this._getInheritableProperty(\"Resources\") || _primitives.Dict.empty);\n  }\n\n  _getBoundingBox(name) {\n    const box = this._getInheritableProperty(name, true);\n\n    if (Array.isArray(box) && box.length === 4) {\n      if (box[2] - box[0] !== 0 && box[3] - box[1] !== 0) {\n        return box;\n      }\n\n      (0, _util.warn)(`Empty /${name} entry.`);\n    }\n\n    return null;\n  }\n\n  get mediaBox() {\n    return (0, _util.shadow)(this, \"mediaBox\", this._getBoundingBox(\"MediaBox\") || LETTER_SIZE_MEDIABOX);\n  }\n\n  get cropBox() {\n    return (0, _util.shadow)(this, \"cropBox\", this._getBoundingBox(\"CropBox\") || this.mediaBox);\n  }\n\n  get userUnit() {\n    let obj = this.pageDict.get(\"UserUnit\");\n\n    if (!(0, _util.isNum)(obj) || obj <= 0) {\n      obj = DEFAULT_USER_UNIT;\n    }\n\n    return (0, _util.shadow)(this, \"userUnit\", obj);\n  }\n\n  get view() {\n    const {\n      cropBox,\n      mediaBox\n    } = this;\n    let view;\n\n    if (cropBox === mediaBox || (0, _util.isArrayEqual)(cropBox, mediaBox)) {\n      view = mediaBox;\n    } else {\n      const box = _util.Util.intersect(cropBox, mediaBox);\n\n      if (box && box[2] - box[0] !== 0 && box[3] - box[1] !== 0) {\n        view = box;\n      } else {\n        (0, _util.warn)(\"Empty /CropBox and /MediaBox intersection.\");\n      }\n    }\n\n    return (0, _util.shadow)(this, \"view\", view || mediaBox);\n  }\n\n  get rotate() {\n    let rotate = this._getInheritableProperty(\"Rotate\") || 0;\n\n    if (rotate % 90 !== 0) {\n      rotate = 0;\n    } else if (rotate >= 360) {\n      rotate = rotate % 360;\n    } else if (rotate < 0) {\n      rotate = (rotate % 360 + 360) % 360;\n    }\n\n    return (0, _util.shadow)(this, \"rotate\", rotate);\n  }\n\n  getContentStream() {\n    const content = this.content;\n    let stream;\n\n    if (Array.isArray(content)) {\n      const xref = this.xref;\n      const streams = [];\n\n      for (const subStream of content) {\n        streams.push(xref.fetchIfRef(subStream));\n      }\n\n      stream = new _stream.StreamsSequenceStream(streams);\n    } else if ((0, _primitives.isStream)(content)) {\n      stream = content;\n    } else {\n      stream = new _stream.NullStream();\n    }\n\n    return stream;\n  }\n\n  save(handler, task, annotationStorage) {\n    const partialEvaluator = new _evaluator.PartialEvaluator({\n      xref: this.xref,\n      handler,\n      pageIndex: this.pageIndex,\n      idFactory: this._localIdFactory,\n      fontCache: this.fontCache,\n      builtInCMapCache: this.builtInCMapCache,\n      globalImageCache: this.globalImageCache,\n      options: this.evaluatorOptions\n    });\n    return this._parsedAnnotations.then(function (annotations) {\n      const newRefsPromises = [];\n\n      for (const annotation of annotations) {\n        if (!isAnnotationRenderable(annotation, \"print\")) {\n          continue;\n        }\n\n        newRefsPromises.push(annotation.save(partialEvaluator, task, annotationStorage).catch(function (reason) {\n          (0, _util.warn)(\"save - ignoring annotation data during \" + `\"${task.name}\" task: \"${reason}\".`);\n          return null;\n        }));\n      }\n\n      return Promise.all(newRefsPromises);\n    });\n  }\n\n  loadResources(keys) {\n    if (!this.resourcesPromise) {\n      this.resourcesPromise = this.pdfManager.ensure(this, \"resources\");\n    }\n\n    return this.resourcesPromise.then(() => {\n      const objectLoader = new _obj.ObjectLoader(this.resources, keys, this.xref);\n      return objectLoader.load();\n    });\n  }\n\n  getOperatorList({\n    handler,\n    sink,\n    task,\n    intent,\n    renderInteractiveForms,\n    annotationStorage\n  }) {\n    const contentStreamPromise = this.pdfManager.ensure(this, \"getContentStream\");\n    const resourcesPromise = this.loadResources([\"ExtGState\", \"ColorSpace\", \"Pattern\", \"Shading\", \"XObject\", \"Font\"]);\n    const partialEvaluator = new _evaluator.PartialEvaluator({\n      xref: this.xref,\n      handler,\n      pageIndex: this.pageIndex,\n      idFactory: this._localIdFactory,\n      fontCache: this.fontCache,\n      builtInCMapCache: this.builtInCMapCache,\n      globalImageCache: this.globalImageCache,\n      options: this.evaluatorOptions\n    });\n    const dataPromises = Promise.all([contentStreamPromise, resourcesPromise]);\n    const pageListPromise = dataPromises.then(([contentStream]) => {\n      const opList = new _operator_list.OperatorList(intent, sink);\n      handler.send(\"StartRenderPage\", {\n        transparency: partialEvaluator.hasBlendModes(this.resources, this.nonBlendModesSet),\n        pageIndex: this.pageIndex,\n        intent\n      });\n      return partialEvaluator.getOperatorList({\n        stream: contentStream,\n        task,\n        resources: this.resources,\n        operatorList: opList\n      }).then(function () {\n        return opList;\n      });\n    });\n    return Promise.all([pageListPromise, this._parsedAnnotations]).then(function ([pageOpList, annotations]) {\n      if (annotations.length === 0) {\n        pageOpList.flush(true);\n        return {\n          length: pageOpList.totalLength\n        };\n      }\n\n      const opListPromises = [];\n\n      for (const annotation of annotations) {\n        if (isAnnotationRenderable(annotation, intent) && !annotation.isHidden(annotationStorage)) {\n          opListPromises.push(annotation.getOperatorList(partialEvaluator, task, renderInteractiveForms, annotationStorage).catch(function (reason) {\n            (0, _util.warn)(\"getOperatorList - ignoring annotation data during \" + `\"${task.name}\" task: \"${reason}\".`);\n            return null;\n          }));\n        }\n      }\n\n      return Promise.all(opListPromises).then(function (opLists) {\n        pageOpList.addOp(_util.OPS.beginAnnotations, []);\n\n        for (const opList of opLists) {\n          pageOpList.addOpList(opList);\n        }\n\n        pageOpList.addOp(_util.OPS.endAnnotations, []);\n        pageOpList.flush(true);\n        return {\n          length: pageOpList.totalLength\n        };\n      });\n    });\n  }\n\n  extractTextContent({\n    handler,\n    task,\n    normalizeWhitespace,\n    sink,\n    combineTextItems\n  }) {\n    const contentStreamPromise = this.pdfManager.ensure(this, \"getContentStream\");\n    const resourcesPromise = this.loadResources([\"ExtGState\", \"XObject\", \"Font\"]);\n    const dataPromises = Promise.all([contentStreamPromise, resourcesPromise]);\n    return dataPromises.then(([contentStream]) => {\n      const partialEvaluator = new _evaluator.PartialEvaluator({\n        xref: this.xref,\n        handler,\n        pageIndex: this.pageIndex,\n        idFactory: this._localIdFactory,\n        fontCache: this.fontCache,\n        builtInCMapCache: this.builtInCMapCache,\n        globalImageCache: this.globalImageCache,\n        options: this.evaluatorOptions\n      });\n      return partialEvaluator.getTextContent({\n        stream: contentStream,\n        task,\n        resources: this.resources,\n        normalizeWhitespace,\n        combineTextItems,\n        sink\n      });\n    });\n  }\n\n  getAnnotationsData(intent) {\n    return this._parsedAnnotations.then(function (annotations) {\n      const annotationsData = [];\n\n      for (let i = 0, ii = annotations.length; i < ii; i++) {\n        if (!intent || isAnnotationRenderable(annotations[i], intent)) {\n          annotationsData.push(annotations[i].data);\n        }\n      }\n\n      return annotationsData;\n    });\n  }\n\n  get annotations() {\n    const annots = this._getInheritableProperty(\"Annots\");\n\n    return (0, _util.shadow)(this, \"annotations\", Array.isArray(annots) ? annots : []);\n  }\n\n  get _parsedAnnotations() {\n    const parsedAnnotations = this.pdfManager.ensure(this, \"annotations\").then(() => {\n      const annotationPromises = [];\n\n      for (const annotationRef of this.annotations) {\n        annotationPromises.push(_annotation.AnnotationFactory.create(this.xref, annotationRef, this.pdfManager, this._localIdFactory).catch(function (reason) {\n          (0, _util.warn)(`_parsedAnnotations: \"${reason}\".`);\n          return null;\n        }));\n      }\n\n      return Promise.all(annotationPromises).then(function (annotations) {\n        return annotations.filter(annotation => !!annotation);\n      });\n    });\n    return (0, _util.shadow)(this, \"_parsedAnnotations\", parsedAnnotations);\n  }\n\n  get jsActions() {\n    const actions = (0, _core_utils.collectActions)(this.xref, this.pageDict, _util.PageActionEventType);\n    return (0, _util.shadow)(this, \"jsActions\", actions);\n  }\n\n}\n\nexports.Page = Page;\nconst PDF_HEADER_SIGNATURE = new Uint8Array([0x25, 0x50, 0x44, 0x46, 0x2d]);\nconst STARTXREF_SIGNATURE = new Uint8Array([0x73, 0x74, 0x61, 0x72, 0x74, 0x78, 0x72, 0x65, 0x66]);\nconst ENDOBJ_SIGNATURE = new Uint8Array([0x65, 0x6e, 0x64, 0x6f, 0x62, 0x6a]);\nconst FINGERPRINT_FIRST_BYTES = 1024;\nconst EMPTY_FINGERPRINT = \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\";\nconst PDF_HEADER_VERSION_REGEXP = /^[1-9]\\.[0-9]$/;\n\nfunction find(stream, signature, limit = 1024, backwards = false) {\n  const signatureLength = signature.length;\n  const scanBytes = stream.peekBytes(limit);\n  const scanLength = scanBytes.length - signatureLength;\n\n  if (scanLength <= 0) {\n    return false;\n  }\n\n  if (backwards) {\n    const signatureEnd = signatureLength - 1;\n    let pos = scanBytes.length - 1;\n\n    while (pos >= signatureEnd) {\n      let j = 0;\n\n      while (j < signatureLength && scanBytes[pos - j] === signature[signatureEnd - j]) {\n        j++;\n      }\n\n      if (j >= signatureLength) {\n        stream.pos += pos - signatureEnd;\n        return true;\n      }\n\n      pos--;\n    }\n  } else {\n    let pos = 0;\n\n    while (pos <= scanLength) {\n      let j = 0;\n\n      while (j < signatureLength && scanBytes[pos + j] === signature[j]) {\n        j++;\n      }\n\n      if (j >= signatureLength) {\n        stream.pos += pos;\n        return true;\n      }\n\n      pos++;\n    }\n  }\n\n  return false;\n}\n\nclass PDFDocument {\n  constructor(pdfManager, arg) {\n    let stream;\n\n    if ((0, _primitives.isStream)(arg)) {\n      stream = arg;\n    } else if ((0, _util.isArrayBuffer)(arg)) {\n      stream = new _stream.Stream(arg);\n    } else {\n      throw new Error(\"PDFDocument: Unknown argument type\");\n    }\n\n    if (stream.length <= 0) {\n      throw new _util.InvalidPDFException(\"The PDF file is empty, i.e. its size is zero bytes.\");\n    }\n\n    this.pdfManager = pdfManager;\n    this.stream = stream;\n    this.xref = new _obj.XRef(stream, pdfManager);\n    this._pagePromises = [];\n    this._version = null;\n    const idCounters = {\n      font: 0\n    };\n    this._globalIdFactory = class {\n      static getDocId() {\n        return `g_${pdfManager.docId}`;\n      }\n\n      static createFontId() {\n        return `f${++idCounters.font}`;\n      }\n\n      static createObjId() {\n        (0, _util.unreachable)(\"Abstract method `createObjId` called.\");\n      }\n\n    };\n  }\n\n  parse(recoveryMode) {\n    this.xref.parse(recoveryMode);\n    this.catalog = new _obj.Catalog(this.pdfManager, this.xref);\n\n    if (this.catalog.version) {\n      this._version = this.catalog.version;\n    }\n  }\n\n  get linearization() {\n    let linearization = null;\n\n    try {\n      linearization = _parser.Linearization.create(this.stream);\n    } catch (err) {\n      if (err instanceof _core_utils.MissingDataException) {\n        throw err;\n      }\n\n      (0, _util.info)(err);\n    }\n\n    return (0, _util.shadow)(this, \"linearization\", linearization);\n  }\n\n  get startXRef() {\n    const stream = this.stream;\n    let startXRef = 0;\n\n    if (this.linearization) {\n      stream.reset();\n\n      if (find(stream, ENDOBJ_SIGNATURE)) {\n        startXRef = stream.pos + 6 - stream.start;\n      }\n    } else {\n      const step = 1024;\n      const startXRefLength = STARTXREF_SIGNATURE.length;\n      let found = false,\n          pos = stream.end;\n\n      while (!found && pos > 0) {\n        pos -= step - startXRefLength;\n\n        if (pos < 0) {\n          pos = 0;\n        }\n\n        stream.pos = pos;\n        found = find(stream, STARTXREF_SIGNATURE, step, true);\n      }\n\n      if (found) {\n        stream.skip(9);\n        let ch;\n\n        do {\n          ch = stream.getByte();\n        } while ((0, _core_utils.isWhiteSpace)(ch));\n\n        let str = \"\";\n\n        while (ch >= 0x20 && ch <= 0x39) {\n          str += String.fromCharCode(ch);\n          ch = stream.getByte();\n        }\n\n        startXRef = parseInt(str, 10);\n\n        if (isNaN(startXRef)) {\n          startXRef = 0;\n        }\n      }\n    }\n\n    return (0, _util.shadow)(this, \"startXRef\", startXRef);\n  }\n\n  checkHeader() {\n    const stream = this.stream;\n    stream.reset();\n\n    if (!find(stream, PDF_HEADER_SIGNATURE)) {\n      return;\n    }\n\n    stream.moveStart();\n    const MAX_PDF_VERSION_LENGTH = 12;\n    let version = \"\",\n        ch;\n\n    while ((ch = stream.getByte()) > 0x20) {\n      if (version.length >= MAX_PDF_VERSION_LENGTH) {\n        break;\n      }\n\n      version += String.fromCharCode(ch);\n    }\n\n    if (!this._version) {\n      this._version = version.substring(5);\n    }\n  }\n\n  parseStartXRef() {\n    this.xref.setStartXRef(this.startXRef);\n  }\n\n  get numPages() {\n    const linearization = this.linearization;\n    const num = linearization ? linearization.numPages : this.catalog.numPages;\n    return (0, _util.shadow)(this, \"numPages\", num);\n  }\n\n  _hasOnlyDocumentSignatures(fields, recursionDepth = 0) {\n    const RECURSION_LIMIT = 10;\n\n    if (!Array.isArray(fields)) {\n      return false;\n    }\n\n    return fields.every(field => {\n      field = this.xref.fetchIfRef(field);\n\n      if (!(field instanceof _primitives.Dict)) {\n        return false;\n      }\n\n      if (field.has(\"Kids\")) {\n        if (++recursionDepth > RECURSION_LIMIT) {\n          (0, _util.warn)(\"_hasOnlyDocumentSignatures: maximum recursion depth reached\");\n          return false;\n        }\n\n        return this._hasOnlyDocumentSignatures(field.get(\"Kids\"), recursionDepth);\n      }\n\n      const isSignature = (0, _primitives.isName)(field.get(\"FT\"), \"Sig\");\n      const rectangle = field.get(\"Rect\");\n      const isInvisible = Array.isArray(rectangle) && rectangle.every(value => value === 0);\n      return isSignature && isInvisible;\n    });\n  }\n\n  get formInfo() {\n    const formInfo = {\n      hasFields: false,\n      hasAcroForm: false,\n      hasXfa: false\n    };\n    const acroForm = this.catalog.acroForm;\n\n    if (!acroForm) {\n      return (0, _util.shadow)(this, \"formInfo\", formInfo);\n    }\n\n    try {\n      const fields = acroForm.get(\"Fields\");\n      const hasFields = Array.isArray(fields) && fields.length > 0;\n      formInfo.hasFields = hasFields;\n      const xfa = acroForm.get(\"XFA\");\n      formInfo.hasXfa = Array.isArray(xfa) && xfa.length > 0 || (0, _primitives.isStream)(xfa) && !xfa.isEmpty;\n      const sigFlags = acroForm.get(\"SigFlags\");\n\n      const hasOnlyDocumentSignatures = !!(sigFlags & 0x1) && this._hasOnlyDocumentSignatures(fields);\n\n      formInfo.hasAcroForm = hasFields && !hasOnlyDocumentSignatures;\n    } catch (ex) {\n      if (ex instanceof _core_utils.MissingDataException) {\n        throw ex;\n      }\n\n      (0, _util.warn)(`Cannot fetch form information: \"${ex}\".`);\n    }\n\n    return (0, _util.shadow)(this, \"formInfo\", formInfo);\n  }\n\n  get documentInfo() {\n    const DocumentInfoValidators = {\n      Title: _util.isString,\n      Author: _util.isString,\n      Subject: _util.isString,\n      Keywords: _util.isString,\n      Creator: _util.isString,\n      Producer: _util.isString,\n      CreationDate: _util.isString,\n      ModDate: _util.isString,\n      Trapped: _primitives.isName\n    };\n    let version = this._version;\n\n    if (typeof version !== \"string\" || !PDF_HEADER_VERSION_REGEXP.test(version)) {\n      (0, _util.warn)(`Invalid PDF header version number: ${version}`);\n      version = null;\n    }\n\n    const docInfo = {\n      PDFFormatVersion: version,\n      IsLinearized: !!this.linearization,\n      IsAcroFormPresent: this.formInfo.hasAcroForm,\n      IsXFAPresent: this.formInfo.hasXfa,\n      IsCollectionPresent: !!this.catalog.collection\n    };\n    let infoDict;\n\n    try {\n      infoDict = this.xref.trailer.get(\"Info\");\n    } catch (err) {\n      if (err instanceof _core_utils.MissingDataException) {\n        throw err;\n      }\n\n      (0, _util.info)(\"The document information dictionary is invalid.\");\n    }\n\n    if ((0, _primitives.isDict)(infoDict)) {\n      for (const key of infoDict.getKeys()) {\n        const value = infoDict.get(key);\n\n        if (DocumentInfoValidators[key]) {\n          if (DocumentInfoValidators[key](value)) {\n            docInfo[key] = typeof value !== \"string\" ? value : (0, _util.stringToPDFString)(value);\n          } else {\n            (0, _util.info)(`Bad value in document info for \"${key}\".`);\n          }\n        } else if (typeof key === \"string\") {\n          let customValue;\n\n          if ((0, _util.isString)(value)) {\n            customValue = (0, _util.stringToPDFString)(value);\n          } else if ((0, _primitives.isName)(value) || (0, _util.isNum)(value) || (0, _util.isBool)(value)) {\n            customValue = value;\n          } else {\n            (0, _util.info)(`Unsupported value in document info for (custom) \"${key}\".`);\n            continue;\n          }\n\n          if (!docInfo.Custom) {\n            docInfo.Custom = Object.create(null);\n          }\n\n          docInfo.Custom[key] = customValue;\n        }\n      }\n    }\n\n    return (0, _util.shadow)(this, \"documentInfo\", docInfo);\n  }\n\n  get fingerprint() {\n    let hash;\n    const idArray = this.xref.trailer.get(\"ID\");\n\n    if (Array.isArray(idArray) && idArray[0] && (0, _util.isString)(idArray[0]) && idArray[0] !== EMPTY_FINGERPRINT) {\n      hash = (0, _util.stringToBytes)(idArray[0]);\n    } else {\n      hash = (0, _crypto.calculateMD5)(this.stream.getByteRange(0, FINGERPRINT_FIRST_BYTES), 0, FINGERPRINT_FIRST_BYTES);\n    }\n\n    const fingerprintBuf = [];\n\n    for (let i = 0, ii = hash.length; i < ii; i++) {\n      const hex = hash[i].toString(16);\n      fingerprintBuf.push(hex.padStart(2, \"0\"));\n    }\n\n    return (0, _util.shadow)(this, \"fingerprint\", fingerprintBuf.join(\"\"));\n  }\n\n  _getLinearizationPage(pageIndex) {\n    const {\n      catalog,\n      linearization\n    } = this;\n\n    const ref = _primitives.Ref.get(linearization.objectNumberFirst, 0);\n\n    return this.xref.fetchAsync(ref).then(obj => {\n      if ((0, _primitives.isDict)(obj, \"Page\") || (0, _primitives.isDict)(obj) && !obj.has(\"Type\") && obj.has(\"Contents\")) {\n        if (ref && !catalog.pageKidsCountCache.has(ref)) {\n          catalog.pageKidsCountCache.put(ref, 1);\n        }\n\n        return [obj, ref];\n      }\n\n      throw new _util.FormatError(\"The Linearization dictionary doesn't point \" + \"to a valid Page dictionary.\");\n    }).catch(reason => {\n      (0, _util.info)(reason);\n      return catalog.getPageDict(pageIndex);\n    });\n  }\n\n  getPage(pageIndex) {\n    if (this._pagePromises[pageIndex] !== undefined) {\n      return this._pagePromises[pageIndex];\n    }\n\n    const {\n      catalog,\n      linearization\n    } = this;\n    const promise = linearization && linearization.pageFirst === pageIndex ? this._getLinearizationPage(pageIndex) : catalog.getPageDict(pageIndex);\n    return this._pagePromises[pageIndex] = promise.then(([pageDict, ref]) => {\n      return new Page({\n        pdfManager: this.pdfManager,\n        xref: this.xref,\n        pageIndex,\n        pageDict,\n        ref,\n        globalIdFactory: this._globalIdFactory,\n        fontCache: catalog.fontCache,\n        builtInCMapCache: catalog.builtInCMapCache,\n        globalImageCache: catalog.globalImageCache,\n        nonBlendModesSet: catalog.nonBlendModesSet\n      });\n    });\n  }\n\n  checkFirstPage() {\n    return this.getPage(0).catch(async reason => {\n      if (reason instanceof _core_utils.XRefEntryException) {\n        this._pagePromises.length = 0;\n        await this.cleanup();\n        throw new _core_utils.XRefParseException();\n      }\n    });\n  }\n\n  fontFallback(id, handler) {\n    return this.catalog.fontFallback(id, handler);\n  }\n\n  async cleanup(manuallyTriggered = false) {\n    return this.catalog ? this.catalog.cleanup(manuallyTriggered) : (0, _primitives.clearPrimitiveCaches)();\n  }\n\n  _collectFieldObjects(name, fieldRef, promises) {\n    const field = this.xref.fetchIfRef(fieldRef);\n\n    if (field.has(\"T\")) {\n      const partName = (0, _util.stringToPDFString)(field.get(\"T\"));\n\n      if (name === \"\") {\n        name = partName;\n      } else {\n        name = `${name}.${partName}`;\n      }\n    }\n\n    if (!promises.has(name)) {\n      promises.set(name, []);\n    }\n\n    promises.get(name).push(_annotation.AnnotationFactory.create(this.xref, fieldRef, this.pdfManager, this._localIdFactory).then(annotation => annotation && annotation.getFieldObject()).catch(function (reason) {\n      (0, _util.warn)(`_collectFieldObjects: \"${reason}\".`);\n      return null;\n    }));\n\n    if (field.has(\"Kids\")) {\n      const kids = field.get(\"Kids\");\n\n      for (const kid of kids) {\n        this._collectFieldObjects(name, kid, promises);\n      }\n    }\n  }\n\n  get fieldObjects() {\n    if (!this.formInfo.hasFields) {\n      return (0, _util.shadow)(this, \"fieldObjects\", Promise.resolve(null));\n    }\n\n    const allFields = Object.create(null);\n    const fieldPromises = new Map();\n\n    for (const fieldRef of this.catalog.acroForm.get(\"Fields\")) {\n      this._collectFieldObjects(\"\", fieldRef, fieldPromises);\n    }\n\n    const allPromises = [];\n\n    for (const [name, promises] of fieldPromises) {\n      allPromises.push(Promise.all(promises).then(fields => {\n        fields = fields.filter(field => !!field);\n\n        if (fields.length > 0) {\n          allFields[name] = fields;\n        }\n      }));\n    }\n\n    return (0, _util.shadow)(this, \"fieldObjects\", Promise.all(allPromises).then(() => allFields));\n  }\n\n  get hasJSActions() {\n    return (0, _util.shadow)(this, \"hasJSActions\", this.fieldObjects.then(fieldObjects => {\n      return fieldObjects !== null && Object.values(fieldObjects).some(fieldObject => fieldObject.some(object => object.actions !== null)) || !!this.catalog.jsActions;\n    }));\n  }\n\n  get calculationOrderIds() {\n    const acroForm = this.catalog.acroForm;\n\n    if (!acroForm || !acroForm.has(\"CO\")) {\n      return (0, _util.shadow)(this, \"calculationOrderIds\", null);\n    }\n\n    const calculationOrder = acroForm.get(\"CO\");\n\n    if (!Array.isArray(calculationOrder) || calculationOrder.length === 0) {\n      return (0, _util.shadow)(this, \"calculationOrderIds\", null);\n    }\n\n    const ids = calculationOrder.filter(_primitives.isRef).map(ref => ref.toString());\n\n    if (ids.length === 0) {\n      return (0, _util.shadow)(this, \"calculationOrderIds\", null);\n    }\n\n    return (0, _util.shadow)(this, \"calculationOrderIds\", ids);\n  }\n\n}\n\nexports.PDFDocument = PDFDocument;\n\n/***/ }),\n/* 10 */\n/***/ ((__unused_webpack_module, exports, __w_pdfjs_require__) => {\n\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.XRef = exports.ObjectLoader = exports.FileSpec = exports.Catalog = void 0;\n\nvar _util = __w_pdfjs_require__(2);\n\nvar _primitives = __w_pdfjs_require__(5);\n\nvar _core_utils = __w_pdfjs_require__(8);\n\nvar _parser = __w_pdfjs_require__(11);\n\nvar _crypto = __w_pdfjs_require__(22);\n\nvar _colorspace = __w_pdfjs_require__(23);\n\nvar _image_utils = __w_pdfjs_require__(24);\n\nfunction fetchDestination(dest) {\n  return (0, _primitives.isDict)(dest) ? dest.get(\"D\") : dest;\n}\n\nclass Catalog {\n  constructor(pdfManager, xref) {\n    this.pdfManager = pdfManager;\n    this.xref = xref;\n    this._catDict = xref.getCatalogObj();\n\n    if (!(0, _primitives.isDict)(this._catDict)) {\n      throw new _util.FormatError(\"Catalog object is not a dictionary.\");\n    }\n\n    this.fontCache = new _primitives.RefSetCache();\n    this.builtInCMapCache = new Map();\n    this.globalImageCache = new _image_utils.GlobalImageCache();\n    this.pageKidsCountCache = new _primitives.RefSetCache();\n    this.nonBlendModesSet = new _primitives.RefSet();\n  }\n\n  get version() {\n    const version = this._catDict.get(\"Version\");\n\n    if (!(0, _primitives.isName)(version)) {\n      return (0, _util.shadow)(this, \"version\", null);\n    }\n\n    return (0, _util.shadow)(this, \"version\", version.name);\n  }\n\n  get collection() {\n    let collection = null;\n\n    try {\n      const obj = this._catDict.get(\"Collection\");\n\n      if ((0, _primitives.isDict)(obj) && obj.size > 0) {\n        collection = obj;\n      }\n    } catch (ex) {\n      if (ex instanceof _core_utils.MissingDataException) {\n        throw ex;\n      }\n\n      (0, _util.info)(\"Cannot fetch Collection entry; assuming no collection is present.\");\n    }\n\n    return (0, _util.shadow)(this, \"collection\", collection);\n  }\n\n  get acroForm() {\n    let acroForm = null;\n\n    try {\n      const obj = this._catDict.get(\"AcroForm\");\n\n      if ((0, _primitives.isDict)(obj) && obj.size > 0) {\n        acroForm = obj;\n      }\n    } catch (ex) {\n      if (ex instanceof _core_utils.MissingDataException) {\n        throw ex;\n      }\n\n      (0, _util.info)(\"Cannot fetch AcroForm entry; assuming no forms are present.\");\n    }\n\n    return (0, _util.shadow)(this, \"acroForm\", acroForm);\n  }\n\n  get metadata() {\n    const streamRef = this._catDict.getRaw(\"Metadata\");\n\n    if (!(0, _primitives.isRef)(streamRef)) {\n      return (0, _util.shadow)(this, \"metadata\", null);\n    }\n\n    const suppressEncryption = !(this.xref.encrypt && this.xref.encrypt.encryptMetadata);\n    const stream = this.xref.fetch(streamRef, suppressEncryption);\n    let metadata;\n\n    if (stream && (0, _primitives.isDict)(stream.dict)) {\n      const type = stream.dict.get(\"Type\");\n      const subtype = stream.dict.get(\"Subtype\");\n\n      if ((0, _primitives.isName)(type, \"Metadata\") && (0, _primitives.isName)(subtype, \"XML\")) {\n        try {\n          metadata = (0, _util.stringToUTF8String)((0, _util.bytesToString)(stream.getBytes()));\n        } catch (e) {\n          if (e instanceof _core_utils.MissingDataException) {\n            throw e;\n          }\n\n          (0, _util.info)(\"Skipping invalid metadata.\");\n        }\n      }\n    }\n\n    return (0, _util.shadow)(this, \"metadata\", metadata);\n  }\n\n  get markInfo() {\n    let markInfo = null;\n\n    try {\n      markInfo = this._readMarkInfo();\n    } catch (ex) {\n      if (ex instanceof _core_utils.MissingDataException) {\n        throw ex;\n      }\n\n      (0, _util.warn)(\"Unable to read mark info.\");\n    }\n\n    return (0, _util.shadow)(this, \"markInfo\", markInfo);\n  }\n\n  _readMarkInfo() {\n    const obj = this._catDict.get(\"MarkInfo\");\n\n    if (!(0, _primitives.isDict)(obj)) {\n      return null;\n    }\n\n    const markInfo = Object.assign(Object.create(null), {\n      Marked: false,\n      UserProperties: false,\n      Suspects: false\n    });\n\n    for (const key in markInfo) {\n      if (!obj.has(key)) {\n        continue;\n      }\n\n      const value = obj.get(key);\n\n      if (!(0, _util.isBool)(value)) {\n        continue;\n      }\n\n      markInfo[key] = value;\n    }\n\n    return markInfo;\n  }\n\n  get toplevelPagesDict() {\n    const pagesObj = this._catDict.get(\"Pages\");\n\n    if (!(0, _primitives.isDict)(pagesObj)) {\n      throw new _util.FormatError(\"Invalid top-level pages dictionary.\");\n    }\n\n    return (0, _util.shadow)(this, \"toplevelPagesDict\", pagesObj);\n  }\n\n  get documentOutline() {\n    let obj = null;\n\n    try {\n      obj = this._readDocumentOutline();\n    } catch (ex) {\n      if (ex instanceof _core_utils.MissingDataException) {\n        throw ex;\n      }\n\n      (0, _util.warn)(\"Unable to read document outline.\");\n    }\n\n    return (0, _util.shadow)(this, \"documentOutline\", obj);\n  }\n\n  _readDocumentOutline() {\n    let obj = this._catDict.get(\"Outlines\");\n\n    if (!(0, _primitives.isDict)(obj)) {\n      return null;\n    }\n\n    obj = obj.getRaw(\"First\");\n\n    if (!(0, _primitives.isRef)(obj)) {\n      return null;\n    }\n\n    const root = {\n      items: []\n    };\n    const queue = [{\n      obj,\n      parent: root\n    }];\n    const processed = new _primitives.RefSet();\n    processed.put(obj);\n    const xref = this.xref,\n          blackColor = new Uint8ClampedArray(3);\n\n    while (queue.length > 0) {\n      const i = queue.shift();\n      const outlineDict = xref.fetchIfRef(i.obj);\n\n      if (outlineDict === null) {\n        continue;\n      }\n\n      if (!outlineDict.has(\"Title\")) {\n        throw new _util.FormatError(\"Invalid outline item encountered.\");\n      }\n\n      const data = {\n        url: null,\n        dest: null\n      };\n      Catalog.parseDestDictionary({\n        destDict: outlineDict,\n        resultObj: data,\n        docBaseUrl: this.pdfManager.docBaseUrl\n      });\n      const title = outlineDict.get(\"Title\");\n      const flags = outlineDict.get(\"F\") || 0;\n      const color = outlineDict.getArray(\"C\");\n      const count = outlineDict.get(\"Count\");\n      let rgbColor = blackColor;\n\n      if (Array.isArray(color) && color.length === 3 && (color[0] !== 0 || color[1] !== 0 || color[2] !== 0)) {\n        rgbColor = _colorspace.ColorSpace.singletons.rgb.getRgb(color, 0);\n      }\n\n      const outlineItem = {\n        dest: data.dest,\n        url: data.url,\n        unsafeUrl: data.unsafeUrl,\n        newWindow: data.newWindow,\n        title: (0, _util.stringToPDFString)(title),\n        color: rgbColor,\n        count: Number.isInteger(count) ? count : undefined,\n        bold: !!(flags & 2),\n        italic: !!(flags & 1),\n        items: []\n      };\n      i.parent.items.push(outlineItem);\n      obj = outlineDict.getRaw(\"First\");\n\n      if ((0, _primitives.isRef)(obj) && !processed.has(obj)) {\n        queue.push({\n          obj,\n          parent: outlineItem\n        });\n        processed.put(obj);\n      }\n\n      obj = outlineDict.getRaw(\"Next\");\n\n      if ((0, _primitives.isRef)(obj) && !processed.has(obj)) {\n        queue.push({\n          obj,\n          parent: i.parent\n        });\n        processed.put(obj);\n      }\n    }\n\n    return root.items.length > 0 ? root.items : null;\n  }\n\n  get permissions() {\n    let permissions = null;\n\n    try {\n      permissions = this._readPermissions();\n    } catch (ex) {\n      if (ex instanceof _core_utils.MissingDataException) {\n        throw ex;\n      }\n\n      (0, _util.warn)(\"Unable to read permissions.\");\n    }\n\n    return (0, _util.shadow)(this, \"permissions\", permissions);\n  }\n\n  _readPermissions() {\n    const encrypt = this.xref.trailer.get(\"Encrypt\");\n\n    if (!(0, _primitives.isDict)(encrypt)) {\n      return null;\n    }\n\n    let flags = encrypt.get(\"P\");\n\n    if (!(0, _util.isNum)(flags)) {\n      return null;\n    }\n\n    flags += 2 ** 32;\n    const permissions = [];\n\n    for (const key in _util.PermissionFlag) {\n      const value = _util.PermissionFlag[key];\n\n      if (flags & value) {\n        permissions.push(value);\n      }\n    }\n\n    return permissions;\n  }\n\n  get optionalContentConfig() {\n    let config = null;\n\n    try {\n      const properties = this._catDict.get(\"OCProperties\");\n\n      if (!properties) {\n        return (0, _util.shadow)(this, \"optionalContentConfig\", null);\n      }\n\n      const defaultConfig = properties.get(\"D\");\n\n      if (!defaultConfig) {\n        return (0, _util.shadow)(this, \"optionalContentConfig\", null);\n      }\n\n      const groupsData = properties.get(\"OCGs\");\n\n      if (!Array.isArray(groupsData)) {\n        return (0, _util.shadow)(this, \"optionalContentConfig\", null);\n      }\n\n      const groups = [];\n      const groupRefs = [];\n\n      for (const groupRef of groupsData) {\n        if (!(0, _primitives.isRef)(groupRef)) {\n          continue;\n        }\n\n        groupRefs.push(groupRef);\n        const group = this.xref.fetchIfRef(groupRef);\n        groups.push({\n          id: groupRef.toString(),\n          name: (0, _util.isString)(group.get(\"Name\")) ? (0, _util.stringToPDFString)(group.get(\"Name\")) : null,\n          intent: (0, _util.isString)(group.get(\"Intent\")) ? (0, _util.stringToPDFString)(group.get(\"Intent\")) : null\n        });\n      }\n\n      config = this._readOptionalContentConfig(defaultConfig, groupRefs);\n      config.groups = groups;\n    } catch (ex) {\n      if (ex instanceof _core_utils.MissingDataException) {\n        throw ex;\n      }\n\n      (0, _util.warn)(`Unable to read optional content config: ${ex}`);\n    }\n\n    return (0, _util.shadow)(this, \"optionalContentConfig\", config);\n  }\n\n  _readOptionalContentConfig(config, contentGroupRefs) {\n    function parseOnOff(refs) {\n      const onParsed = [];\n\n      if (Array.isArray(refs)) {\n        for (const value of refs) {\n          if (!(0, _primitives.isRef)(value)) {\n            continue;\n          }\n\n          if (contentGroupRefs.includes(value)) {\n            onParsed.push(value.toString());\n          }\n        }\n      }\n\n      return onParsed;\n    }\n\n    function parseOrder(refs, nestedLevels = 0) {\n      if (!Array.isArray(refs)) {\n        return null;\n      }\n\n      const order = [];\n\n      for (const value of refs) {\n        if ((0, _primitives.isRef)(value) && contentGroupRefs.includes(value)) {\n          parsedOrderRefs.put(value);\n          order.push(value.toString());\n          continue;\n        }\n\n        const nestedOrder = parseNestedOrder(value, nestedLevels);\n\n        if (nestedOrder) {\n          order.push(nestedOrder);\n        }\n      }\n\n      if (nestedLevels > 0) {\n        return order;\n      }\n\n      const hiddenGroups = [];\n\n      for (const groupRef of contentGroupRefs) {\n        if (parsedOrderRefs.has(groupRef)) {\n          continue;\n        }\n\n        hiddenGroups.push(groupRef.toString());\n      }\n\n      if (hiddenGroups.length) {\n        order.push({\n          name: null,\n          order: hiddenGroups\n        });\n      }\n\n      return order;\n    }\n\n    function parseNestedOrder(ref, nestedLevels) {\n      if (++nestedLevels > MAX_NESTED_LEVELS) {\n        (0, _util.warn)(\"parseNestedOrder - reached MAX_NESTED_LEVELS.\");\n        return null;\n      }\n\n      const value = xref.fetchIfRef(ref);\n\n      if (!Array.isArray(value)) {\n        return null;\n      }\n\n      const nestedName = xref.fetchIfRef(value[0]);\n\n      if (typeof nestedName !== \"string\") {\n        return null;\n      }\n\n      const nestedOrder = parseOrder(value.slice(1), nestedLevels);\n\n      if (!nestedOrder || !nestedOrder.length) {\n        return null;\n      }\n\n      return {\n        name: (0, _util.stringToPDFString)(nestedName),\n        order: nestedOrder\n      };\n    }\n\n    const xref = this.xref,\n          parsedOrderRefs = new _primitives.RefSet(),\n          MAX_NESTED_LEVELS = 10;\n    return {\n      name: (0, _util.isString)(config.get(\"Name\")) ? (0, _util.stringToPDFString)(config.get(\"Name\")) : null,\n      creator: (0, _util.isString)(config.get(\"Creator\")) ? (0, _util.stringToPDFString)(config.get(\"Creator\")) : null,\n      baseState: (0, _primitives.isName)(config.get(\"BaseState\")) ? config.get(\"BaseState\").name : null,\n      on: parseOnOff(config.get(\"ON\")),\n      off: parseOnOff(config.get(\"OFF\")),\n      order: parseOrder(config.get(\"Order\")),\n      groups: null\n    };\n  }\n\n  get numPages() {\n    const obj = this.toplevelPagesDict.get(\"Count\");\n\n    if (!Number.isInteger(obj)) {\n      throw new _util.FormatError(\"Page count in top-level pages dictionary is not an integer.\");\n    }\n\n    return (0, _util.shadow)(this, \"numPages\", obj);\n  }\n\n  get destinations() {\n    const obj = this._readDests(),\n          dests = Object.create(null);\n\n    if (obj instanceof NameTree) {\n      const names = obj.getAll();\n\n      for (const name in names) {\n        dests[name] = fetchDestination(names[name]);\n      }\n    } else if (obj instanceof _primitives.Dict) {\n      obj.forEach(function (key, value) {\n        if (value) {\n          dests[key] = fetchDestination(value);\n        }\n      });\n    }\n\n    return (0, _util.shadow)(this, \"destinations\", dests);\n  }\n\n  getDestination(destinationId) {\n    const obj = this._readDests();\n\n    if (obj instanceof NameTree || obj instanceof _primitives.Dict) {\n      return fetchDestination(obj.get(destinationId) || null);\n    }\n\n    return null;\n  }\n\n  _readDests() {\n    const obj = this._catDict.get(\"Names\");\n\n    if (obj && obj.has(\"Dests\")) {\n      return new NameTree(obj.getRaw(\"Dests\"), this.xref);\n    } else if (this._catDict.has(\"Dests\")) {\n      return this._catDict.get(\"Dests\");\n    }\n\n    return undefined;\n  }\n\n  get pageLabels() {\n    let obj = null;\n\n    try {\n      obj = this._readPageLabels();\n    } catch (ex) {\n      if (ex instanceof _core_utils.MissingDataException) {\n        throw ex;\n      }\n\n      (0, _util.warn)(\"Unable to read page labels.\");\n    }\n\n    return (0, _util.shadow)(this, \"pageLabels\", obj);\n  }\n\n  _readPageLabels() {\n    const obj = this._catDict.getRaw(\"PageLabels\");\n\n    if (!obj) {\n      return null;\n    }\n\n    const pageLabels = new Array(this.numPages);\n    let style = null,\n        prefix = \"\";\n    const numberTree = new NumberTree(obj, this.xref);\n    const nums = numberTree.getAll();\n    let currentLabel = \"\",\n        currentIndex = 1;\n\n    for (let i = 0, ii = this.numPages; i < ii; i++) {\n      if (i in nums) {\n        const labelDict = nums[i];\n\n        if (!(0, _primitives.isDict)(labelDict)) {\n          throw new _util.FormatError(\"PageLabel is not a dictionary.\");\n        }\n\n        if (labelDict.has(\"Type\") && !(0, _primitives.isName)(labelDict.get(\"Type\"), \"PageLabel\")) {\n          throw new _util.FormatError(\"Invalid type in PageLabel dictionary.\");\n        }\n\n        if (labelDict.has(\"S\")) {\n          const s = labelDict.get(\"S\");\n\n          if (!(0, _primitives.isName)(s)) {\n            throw new _util.FormatError(\"Invalid style in PageLabel dictionary.\");\n          }\n\n          style = s.name;\n        } else {\n          style = null;\n        }\n\n        if (labelDict.has(\"P\")) {\n          const p = labelDict.get(\"P\");\n\n          if (!(0, _util.isString)(p)) {\n            throw new _util.FormatError(\"Invalid prefix in PageLabel dictionary.\");\n          }\n\n          prefix = (0, _util.stringToPDFString)(p);\n        } else {\n          prefix = \"\";\n        }\n\n        if (labelDict.has(\"St\")) {\n          const st = labelDict.get(\"St\");\n\n          if (!(Number.isInteger(st) && st >= 1)) {\n            throw new _util.FormatError(\"Invalid start in PageLabel dictionary.\");\n          }\n\n          currentIndex = st;\n        } else {\n          currentIndex = 1;\n        }\n      }\n\n      switch (style) {\n        case \"D\":\n          currentLabel = currentIndex;\n          break;\n\n        case \"R\":\n        case \"r\":\n          currentLabel = (0, _core_utils.toRomanNumerals)(currentIndex, style === \"r\");\n          break;\n\n        case \"A\":\n        case \"a\":\n          const LIMIT = 26;\n          const A_UPPER_CASE = 0x41,\n                A_LOWER_CASE = 0x61;\n          const baseCharCode = style === \"a\" ? A_LOWER_CASE : A_UPPER_CASE;\n          const letterIndex = currentIndex - 1;\n          const character = String.fromCharCode(baseCharCode + letterIndex % LIMIT);\n          const charBuf = [];\n\n          for (let j = 0, jj = letterIndex / LIMIT | 0; j <= jj; j++) {\n            charBuf.push(character);\n          }\n\n          currentLabel = charBuf.join(\"\");\n          break;\n\n        default:\n          if (style) {\n            throw new _util.FormatError(`Invalid style \"${style}\" in PageLabel dictionary.`);\n          }\n\n          currentLabel = \"\";\n      }\n\n      pageLabels[i] = prefix + currentLabel;\n      currentIndex++;\n    }\n\n    return pageLabels;\n  }\n\n  get pageLayout() {\n    const obj = this._catDict.get(\"PageLayout\");\n\n    let pageLayout = \"\";\n\n    if ((0, _primitives.isName)(obj)) {\n      switch (obj.name) {\n        case \"SinglePage\":\n        case \"OneColumn\":\n        case \"TwoColumnLeft\":\n        case \"TwoColumnRight\":\n        case \"TwoPageLeft\":\n        case \"TwoPageRight\":\n          pageLayout = obj.name;\n      }\n    }\n\n    return (0, _util.shadow)(this, \"pageLayout\", pageLayout);\n  }\n\n  get pageMode() {\n    const obj = this._catDict.get(\"PageMode\");\n\n    let pageMode = \"UseNone\";\n\n    if ((0, _primitives.isName)(obj)) {\n      switch (obj.name) {\n        case \"UseNone\":\n        case \"UseOutlines\":\n        case \"UseThumbs\":\n        case \"FullScreen\":\n        case \"UseOC\":\n        case \"UseAttachments\":\n          pageMode = obj.name;\n      }\n    }\n\n    return (0, _util.shadow)(this, \"pageMode\", pageMode);\n  }\n\n  get viewerPreferences() {\n    const ViewerPreferencesValidators = {\n      HideToolbar: _util.isBool,\n      HideMenubar: _util.isBool,\n      HideWindowUI: _util.isBool,\n      FitWindow: _util.isBool,\n      CenterWindow: _util.isBool,\n      DisplayDocTitle: _util.isBool,\n      NonFullScreenPageMode: _primitives.isName,\n      Direction: _primitives.isName,\n      ViewArea: _primitives.isName,\n      ViewClip: _primitives.isName,\n      PrintArea: _primitives.isName,\n      PrintClip: _primitives.isName,\n      PrintScaling: _primitives.isName,\n      Duplex: _primitives.isName,\n      PickTrayByPDFSize: _util.isBool,\n      PrintPageRange: Array.isArray,\n      NumCopies: Number.isInteger\n    };\n\n    const obj = this._catDict.get(\"ViewerPreferences\");\n\n    let prefs = null;\n\n    if ((0, _primitives.isDict)(obj)) {\n      for (const key in ViewerPreferencesValidators) {\n        if (!obj.has(key)) {\n          continue;\n        }\n\n        const value = obj.get(key);\n\n        if (!ViewerPreferencesValidators[key](value)) {\n          (0, _util.info)(`Bad value in ViewerPreferences for \"${key}\".`);\n          continue;\n        }\n\n        let prefValue;\n\n        switch (key) {\n          case \"NonFullScreenPageMode\":\n            switch (value.name) {\n              case \"UseNone\":\n              case \"UseOutlines\":\n              case \"UseThumbs\":\n              case \"UseOC\":\n                prefValue = value.name;\n                break;\n\n              default:\n                prefValue = \"UseNone\";\n            }\n\n            break;\n\n          case \"Direction\":\n            switch (value.name) {\n              case \"L2R\":\n              case \"R2L\":\n                prefValue = value.name;\n                break;\n\n              default:\n                prefValue = \"L2R\";\n            }\n\n            break;\n\n          case \"ViewArea\":\n          case \"ViewClip\":\n          case \"PrintArea\":\n          case \"PrintClip\":\n            switch (value.name) {\n              case \"MediaBox\":\n              case \"CropBox\":\n              case \"BleedBox\":\n              case \"TrimBox\":\n              case \"ArtBox\":\n                prefValue = value.name;\n                break;\n\n              default:\n                prefValue = \"CropBox\";\n            }\n\n            break;\n\n          case \"PrintScaling\":\n            switch (value.name) {\n              case \"None\":\n              case \"AppDefault\":\n                prefValue = value.name;\n                break;\n\n              default:\n                prefValue = \"AppDefault\";\n            }\n\n            break;\n\n          case \"Duplex\":\n            switch (value.name) {\n              case \"Simplex\":\n              case \"DuplexFlipShortEdge\":\n              case \"DuplexFlipLongEdge\":\n                prefValue = value.name;\n                break;\n\n              default:\n                prefValue = \"None\";\n            }\n\n            break;\n\n          case \"PrintPageRange\":\n            const length = value.length;\n\n            if (length % 2 !== 0) {\n              break;\n            }\n\n            const isValid = value.every((page, i, arr) => {\n              return Number.isInteger(page) && page > 0 && (i === 0 || page >= arr[i - 1]) && page <= this.numPages;\n            });\n\n            if (isValid) {\n              prefValue = value;\n            }\n\n            break;\n\n          case \"NumCopies\":\n            if (value > 0) {\n              prefValue = value;\n            }\n\n            break;\n\n          default:\n            if (typeof value !== \"boolean\") {\n              throw new _util.FormatError(`viewerPreferences - expected a boolean value for: ${key}`);\n            }\n\n            prefValue = value;\n        }\n\n        if (prefValue !== undefined) {\n          if (!prefs) {\n            prefs = Object.create(null);\n          }\n\n          prefs[key] = prefValue;\n        } else {\n          (0, _util.info)(`Bad value in ViewerPreferences for \"${key}\".`);\n        }\n      }\n    }\n\n    return (0, _util.shadow)(this, \"viewerPreferences\", prefs);\n  }\n\n  get openAction() {\n    const obj = this._catDict.get(\"OpenAction\");\n\n    const openAction = Object.create(null);\n\n    if ((0, _primitives.isDict)(obj)) {\n      const destDict = new _primitives.Dict(this.xref);\n      destDict.set(\"A\", obj);\n      const resultObj = {\n        url: null,\n        dest: null,\n        action: null\n      };\n      Catalog.parseDestDictionary({\n        destDict,\n        resultObj\n      });\n\n      if (Array.isArray(resultObj.dest)) {\n        openAction.dest = resultObj.dest;\n      } else if (resultObj.action) {\n        openAction.action = resultObj.action;\n      }\n    } else if (Array.isArray(obj)) {\n      openAction.dest = obj;\n    }\n\n    return (0, _util.shadow)(this, \"openAction\", (0, _util.objectSize)(openAction) > 0 ? openAction : null);\n  }\n\n  get attachments() {\n    const obj = this._catDict.get(\"Names\");\n\n    let attachments = null;\n\n    if (obj && obj.has(\"EmbeddedFiles\")) {\n      const nameTree = new NameTree(obj.getRaw(\"EmbeddedFiles\"), this.xref);\n      const names = nameTree.getAll();\n\n      for (const name in names) {\n        const fs = new FileSpec(names[name], this.xref);\n\n        if (!attachments) {\n          attachments = Object.create(null);\n        }\n\n        attachments[(0, _util.stringToPDFString)(name)] = fs.serializable;\n      }\n    }\n\n    return (0, _util.shadow)(this, \"attachments\", attachments);\n  }\n\n  _collectJavaScript() {\n    const obj = this._catDict.get(\"Names\");\n\n    let javaScript = null;\n\n    function appendIfJavaScriptDict(name, jsDict) {\n      const type = jsDict.get(\"S\");\n\n      if (!(0, _primitives.isName)(type, \"JavaScript\")) {\n        return;\n      }\n\n      let js = jsDict.get(\"JS\");\n\n      if ((0, _primitives.isStream)(js)) {\n        js = (0, _util.bytesToString)(js.getBytes());\n      } else if (!(0, _util.isString)(js)) {\n        return;\n      }\n\n      if (javaScript === null) {\n        javaScript = Object.create(null);\n      }\n\n      javaScript[name] = (0, _util.stringToPDFString)(js);\n    }\n\n    if (obj && obj.has(\"JavaScript\")) {\n      const nameTree = new NameTree(obj.getRaw(\"JavaScript\"), this.xref);\n      const names = nameTree.getAll();\n\n      for (const name in names) {\n        const jsDict = names[name];\n\n        if ((0, _primitives.isDict)(jsDict)) {\n          appendIfJavaScriptDict(name, jsDict);\n        }\n      }\n    }\n\n    const openAction = this._catDict.get(\"OpenAction\");\n\n    if ((0, _primitives.isDict)(openAction) && (0, _primitives.isName)(openAction.get(\"S\"), \"JavaScript\")) {\n      appendIfJavaScriptDict(\"OpenAction\", openAction);\n    }\n\n    return javaScript;\n  }\n\n  get javaScript() {\n    const javaScript = this._collectJavaScript();\n\n    return (0, _util.shadow)(this, \"javaScript\", javaScript ? Object.values(javaScript) : null);\n  }\n\n  get jsActions() {\n    const js = this._collectJavaScript();\n\n    let actions = (0, _core_utils.collectActions)(this.xref, this._catDict, _util.DocumentActionEventType);\n\n    if (!actions && js) {\n      actions = Object.create(null);\n    }\n\n    if (actions && js) {\n      for (const [key, val] of Object.entries(js)) {\n        if (key in actions) {\n          actions[key].push(val);\n        } else {\n          actions[key] = [val];\n        }\n      }\n    }\n\n    return (0, _util.shadow)(this, \"jsActions\", actions);\n  }\n\n  fontFallback(id, handler) {\n    const promises = [];\n    this.fontCache.forEach(function (promise) {\n      promises.push(promise);\n    });\n    return Promise.all(promises).then(translatedFonts => {\n      for (const translatedFont of translatedFonts) {\n        if (translatedFont.loadedName === id) {\n          translatedFont.fallback(handler);\n          return;\n        }\n      }\n    });\n  }\n\n  cleanup(manuallyTriggered = false) {\n    (0, _primitives.clearPrimitiveCaches)();\n    this.globalImageCache.clear(manuallyTriggered);\n    this.pageKidsCountCache.clear();\n    this.nonBlendModesSet.clear();\n    const promises = [];\n    this.fontCache.forEach(function (promise) {\n      promises.push(promise);\n    });\n    return Promise.all(promises).then(translatedFonts => {\n      for (const {\n        dict\n      } of translatedFonts) {\n        delete dict.cacheKey;\n      }\n\n      this.fontCache.clear();\n      this.builtInCMapCache.clear();\n    });\n  }\n\n  getPageDict(pageIndex) {\n    const capability = (0, _util.createPromiseCapability)();\n    const nodesToVisit = [this._catDict.getRaw(\"Pages\")];\n    const visitedNodes = new _primitives.RefSet();\n    const xref = this.xref,\n          pageKidsCountCache = this.pageKidsCountCache;\n    let count,\n        currentPageIndex = 0;\n\n    function next() {\n      while (nodesToVisit.length) {\n        const currentNode = nodesToVisit.pop();\n\n        if ((0, _primitives.isRef)(currentNode)) {\n          count = pageKidsCountCache.get(currentNode);\n\n          if (count > 0 && currentPageIndex + count < pageIndex) {\n            currentPageIndex += count;\n            continue;\n          }\n\n          if (visitedNodes.has(currentNode)) {\n            capability.reject(new _util.FormatError(\"Pages tree contains circular reference.\"));\n            return;\n          }\n\n          visitedNodes.put(currentNode);\n          xref.fetchAsync(currentNode).then(function (obj) {\n            if ((0, _primitives.isDict)(obj, \"Page\") || (0, _primitives.isDict)(obj) && !obj.has(\"Kids\")) {\n              if (pageIndex === currentPageIndex) {\n                if (currentNode && !pageKidsCountCache.has(currentNode)) {\n                  pageKidsCountCache.put(currentNode, 1);\n                }\n\n                capability.resolve([obj, currentNode]);\n              } else {\n                currentPageIndex++;\n                next();\n              }\n\n              return;\n            }\n\n            nodesToVisit.push(obj);\n            next();\n          }, capability.reject);\n          return;\n        }\n\n        if (!(0, _primitives.isDict)(currentNode)) {\n          capability.reject(new _util.FormatError(\"Page dictionary kid reference points to wrong type of object.\"));\n          return;\n        }\n\n        count = currentNode.get(\"Count\");\n\n        if (Number.isInteger(count) && count >= 0) {\n          const objId = currentNode.objId;\n\n          if (objId && !pageKidsCountCache.has(objId)) {\n            pageKidsCountCache.put(objId, count);\n          }\n\n          if (currentPageIndex + count <= pageIndex) {\n            currentPageIndex += count;\n            continue;\n          }\n        }\n\n        const kids = currentNode.get(\"Kids\");\n\n        if (!Array.isArray(kids)) {\n          if ((0, _primitives.isName)(currentNode.get(\"Type\"), \"Page\") || !currentNode.has(\"Type\") && currentNode.has(\"Contents\")) {\n            if (currentPageIndex === pageIndex) {\n              capability.resolve([currentNode, null]);\n              return;\n            }\n\n            currentPageIndex++;\n            continue;\n          }\n\n          capability.reject(new _util.FormatError(\"Page dictionary kids object is not an array.\"));\n          return;\n        }\n\n        for (let last = kids.length - 1; last >= 0; last--) {\n          nodesToVisit.push(kids[last]);\n        }\n      }\n\n      capability.reject(new Error(`Page index ${pageIndex} not found.`));\n    }\n\n    next();\n    return capability.promise;\n  }\n\n  getPageIndex(pageRef) {\n    const xref = this.xref;\n\n    function pagesBeforeRef(kidRef) {\n      let total = 0,\n          parentRef;\n      return xref.fetchAsync(kidRef).then(function (node) {\n        if ((0, _primitives.isRefsEqual)(kidRef, pageRef) && !(0, _primitives.isDict)(node, \"Page\") && !((0, _primitives.isDict)(node) && !node.has(\"Type\") && node.has(\"Contents\"))) {\n          throw new _util.FormatError(\"The reference does not point to a /Page dictionary.\");\n        }\n\n        if (!node) {\n          return null;\n        }\n\n        if (!(0, _primitives.isDict)(node)) {\n          throw new _util.FormatError(\"Node must be a dictionary.\");\n        }\n\n        parentRef = node.getRaw(\"Parent\");\n        return node.getAsync(\"Parent\");\n      }).then(function (parent) {\n        if (!parent) {\n          return null;\n        }\n\n        if (!(0, _primitives.isDict)(parent)) {\n          throw new _util.FormatError(\"Parent must be a dictionary.\");\n        }\n\n        return parent.getAsync(\"Kids\");\n      }).then(function (kids) {\n        if (!kids) {\n          return null;\n        }\n\n        const kidPromises = [];\n        let found = false;\n\n        for (let i = 0, ii = kids.length; i < ii; i++) {\n          const kid = kids[i];\n\n          if (!(0, _primitives.isRef)(kid)) {\n            throw new _util.FormatError(\"Kid must be a reference.\");\n          }\n\n          if ((0, _primitives.isRefsEqual)(kid, kidRef)) {\n            found = true;\n            break;\n          }\n\n          kidPromises.push(xref.fetchAsync(kid).then(function (obj) {\n            if (!(0, _primitives.isDict)(obj)) {\n              throw new _util.FormatError(\"Kid node must be a dictionary.\");\n            }\n\n            if (obj.has(\"Count\")) {\n              total += obj.get(\"Count\");\n            } else {\n              total++;\n            }\n          }));\n        }\n\n        if (!found) {\n          throw new _util.FormatError(\"Kid reference not found in parent's kids.\");\n        }\n\n        return Promise.all(kidPromises).then(function () {\n          return [total, parentRef];\n        });\n      });\n    }\n\n    let total = 0;\n\n    function next(ref) {\n      return pagesBeforeRef(ref).then(function (args) {\n        if (!args) {\n          return total;\n        }\n\n        const [count, parentRef] = args;\n        total += count;\n        return next(parentRef);\n      });\n    }\n\n    return next(pageRef);\n  }\n\n  static parseDestDictionary(params) {\n    function addDefaultProtocolToUrl(url) {\n      return url.startsWith(\"www.\") ? `http://${url}` : url;\n    }\n\n    function tryConvertUrlEncoding(url) {\n      try {\n        return (0, _util.stringToUTF8String)(url);\n      } catch (e) {\n        return url;\n      }\n    }\n\n    const destDict = params.destDict;\n\n    if (!(0, _primitives.isDict)(destDict)) {\n      (0, _util.warn)(\"parseDestDictionary: `destDict` must be a dictionary.\");\n      return;\n    }\n\n    const resultObj = params.resultObj;\n\n    if (typeof resultObj !== \"object\") {\n      (0, _util.warn)(\"parseDestDictionary: `resultObj` must be an object.\");\n      return;\n    }\n\n    const docBaseUrl = params.docBaseUrl || null;\n    let action = destDict.get(\"A\"),\n        url,\n        dest;\n\n    if (!(0, _primitives.isDict)(action)) {\n      if (destDict.has(\"Dest\")) {\n        action = destDict.get(\"Dest\");\n      } else {\n        action = destDict.get(\"AA\");\n\n        if ((0, _primitives.isDict)(action)) {\n          if (action.has(\"D\")) {\n            action = action.get(\"D\");\n          } else if (action.has(\"U\")) {\n            action = action.get(\"U\");\n          }\n        }\n      }\n    }\n\n    if ((0, _primitives.isDict)(action)) {\n      const actionType = action.get(\"S\");\n\n      if (!(0, _primitives.isName)(actionType)) {\n        (0, _util.warn)(\"parseDestDictionary: Invalid type in Action dictionary.\");\n        return;\n      }\n\n      const actionName = actionType.name;\n\n      switch (actionName) {\n        case \"URI\":\n          url = action.get(\"URI\");\n\n          if ((0, _primitives.isName)(url)) {\n            url = \"/\" + url.name;\n          } else if ((0, _util.isString)(url)) {\n            url = addDefaultProtocolToUrl(url);\n          }\n\n          break;\n\n        case \"GoTo\":\n          dest = action.get(\"D\");\n          break;\n\n        case \"Launch\":\n        case \"GoToR\":\n          const urlDict = action.get(\"F\");\n\n          if ((0, _primitives.isDict)(urlDict)) {\n            url = urlDict.get(\"F\") || null;\n          } else if ((0, _util.isString)(urlDict)) {\n            url = urlDict;\n          }\n\n          let remoteDest = action.get(\"D\");\n\n          if (remoteDest) {\n            if ((0, _primitives.isName)(remoteDest)) {\n              remoteDest = remoteDest.name;\n            }\n\n            if ((0, _util.isString)(url)) {\n              const baseUrl = url.split(\"#\")[0];\n\n              if ((0, _util.isString)(remoteDest)) {\n                url = baseUrl + \"#\" + remoteDest;\n              } else if (Array.isArray(remoteDest)) {\n                url = baseUrl + \"#\" + JSON.stringify(remoteDest);\n              }\n            }\n          }\n\n          const newWindow = action.get(\"NewWindow\");\n\n          if ((0, _util.isBool)(newWindow)) {\n            resultObj.newWindow = newWindow;\n          }\n\n          break;\n\n        case \"Named\":\n          const namedAction = action.get(\"N\");\n\n          if ((0, _primitives.isName)(namedAction)) {\n            resultObj.action = namedAction.name;\n          }\n\n          break;\n\n        case \"JavaScript\":\n          const jsAction = action.get(\"JS\");\n          let js;\n\n          if ((0, _primitives.isStream)(jsAction)) {\n            js = (0, _util.bytesToString)(jsAction.getBytes());\n          } else if ((0, _util.isString)(jsAction)) {\n            js = jsAction;\n          }\n\n          if (js) {\n            const URL_OPEN_METHODS = [\"app.launchURL\", \"window.open\"];\n            const regex = new RegExp(\"^\\\\s*(\" + URL_OPEN_METHODS.join(\"|\").split(\".\").join(\"\\\\.\") + \")\\\\((?:'|\\\")([^'\\\"]*)(?:'|\\\")(?:,\\\\s*(\\\\w+)\\\\)|\\\\))\", \"i\");\n            const jsUrl = regex.exec((0, _util.stringToPDFString)(js));\n\n            if (jsUrl && jsUrl[2]) {\n              url = jsUrl[2];\n\n              if (jsUrl[3] === \"true\" && jsUrl[1] === \"app.launchURL\") {\n                resultObj.newWindow = true;\n              }\n\n              break;\n            }\n          }\n\n        default:\n          (0, _util.warn)(`parseDestDictionary: unsupported action type \"${actionName}\".`);\n          break;\n      }\n    } else if (destDict.has(\"Dest\")) {\n      dest = destDict.get(\"Dest\");\n    }\n\n    if ((0, _util.isString)(url)) {\n      url = tryConvertUrlEncoding(url);\n      const absoluteUrl = (0, _util.createValidAbsoluteUrl)(url, docBaseUrl);\n\n      if (absoluteUrl) {\n        resultObj.url = absoluteUrl.href;\n      }\n\n      resultObj.unsafeUrl = url;\n    }\n\n    if (dest) {\n      if ((0, _primitives.isName)(dest)) {\n        dest = dest.name;\n      }\n\n      if ((0, _util.isString)(dest) || Array.isArray(dest)) {\n        resultObj.dest = dest;\n      }\n    }\n  }\n\n}\n\nexports.Catalog = Catalog;\n\nvar XRef = function XRefClosure() {\n  function XRef(stream, pdfManager) {\n    this.stream = stream;\n    this.pdfManager = pdfManager;\n    this.entries = [];\n    this.xrefstms = Object.create(null);\n    this._cacheMap = new Map();\n    this.stats = {\n      streamTypes: Object.create(null),\n      fontTypes: Object.create(null)\n    };\n    this._newRefNum = null;\n  }\n\n  XRef.prototype = {\n    getNewRef: function XRef_getNewRef() {\n      if (this._newRefNum === null) {\n        this._newRefNum = this.entries.length;\n      }\n\n      return _primitives.Ref.get(this._newRefNum++, 0);\n    },\n    resetNewRef: function XRef_resetNewRef() {\n      this._newRefNum = null;\n    },\n    setStartXRef: function XRef_setStartXRef(startXRef) {\n      this.startXRefQueue = [startXRef];\n    },\n    parse: function XRef_parse(recoveryMode) {\n      var trailerDict;\n\n      if (!recoveryMode) {\n        trailerDict = this.readXRef();\n      } else {\n        (0, _util.warn)(\"Indexing all PDF objects\");\n        trailerDict = this.indexObjects();\n      }\n\n      trailerDict.assignXref(this);\n      this.trailer = trailerDict;\n      let encrypt;\n\n      try {\n        encrypt = trailerDict.get(\"Encrypt\");\n      } catch (ex) {\n        if (ex instanceof _core_utils.MissingDataException) {\n          throw ex;\n        }\n\n        (0, _util.warn)(`XRef.parse - Invalid \"Encrypt\" reference: \"${ex}\".`);\n      }\n\n      if ((0, _primitives.isDict)(encrypt)) {\n        var ids = trailerDict.get(\"ID\");\n        var fileId = ids && ids.length ? ids[0] : \"\";\n        encrypt.suppressEncryption = true;\n        this.encrypt = new _crypto.CipherTransformFactory(encrypt, fileId, this.pdfManager.password);\n      }\n\n      let root;\n\n      try {\n        root = trailerDict.get(\"Root\");\n      } catch (ex) {\n        if (ex instanceof _core_utils.MissingDataException) {\n          throw ex;\n        }\n\n        (0, _util.warn)(`XRef.parse - Invalid \"Root\" reference: \"${ex}\".`);\n      }\n\n      if ((0, _primitives.isDict)(root) && root.has(\"Pages\")) {\n        this.root = root;\n      } else {\n        if (!recoveryMode) {\n          throw new _core_utils.XRefParseException();\n        }\n\n        throw new _util.FormatError(\"Invalid root reference\");\n      }\n    },\n    processXRefTable: function XRef_processXRefTable(parser) {\n      if (!(\"tableState\" in this)) {\n        this.tableState = {\n          entryNum: 0,\n          streamPos: parser.lexer.stream.pos,\n          parserBuf1: parser.buf1,\n          parserBuf2: parser.buf2\n        };\n      }\n\n      var obj = this.readXRefTable(parser);\n\n      if (!(0, _primitives.isCmd)(obj, \"trailer\")) {\n        throw new _util.FormatError(\"Invalid XRef table: could not find trailer dictionary\");\n      }\n\n      var dict = parser.getObj();\n\n      if (!(0, _primitives.isDict)(dict) && dict.dict) {\n        dict = dict.dict;\n      }\n\n      if (!(0, _primitives.isDict)(dict)) {\n        throw new _util.FormatError(\"Invalid XRef table: could not parse trailer dictionary\");\n      }\n\n      delete this.tableState;\n      return dict;\n    },\n    readXRefTable: function XRef_readXRefTable(parser) {\n      var stream = parser.lexer.stream;\n      var tableState = this.tableState;\n      stream.pos = tableState.streamPos;\n      parser.buf1 = tableState.parserBuf1;\n      parser.buf2 = tableState.parserBuf2;\n      var obj;\n\n      while (true) {\n        if (!(\"firstEntryNum\" in tableState) || !(\"entryCount\" in tableState)) {\n          if ((0, _primitives.isCmd)(obj = parser.getObj(), \"trailer\")) {\n            break;\n          }\n\n          tableState.firstEntryNum = obj;\n          tableState.entryCount = parser.getObj();\n        }\n\n        var first = tableState.firstEntryNum;\n        var count = tableState.entryCount;\n\n        if (!Number.isInteger(first) || !Number.isInteger(count)) {\n          throw new _util.FormatError(\"Invalid XRef table: wrong types in subsection header\");\n        }\n\n        for (var i = tableState.entryNum; i < count; i++) {\n          tableState.streamPos = stream.pos;\n          tableState.entryNum = i;\n          tableState.parserBuf1 = parser.buf1;\n          tableState.parserBuf2 = parser.buf2;\n          var entry = {};\n          entry.offset = parser.getObj();\n          entry.gen = parser.getObj();\n          var type = parser.getObj();\n\n          if (type instanceof _primitives.Cmd) {\n            switch (type.cmd) {\n              case \"f\":\n                entry.free = true;\n                break;\n\n              case \"n\":\n                entry.uncompressed = true;\n                break;\n            }\n          }\n\n          if (!Number.isInteger(entry.offset) || !Number.isInteger(entry.gen) || !(entry.free || entry.uncompressed)) {\n            throw new _util.FormatError(`Invalid entry in XRef subsection: ${first}, ${count}`);\n          }\n\n          if (i === 0 && entry.free && first === 1) {\n            first = 0;\n          }\n\n          if (!this.entries[i + first]) {\n            this.entries[i + first] = entry;\n          }\n        }\n\n        tableState.entryNum = 0;\n        tableState.streamPos = stream.pos;\n        tableState.parserBuf1 = parser.buf1;\n        tableState.parserBuf2 = parser.buf2;\n        delete tableState.firstEntryNum;\n        delete tableState.entryCount;\n      }\n\n      if (this.entries[0] && !this.entries[0].free) {\n        throw new _util.FormatError(\"Invalid XRef table: unexpected first object\");\n      }\n\n      return obj;\n    },\n    processXRefStream: function XRef_processXRefStream(stream) {\n      if (!(\"streamState\" in this)) {\n        var streamParameters = stream.dict;\n        var byteWidths = streamParameters.get(\"W\");\n        var range = streamParameters.get(\"Index\");\n\n        if (!range) {\n          range = [0, streamParameters.get(\"Size\")];\n        }\n\n        this.streamState = {\n          entryRanges: range,\n          byteWidths,\n          entryNum: 0,\n          streamPos: stream.pos\n        };\n      }\n\n      this.readXRefStream(stream);\n      delete this.streamState;\n      return stream.dict;\n    },\n    readXRefStream: function XRef_readXRefStream(stream) {\n      var i, j;\n      var streamState = this.streamState;\n      stream.pos = streamState.streamPos;\n      var byteWidths = streamState.byteWidths;\n      var typeFieldWidth = byteWidths[0];\n      var offsetFieldWidth = byteWidths[1];\n      var generationFieldWidth = byteWidths[2];\n      var entryRanges = streamState.entryRanges;\n\n      while (entryRanges.length > 0) {\n        var first = entryRanges[0];\n        var n = entryRanges[1];\n\n        if (!Number.isInteger(first) || !Number.isInteger(n)) {\n          throw new _util.FormatError(`Invalid XRef range fields: ${first}, ${n}`);\n        }\n\n        if (!Number.isInteger(typeFieldWidth) || !Number.isInteger(offsetFieldWidth) || !Number.isInteger(generationFieldWidth)) {\n          throw new _util.FormatError(`Invalid XRef entry fields length: ${first}, ${n}`);\n        }\n\n        for (i = streamState.entryNum; i < n; ++i) {\n          streamState.entryNum = i;\n          streamState.streamPos = stream.pos;\n          var type = 0,\n              offset = 0,\n              generation = 0;\n\n          for (j = 0; j < typeFieldWidth; ++j) {\n            type = type << 8 | stream.getByte();\n          }\n\n          if (typeFieldWidth === 0) {\n            type = 1;\n          }\n\n          for (j = 0; j < offsetFieldWidth; ++j) {\n            offset = offset << 8 | stream.getByte();\n          }\n\n          for (j = 0; j < generationFieldWidth; ++j) {\n            generation = generation << 8 | stream.getByte();\n          }\n\n          var entry = {};\n          entry.offset = offset;\n          entry.gen = generation;\n\n          switch (type) {\n            case 0:\n              entry.free = true;\n              break;\n\n            case 1:\n              entry.uncompressed = true;\n              break;\n\n            case 2:\n              break;\n\n            default:\n              throw new _util.FormatError(`Invalid XRef entry type: ${type}`);\n          }\n\n          if (!this.entries[first + i]) {\n            this.entries[first + i] = entry;\n          }\n        }\n\n        streamState.entryNum = 0;\n        streamState.streamPos = stream.pos;\n        entryRanges.splice(0, 2);\n      }\n    },\n    indexObjects: function XRef_indexObjects() {\n      var TAB = 0x9,\n          LF = 0xa,\n          CR = 0xd,\n          SPACE = 0x20;\n      var PERCENT = 0x25,\n          LT = 0x3c;\n\n      function readToken(data, offset) {\n        var token = \"\",\n            ch = data[offset];\n\n        while (ch !== LF && ch !== CR && ch !== LT) {\n          if (++offset >= data.length) {\n            break;\n          }\n\n          token += String.fromCharCode(ch);\n          ch = data[offset];\n        }\n\n        return token;\n      }\n\n      function skipUntil(data, offset, what) {\n        var length = what.length,\n            dataLength = data.length;\n        var skipped = 0;\n\n        while (offset < dataLength) {\n          var i = 0;\n\n          while (i < length && data[offset + i] === what[i]) {\n            ++i;\n          }\n\n          if (i >= length) {\n            break;\n          }\n\n          offset++;\n          skipped++;\n        }\n\n        return skipped;\n      }\n\n      var objRegExp = /^(\\d+)\\s+(\\d+)\\s+obj\\b/;\n      const endobjRegExp = /\\bendobj[\\b\\s]$/;\n      const nestedObjRegExp = /\\s+(\\d+\\s+\\d+\\s+obj[\\b\\s<])$/;\n      const CHECK_CONTENT_LENGTH = 25;\n      var trailerBytes = new Uint8Array([116, 114, 97, 105, 108, 101, 114]);\n      var startxrefBytes = new Uint8Array([115, 116, 97, 114, 116, 120, 114, 101, 102]);\n      const objBytes = new Uint8Array([111, 98, 106]);\n      var xrefBytes = new Uint8Array([47, 88, 82, 101, 102]);\n      this.entries.length = 0;\n      var stream = this.stream;\n      stream.pos = 0;\n      var buffer = stream.getBytes();\n      var position = stream.start,\n          length = buffer.length;\n      var trailers = [],\n          xrefStms = [];\n\n      while (position < length) {\n        var ch = buffer[position];\n\n        if (ch === TAB || ch === LF || ch === CR || ch === SPACE) {\n          ++position;\n          continue;\n        }\n\n        if (ch === PERCENT) {\n          do {\n            ++position;\n\n            if (position >= length) {\n              break;\n            }\n\n            ch = buffer[position];\n          } while (ch !== LF && ch !== CR);\n\n          continue;\n        }\n\n        var token = readToken(buffer, position);\n        var m;\n\n        if (token.startsWith(\"xref\") && (token.length === 4 || /\\s/.test(token[4]))) {\n          position += skipUntil(buffer, position, trailerBytes);\n          trailers.push(position);\n          position += skipUntil(buffer, position, startxrefBytes);\n        } else if (m = objRegExp.exec(token)) {\n          const num = m[1] | 0,\n                gen = m[2] | 0;\n\n          if (!this.entries[num] || this.entries[num].gen === gen) {\n            this.entries[num] = {\n              offset: position - stream.start,\n              gen,\n              uncompressed: true\n            };\n          }\n\n          let contentLength,\n              startPos = position + token.length;\n\n          while (startPos < buffer.length) {\n            const endPos = startPos + skipUntil(buffer, startPos, objBytes) + 4;\n            contentLength = endPos - position;\n            const checkPos = Math.max(endPos - CHECK_CONTENT_LENGTH, startPos);\n            const tokenStr = (0, _util.bytesToString)(buffer.subarray(checkPos, endPos));\n\n            if (endobjRegExp.test(tokenStr)) {\n              break;\n            } else {\n              const objToken = nestedObjRegExp.exec(tokenStr);\n\n              if (objToken && objToken[1]) {\n                (0, _util.warn)('indexObjects: Found new \"obj\" inside of another \"obj\", ' + 'caused by missing \"endobj\" -- trying to recover.');\n                contentLength -= objToken[1].length;\n                break;\n              }\n            }\n\n            startPos = endPos;\n          }\n\n          const content = buffer.subarray(position, position + contentLength);\n          var xrefTagOffset = skipUntil(content, 0, xrefBytes);\n\n          if (xrefTagOffset < contentLength && content[xrefTagOffset + 5] < 64) {\n            xrefStms.push(position - stream.start);\n            this.xrefstms[position - stream.start] = 1;\n          }\n\n          position += contentLength;\n        } else if (token.startsWith(\"trailer\") && (token.length === 7 || /\\s/.test(token[7]))) {\n          trailers.push(position);\n          position += skipUntil(buffer, position, startxrefBytes);\n        } else {\n          position += token.length + 1;\n        }\n      }\n\n      for (let i = 0, ii = xrefStms.length; i < ii; ++i) {\n        this.startXRefQueue.push(xrefStms[i]);\n        this.readXRef(true);\n      }\n\n      let trailerDict;\n\n      for (let i = 0, ii = trailers.length; i < ii; ++i) {\n        stream.pos = trailers[i];\n        const parser = new _parser.Parser({\n          lexer: new _parser.Lexer(stream),\n          xref: this,\n          allowStreams: true,\n          recoveryMode: true\n        });\n        var obj = parser.getObj();\n\n        if (!(0, _primitives.isCmd)(obj, \"trailer\")) {\n          continue;\n        }\n\n        const dict = parser.getObj();\n\n        if (!(0, _primitives.isDict)(dict)) {\n          continue;\n        }\n\n        try {\n          const rootDict = dict.get(\"Root\");\n\n          if (!(rootDict instanceof _primitives.Dict)) {\n            continue;\n          }\n\n          const pagesDict = rootDict.get(\"Pages\");\n\n          if (!(pagesDict instanceof _primitives.Dict)) {\n            continue;\n          }\n\n          const pagesCount = pagesDict.get(\"Count\");\n\n          if (!Number.isInteger(pagesCount)) {\n            continue;\n          }\n        } catch (ex) {\n          if (ex instanceof _core_utils.MissingDataException) {\n            throw ex;\n          }\n\n          continue;\n        }\n\n        if (dict.has(\"ID\")) {\n          return dict;\n        }\n\n        trailerDict = dict;\n      }\n\n      if (trailerDict) {\n        return trailerDict;\n      }\n\n      throw new _util.InvalidPDFException(\"Invalid PDF structure.\");\n    },\n    readXRef: function XRef_readXRef(recoveryMode) {\n      var stream = this.stream;\n      const startXRefParsedCache = Object.create(null);\n\n      try {\n        while (this.startXRefQueue.length) {\n          var startXRef = this.startXRefQueue[0];\n\n          if (startXRefParsedCache[startXRef]) {\n            (0, _util.warn)(\"readXRef - skipping XRef table since it was already parsed.\");\n            this.startXRefQueue.shift();\n            continue;\n          }\n\n          startXRefParsedCache[startXRef] = true;\n          stream.pos = startXRef + stream.start;\n          const parser = new _parser.Parser({\n            lexer: new _parser.Lexer(stream),\n            xref: this,\n            allowStreams: true\n          });\n          var obj = parser.getObj();\n          var dict;\n\n          if ((0, _primitives.isCmd)(obj, \"xref\")) {\n            dict = this.processXRefTable(parser);\n\n            if (!this.topDict) {\n              this.topDict = dict;\n            }\n\n            obj = dict.get(\"XRefStm\");\n\n            if (Number.isInteger(obj)) {\n              var pos = obj;\n\n              if (!(pos in this.xrefstms)) {\n                this.xrefstms[pos] = 1;\n                this.startXRefQueue.push(pos);\n              }\n            }\n          } else if (Number.isInteger(obj)) {\n            if (!Number.isInteger(parser.getObj()) || !(0, _primitives.isCmd)(parser.getObj(), \"obj\") || !(0, _primitives.isStream)(obj = parser.getObj())) {\n              throw new _util.FormatError(\"Invalid XRef stream\");\n            }\n\n            dict = this.processXRefStream(obj);\n\n            if (!this.topDict) {\n              this.topDict = dict;\n            }\n\n            if (!dict) {\n              throw new _util.FormatError(\"Failed to read XRef stream\");\n            }\n          } else {\n            throw new _util.FormatError(\"Invalid XRef stream header\");\n          }\n\n          obj = dict.get(\"Prev\");\n\n          if (Number.isInteger(obj)) {\n            this.startXRefQueue.push(obj);\n          } else if ((0, _primitives.isRef)(obj)) {\n            this.startXRefQueue.push(obj.num);\n          }\n\n          this.startXRefQueue.shift();\n        }\n\n        return this.topDict;\n      } catch (e) {\n        if (e instanceof _core_utils.MissingDataException) {\n          throw e;\n        }\n\n        (0, _util.info)(\"(while reading XRef): \" + e);\n      }\n\n      if (recoveryMode) {\n        return undefined;\n      }\n\n      throw new _core_utils.XRefParseException();\n    },\n    getEntry: function XRef_getEntry(i) {\n      var xrefEntry = this.entries[i];\n\n      if (xrefEntry && !xrefEntry.free && xrefEntry.offset) {\n        return xrefEntry;\n      }\n\n      return null;\n    },\n    fetchIfRef: function XRef_fetchIfRef(obj, suppressEncryption) {\n      if (obj instanceof _primitives.Ref) {\n        return this.fetch(obj, suppressEncryption);\n      }\n\n      return obj;\n    },\n    fetch: function XRef_fetch(ref, suppressEncryption) {\n      if (!(ref instanceof _primitives.Ref)) {\n        throw new Error(\"ref object is not a reference\");\n      }\n\n      const num = ref.num;\n\n      const cacheEntry = this._cacheMap.get(num);\n\n      if (cacheEntry !== undefined) {\n        if (cacheEntry instanceof _primitives.Dict && !cacheEntry.objId) {\n          cacheEntry.objId = ref.toString();\n        }\n\n        return cacheEntry;\n      }\n\n      let xrefEntry = this.getEntry(num);\n\n      if (xrefEntry === null) {\n        this._cacheMap.set(num, xrefEntry);\n\n        return xrefEntry;\n      }\n\n      if (xrefEntry.uncompressed) {\n        xrefEntry = this.fetchUncompressed(ref, xrefEntry, suppressEncryption);\n      } else {\n        xrefEntry = this.fetchCompressed(ref, xrefEntry, suppressEncryption);\n      }\n\n      if ((0, _primitives.isDict)(xrefEntry)) {\n        xrefEntry.objId = ref.toString();\n      } else if ((0, _primitives.isStream)(xrefEntry)) {\n        xrefEntry.dict.objId = ref.toString();\n      }\n\n      return xrefEntry;\n    },\n\n    fetchUncompressed(ref, xrefEntry, suppressEncryption = false) {\n      var gen = ref.gen;\n      var num = ref.num;\n\n      if (xrefEntry.gen !== gen) {\n        throw new _core_utils.XRefEntryException(`Inconsistent generation in XRef: ${ref}`);\n      }\n\n      var stream = this.stream.makeSubStream(xrefEntry.offset + this.stream.start);\n      const parser = new _parser.Parser({\n        lexer: new _parser.Lexer(stream),\n        xref: this,\n        allowStreams: true\n      });\n      var obj1 = parser.getObj();\n      var obj2 = parser.getObj();\n      var obj3 = parser.getObj();\n\n      if (obj1 !== num || obj2 !== gen || !(obj3 instanceof _primitives.Cmd)) {\n        throw new _core_utils.XRefEntryException(`Bad (uncompressed) XRef entry: ${ref}`);\n      }\n\n      if (obj3.cmd !== \"obj\") {\n        if (obj3.cmd.startsWith(\"obj\")) {\n          num = parseInt(obj3.cmd.substring(3), 10);\n\n          if (!Number.isNaN(num)) {\n            return num;\n          }\n        }\n\n        throw new _core_utils.XRefEntryException(`Bad (uncompressed) XRef entry: ${ref}`);\n      }\n\n      if (this.encrypt && !suppressEncryption) {\n        xrefEntry = parser.getObj(this.encrypt.createCipherTransform(num, gen));\n      } else {\n        xrefEntry = parser.getObj();\n      }\n\n      if (!(0, _primitives.isStream)(xrefEntry)) {\n        this._cacheMap.set(num, xrefEntry);\n      }\n\n      return xrefEntry;\n    },\n\n    fetchCompressed(ref, xrefEntry, suppressEncryption = false) {\n      const tableOffset = xrefEntry.offset;\n      const stream = this.fetch(_primitives.Ref.get(tableOffset, 0));\n\n      if (!(0, _primitives.isStream)(stream)) {\n        throw new _util.FormatError(\"bad ObjStm stream\");\n      }\n\n      const first = stream.dict.get(\"First\");\n      const n = stream.dict.get(\"N\");\n\n      if (!Number.isInteger(first) || !Number.isInteger(n)) {\n        throw new _util.FormatError(\"invalid first and n parameters for ObjStm stream\");\n      }\n\n      const parser = new _parser.Parser({\n        lexer: new _parser.Lexer(stream),\n        xref: this,\n        allowStreams: true\n      });\n      const nums = new Array(n);\n\n      for (let i = 0; i < n; ++i) {\n        const num = parser.getObj();\n\n        if (!Number.isInteger(num)) {\n          throw new _util.FormatError(`invalid object number in the ObjStm stream: ${num}`);\n        }\n\n        const offset = parser.getObj();\n\n        if (!Number.isInteger(offset)) {\n          throw new _util.FormatError(`invalid object offset in the ObjStm stream: ${offset}`);\n        }\n\n        nums[i] = num;\n      }\n\n      const entries = new Array(n);\n\n      for (let i = 0; i < n; ++i) {\n        const obj = parser.getObj();\n        entries[i] = obj;\n\n        if (parser.buf1 instanceof _primitives.Cmd && parser.buf1.cmd === \"endobj\") {\n          parser.shift();\n        }\n\n        if ((0, _primitives.isStream)(obj)) {\n          continue;\n        }\n\n        const num = nums[i],\n              entry = this.entries[num];\n\n        if (entry && entry.offset === tableOffset && entry.gen === i) {\n          this._cacheMap.set(num, obj);\n        }\n      }\n\n      xrefEntry = entries[xrefEntry.gen];\n\n      if (xrefEntry === undefined) {\n        throw new _core_utils.XRefEntryException(`Bad (compressed) XRef entry: ${ref}`);\n      }\n\n      return xrefEntry;\n    },\n\n    async fetchIfRefAsync(obj, suppressEncryption) {\n      if (obj instanceof _primitives.Ref) {\n        return this.fetchAsync(obj, suppressEncryption);\n      }\n\n      return obj;\n    },\n\n    async fetchAsync(ref, suppressEncryption) {\n      try {\n        return this.fetch(ref, suppressEncryption);\n      } catch (ex) {\n        if (!(ex instanceof _core_utils.MissingDataException)) {\n          throw ex;\n        }\n\n        await this.pdfManager.requestRange(ex.begin, ex.end);\n        return this.fetchAsync(ref, suppressEncryption);\n      }\n    },\n\n    getCatalogObj: function XRef_getCatalogObj() {\n      return this.root;\n    }\n  };\n  return XRef;\n}();\n\nexports.XRef = XRef;\n\nclass NameOrNumberTree {\n  constructor(root, xref, type) {\n    if (this.constructor === NameOrNumberTree) {\n      (0, _util.unreachable)(\"Cannot initialize NameOrNumberTree.\");\n    }\n\n    this.root = root;\n    this.xref = xref;\n    this._type = type;\n  }\n\n  getAll() {\n    const dict = Object.create(null);\n\n    if (!this.root) {\n      return dict;\n    }\n\n    const xref = this.xref;\n    const processed = new _primitives.RefSet();\n    processed.put(this.root);\n    const queue = [this.root];\n\n    while (queue.length > 0) {\n      const obj = xref.fetchIfRef(queue.shift());\n\n      if (!(0, _primitives.isDict)(obj)) {\n        continue;\n      }\n\n      if (obj.has(\"Kids\")) {\n        const kids = obj.get(\"Kids\");\n\n        for (let i = 0, ii = kids.length; i < ii; i++) {\n          const kid = kids[i];\n\n          if (processed.has(kid)) {\n            throw new _util.FormatError(`Duplicate entry in \"${this._type}\" tree.`);\n          }\n\n          queue.push(kid);\n          processed.put(kid);\n        }\n\n        continue;\n      }\n\n      const entries = obj.get(this._type);\n\n      if (Array.isArray(entries)) {\n        for (let i = 0, ii = entries.length; i < ii; i += 2) {\n          dict[xref.fetchIfRef(entries[i])] = xref.fetchIfRef(entries[i + 1]);\n        }\n      }\n    }\n\n    return dict;\n  }\n\n  get(key) {\n    if (!this.root) {\n      return null;\n    }\n\n    const xref = this.xref;\n    let kidsOrEntries = xref.fetchIfRef(this.root);\n    let loopCount = 0;\n    const MAX_LEVELS = 10;\n\n    while (kidsOrEntries.has(\"Kids\")) {\n      if (++loopCount > MAX_LEVELS) {\n        (0, _util.warn)(`Search depth limit reached for \"${this._type}\" tree.`);\n        return null;\n      }\n\n      const kids = kidsOrEntries.get(\"Kids\");\n\n      if (!Array.isArray(kids)) {\n        return null;\n      }\n\n      let l = 0,\n          r = kids.length - 1;\n\n      while (l <= r) {\n        const m = l + r >> 1;\n        const kid = xref.fetchIfRef(kids[m]);\n        const limits = kid.get(\"Limits\");\n\n        if (key < xref.fetchIfRef(limits[0])) {\n          r = m - 1;\n        } else if (key > xref.fetchIfRef(limits[1])) {\n          l = m + 1;\n        } else {\n          kidsOrEntries = xref.fetchIfRef(kids[m]);\n          break;\n        }\n      }\n\n      if (l > r) {\n        return null;\n      }\n    }\n\n    const entries = kidsOrEntries.get(this._type);\n\n    if (Array.isArray(entries)) {\n      let l = 0,\n          r = entries.length - 2;\n\n      while (l <= r) {\n        const tmp = l + r >> 1,\n              m = tmp + (tmp & 1);\n        const currentKey = xref.fetchIfRef(entries[m]);\n\n        if (key < currentKey) {\n          r = m - 2;\n        } else if (key > currentKey) {\n          l = m + 2;\n        } else {\n          return xref.fetchIfRef(entries[m + 1]);\n        }\n      }\n\n      (0, _util.info)(`Falling back to an exhaustive search, for key \"${key}\", ` + `in \"${this._type}\" tree.`);\n\n      for (let m = 0, mm = entries.length; m < mm; m += 2) {\n        const currentKey = xref.fetchIfRef(entries[m]);\n\n        if (currentKey === key) {\n          (0, _util.warn)(`The \"${key}\" key was found at an incorrect, ` + `i.e. out-of-order, position in \"${this._type}\" tree.`);\n          return xref.fetchIfRef(entries[m + 1]);\n        }\n      }\n    }\n\n    return null;\n  }\n\n}\n\nclass NameTree extends NameOrNumberTree {\n  constructor(root, xref) {\n    super(root, xref, \"Names\");\n  }\n\n}\n\nclass NumberTree extends NameOrNumberTree {\n  constructor(root, xref) {\n    super(root, xref, \"Nums\");\n  }\n\n}\n\nvar FileSpec = function FileSpecClosure() {\n  function FileSpec(root, xref) {\n    if (!root || !(0, _primitives.isDict)(root)) {\n      return;\n    }\n\n    this.xref = xref;\n    this.root = root;\n\n    if (root.has(\"FS\")) {\n      this.fs = root.get(\"FS\");\n    }\n\n    this.description = root.has(\"Desc\") ? (0, _util.stringToPDFString)(root.get(\"Desc\")) : \"\";\n\n    if (root.has(\"RF\")) {\n      (0, _util.warn)(\"Related file specifications are not supported\");\n    }\n\n    this.contentAvailable = true;\n\n    if (!root.has(\"EF\")) {\n      this.contentAvailable = false;\n      (0, _util.warn)(\"Non-embedded file specifications are not supported\");\n    }\n  }\n\n  function pickPlatformItem(dict) {\n    if (dict.has(\"UF\")) {\n      return dict.get(\"UF\");\n    } else if (dict.has(\"F\")) {\n      return dict.get(\"F\");\n    } else if (dict.has(\"Unix\")) {\n      return dict.get(\"Unix\");\n    } else if (dict.has(\"Mac\")) {\n      return dict.get(\"Mac\");\n    } else if (dict.has(\"DOS\")) {\n      return dict.get(\"DOS\");\n    }\n\n    return null;\n  }\n\n  FileSpec.prototype = {\n    get filename() {\n      if (!this._filename && this.root) {\n        var filename = pickPlatformItem(this.root) || \"unnamed\";\n        this._filename = (0, _util.stringToPDFString)(filename).replace(/\\\\\\\\/g, \"\\\\\").replace(/\\\\\\//g, \"/\").replace(/\\\\/g, \"/\");\n      }\n\n      return this._filename;\n    },\n\n    get content() {\n      if (!this.contentAvailable) {\n        return null;\n      }\n\n      if (!this.contentRef && this.root) {\n        this.contentRef = pickPlatformItem(this.root.get(\"EF\"));\n      }\n\n      var content = null;\n\n      if (this.contentRef) {\n        var xref = this.xref;\n        var fileObj = xref.fetchIfRef(this.contentRef);\n\n        if (fileObj && (0, _primitives.isStream)(fileObj)) {\n          content = fileObj.getBytes();\n        } else {\n          (0, _util.warn)(\"Embedded file specification points to non-existing/invalid \" + \"content\");\n        }\n      } else {\n        (0, _util.warn)(\"Embedded file specification does not have a content\");\n      }\n\n      return content;\n    },\n\n    get serializable() {\n      return {\n        filename: this.filename,\n        content: this.content\n      };\n    }\n\n  };\n  return FileSpec;\n}();\n\nexports.FileSpec = FileSpec;\n\nconst ObjectLoader = function () {\n  function mayHaveChildren(value) {\n    return value instanceof _primitives.Ref || value instanceof _primitives.Dict || Array.isArray(value) || (0, _primitives.isStream)(value);\n  }\n\n  function addChildren(node, nodesToVisit) {\n    if (node instanceof _primitives.Dict) {\n      node = node.getRawValues();\n    } else if ((0, _primitives.isStream)(node)) {\n      node = node.dict.getRawValues();\n    } else if (!Array.isArray(node)) {\n      return;\n    }\n\n    for (const rawValue of node) {\n      if (mayHaveChildren(rawValue)) {\n        nodesToVisit.push(rawValue);\n      }\n    }\n  }\n\n  function ObjectLoader(dict, keys, xref) {\n    this.dict = dict;\n    this.keys = keys;\n    this.xref = xref;\n    this.refSet = null;\n  }\n\n  ObjectLoader.prototype = {\n    async load() {\n      if (!this.xref.stream.allChunksLoaded || this.xref.stream.allChunksLoaded()) {\n        return undefined;\n      }\n\n      const {\n        keys,\n        dict\n      } = this;\n      this.refSet = new _primitives.RefSet();\n      const nodesToVisit = [];\n\n      for (let i = 0, ii = keys.length; i < ii; i++) {\n        const rawValue = dict.getRaw(keys[i]);\n\n        if (rawValue !== undefined) {\n          nodesToVisit.push(rawValue);\n        }\n      }\n\n      return this._walk(nodesToVisit);\n    },\n\n    async _walk(nodesToVisit) {\n      const nodesToRevisit = [];\n      const pendingRequests = [];\n\n      while (nodesToVisit.length) {\n        let currentNode = nodesToVisit.pop();\n\n        if (currentNode instanceof _primitives.Ref) {\n          if (this.refSet.has(currentNode)) {\n            continue;\n          }\n\n          try {\n            this.refSet.put(currentNode);\n            currentNode = this.xref.fetch(currentNode);\n          } catch (ex) {\n            if (!(ex instanceof _core_utils.MissingDataException)) {\n              throw ex;\n            }\n\n            nodesToRevisit.push(currentNode);\n            pendingRequests.push({\n              begin: ex.begin,\n              end: ex.end\n            });\n          }\n        }\n\n        if (currentNode && currentNode.getBaseStreams) {\n          const baseStreams = currentNode.getBaseStreams();\n          let foundMissingData = false;\n\n          for (let i = 0, ii = baseStreams.length; i < ii; i++) {\n            const stream = baseStreams[i];\n\n            if (stream.allChunksLoaded && !stream.allChunksLoaded()) {\n              foundMissingData = true;\n              pendingRequests.push({\n                begin: stream.start,\n                end: stream.end\n              });\n            }\n          }\n\n          if (foundMissingData) {\n            nodesToRevisit.push(currentNode);\n          }\n        }\n\n        addChildren(currentNode, nodesToVisit);\n      }\n\n      if (pendingRequests.length) {\n        await this.xref.stream.manager.requestRanges(pendingRequests);\n\n        for (let i = 0, ii = nodesToRevisit.length; i < ii; i++) {\n          const node = nodesToRevisit[i];\n\n          if (node instanceof _primitives.Ref) {\n            this.refSet.remove(node);\n          }\n        }\n\n        return this._walk(nodesToRevisit);\n      }\n\n      this.refSet = null;\n      return undefined;\n    }\n\n  };\n  return ObjectLoader;\n}();\n\nexports.ObjectLoader = ObjectLoader;\n\n/***/ }),\n/* 11 */\n/***/ ((__unused_webpack_module, exports, __w_pdfjs_require__) => {\n\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.Parser = exports.Linearization = exports.Lexer = void 0;\n\nvar _stream = __w_pdfjs_require__(12);\n\nvar _util = __w_pdfjs_require__(2);\n\nvar _primitives = __w_pdfjs_require__(5);\n\nvar _core_utils = __w_pdfjs_require__(8);\n\nvar _ccitt_stream = __w_pdfjs_require__(13);\n\nvar _jbig2_stream = __w_pdfjs_require__(15);\n\nvar _jpeg_stream = __w_pdfjs_require__(18);\n\nvar _jpx_stream = __w_pdfjs_require__(20);\n\nconst MAX_LENGTH_TO_CACHE = 1000;\nconst MAX_ADLER32_LENGTH = 5552;\n\nfunction computeAdler32(bytes) {\n  const bytesLength = bytes.length;\n  let a = 1,\n      b = 0;\n\n  for (let i = 0; i < bytesLength; ++i) {\n    a += bytes[i] & 0xff;\n    b += a;\n  }\n\n  return b % 65521 << 16 | a % 65521;\n}\n\nclass Parser {\n  constructor({\n    lexer,\n    xref,\n    allowStreams = false,\n    recoveryMode = false\n  }) {\n    this.lexer = lexer;\n    this.xref = xref;\n    this.allowStreams = allowStreams;\n    this.recoveryMode = recoveryMode;\n    this.imageCache = Object.create(null);\n    this.refill();\n  }\n\n  refill() {\n    this.buf1 = this.lexer.getObj();\n    this.buf2 = this.lexer.getObj();\n  }\n\n  shift() {\n    if (this.buf2 instanceof _primitives.Cmd && this.buf2.cmd === \"ID\") {\n      this.buf1 = this.buf2;\n      this.buf2 = null;\n    } else {\n      this.buf1 = this.buf2;\n      this.buf2 = this.lexer.getObj();\n    }\n  }\n\n  tryShift() {\n    try {\n      this.shift();\n      return true;\n    } catch (e) {\n      if (e instanceof _core_utils.MissingDataException) {\n        throw e;\n      }\n\n      return false;\n    }\n  }\n\n  getObj(cipherTransform = null) {\n    const buf1 = this.buf1;\n    this.shift();\n\n    if (buf1 instanceof _primitives.Cmd) {\n      switch (buf1.cmd) {\n        case \"BI\":\n          return this.makeInlineImage(cipherTransform);\n\n        case \"[\":\n          const array = [];\n\n          while (!(0, _primitives.isCmd)(this.buf1, \"]\") && !(0, _primitives.isEOF)(this.buf1)) {\n            array.push(this.getObj(cipherTransform));\n          }\n\n          if ((0, _primitives.isEOF)(this.buf1)) {\n            if (!this.recoveryMode) {\n              throw new _util.FormatError(\"End of file inside array\");\n            }\n\n            return array;\n          }\n\n          this.shift();\n          return array;\n\n        case \"<<\":\n          const dict = new _primitives.Dict(this.xref);\n\n          while (!(0, _primitives.isCmd)(this.buf1, \">>\") && !(0, _primitives.isEOF)(this.buf1)) {\n            if (!(0, _primitives.isName)(this.buf1)) {\n              (0, _util.info)(\"Malformed dictionary: key must be a name object\");\n              this.shift();\n              continue;\n            }\n\n            const key = this.buf1.name;\n            this.shift();\n\n            if ((0, _primitives.isEOF)(this.buf1)) {\n              break;\n            }\n\n            dict.set(key, this.getObj(cipherTransform));\n          }\n\n          if ((0, _primitives.isEOF)(this.buf1)) {\n            if (!this.recoveryMode) {\n              throw new _util.FormatError(\"End of file inside dictionary\");\n            }\n\n            return dict;\n          }\n\n          if ((0, _primitives.isCmd)(this.buf2, \"stream\")) {\n            return this.allowStreams ? this.makeStream(dict, cipherTransform) : dict;\n          }\n\n          this.shift();\n          return dict;\n\n        default:\n          return buf1;\n      }\n    }\n\n    if (Number.isInteger(buf1)) {\n      if (Number.isInteger(this.buf1) && (0, _primitives.isCmd)(this.buf2, \"R\")) {\n        const ref = _primitives.Ref.get(buf1, this.buf1);\n\n        this.shift();\n        this.shift();\n        return ref;\n      }\n\n      return buf1;\n    }\n\n    if (typeof buf1 === \"string\") {\n      if (cipherTransform) {\n        return cipherTransform.decryptString(buf1);\n      }\n\n      return buf1;\n    }\n\n    return buf1;\n  }\n\n  findDefaultInlineStreamEnd(stream) {\n    const E = 0x45,\n          I = 0x49,\n          SPACE = 0x20,\n          LF = 0xa,\n          CR = 0xd,\n          NUL = 0x0;\n    const lexer = this.lexer,\n          startPos = stream.pos,\n          n = 10;\n    let state = 0,\n        ch,\n        maybeEIPos;\n\n    while ((ch = stream.getByte()) !== -1) {\n      if (state === 0) {\n        state = ch === E ? 1 : 0;\n      } else if (state === 1) {\n        state = ch === I ? 2 : 0;\n      } else {\n        (0, _util.assert)(state === 2, \"findDefaultInlineStreamEnd - invalid state.\");\n\n        if (ch === SPACE || ch === LF || ch === CR) {\n          maybeEIPos = stream.pos;\n          const followingBytes = stream.peekBytes(n);\n\n          for (let i = 0, ii = followingBytes.length; i < ii; i++) {\n            ch = followingBytes[i];\n\n            if (ch === NUL && followingBytes[i + 1] !== NUL) {\n              continue;\n            }\n\n            if (ch !== LF && ch !== CR && (ch < SPACE || ch > 0x7f)) {\n              state = 0;\n              break;\n            }\n          }\n\n          if (state !== 2) {\n            continue;\n          }\n\n          if (lexer.knownCommands) {\n            const nextObj = lexer.peekObj();\n\n            if (nextObj instanceof _primitives.Cmd && !lexer.knownCommands[nextObj.cmd]) {\n              state = 0;\n            }\n          } else {\n            (0, _util.warn)(\"findDefaultInlineStreamEnd - `lexer.knownCommands` is undefined.\");\n          }\n\n          if (state === 2) {\n            break;\n          }\n        } else {\n          state = 0;\n        }\n      }\n    }\n\n    if (ch === -1) {\n      (0, _util.warn)(\"findDefaultInlineStreamEnd: \" + \"Reached the end of the stream without finding a valid EI marker\");\n\n      if (maybeEIPos) {\n        (0, _util.warn)('... trying to recover by using the last \"EI\" occurrence.');\n        stream.skip(-(stream.pos - maybeEIPos));\n      }\n    }\n\n    let endOffset = 4;\n    stream.skip(-endOffset);\n    ch = stream.peekByte();\n    stream.skip(endOffset);\n\n    if (!(0, _core_utils.isWhiteSpace)(ch)) {\n      endOffset--;\n    }\n\n    return stream.pos - endOffset - startPos;\n  }\n\n  findDCTDecodeInlineStreamEnd(stream) {\n    const startPos = stream.pos;\n    let foundEOI = false,\n        b,\n        markerLength;\n\n    while ((b = stream.getByte()) !== -1) {\n      if (b !== 0xff) {\n        continue;\n      }\n\n      switch (stream.getByte()) {\n        case 0x00:\n          break;\n\n        case 0xff:\n          stream.skip(-1);\n          break;\n\n        case 0xd9:\n          foundEOI = true;\n          break;\n\n        case 0xc0:\n        case 0xc1:\n        case 0xc2:\n        case 0xc3:\n        case 0xc5:\n        case 0xc6:\n        case 0xc7:\n        case 0xc9:\n        case 0xca:\n        case 0xcb:\n        case 0xcd:\n        case 0xce:\n        case 0xcf:\n        case 0xc4:\n        case 0xcc:\n        case 0xda:\n        case 0xdb:\n        case 0xdc:\n        case 0xdd:\n        case 0xde:\n        case 0xdf:\n        case 0xe0:\n        case 0xe1:\n        case 0xe2:\n        case 0xe3:\n        case 0xe4:\n        case 0xe5:\n        case 0xe6:\n        case 0xe7:\n        case 0xe8:\n        case 0xe9:\n        case 0xea:\n        case 0xeb:\n        case 0xec:\n        case 0xed:\n        case 0xee:\n        case 0xef:\n        case 0xfe:\n          markerLength = stream.getUint16();\n\n          if (markerLength > 2) {\n            stream.skip(markerLength - 2);\n          } else {\n            stream.skip(-2);\n          }\n\n          break;\n      }\n\n      if (foundEOI) {\n        break;\n      }\n    }\n\n    const length = stream.pos - startPos;\n\n    if (b === -1) {\n      (0, _util.warn)(\"Inline DCTDecode image stream: \" + \"EOI marker not found, searching for /EI/ instead.\");\n      stream.skip(-length);\n      return this.findDefaultInlineStreamEnd(stream);\n    }\n\n    this.inlineStreamSkipEI(stream);\n    return length;\n  }\n\n  findASCII85DecodeInlineStreamEnd(stream) {\n    const TILDE = 0x7e,\n          GT = 0x3e;\n    const startPos = stream.pos;\n    let ch;\n\n    while ((ch = stream.getByte()) !== -1) {\n      if (ch === TILDE) {\n        const tildePos = stream.pos;\n        ch = stream.peekByte();\n\n        while ((0, _core_utils.isWhiteSpace)(ch)) {\n          stream.skip();\n          ch = stream.peekByte();\n        }\n\n        if (ch === GT) {\n          stream.skip();\n          break;\n        }\n\n        if (stream.pos > tildePos) {\n          const maybeEI = stream.peekBytes(2);\n\n          if (maybeEI[0] === 0x45 && maybeEI[1] === 0x49) {\n            break;\n          }\n        }\n      }\n    }\n\n    const length = stream.pos - startPos;\n\n    if (ch === -1) {\n      (0, _util.warn)(\"Inline ASCII85Decode image stream: \" + \"EOD marker not found, searching for /EI/ instead.\");\n      stream.skip(-length);\n      return this.findDefaultInlineStreamEnd(stream);\n    }\n\n    this.inlineStreamSkipEI(stream);\n    return length;\n  }\n\n  findASCIIHexDecodeInlineStreamEnd(stream) {\n    const GT = 0x3e;\n    const startPos = stream.pos;\n    let ch;\n\n    while ((ch = stream.getByte()) !== -1) {\n      if (ch === GT) {\n        break;\n      }\n    }\n\n    const length = stream.pos - startPos;\n\n    if (ch === -1) {\n      (0, _util.warn)(\"Inline ASCIIHexDecode image stream: \" + \"EOD marker not found, searching for /EI/ instead.\");\n      stream.skip(-length);\n      return this.findDefaultInlineStreamEnd(stream);\n    }\n\n    this.inlineStreamSkipEI(stream);\n    return length;\n  }\n\n  inlineStreamSkipEI(stream) {\n    const E = 0x45,\n          I = 0x49;\n    let state = 0,\n        ch;\n\n    while ((ch = stream.getByte()) !== -1) {\n      if (state === 0) {\n        state = ch === E ? 1 : 0;\n      } else if (state === 1) {\n        state = ch === I ? 2 : 0;\n      } else if (state === 2) {\n        break;\n      }\n    }\n  }\n\n  makeInlineImage(cipherTransform) {\n    const lexer = this.lexer;\n    const stream = lexer.stream;\n    const dict = new _primitives.Dict(this.xref);\n    let dictLength;\n\n    while (!(0, _primitives.isCmd)(this.buf1, \"ID\") && !(0, _primitives.isEOF)(this.buf1)) {\n      if (!(0, _primitives.isName)(this.buf1)) {\n        throw new _util.FormatError(\"Dictionary key must be a name object\");\n      }\n\n      const key = this.buf1.name;\n      this.shift();\n\n      if ((0, _primitives.isEOF)(this.buf1)) {\n        break;\n      }\n\n      dict.set(key, this.getObj(cipherTransform));\n    }\n\n    if (lexer.beginInlineImagePos !== -1) {\n      dictLength = stream.pos - lexer.beginInlineImagePos;\n    }\n\n    const filter = dict.get(\"Filter\", \"F\");\n    let filterName;\n\n    if ((0, _primitives.isName)(filter)) {\n      filterName = filter.name;\n    } else if (Array.isArray(filter)) {\n      const filterZero = this.xref.fetchIfRef(filter[0]);\n\n      if ((0, _primitives.isName)(filterZero)) {\n        filterName = filterZero.name;\n      }\n    }\n\n    const startPos = stream.pos;\n    let length;\n\n    if (filterName === \"DCTDecode\" || filterName === \"DCT\") {\n      length = this.findDCTDecodeInlineStreamEnd(stream);\n    } else if (filterName === \"ASCII85Decode\" || filterName === \"A85\") {\n      length = this.findASCII85DecodeInlineStreamEnd(stream);\n    } else if (filterName === \"ASCIIHexDecode\" || filterName === \"AHx\") {\n      length = this.findASCIIHexDecodeInlineStreamEnd(stream);\n    } else {\n      length = this.findDefaultInlineStreamEnd(stream);\n    }\n\n    let imageStream = stream.makeSubStream(startPos, length, dict);\n    let cacheKey;\n\n    if (length < MAX_LENGTH_TO_CACHE && dictLength < MAX_ADLER32_LENGTH) {\n      const imageBytes = imageStream.getBytes();\n      imageStream.reset();\n      const initialStreamPos = stream.pos;\n      stream.pos = lexer.beginInlineImagePos;\n      const dictBytes = stream.getBytes(dictLength);\n      stream.pos = initialStreamPos;\n      cacheKey = computeAdler32(imageBytes) + \"_\" + computeAdler32(dictBytes);\n      const cacheEntry = this.imageCache[cacheKey];\n\n      if (cacheEntry !== undefined) {\n        this.buf2 = _primitives.Cmd.get(\"EI\");\n        this.shift();\n        cacheEntry.reset();\n        return cacheEntry;\n      }\n    }\n\n    if (cipherTransform) {\n      imageStream = cipherTransform.createStream(imageStream, length);\n    }\n\n    imageStream = this.filter(imageStream, dict, length);\n    imageStream.dict = dict;\n\n    if (cacheKey !== undefined) {\n      imageStream.cacheKey = `inline_${length}_${cacheKey}`;\n      this.imageCache[cacheKey] = imageStream;\n    }\n\n    this.buf2 = _primitives.Cmd.get(\"EI\");\n    this.shift();\n    return imageStream;\n  }\n\n  _findStreamLength(startPos, signature) {\n    const {\n      stream\n    } = this.lexer;\n    stream.pos = startPos;\n    const SCAN_BLOCK_LENGTH = 2048;\n    const signatureLength = signature.length;\n\n    while (stream.pos < stream.end) {\n      const scanBytes = stream.peekBytes(SCAN_BLOCK_LENGTH);\n      const scanLength = scanBytes.length - signatureLength;\n\n      if (scanLength <= 0) {\n        break;\n      }\n\n      let pos = 0;\n\n      while (pos < scanLength) {\n        let j = 0;\n\n        while (j < signatureLength && scanBytes[pos + j] === signature[j]) {\n          j++;\n        }\n\n        if (j >= signatureLength) {\n          stream.pos += pos;\n          return stream.pos - startPos;\n        }\n\n        pos++;\n      }\n\n      stream.pos += scanLength;\n    }\n\n    return -1;\n  }\n\n  makeStream(dict, cipherTransform) {\n    const lexer = this.lexer;\n    let stream = lexer.stream;\n    lexer.skipToNextLine();\n    const startPos = stream.pos - 1;\n    let length = dict.get(\"Length\");\n\n    if (!Number.isInteger(length)) {\n      (0, _util.info)(`Bad length \"${length}\" in stream`);\n      length = 0;\n    }\n\n    stream.pos = startPos + length;\n    lexer.nextChar();\n\n    if (this.tryShift() && (0, _primitives.isCmd)(this.buf2, \"endstream\")) {\n      this.shift();\n    } else {\n      const ENDSTREAM_SIGNATURE = new Uint8Array([0x65, 0x6E, 0x64, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6D]);\n\n      let actualLength = this._findStreamLength(startPos, ENDSTREAM_SIGNATURE);\n\n      if (actualLength < 0) {\n        const MAX_TRUNCATION = 1;\n\n        for (let i = 1; i <= MAX_TRUNCATION; i++) {\n          const end = ENDSTREAM_SIGNATURE.length - i;\n          const TRUNCATED_SIGNATURE = ENDSTREAM_SIGNATURE.slice(0, end);\n\n          const maybeLength = this._findStreamLength(startPos, TRUNCATED_SIGNATURE);\n\n          if (maybeLength >= 0) {\n            const lastByte = stream.peekBytes(end + 1)[end];\n\n            if (!(0, _core_utils.isWhiteSpace)(lastByte)) {\n              break;\n            }\n\n            (0, _util.info)(`Found \"${(0, _util.bytesToString)(TRUNCATED_SIGNATURE)}\" when ` + \"searching for endstream command.\");\n            actualLength = maybeLength;\n            break;\n          }\n        }\n\n        if (actualLength < 0) {\n          throw new _util.FormatError(\"Missing endstream command.\");\n        }\n      }\n\n      length = actualLength;\n      lexer.nextChar();\n      this.shift();\n      this.shift();\n    }\n\n    this.shift();\n    stream = stream.makeSubStream(startPos, length, dict);\n\n    if (cipherTransform) {\n      stream = cipherTransform.createStream(stream, length);\n    }\n\n    stream = this.filter(stream, dict, length);\n    stream.dict = dict;\n    return stream;\n  }\n\n  filter(stream, dict, length) {\n    let filter = dict.get(\"Filter\", \"F\");\n    let params = dict.get(\"DecodeParms\", \"DP\");\n\n    if ((0, _primitives.isName)(filter)) {\n      if (Array.isArray(params)) {\n        (0, _util.warn)(\"/DecodeParms should not contain an Array, \" + \"when /Filter contains a Name.\");\n      }\n\n      return this.makeFilter(stream, filter.name, length, params);\n    }\n\n    let maybeLength = length;\n\n    if (Array.isArray(filter)) {\n      const filterArray = filter;\n      const paramsArray = params;\n\n      for (let i = 0, ii = filterArray.length; i < ii; ++i) {\n        filter = this.xref.fetchIfRef(filterArray[i]);\n\n        if (!(0, _primitives.isName)(filter)) {\n          throw new _util.FormatError(`Bad filter name \"${filter}\"`);\n        }\n\n        params = null;\n\n        if (Array.isArray(paramsArray) && i in paramsArray) {\n          params = this.xref.fetchIfRef(paramsArray[i]);\n        }\n\n        stream = this.makeFilter(stream, filter.name, maybeLength, params);\n        maybeLength = null;\n      }\n    }\n\n    return stream;\n  }\n\n  makeFilter(stream, name, maybeLength, params) {\n    if (maybeLength === 0) {\n      (0, _util.warn)(`Empty \"${name}\" stream.`);\n      return new _stream.NullStream();\n    }\n\n    try {\n      const xrefStreamStats = this.xref.stats.streamTypes;\n\n      if (name === \"FlateDecode\" || name === \"Fl\") {\n        xrefStreamStats[_util.StreamType.FLATE] = true;\n\n        if (params) {\n          return new _stream.PredictorStream(new _stream.FlateStream(stream, maybeLength), maybeLength, params);\n        }\n\n        return new _stream.FlateStream(stream, maybeLength);\n      }\n\n      if (name === \"LZWDecode\" || name === \"LZW\") {\n        xrefStreamStats[_util.StreamType.LZW] = true;\n        let earlyChange = 1;\n\n        if (params) {\n          if (params.has(\"EarlyChange\")) {\n            earlyChange = params.get(\"EarlyChange\");\n          }\n\n          return new _stream.PredictorStream(new _stream.LZWStream(stream, maybeLength, earlyChange), maybeLength, params);\n        }\n\n        return new _stream.LZWStream(stream, maybeLength, earlyChange);\n      }\n\n      if (name === \"DCTDecode\" || name === \"DCT\") {\n        xrefStreamStats[_util.StreamType.DCT] = true;\n        return new _jpeg_stream.JpegStream(stream, maybeLength, stream.dict, params);\n      }\n\n      if (name === \"JPXDecode\" || name === \"JPX\") {\n        xrefStreamStats[_util.StreamType.JPX] = true;\n        return new _jpx_stream.JpxStream(stream, maybeLength, stream.dict, params);\n      }\n\n      if (name === \"ASCII85Decode\" || name === \"A85\") {\n        xrefStreamStats[_util.StreamType.A85] = true;\n        return new _stream.Ascii85Stream(stream, maybeLength);\n      }\n\n      if (name === \"ASCIIHexDecode\" || name === \"AHx\") {\n        xrefStreamStats[_util.StreamType.AHX] = true;\n        return new _stream.AsciiHexStream(stream, maybeLength);\n      }\n\n      if (name === \"CCITTFaxDecode\" || name === \"CCF\") {\n        xrefStreamStats[_util.StreamType.CCF] = true;\n        return new _ccitt_stream.CCITTFaxStream(stream, maybeLength, params);\n      }\n\n      if (name === \"RunLengthDecode\" || name === \"RL\") {\n        xrefStreamStats[_util.StreamType.RLX] = true;\n        return new _stream.RunLengthStream(stream, maybeLength);\n      }\n\n      if (name === \"JBIG2Decode\") {\n        xrefStreamStats[_util.StreamType.JBIG] = true;\n        return new _jbig2_stream.Jbig2Stream(stream, maybeLength, stream.dict, params);\n      }\n\n      (0, _util.warn)(`Filter \"${name}\" is not supported.`);\n      return stream;\n    } catch (ex) {\n      if (ex instanceof _core_utils.MissingDataException) {\n        throw ex;\n      }\n\n      (0, _util.warn)(`Invalid stream: \"${ex}\"`);\n      return new _stream.NullStream();\n    }\n  }\n\n}\n\nexports.Parser = Parser;\nconst specialChars = [1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 2, 2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n\nfunction toHexDigit(ch) {\n  if (ch >= 0x30 && ch <= 0x39) {\n    return ch & 0x0f;\n  }\n\n  if (ch >= 0x41 && ch <= 0x46 || ch >= 0x61 && ch <= 0x66) {\n    return (ch & 0x0f) + 9;\n  }\n\n  return -1;\n}\n\nclass Lexer {\n  constructor(stream, knownCommands = null) {\n    this.stream = stream;\n    this.nextChar();\n    this.strBuf = [];\n    this.knownCommands = knownCommands;\n    this._hexStringNumWarn = 0;\n    this.beginInlineImagePos = -1;\n  }\n\n  nextChar() {\n    return this.currentChar = this.stream.getByte();\n  }\n\n  peekChar() {\n    return this.stream.peekByte();\n  }\n\n  getNumber() {\n    let ch = this.currentChar;\n    let eNotation = false;\n    let divideBy = 0;\n    let sign = 0;\n\n    if (ch === 0x2d) {\n      sign = -1;\n      ch = this.nextChar();\n\n      if (ch === 0x2d) {\n        ch = this.nextChar();\n      }\n    } else if (ch === 0x2b) {\n      sign = 1;\n      ch = this.nextChar();\n    }\n\n    if (ch === 0x0a || ch === 0x0d) {\n      do {\n        ch = this.nextChar();\n      } while (ch === 0x0a || ch === 0x0d);\n    }\n\n    if (ch === 0x2e) {\n      divideBy = 10;\n      ch = this.nextChar();\n    }\n\n    if (ch < 0x30 || ch > 0x39) {\n      if (divideBy === 10 && sign === 0 && ((0, _core_utils.isWhiteSpace)(ch) || ch === -1)) {\n        (0, _util.warn)(\"Lexer.getNumber - treating a single decimal point as zero.\");\n        return 0;\n      }\n\n      throw new _util.FormatError(`Invalid number: ${String.fromCharCode(ch)} (charCode ${ch})`);\n    }\n\n    sign = sign || 1;\n    let baseValue = ch - 0x30;\n    let powerValue = 0;\n    let powerValueSign = 1;\n\n    while ((ch = this.nextChar()) >= 0) {\n      if (ch >= 0x30 && ch <= 0x39) {\n        const currentDigit = ch - 0x30;\n\n        if (eNotation) {\n          powerValue = powerValue * 10 + currentDigit;\n        } else {\n          if (divideBy !== 0) {\n            divideBy *= 10;\n          }\n\n          baseValue = baseValue * 10 + currentDigit;\n        }\n      } else if (ch === 0x2e) {\n        if (divideBy === 0) {\n          divideBy = 1;\n        } else {\n          break;\n        }\n      } else if (ch === 0x2d) {\n        (0, _util.warn)(\"Badly formatted number: minus sign in the middle\");\n      } else if (ch === 0x45 || ch === 0x65) {\n        ch = this.peekChar();\n\n        if (ch === 0x2b || ch === 0x2d) {\n          powerValueSign = ch === 0x2d ? -1 : 1;\n          this.nextChar();\n        } else if (ch < 0x30 || ch > 0x39) {\n          break;\n        }\n\n        eNotation = true;\n      } else {\n        break;\n      }\n    }\n\n    if (divideBy !== 0) {\n      baseValue /= divideBy;\n    }\n\n    if (eNotation) {\n      baseValue *= 10 ** (powerValueSign * powerValue);\n    }\n\n    return sign * baseValue;\n  }\n\n  getString() {\n    let numParen = 1;\n    let done = false;\n    const strBuf = this.strBuf;\n    strBuf.length = 0;\n    let ch = this.nextChar();\n\n    while (true) {\n      let charBuffered = false;\n\n      switch (ch | 0) {\n        case -1:\n          (0, _util.warn)(\"Unterminated string\");\n          done = true;\n          break;\n\n        case 0x28:\n          ++numParen;\n          strBuf.push(\"(\");\n          break;\n\n        case 0x29:\n          if (--numParen === 0) {\n            this.nextChar();\n            done = true;\n          } else {\n            strBuf.push(\")\");\n          }\n\n          break;\n\n        case 0x5c:\n          ch = this.nextChar();\n\n          switch (ch) {\n            case -1:\n              (0, _util.warn)(\"Unterminated string\");\n              done = true;\n              break;\n\n            case 0x6e:\n              strBuf.push(\"\\n\");\n              break;\n\n            case 0x72:\n              strBuf.push(\"\\r\");\n              break;\n\n            case 0x74:\n              strBuf.push(\"\\t\");\n              break;\n\n            case 0x62:\n              strBuf.push(\"\\b\");\n              break;\n\n            case 0x66:\n              strBuf.push(\"\\f\");\n              break;\n\n            case 0x5c:\n            case 0x28:\n            case 0x29:\n              strBuf.push(String.fromCharCode(ch));\n              break;\n\n            case 0x30:\n            case 0x31:\n            case 0x32:\n            case 0x33:\n            case 0x34:\n            case 0x35:\n            case 0x36:\n            case 0x37:\n              let x = ch & 0x0f;\n              ch = this.nextChar();\n              charBuffered = true;\n\n              if (ch >= 0x30 && ch <= 0x37) {\n                x = (x << 3) + (ch & 0x0f);\n                ch = this.nextChar();\n\n                if (ch >= 0x30 && ch <= 0x37) {\n                  charBuffered = false;\n                  x = (x << 3) + (ch & 0x0f);\n                }\n              }\n\n              strBuf.push(String.fromCharCode(x));\n              break;\n\n            case 0x0d:\n              if (this.peekChar() === 0x0a) {\n                this.nextChar();\n              }\n\n              break;\n\n            case 0x0a:\n              break;\n\n            default:\n              strBuf.push(String.fromCharCode(ch));\n              break;\n          }\n\n          break;\n\n        default:\n          strBuf.push(String.fromCharCode(ch));\n          break;\n      }\n\n      if (done) {\n        break;\n      }\n\n      if (!charBuffered) {\n        ch = this.nextChar();\n      }\n    }\n\n    return strBuf.join(\"\");\n  }\n\n  getName() {\n    let ch, previousCh;\n    const strBuf = this.strBuf;\n    strBuf.length = 0;\n\n    while ((ch = this.nextChar()) >= 0 && !specialChars[ch]) {\n      if (ch === 0x23) {\n        ch = this.nextChar();\n\n        if (specialChars[ch]) {\n          (0, _util.warn)(\"Lexer_getName: \" + \"NUMBER SIGN (#) should be followed by a hexadecimal number.\");\n          strBuf.push(\"#\");\n          break;\n        }\n\n        const x = toHexDigit(ch);\n\n        if (x !== -1) {\n          previousCh = ch;\n          ch = this.nextChar();\n          const x2 = toHexDigit(ch);\n\n          if (x2 === -1) {\n            (0, _util.warn)(`Lexer_getName: Illegal digit (${String.fromCharCode(ch)}) ` + \"in hexadecimal number.\");\n            strBuf.push(\"#\", String.fromCharCode(previousCh));\n\n            if (specialChars[ch]) {\n              break;\n            }\n\n            strBuf.push(String.fromCharCode(ch));\n            continue;\n          }\n\n          strBuf.push(String.fromCharCode(x << 4 | x2));\n        } else {\n          strBuf.push(\"#\", String.fromCharCode(ch));\n        }\n      } else {\n        strBuf.push(String.fromCharCode(ch));\n      }\n    }\n\n    if (strBuf.length > 127) {\n      (0, _util.warn)(`Name token is longer than allowed by the spec: ${strBuf.length}`);\n    }\n\n    return _primitives.Name.get(strBuf.join(\"\"));\n  }\n\n  _hexStringWarn(ch) {\n    const MAX_HEX_STRING_NUM_WARN = 5;\n\n    if (this._hexStringNumWarn++ === MAX_HEX_STRING_NUM_WARN) {\n      (0, _util.warn)(\"getHexString - ignoring additional invalid characters.\");\n      return;\n    }\n\n    if (this._hexStringNumWarn > MAX_HEX_STRING_NUM_WARN) {\n      return;\n    }\n\n    (0, _util.warn)(`getHexString - ignoring invalid character: ${ch}`);\n  }\n\n  getHexString() {\n    const strBuf = this.strBuf;\n    strBuf.length = 0;\n    let ch = this.currentChar;\n    let isFirstHex = true;\n    let firstDigit, secondDigit;\n    this._hexStringNumWarn = 0;\n\n    while (true) {\n      if (ch < 0) {\n        (0, _util.warn)(\"Unterminated hex string\");\n        break;\n      } else if (ch === 0x3e) {\n        this.nextChar();\n        break;\n      } else if (specialChars[ch] === 1) {\n        ch = this.nextChar();\n        continue;\n      } else {\n        if (isFirstHex) {\n          firstDigit = toHexDigit(ch);\n\n          if (firstDigit === -1) {\n            this._hexStringWarn(ch);\n\n            ch = this.nextChar();\n            continue;\n          }\n        } else {\n          secondDigit = toHexDigit(ch);\n\n          if (secondDigit === -1) {\n            this._hexStringWarn(ch);\n\n            ch = this.nextChar();\n            continue;\n          }\n\n          strBuf.push(String.fromCharCode(firstDigit << 4 | secondDigit));\n        }\n\n        isFirstHex = !isFirstHex;\n        ch = this.nextChar();\n      }\n    }\n\n    return strBuf.join(\"\");\n  }\n\n  getObj() {\n    let comment = false;\n    let ch = this.currentChar;\n\n    while (true) {\n      if (ch < 0) {\n        return _primitives.EOF;\n      }\n\n      if (comment) {\n        if (ch === 0x0a || ch === 0x0d) {\n          comment = false;\n        }\n      } else if (ch === 0x25) {\n        comment = true;\n      } else if (specialChars[ch] !== 1) {\n        break;\n      }\n\n      ch = this.nextChar();\n    }\n\n    switch (ch | 0) {\n      case 0x30:\n      case 0x31:\n      case 0x32:\n      case 0x33:\n      case 0x34:\n      case 0x35:\n      case 0x36:\n      case 0x37:\n      case 0x38:\n      case 0x39:\n      case 0x2b:\n      case 0x2d:\n      case 0x2e:\n        return this.getNumber();\n\n      case 0x28:\n        return this.getString();\n\n      case 0x2f:\n        return this.getName();\n\n      case 0x5b:\n        this.nextChar();\n        return _primitives.Cmd.get(\"[\");\n\n      case 0x5d:\n        this.nextChar();\n        return _primitives.Cmd.get(\"]\");\n\n      case 0x3c:\n        ch = this.nextChar();\n\n        if (ch === 0x3c) {\n          this.nextChar();\n          return _primitives.Cmd.get(\"<<\");\n        }\n\n        return this.getHexString();\n\n      case 0x3e:\n        ch = this.nextChar();\n\n        if (ch === 0x3e) {\n          this.nextChar();\n          return _primitives.Cmd.get(\">>\");\n        }\n\n        return _primitives.Cmd.get(\">\");\n\n      case 0x7b:\n        this.nextChar();\n        return _primitives.Cmd.get(\"{\");\n\n      case 0x7d:\n        this.nextChar();\n        return _primitives.Cmd.get(\"}\");\n\n      case 0x29:\n        this.nextChar();\n        throw new _util.FormatError(`Illegal character: ${ch}`);\n    }\n\n    let str = String.fromCharCode(ch);\n    const knownCommands = this.knownCommands;\n    let knownCommandFound = knownCommands && knownCommands[str] !== undefined;\n\n    while ((ch = this.nextChar()) >= 0 && !specialChars[ch]) {\n      const possibleCommand = str + String.fromCharCode(ch);\n\n      if (knownCommandFound && knownCommands[possibleCommand] === undefined) {\n        break;\n      }\n\n      if (str.length === 128) {\n        throw new _util.FormatError(`Command token too long: ${str.length}`);\n      }\n\n      str = possibleCommand;\n      knownCommandFound = knownCommands && knownCommands[str] !== undefined;\n    }\n\n    if (str === \"true\") {\n      return true;\n    }\n\n    if (str === \"false\") {\n      return false;\n    }\n\n    if (str === \"null\") {\n      return null;\n    }\n\n    if (str === \"BI\") {\n      this.beginInlineImagePos = this.stream.pos;\n    }\n\n    return _primitives.Cmd.get(str);\n  }\n\n  peekObj() {\n    const streamPos = this.stream.pos,\n          currentChar = this.currentChar,\n          beginInlineImagePos = this.beginInlineImagePos;\n    let nextObj;\n\n    try {\n      nextObj = this.getObj();\n    } catch (ex) {\n      if (ex instanceof _core_utils.MissingDataException) {\n        throw ex;\n      }\n\n      (0, _util.warn)(`peekObj: ${ex}`);\n    }\n\n    this.stream.pos = streamPos;\n    this.currentChar = currentChar;\n    this.beginInlineImagePos = beginInlineImagePos;\n    return nextObj;\n  }\n\n  skipToNextLine() {\n    let ch = this.currentChar;\n\n    while (ch >= 0) {\n      if (ch === 0x0d) {\n        ch = this.nextChar();\n\n        if (ch === 0x0a) {\n          this.nextChar();\n        }\n\n        break;\n      } else if (ch === 0x0a) {\n        this.nextChar();\n        break;\n      }\n\n      ch = this.nextChar();\n    }\n  }\n\n}\n\nexports.Lexer = Lexer;\n\nclass Linearization {\n  static create(stream) {\n    function getInt(linDict, name, allowZeroValue = false) {\n      const obj = linDict.get(name);\n\n      if (Number.isInteger(obj) && (allowZeroValue ? obj >= 0 : obj > 0)) {\n        return obj;\n      }\n\n      throw new Error(`The \"${name}\" parameter in the linearization ` + \"dictionary is invalid.\");\n    }\n\n    function getHints(linDict) {\n      const hints = linDict.get(\"H\");\n      let hintsLength;\n\n      if (Array.isArray(hints) && ((hintsLength = hints.length) === 2 || hintsLength === 4)) {\n        for (let index = 0; index < hintsLength; index++) {\n          const hint = hints[index];\n\n          if (!(Number.isInteger(hint) && hint > 0)) {\n            throw new Error(`Hint (${index}) in the linearization dictionary is invalid.`);\n          }\n        }\n\n        return hints;\n      }\n\n      throw new Error(\"Hint array in the linearization dictionary is invalid.\");\n    }\n\n    const parser = new Parser({\n      lexer: new Lexer(stream),\n      xref: null\n    });\n    const obj1 = parser.getObj();\n    const obj2 = parser.getObj();\n    const obj3 = parser.getObj();\n    const linDict = parser.getObj();\n    let obj, length;\n\n    if (!(Number.isInteger(obj1) && Number.isInteger(obj2) && (0, _primitives.isCmd)(obj3, \"obj\") && (0, _primitives.isDict)(linDict) && (0, _util.isNum)(obj = linDict.get(\"Linearized\")) && obj > 0)) {\n      return null;\n    } else if ((length = getInt(linDict, \"L\")) !== stream.length) {\n      throw new Error('The \"L\" parameter in the linearization dictionary ' + \"does not equal the stream length.\");\n    }\n\n    return {\n      length,\n      hints: getHints(linDict),\n      objectNumberFirst: getInt(linDict, \"O\"),\n      endFirst: getInt(linDict, \"E\"),\n      numPages: getInt(linDict, \"N\"),\n      mainXRefEntriesOffset: getInt(linDict, \"T\"),\n      pageFirst: linDict.has(\"P\") ? getInt(linDict, \"P\", true) : 0\n    };\n  }\n\n}\n\nexports.Linearization = Linearization;\n\n/***/ }),\n/* 12 */\n/***/ ((__unused_webpack_module, exports, __w_pdfjs_require__) => {\n\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.StringStream = exports.StreamsSequenceStream = exports.Stream = exports.RunLengthStream = exports.PredictorStream = exports.NullStream = exports.LZWStream = exports.FlateStream = exports.DecryptStream = exports.DecodeStream = exports.AsciiHexStream = exports.Ascii85Stream = void 0;\n\nvar _util = __w_pdfjs_require__(2);\n\nvar _primitives = __w_pdfjs_require__(5);\n\nvar _core_utils = __w_pdfjs_require__(8);\n\nvar Stream = function StreamClosure() {\n  function Stream(arrayBuffer, start, length, dict) {\n    this.bytes = arrayBuffer instanceof Uint8Array ? arrayBuffer : new Uint8Array(arrayBuffer);\n    this.start = start || 0;\n    this.pos = this.start;\n    this.end = start + length || this.bytes.length;\n    this.dict = dict;\n  }\n\n  Stream.prototype = {\n    get length() {\n      return this.end - this.start;\n    },\n\n    get isEmpty() {\n      return this.length === 0;\n    },\n\n    getByte: function Stream_getByte() {\n      if (this.pos >= this.end) {\n        return -1;\n      }\n\n      return this.bytes[this.pos++];\n    },\n    getUint16: function Stream_getUint16() {\n      var b0 = this.getByte();\n      var b1 = this.getByte();\n\n      if (b0 === -1 || b1 === -1) {\n        return -1;\n      }\n\n      return (b0 << 8) + b1;\n    },\n    getInt32: function Stream_getInt32() {\n      var b0 = this.getByte();\n      var b1 = this.getByte();\n      var b2 = this.getByte();\n      var b3 = this.getByte();\n      return (b0 << 24) + (b1 << 16) + (b2 << 8) + b3;\n    },\n\n    getBytes(length, forceClamped = false) {\n      var bytes = this.bytes;\n      var pos = this.pos;\n      var strEnd = this.end;\n\n      if (!length) {\n        const subarray = bytes.subarray(pos, strEnd);\n        return forceClamped ? new Uint8ClampedArray(subarray) : subarray;\n      }\n\n      var end = pos + length;\n\n      if (end > strEnd) {\n        end = strEnd;\n      }\n\n      this.pos = end;\n      const subarray = bytes.subarray(pos, end);\n      return forceClamped ? new Uint8ClampedArray(subarray) : subarray;\n    },\n\n    peekByte: function Stream_peekByte() {\n      var peekedByte = this.getByte();\n\n      if (peekedByte !== -1) {\n        this.pos--;\n      }\n\n      return peekedByte;\n    },\n\n    peekBytes(length, forceClamped = false) {\n      var bytes = this.getBytes(length, forceClamped);\n      this.pos -= bytes.length;\n      return bytes;\n    },\n\n    getByteRange(begin, end) {\n      if (begin < 0) {\n        begin = 0;\n      }\n\n      if (end > this.end) {\n        end = this.end;\n      }\n\n      return this.bytes.subarray(begin, end);\n    },\n\n    skip: function Stream_skip(n) {\n      if (!n) {\n        n = 1;\n      }\n\n      this.pos += n;\n    },\n    reset: function Stream_reset() {\n      this.pos = this.start;\n    },\n    moveStart: function Stream_moveStart() {\n      this.start = this.pos;\n    },\n    makeSubStream: function Stream_makeSubStream(start, length, dict) {\n      return new Stream(this.bytes.buffer, start, length, dict);\n    }\n  };\n  return Stream;\n}();\n\nexports.Stream = Stream;\n\nvar StringStream = function StringStreamClosure() {\n  function StringStream(str) {\n    const bytes = (0, _util.stringToBytes)(str);\n    Stream.call(this, bytes);\n  }\n\n  StringStream.prototype = Stream.prototype;\n  return StringStream;\n}();\n\nexports.StringStream = StringStream;\n\nvar DecodeStream = function DecodeStreamClosure() {\n  var emptyBuffer = new Uint8Array(0);\n\n  function DecodeStream(maybeMinBufferLength) {\n    this._rawMinBufferLength = maybeMinBufferLength || 0;\n    this.pos = 0;\n    this.bufferLength = 0;\n    this.eof = false;\n    this.buffer = emptyBuffer;\n    this.minBufferLength = 512;\n\n    if (maybeMinBufferLength) {\n      while (this.minBufferLength < maybeMinBufferLength) {\n        this.minBufferLength *= 2;\n      }\n    }\n  }\n\n  DecodeStream.prototype = {\n    get length() {\n      (0, _util.unreachable)(\"Should not access DecodeStream.length\");\n    },\n\n    get isEmpty() {\n      while (!this.eof && this.bufferLength === 0) {\n        this.readBlock();\n      }\n\n      return this.bufferLength === 0;\n    },\n\n    ensureBuffer: function DecodeStream_ensureBuffer(requested) {\n      var buffer = this.buffer;\n\n      if (requested <= buffer.byteLength) {\n        return buffer;\n      }\n\n      var size = this.minBufferLength;\n\n      while (size < requested) {\n        size *= 2;\n      }\n\n      var buffer2 = new Uint8Array(size);\n      buffer2.set(buffer);\n      return this.buffer = buffer2;\n    },\n    getByte: function DecodeStream_getByte() {\n      var pos = this.pos;\n\n      while (this.bufferLength <= pos) {\n        if (this.eof) {\n          return -1;\n        }\n\n        this.readBlock();\n      }\n\n      return this.buffer[this.pos++];\n    },\n    getUint16: function DecodeStream_getUint16() {\n      var b0 = this.getByte();\n      var b1 = this.getByte();\n\n      if (b0 === -1 || b1 === -1) {\n        return -1;\n      }\n\n      return (b0 << 8) + b1;\n    },\n    getInt32: function DecodeStream_getInt32() {\n      var b0 = this.getByte();\n      var b1 = this.getByte();\n      var b2 = this.getByte();\n      var b3 = this.getByte();\n      return (b0 << 24) + (b1 << 16) + (b2 << 8) + b3;\n    },\n\n    getBytes(length, forceClamped = false) {\n      var end,\n          pos = this.pos;\n\n      if (length) {\n        this.ensureBuffer(pos + length);\n        end = pos + length;\n\n        while (!this.eof && this.bufferLength < end) {\n          this.readBlock();\n        }\n\n        var bufEnd = this.bufferLength;\n\n        if (end > bufEnd) {\n          end = bufEnd;\n        }\n      } else {\n        while (!this.eof) {\n          this.readBlock();\n        }\n\n        end = this.bufferLength;\n      }\n\n      this.pos = end;\n      const subarray = this.buffer.subarray(pos, end);\n      return forceClamped && !(subarray instanceof Uint8ClampedArray) ? new Uint8ClampedArray(subarray) : subarray;\n    },\n\n    peekByte: function DecodeStream_peekByte() {\n      var peekedByte = this.getByte();\n\n      if (peekedByte !== -1) {\n        this.pos--;\n      }\n\n      return peekedByte;\n    },\n\n    peekBytes(length, forceClamped = false) {\n      var bytes = this.getBytes(length, forceClamped);\n      this.pos -= bytes.length;\n      return bytes;\n    },\n\n    makeSubStream: function DecodeStream_makeSubStream(start, length, dict) {\n      var end = start + length;\n\n      while (this.bufferLength <= end && !this.eof) {\n        this.readBlock();\n      }\n\n      return new Stream(this.buffer, start, length, dict);\n    },\n\n    getByteRange(begin, end) {\n      (0, _util.unreachable)(\"Should not call DecodeStream.getByteRange\");\n    },\n\n    skip: function DecodeStream_skip(n) {\n      if (!n) {\n        n = 1;\n      }\n\n      this.pos += n;\n    },\n    reset: function DecodeStream_reset() {\n      this.pos = 0;\n    },\n    getBaseStreams: function DecodeStream_getBaseStreams() {\n      if (this.str && this.str.getBaseStreams) {\n        return this.str.getBaseStreams();\n      }\n\n      return [];\n    }\n  };\n  return DecodeStream;\n}();\n\nexports.DecodeStream = DecodeStream;\n\nvar StreamsSequenceStream = function StreamsSequenceStreamClosure() {\n  function StreamsSequenceStream(streams) {\n    this.streams = streams;\n    let maybeLength = 0;\n\n    for (let i = 0, ii = streams.length; i < ii; i++) {\n      const stream = streams[i];\n\n      if (stream instanceof DecodeStream) {\n        maybeLength += stream._rawMinBufferLength;\n      } else {\n        maybeLength += stream.length;\n      }\n    }\n\n    DecodeStream.call(this, maybeLength);\n  }\n\n  StreamsSequenceStream.prototype = Object.create(DecodeStream.prototype);\n\n  StreamsSequenceStream.prototype.readBlock = function streamSequenceStreamReadBlock() {\n    var streams = this.streams;\n\n    if (streams.length === 0) {\n      this.eof = true;\n      return;\n    }\n\n    var stream = streams.shift();\n    var chunk = stream.getBytes();\n    var bufferLength = this.bufferLength;\n    var newLength = bufferLength + chunk.length;\n    var buffer = this.ensureBuffer(newLength);\n    buffer.set(chunk, bufferLength);\n    this.bufferLength = newLength;\n  };\n\n  StreamsSequenceStream.prototype.getBaseStreams = function StreamsSequenceStream_getBaseStreams() {\n    var baseStreams = [];\n\n    for (var i = 0, ii = this.streams.length; i < ii; i++) {\n      var stream = this.streams[i];\n\n      if (stream.getBaseStreams) {\n        baseStreams.push(...stream.getBaseStreams());\n      }\n    }\n\n    return baseStreams;\n  };\n\n  return StreamsSequenceStream;\n}();\n\nexports.StreamsSequenceStream = StreamsSequenceStream;\n\nvar FlateStream = function FlateStreamClosure() {\n  var codeLenCodeMap = new Int32Array([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);\n  var lengthDecode = new Int32Array([0x00003, 0x00004, 0x00005, 0x00006, 0x00007, 0x00008, 0x00009, 0x0000a, 0x1000b, 0x1000d, 0x1000f, 0x10011, 0x20013, 0x20017, 0x2001b, 0x2001f, 0x30023, 0x3002b, 0x30033, 0x3003b, 0x40043, 0x40053, 0x40063, 0x40073, 0x50083, 0x500a3, 0x500c3, 0x500e3, 0x00102, 0x00102, 0x00102]);\n  var distDecode = new Int32Array([0x00001, 0x00002, 0x00003, 0x00004, 0x10005, 0x10007, 0x20009, 0x2000d, 0x30011, 0x30019, 0x40021, 0x40031, 0x50041, 0x50061, 0x60081, 0x600c1, 0x70101, 0x70181, 0x80201, 0x80301, 0x90401, 0x90601, 0xa0801, 0xa0c01, 0xb1001, 0xb1801, 0xc2001, 0xc3001, 0xd4001, 0xd6001]);\n  var fixedLitCodeTab = [new Int32Array([0x70100, 0x80050, 0x80010, 0x80118, 0x70110, 0x80070, 0x80030, 0x900c0, 0x70108, 0x80060, 0x80020, 0x900a0, 0x80000, 0x80080, 0x80040, 0x900e0, 0x70104, 0x80058, 0x80018, 0x90090, 0x70114, 0x80078, 0x80038, 0x900d0, 0x7010c, 0x80068, 0x80028, 0x900b0, 0x80008, 0x80088, 0x80048, 0x900f0, 0x70102, 0x80054, 0x80014, 0x8011c, 0x70112, 0x80074, 0x80034, 0x900c8, 0x7010a, 0x80064, 0x80024, 0x900a8, 0x80004, 0x80084, 0x80044, 0x900e8, 0x70106, 0x8005c, 0x8001c, 0x90098, 0x70116, 0x8007c, 0x8003c, 0x900d8, 0x7010e, 0x8006c, 0x8002c, 0x900b8, 0x8000c, 0x8008c, 0x8004c, 0x900f8, 0x70101, 0x80052, 0x80012, 0x8011a, 0x70111, 0x80072, 0x80032, 0x900c4, 0x70109, 0x80062, 0x80022, 0x900a4, 0x80002, 0x80082, 0x80042, 0x900e4, 0x70105, 0x8005a, 0x8001a, 0x90094, 0x70115, 0x8007a, 0x8003a, 0x900d4, 0x7010d, 0x8006a, 0x8002a, 0x900b4, 0x8000a, 0x8008a, 0x8004a, 0x900f4, 0x70103, 0x80056, 0x80016, 0x8011e, 0x70113, 0x80076, 0x80036, 0x900cc, 0x7010b, 0x80066, 0x80026, 0x900ac, 0x80006, 0x80086, 0x80046, 0x900ec, 0x70107, 0x8005e, 0x8001e, 0x9009c, 0x70117, 0x8007e, 0x8003e, 0x900dc, 0x7010f, 0x8006e, 0x8002e, 0x900bc, 0x8000e, 0x8008e, 0x8004e, 0x900fc, 0x70100, 0x80051, 0x80011, 0x80119, 0x70110, 0x80071, 0x80031, 0x900c2, 0x70108, 0x80061, 0x80021, 0x900a2, 0x80001, 0x80081, 0x80041, 0x900e2, 0x70104, 0x80059, 0x80019, 0x90092, 0x70114, 0x80079, 0x80039, 0x900d2, 0x7010c, 0x80069, 0x80029, 0x900b2, 0x80009, 0x80089, 0x80049, 0x900f2, 0x70102, 0x80055, 0x80015, 0x8011d, 0x70112, 0x80075, 0x80035, 0x900ca, 0x7010a, 0x80065, 0x80025, 0x900aa, 0x80005, 0x80085, 0x80045, 0x900ea, 0x70106, 0x8005d, 0x8001d, 0x9009a, 0x70116, 0x8007d, 0x8003d, 0x900da, 0x7010e, 0x8006d, 0x8002d, 0x900ba, 0x8000d, 0x8008d, 0x8004d, 0x900fa, 0x70101, 0x80053, 0x80013, 0x8011b, 0x70111, 0x80073, 0x80033, 0x900c6, 0x70109, 0x80063, 0x80023, 0x900a6, 0x80003, 0x80083, 0x80043, 0x900e6, 0x70105, 0x8005b, 0x8001b, 0x90096, 0x70115, 0x8007b, 0x8003b, 0x900d6, 0x7010d, 0x8006b, 0x8002b, 0x900b6, 0x8000b, 0x8008b, 0x8004b, 0x900f6, 0x70103, 0x80057, 0x80017, 0x8011f, 0x70113, 0x80077, 0x80037, 0x900ce, 0x7010b, 0x80067, 0x80027, 0x900ae, 0x80007, 0x80087, 0x80047, 0x900ee, 0x70107, 0x8005f, 0x8001f, 0x9009e, 0x70117, 0x8007f, 0x8003f, 0x900de, 0x7010f, 0x8006f, 0x8002f, 0x900be, 0x8000f, 0x8008f, 0x8004f, 0x900fe, 0x70100, 0x80050, 0x80010, 0x80118, 0x70110, 0x80070, 0x80030, 0x900c1, 0x70108, 0x80060, 0x80020, 0x900a1, 0x80000, 0x80080, 0x80040, 0x900e1, 0x70104, 0x80058, 0x80018, 0x90091, 0x70114, 0x80078, 0x80038, 0x900d1, 0x7010c, 0x80068, 0x80028, 0x900b1, 0x80008, 0x80088, 0x80048, 0x900f1, 0x70102, 0x80054, 0x80014, 0x8011c, 0x70112, 0x80074, 0x80034, 0x900c9, 0x7010a, 0x80064, 0x80024, 0x900a9, 0x80004, 0x80084, 0x80044, 0x900e9, 0x70106, 0x8005c, 0x8001c, 0x90099, 0x70116, 0x8007c, 0x8003c, 0x900d9, 0x7010e, 0x8006c, 0x8002c, 0x900b9, 0x8000c, 0x8008c, 0x8004c, 0x900f9, 0x70101, 0x80052, 0x80012, 0x8011a, 0x70111, 0x80072, 0x80032, 0x900c5, 0x70109, 0x80062, 0x80022, 0x900a5, 0x80002, 0x80082, 0x80042, 0x900e5, 0x70105, 0x8005a, 0x8001a, 0x90095, 0x70115, 0x8007a, 0x8003a, 0x900d5, 0x7010d, 0x8006a, 0x8002a, 0x900b5, 0x8000a, 0x8008a, 0x8004a, 0x900f5, 0x70103, 0x80056, 0x80016, 0x8011e, 0x70113, 0x80076, 0x80036, 0x900cd, 0x7010b, 0x80066, 0x80026, 0x900ad, 0x80006, 0x80086, 0x80046, 0x900ed, 0x70107, 0x8005e, 0x8001e, 0x9009d, 0x70117, 0x8007e, 0x8003e, 0x900dd, 0x7010f, 0x8006e, 0x8002e, 0x900bd, 0x8000e, 0x8008e, 0x8004e, 0x900fd, 0x70100, 0x80051, 0x80011, 0x80119, 0x70110, 0x80071, 0x80031, 0x900c3, 0x70108, 0x80061, 0x80021, 0x900a3, 0x80001, 0x80081, 0x80041, 0x900e3, 0x70104, 0x80059, 0x80019, 0x90093, 0x70114, 0x80079, 0x80039, 0x900d3, 0x7010c, 0x80069, 0x80029, 0x900b3, 0x80009, 0x80089, 0x80049, 0x900f3, 0x70102, 0x80055, 0x80015, 0x8011d, 0x70112, 0x80075, 0x80035, 0x900cb, 0x7010a, 0x80065, 0x80025, 0x900ab, 0x80005, 0x80085, 0x80045, 0x900eb, 0x70106, 0x8005d, 0x8001d, 0x9009b, 0x70116, 0x8007d, 0x8003d, 0x900db, 0x7010e, 0x8006d, 0x8002d, 0x900bb, 0x8000d, 0x8008d, 0x8004d, 0x900fb, 0x70101, 0x80053, 0x80013, 0x8011b, 0x70111, 0x80073, 0x80033, 0x900c7, 0x70109, 0x80063, 0x80023, 0x900a7, 0x80003, 0x80083, 0x80043, 0x900e7, 0x70105, 0x8005b, 0x8001b, 0x90097, 0x70115, 0x8007b, 0x8003b, 0x900d7, 0x7010d, 0x8006b, 0x8002b, 0x900b7, 0x8000b, 0x8008b, 0x8004b, 0x900f7, 0x70103, 0x80057, 0x80017, 0x8011f, 0x70113, 0x80077, 0x80037, 0x900cf, 0x7010b, 0x80067, 0x80027, 0x900af, 0x80007, 0x80087, 0x80047, 0x900ef, 0x70107, 0x8005f, 0x8001f, 0x9009f, 0x70117, 0x8007f, 0x8003f, 0x900df, 0x7010f, 0x8006f, 0x8002f, 0x900bf, 0x8000f, 0x8008f, 0x8004f, 0x900ff]), 9];\n  var fixedDistCodeTab = [new Int32Array([0x50000, 0x50010, 0x50008, 0x50018, 0x50004, 0x50014, 0x5000c, 0x5001c, 0x50002, 0x50012, 0x5000a, 0x5001a, 0x50006, 0x50016, 0x5000e, 0x00000, 0x50001, 0x50011, 0x50009, 0x50019, 0x50005, 0x50015, 0x5000d, 0x5001d, 0x50003, 0x50013, 0x5000b, 0x5001b, 0x50007, 0x50017, 0x5000f, 0x00000]), 5];\n\n  function FlateStream(str, maybeLength) {\n    this.str = str;\n    this.dict = str.dict;\n    var cmf = str.getByte();\n    var flg = str.getByte();\n\n    if (cmf === -1 || flg === -1) {\n      throw new _util.FormatError(`Invalid header in flate stream: ${cmf}, ${flg}`);\n    }\n\n    if ((cmf & 0x0f) !== 0x08) {\n      throw new _util.FormatError(`Unknown compression method in flate stream: ${cmf}, ${flg}`);\n    }\n\n    if (((cmf << 8) + flg) % 31 !== 0) {\n      throw new _util.FormatError(`Bad FCHECK in flate stream: ${cmf}, ${flg}`);\n    }\n\n    if (flg & 0x20) {\n      throw new _util.FormatError(`FDICT bit set in flate stream: ${cmf}, ${flg}`);\n    }\n\n    this.codeSize = 0;\n    this.codeBuf = 0;\n    DecodeStream.call(this, maybeLength);\n  }\n\n  FlateStream.prototype = Object.create(DecodeStream.prototype);\n\n  FlateStream.prototype.getBits = function FlateStream_getBits(bits) {\n    var str = this.str;\n    var codeSize = this.codeSize;\n    var codeBuf = this.codeBuf;\n    var b;\n\n    while (codeSize < bits) {\n      if ((b = str.getByte()) === -1) {\n        throw new _util.FormatError(\"Bad encoding in flate stream\");\n      }\n\n      codeBuf |= b << codeSize;\n      codeSize += 8;\n    }\n\n    b = codeBuf & (1 << bits) - 1;\n    this.codeBuf = codeBuf >> bits;\n    this.codeSize = codeSize -= bits;\n    return b;\n  };\n\n  FlateStream.prototype.getCode = function FlateStream_getCode(table) {\n    var str = this.str;\n    var codes = table[0];\n    var maxLen = table[1];\n    var codeSize = this.codeSize;\n    var codeBuf = this.codeBuf;\n    var b;\n\n    while (codeSize < maxLen) {\n      if ((b = str.getByte()) === -1) {\n        break;\n      }\n\n      codeBuf |= b << codeSize;\n      codeSize += 8;\n    }\n\n    var code = codes[codeBuf & (1 << maxLen) - 1];\n    var codeLen = code >> 16;\n    var codeVal = code & 0xffff;\n\n    if (codeLen < 1 || codeSize < codeLen) {\n      throw new _util.FormatError(\"Bad encoding in flate stream\");\n    }\n\n    this.codeBuf = codeBuf >> codeLen;\n    this.codeSize = codeSize - codeLen;\n    return codeVal;\n  };\n\n  FlateStream.prototype.generateHuffmanTable = function flateStreamGenerateHuffmanTable(lengths) {\n    var n = lengths.length;\n    var maxLen = 0;\n    var i;\n\n    for (i = 0; i < n; ++i) {\n      if (lengths[i] > maxLen) {\n        maxLen = lengths[i];\n      }\n    }\n\n    var size = 1 << maxLen;\n    var codes = new Int32Array(size);\n\n    for (var len = 1, code = 0, skip = 2; len <= maxLen; ++len, code <<= 1, skip <<= 1) {\n      for (var val = 0; val < n; ++val) {\n        if (lengths[val] === len) {\n          var code2 = 0;\n          var t = code;\n\n          for (i = 0; i < len; ++i) {\n            code2 = code2 << 1 | t & 1;\n            t >>= 1;\n          }\n\n          for (i = code2; i < size; i += skip) {\n            codes[i] = len << 16 | val;\n          }\n\n          ++code;\n        }\n      }\n    }\n\n    return [codes, maxLen];\n  };\n\n  FlateStream.prototype.readBlock = function FlateStream_readBlock() {\n    var buffer, len;\n    var str = this.str;\n    var hdr = this.getBits(3);\n\n    if (hdr & 1) {\n      this.eof = true;\n    }\n\n    hdr >>= 1;\n\n    if (hdr === 0) {\n      var b;\n\n      if ((b = str.getByte()) === -1) {\n        throw new _util.FormatError(\"Bad block header in flate stream\");\n      }\n\n      var blockLen = b;\n\n      if ((b = str.getByte()) === -1) {\n        throw new _util.FormatError(\"Bad block header in flate stream\");\n      }\n\n      blockLen |= b << 8;\n\n      if ((b = str.getByte()) === -1) {\n        throw new _util.FormatError(\"Bad block header in flate stream\");\n      }\n\n      var check = b;\n\n      if ((b = str.getByte()) === -1) {\n        throw new _util.FormatError(\"Bad block header in flate stream\");\n      }\n\n      check |= b << 8;\n\n      if (check !== (~blockLen & 0xffff) && (blockLen !== 0 || check !== 0)) {\n        throw new _util.FormatError(\"Bad uncompressed block length in flate stream\");\n      }\n\n      this.codeBuf = 0;\n      this.codeSize = 0;\n      const bufferLength = this.bufferLength,\n            end = bufferLength + blockLen;\n      buffer = this.ensureBuffer(end);\n      this.bufferLength = end;\n\n      if (blockLen === 0) {\n        if (str.peekByte() === -1) {\n          this.eof = true;\n        }\n      } else {\n        const block = str.getBytes(blockLen);\n        buffer.set(block, bufferLength);\n\n        if (block.length < blockLen) {\n          this.eof = true;\n        }\n      }\n\n      return;\n    }\n\n    var litCodeTable;\n    var distCodeTable;\n\n    if (hdr === 1) {\n      litCodeTable = fixedLitCodeTab;\n      distCodeTable = fixedDistCodeTab;\n    } else if (hdr === 2) {\n      var numLitCodes = this.getBits(5) + 257;\n      var numDistCodes = this.getBits(5) + 1;\n      var numCodeLenCodes = this.getBits(4) + 4;\n      var codeLenCodeLengths = new Uint8Array(codeLenCodeMap.length);\n      var i;\n\n      for (i = 0; i < numCodeLenCodes; ++i) {\n        codeLenCodeLengths[codeLenCodeMap[i]] = this.getBits(3);\n      }\n\n      var codeLenCodeTab = this.generateHuffmanTable(codeLenCodeLengths);\n      len = 0;\n      i = 0;\n      var codes = numLitCodes + numDistCodes;\n      var codeLengths = new Uint8Array(codes);\n      var bitsLength, bitsOffset, what;\n\n      while (i < codes) {\n        var code = this.getCode(codeLenCodeTab);\n\n        if (code === 16) {\n          bitsLength = 2;\n          bitsOffset = 3;\n          what = len;\n        } else if (code === 17) {\n          bitsLength = 3;\n          bitsOffset = 3;\n          what = len = 0;\n        } else if (code === 18) {\n          bitsLength = 7;\n          bitsOffset = 11;\n          what = len = 0;\n        } else {\n          codeLengths[i++] = len = code;\n          continue;\n        }\n\n        var repeatLength = this.getBits(bitsLength) + bitsOffset;\n\n        while (repeatLength-- > 0) {\n          codeLengths[i++] = what;\n        }\n      }\n\n      litCodeTable = this.generateHuffmanTable(codeLengths.subarray(0, numLitCodes));\n      distCodeTable = this.generateHuffmanTable(codeLengths.subarray(numLitCodes, codes));\n    } else {\n      throw new _util.FormatError(\"Unknown block type in flate stream\");\n    }\n\n    buffer = this.buffer;\n    var limit = buffer ? buffer.length : 0;\n    var pos = this.bufferLength;\n\n    while (true) {\n      var code1 = this.getCode(litCodeTable);\n\n      if (code1 < 256) {\n        if (pos + 1 >= limit) {\n          buffer = this.ensureBuffer(pos + 1);\n          limit = buffer.length;\n        }\n\n        buffer[pos++] = code1;\n        continue;\n      }\n\n      if (code1 === 256) {\n        this.bufferLength = pos;\n        return;\n      }\n\n      code1 -= 257;\n      code1 = lengthDecode[code1];\n      var code2 = code1 >> 16;\n\n      if (code2 > 0) {\n        code2 = this.getBits(code2);\n      }\n\n      len = (code1 & 0xffff) + code2;\n      code1 = this.getCode(distCodeTable);\n      code1 = distDecode[code1];\n      code2 = code1 >> 16;\n\n      if (code2 > 0) {\n        code2 = this.getBits(code2);\n      }\n\n      var dist = (code1 & 0xffff) + code2;\n\n      if (pos + len >= limit) {\n        buffer = this.ensureBuffer(pos + len);\n        limit = buffer.length;\n      }\n\n      for (var k = 0; k < len; ++k, ++pos) {\n        buffer[pos] = buffer[pos - dist];\n      }\n    }\n  };\n\n  return FlateStream;\n}();\n\nexports.FlateStream = FlateStream;\n\nvar PredictorStream = function PredictorStreamClosure() {\n  function PredictorStream(str, maybeLength, params) {\n    if (!(0, _primitives.isDict)(params)) {\n      return str;\n    }\n\n    var predictor = this.predictor = params.get(\"Predictor\") || 1;\n\n    if (predictor <= 1) {\n      return str;\n    }\n\n    if (predictor !== 2 && (predictor < 10 || predictor > 15)) {\n      throw new _util.FormatError(`Unsupported predictor: ${predictor}`);\n    }\n\n    if (predictor === 2) {\n      this.readBlock = this.readBlockTiff;\n    } else {\n      this.readBlock = this.readBlockPng;\n    }\n\n    this.str = str;\n    this.dict = str.dict;\n    var colors = this.colors = params.get(\"Colors\") || 1;\n    var bits = this.bits = params.get(\"BitsPerComponent\") || 8;\n    var columns = this.columns = params.get(\"Columns\") || 1;\n    this.pixBytes = colors * bits + 7 >> 3;\n    this.rowBytes = columns * colors * bits + 7 >> 3;\n    DecodeStream.call(this, maybeLength);\n    return this;\n  }\n\n  PredictorStream.prototype = Object.create(DecodeStream.prototype);\n\n  PredictorStream.prototype.readBlockTiff = function predictorStreamReadBlockTiff() {\n    var rowBytes = this.rowBytes;\n    var bufferLength = this.bufferLength;\n    var buffer = this.ensureBuffer(bufferLength + rowBytes);\n    var bits = this.bits;\n    var colors = this.colors;\n    var rawBytes = this.str.getBytes(rowBytes);\n    this.eof = !rawBytes.length;\n\n    if (this.eof) {\n      return;\n    }\n\n    var inbuf = 0,\n        outbuf = 0;\n    var inbits = 0,\n        outbits = 0;\n    var pos = bufferLength;\n    var i;\n\n    if (bits === 1 && colors === 1) {\n      for (i = 0; i < rowBytes; ++i) {\n        var c = rawBytes[i] ^ inbuf;\n        c ^= c >> 1;\n        c ^= c >> 2;\n        c ^= c >> 4;\n        inbuf = (c & 1) << 7;\n        buffer[pos++] = c;\n      }\n    } else if (bits === 8) {\n      for (i = 0; i < colors; ++i) {\n        buffer[pos++] = rawBytes[i];\n      }\n\n      for (; i < rowBytes; ++i) {\n        buffer[pos] = buffer[pos - colors] + rawBytes[i];\n        pos++;\n      }\n    } else if (bits === 16) {\n      var bytesPerPixel = colors * 2;\n\n      for (i = 0; i < bytesPerPixel; ++i) {\n        buffer[pos++] = rawBytes[i];\n      }\n\n      for (; i < rowBytes; i += 2) {\n        var sum = ((rawBytes[i] & 0xff) << 8) + (rawBytes[i + 1] & 0xff) + ((buffer[pos - bytesPerPixel] & 0xff) << 8) + (buffer[pos - bytesPerPixel + 1] & 0xff);\n        buffer[pos++] = sum >> 8 & 0xff;\n        buffer[pos++] = sum & 0xff;\n      }\n    } else {\n      var compArray = new Uint8Array(colors + 1);\n      var bitMask = (1 << bits) - 1;\n      var j = 0,\n          k = bufferLength;\n      var columns = this.columns;\n\n      for (i = 0; i < columns; ++i) {\n        for (var kk = 0; kk < colors; ++kk) {\n          if (inbits < bits) {\n            inbuf = inbuf << 8 | rawBytes[j++] & 0xff;\n            inbits += 8;\n          }\n\n          compArray[kk] = compArray[kk] + (inbuf >> inbits - bits) & bitMask;\n          inbits -= bits;\n          outbuf = outbuf << bits | compArray[kk];\n          outbits += bits;\n\n          if (outbits >= 8) {\n            buffer[k++] = outbuf >> outbits - 8 & 0xff;\n            outbits -= 8;\n          }\n        }\n      }\n\n      if (outbits > 0) {\n        buffer[k++] = (outbuf << 8 - outbits) + (inbuf & (1 << 8 - outbits) - 1);\n      }\n    }\n\n    this.bufferLength += rowBytes;\n  };\n\n  PredictorStream.prototype.readBlockPng = function predictorStreamReadBlockPng() {\n    var rowBytes = this.rowBytes;\n    var pixBytes = this.pixBytes;\n    var predictor = this.str.getByte();\n    var rawBytes = this.str.getBytes(rowBytes);\n    this.eof = !rawBytes.length;\n\n    if (this.eof) {\n      return;\n    }\n\n    var bufferLength = this.bufferLength;\n    var buffer = this.ensureBuffer(bufferLength + rowBytes);\n    var prevRow = buffer.subarray(bufferLength - rowBytes, bufferLength);\n\n    if (prevRow.length === 0) {\n      prevRow = new Uint8Array(rowBytes);\n    }\n\n    var i,\n        j = bufferLength,\n        up,\n        c;\n\n    switch (predictor) {\n      case 0:\n        for (i = 0; i < rowBytes; ++i) {\n          buffer[j++] = rawBytes[i];\n        }\n\n        break;\n\n      case 1:\n        for (i = 0; i < pixBytes; ++i) {\n          buffer[j++] = rawBytes[i];\n        }\n\n        for (; i < rowBytes; ++i) {\n          buffer[j] = buffer[j - pixBytes] + rawBytes[i] & 0xff;\n          j++;\n        }\n\n        break;\n\n      case 2:\n        for (i = 0; i < rowBytes; ++i) {\n          buffer[j++] = prevRow[i] + rawBytes[i] & 0xff;\n        }\n\n        break;\n\n      case 3:\n        for (i = 0; i < pixBytes; ++i) {\n          buffer[j++] = (prevRow[i] >> 1) + rawBytes[i];\n        }\n\n        for (; i < rowBytes; ++i) {\n          buffer[j] = (prevRow[i] + buffer[j - pixBytes] >> 1) + rawBytes[i] & 0xff;\n          j++;\n        }\n\n        break;\n\n      case 4:\n        for (i = 0; i < pixBytes; ++i) {\n          up = prevRow[i];\n          c = rawBytes[i];\n          buffer[j++] = up + c;\n        }\n\n        for (; i < rowBytes; ++i) {\n          up = prevRow[i];\n          var upLeft = prevRow[i - pixBytes];\n          var left = buffer[j - pixBytes];\n          var p = left + up - upLeft;\n          var pa = p - left;\n\n          if (pa < 0) {\n            pa = -pa;\n          }\n\n          var pb = p - up;\n\n          if (pb < 0) {\n            pb = -pb;\n          }\n\n          var pc = p - upLeft;\n\n          if (pc < 0) {\n            pc = -pc;\n          }\n\n          c = rawBytes[i];\n\n          if (pa <= pb && pa <= pc) {\n            buffer[j++] = left + c;\n          } else if (pb <= pc) {\n            buffer[j++] = up + c;\n          } else {\n            buffer[j++] = upLeft + c;\n          }\n        }\n\n        break;\n\n      default:\n        throw new _util.FormatError(`Unsupported predictor: ${predictor}`);\n    }\n\n    this.bufferLength += rowBytes;\n  };\n\n  return PredictorStream;\n}();\n\nexports.PredictorStream = PredictorStream;\n\nvar DecryptStream = function DecryptStreamClosure() {\n  function DecryptStream(str, maybeLength, decrypt) {\n    this.str = str;\n    this.dict = str.dict;\n    this.decrypt = decrypt;\n    this.nextChunk = null;\n    this.initialized = false;\n    DecodeStream.call(this, maybeLength);\n  }\n\n  var chunkSize = 512;\n  DecryptStream.prototype = Object.create(DecodeStream.prototype);\n\n  DecryptStream.prototype.readBlock = function DecryptStream_readBlock() {\n    var chunk;\n\n    if (this.initialized) {\n      chunk = this.nextChunk;\n    } else {\n      chunk = this.str.getBytes(chunkSize);\n      this.initialized = true;\n    }\n\n    if (!chunk || chunk.length === 0) {\n      this.eof = true;\n      return;\n    }\n\n    this.nextChunk = this.str.getBytes(chunkSize);\n    var hasMoreData = this.nextChunk && this.nextChunk.length > 0;\n    var decrypt = this.decrypt;\n    chunk = decrypt(chunk, !hasMoreData);\n    var bufferLength = this.bufferLength;\n    var i,\n        n = chunk.length;\n    var buffer = this.ensureBuffer(bufferLength + n);\n\n    for (i = 0; i < n; i++) {\n      buffer[bufferLength++] = chunk[i];\n    }\n\n    this.bufferLength = bufferLength;\n  };\n\n  return DecryptStream;\n}();\n\nexports.DecryptStream = DecryptStream;\n\nvar Ascii85Stream = function Ascii85StreamClosure() {\n  function Ascii85Stream(str, maybeLength) {\n    this.str = str;\n    this.dict = str.dict;\n    this.input = new Uint8Array(5);\n\n    if (maybeLength) {\n      maybeLength = 0.8 * maybeLength;\n    }\n\n    DecodeStream.call(this, maybeLength);\n  }\n\n  Ascii85Stream.prototype = Object.create(DecodeStream.prototype);\n\n  Ascii85Stream.prototype.readBlock = function Ascii85Stream_readBlock() {\n    var TILDA_CHAR = 0x7e;\n    var Z_LOWER_CHAR = 0x7a;\n    var EOF = -1;\n    var str = this.str;\n    var c = str.getByte();\n\n    while ((0, _core_utils.isWhiteSpace)(c)) {\n      c = str.getByte();\n    }\n\n    if (c === EOF || c === TILDA_CHAR) {\n      this.eof = true;\n      return;\n    }\n\n    var bufferLength = this.bufferLength,\n        buffer;\n    var i;\n\n    if (c === Z_LOWER_CHAR) {\n      buffer = this.ensureBuffer(bufferLength + 4);\n\n      for (i = 0; i < 4; ++i) {\n        buffer[bufferLength + i] = 0;\n      }\n\n      this.bufferLength += 4;\n    } else {\n      var input = this.input;\n      input[0] = c;\n\n      for (i = 1; i < 5; ++i) {\n        c = str.getByte();\n\n        while ((0, _core_utils.isWhiteSpace)(c)) {\n          c = str.getByte();\n        }\n\n        input[i] = c;\n\n        if (c === EOF || c === TILDA_CHAR) {\n          break;\n        }\n      }\n\n      buffer = this.ensureBuffer(bufferLength + i - 1);\n      this.bufferLength += i - 1;\n\n      if (i < 5) {\n        for (; i < 5; ++i) {\n          input[i] = 0x21 + 84;\n        }\n\n        this.eof = true;\n      }\n\n      var t = 0;\n\n      for (i = 0; i < 5; ++i) {\n        t = t * 85 + (input[i] - 0x21);\n      }\n\n      for (i = 3; i >= 0; --i) {\n        buffer[bufferLength + i] = t & 0xff;\n        t >>= 8;\n      }\n    }\n  };\n\n  return Ascii85Stream;\n}();\n\nexports.Ascii85Stream = Ascii85Stream;\n\nvar AsciiHexStream = function AsciiHexStreamClosure() {\n  function AsciiHexStream(str, maybeLength) {\n    this.str = str;\n    this.dict = str.dict;\n    this.firstDigit = -1;\n\n    if (maybeLength) {\n      maybeLength = 0.5 * maybeLength;\n    }\n\n    DecodeStream.call(this, maybeLength);\n  }\n\n  AsciiHexStream.prototype = Object.create(DecodeStream.prototype);\n\n  AsciiHexStream.prototype.readBlock = function AsciiHexStream_readBlock() {\n    var UPSTREAM_BLOCK_SIZE = 8000;\n    var bytes = this.str.getBytes(UPSTREAM_BLOCK_SIZE);\n\n    if (!bytes.length) {\n      this.eof = true;\n      return;\n    }\n\n    var maxDecodeLength = bytes.length + 1 >> 1;\n    var buffer = this.ensureBuffer(this.bufferLength + maxDecodeLength);\n    var bufferLength = this.bufferLength;\n    var firstDigit = this.firstDigit;\n\n    for (var i = 0, ii = bytes.length; i < ii; i++) {\n      var ch = bytes[i],\n          digit;\n\n      if (ch >= 0x30 && ch <= 0x39) {\n        digit = ch & 0x0f;\n      } else if (ch >= 0x41 && ch <= 0x46 || ch >= 0x61 && ch <= 0x66) {\n        digit = (ch & 0x0f) + 9;\n      } else if (ch === 0x3e) {\n        this.eof = true;\n        break;\n      } else {\n        continue;\n      }\n\n      if (firstDigit < 0) {\n        firstDigit = digit;\n      } else {\n        buffer[bufferLength++] = firstDigit << 4 | digit;\n        firstDigit = -1;\n      }\n    }\n\n    if (firstDigit >= 0 && this.eof) {\n      buffer[bufferLength++] = firstDigit << 4;\n      firstDigit = -1;\n    }\n\n    this.firstDigit = firstDigit;\n    this.bufferLength = bufferLength;\n  };\n\n  return AsciiHexStream;\n}();\n\nexports.AsciiHexStream = AsciiHexStream;\n\nvar RunLengthStream = function RunLengthStreamClosure() {\n  function RunLengthStream(str, maybeLength) {\n    this.str = str;\n    this.dict = str.dict;\n    DecodeStream.call(this, maybeLength);\n  }\n\n  RunLengthStream.prototype = Object.create(DecodeStream.prototype);\n\n  RunLengthStream.prototype.readBlock = function RunLengthStream_readBlock() {\n    var repeatHeader = this.str.getBytes(2);\n\n    if (!repeatHeader || repeatHeader.length < 2 || repeatHeader[0] === 128) {\n      this.eof = true;\n      return;\n    }\n\n    var buffer;\n    var bufferLength = this.bufferLength;\n    var n = repeatHeader[0];\n\n    if (n < 128) {\n      buffer = this.ensureBuffer(bufferLength + n + 1);\n      buffer[bufferLength++] = repeatHeader[1];\n\n      if (n > 0) {\n        var source = this.str.getBytes(n);\n        buffer.set(source, bufferLength);\n        bufferLength += n;\n      }\n    } else {\n      n = 257 - n;\n      var b = repeatHeader[1];\n      buffer = this.ensureBuffer(bufferLength + n + 1);\n\n      for (var i = 0; i < n; i++) {\n        buffer[bufferLength++] = b;\n      }\n    }\n\n    this.bufferLength = bufferLength;\n  };\n\n  return RunLengthStream;\n}();\n\nexports.RunLengthStream = RunLengthStream;\n\nvar LZWStream = function LZWStreamClosure() {\n  function LZWStream(str, maybeLength, earlyChange) {\n    this.str = str;\n    this.dict = str.dict;\n    this.cachedData = 0;\n    this.bitsCached = 0;\n    var maxLzwDictionarySize = 4096;\n    var lzwState = {\n      earlyChange,\n      codeLength: 9,\n      nextCode: 258,\n      dictionaryValues: new Uint8Array(maxLzwDictionarySize),\n      dictionaryLengths: new Uint16Array(maxLzwDictionarySize),\n      dictionaryPrevCodes: new Uint16Array(maxLzwDictionarySize),\n      currentSequence: new Uint8Array(maxLzwDictionarySize),\n      currentSequenceLength: 0\n    };\n\n    for (var i = 0; i < 256; ++i) {\n      lzwState.dictionaryValues[i] = i;\n      lzwState.dictionaryLengths[i] = 1;\n    }\n\n    this.lzwState = lzwState;\n    DecodeStream.call(this, maybeLength);\n  }\n\n  LZWStream.prototype = Object.create(DecodeStream.prototype);\n\n  LZWStream.prototype.readBits = function LZWStream_readBits(n) {\n    var bitsCached = this.bitsCached;\n    var cachedData = this.cachedData;\n\n    while (bitsCached < n) {\n      var c = this.str.getByte();\n\n      if (c === -1) {\n        this.eof = true;\n        return null;\n      }\n\n      cachedData = cachedData << 8 | c;\n      bitsCached += 8;\n    }\n\n    this.bitsCached = bitsCached -= n;\n    this.cachedData = cachedData;\n    this.lastCode = null;\n    return cachedData >>> bitsCached & (1 << n) - 1;\n  };\n\n  LZWStream.prototype.readBlock = function LZWStream_readBlock() {\n    var blockSize = 512;\n    var estimatedDecodedSize = blockSize * 2,\n        decodedSizeDelta = blockSize;\n    var i, j, q;\n    var lzwState = this.lzwState;\n\n    if (!lzwState) {\n      return;\n    }\n\n    var earlyChange = lzwState.earlyChange;\n    var nextCode = lzwState.nextCode;\n    var dictionaryValues = lzwState.dictionaryValues;\n    var dictionaryLengths = lzwState.dictionaryLengths;\n    var dictionaryPrevCodes = lzwState.dictionaryPrevCodes;\n    var codeLength = lzwState.codeLength;\n    var prevCode = lzwState.prevCode;\n    var currentSequence = lzwState.currentSequence;\n    var currentSequenceLength = lzwState.currentSequenceLength;\n    var decodedLength = 0;\n    var currentBufferLength = this.bufferLength;\n    var buffer = this.ensureBuffer(this.bufferLength + estimatedDecodedSize);\n\n    for (i = 0; i < blockSize; i++) {\n      var code = this.readBits(codeLength);\n      var hasPrev = currentSequenceLength > 0;\n\n      if (code < 256) {\n        currentSequence[0] = code;\n        currentSequenceLength = 1;\n      } else if (code >= 258) {\n        if (code < nextCode) {\n          currentSequenceLength = dictionaryLengths[code];\n\n          for (j = currentSequenceLength - 1, q = code; j >= 0; j--) {\n            currentSequence[j] = dictionaryValues[q];\n            q = dictionaryPrevCodes[q];\n          }\n        } else {\n          currentSequence[currentSequenceLength++] = currentSequence[0];\n        }\n      } else if (code === 256) {\n        codeLength = 9;\n        nextCode = 258;\n        currentSequenceLength = 0;\n        continue;\n      } else {\n        this.eof = true;\n        delete this.lzwState;\n        break;\n      }\n\n      if (hasPrev) {\n        dictionaryPrevCodes[nextCode] = prevCode;\n        dictionaryLengths[nextCode] = dictionaryLengths[prevCode] + 1;\n        dictionaryValues[nextCode] = currentSequence[0];\n        nextCode++;\n        codeLength = nextCode + earlyChange & nextCode + earlyChange - 1 ? codeLength : Math.min(Math.log(nextCode + earlyChange) / 0.6931471805599453 + 1, 12) | 0;\n      }\n\n      prevCode = code;\n      decodedLength += currentSequenceLength;\n\n      if (estimatedDecodedSize < decodedLength) {\n        do {\n          estimatedDecodedSize += decodedSizeDelta;\n        } while (estimatedDecodedSize < decodedLength);\n\n        buffer = this.ensureBuffer(this.bufferLength + estimatedDecodedSize);\n      }\n\n      for (j = 0; j < currentSequenceLength; j++) {\n        buffer[currentBufferLength++] = currentSequence[j];\n      }\n    }\n\n    lzwState.nextCode = nextCode;\n    lzwState.codeLength = codeLength;\n    lzwState.prevCode = prevCode;\n    lzwState.currentSequenceLength = currentSequenceLength;\n    this.bufferLength = currentBufferLength;\n  };\n\n  return LZWStream;\n}();\n\nexports.LZWStream = LZWStream;\n\nvar NullStream = function NullStreamClosure() {\n  function NullStream() {\n    Stream.call(this, new Uint8Array(0));\n  }\n\n  NullStream.prototype = Stream.prototype;\n  return NullStream;\n}();\n\nexports.NullStream = NullStream;\n\n/***/ }),\n/* 13 */\n/***/ ((__unused_webpack_module, exports, __w_pdfjs_require__) => {\n\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.CCITTFaxStream = void 0;\n\nvar _primitives = __w_pdfjs_require__(5);\n\nvar _ccitt = __w_pdfjs_require__(14);\n\nvar _stream = __w_pdfjs_require__(12);\n\nvar CCITTFaxStream = function CCITTFaxStreamClosure() {\n  function CCITTFaxStream(str, maybeLength, params) {\n    this.str = str;\n    this.dict = str.dict;\n\n    if (!(0, _primitives.isDict)(params)) {\n      params = _primitives.Dict.empty;\n    }\n\n    const source = {\n      next() {\n        return str.getByte();\n      }\n\n    };\n    this.ccittFaxDecoder = new _ccitt.CCITTFaxDecoder(source, {\n      K: params.get(\"K\"),\n      EndOfLine: params.get(\"EndOfLine\"),\n      EncodedByteAlign: params.get(\"EncodedByteAlign\"),\n      Columns: params.get(\"Columns\"),\n      Rows: params.get(\"Rows\"),\n      EndOfBlock: params.get(\"EndOfBlock\"),\n      BlackIs1: params.get(\"BlackIs1\")\n    });\n\n    _stream.DecodeStream.call(this, maybeLength);\n  }\n\n  CCITTFaxStream.prototype = Object.create(_stream.DecodeStream.prototype);\n\n  CCITTFaxStream.prototype.readBlock = function () {\n    while (!this.eof) {\n      const c = this.ccittFaxDecoder.readNextChar();\n\n      if (c === -1) {\n        this.eof = true;\n        return;\n      }\n\n      this.ensureBuffer(this.bufferLength + 1);\n      this.buffer[this.bufferLength++] = c;\n    }\n  };\n\n  return CCITTFaxStream;\n}();\n\nexports.CCITTFaxStream = CCITTFaxStream;\n\n/***/ }),\n/* 14 */\n/***/ ((__unused_webpack_module, exports, __w_pdfjs_require__) => {\n\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.CCITTFaxDecoder = void 0;\n\nvar _util = __w_pdfjs_require__(2);\n\nconst CCITTFaxDecoder = function CCITTFaxDecoder() {\n  const ccittEOL = -2;\n  const ccittEOF = -1;\n  const twoDimPass = 0;\n  const twoDimHoriz = 1;\n  const twoDimVert0 = 2;\n  const twoDimVertR1 = 3;\n  const twoDimVertL1 = 4;\n  const twoDimVertR2 = 5;\n  const twoDimVertL2 = 6;\n  const twoDimVertR3 = 7;\n  const twoDimVertL3 = 8;\n  const twoDimTable = [[-1, -1], [-1, -1], [7, twoDimVertL3], [7, twoDimVertR3], [6, twoDimVertL2], [6, twoDimVertL2], [6, twoDimVertR2], [6, twoDimVertR2], [4, twoDimPass], [4, twoDimPass], [4, twoDimPass], [4, twoDimPass], [4, twoDimPass], [4, twoDimPass], [4, twoDimPass], [4, twoDimPass], [3, twoDimHoriz], [3, twoDimHoriz], [3, twoDimHoriz], [3, twoDimHoriz], [3, twoDimHoriz], [3, twoDimHoriz], [3, twoDimHoriz], [3, twoDimHoriz], [3, twoDimHoriz], [3, twoDimHoriz], [3, twoDimHoriz], [3, twoDimHoriz], [3, twoDimHoriz], [3, twoDimHoriz], [3, twoDimHoriz], [3, twoDimHoriz], [3, twoDimVertL1], [3, twoDimVertL1], [3, twoDimVertL1], [3, twoDimVertL1], [3, twoDimVertL1], [3, twoDimVertL1], [3, twoDimVertL1], [3, twoDimVertL1], [3, twoDimVertL1], [3, twoDimVertL1], [3, twoDimVertL1], [3, twoDimVertL1], [3, twoDimVertL1], [3, twoDimVertL1], [3, twoDimVertL1], [3, twoDimVertL1], [3, twoDimVertR1], [3, twoDimVertR1], [3, twoDimVertR1], [3, twoDimVertR1], [3, twoDimVertR1], [3, twoDimVertR1], [3, twoDimVertR1], [3, twoDimVertR1], [3, twoDimVertR1], [3, twoDimVertR1], [3, twoDimVertR1], [3, twoDimVertR1], [3, twoDimVertR1], [3, twoDimVertR1], [3, twoDimVertR1], [3, twoDimVertR1], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0]];\n  const whiteTable1 = [[-1, -1], [12, ccittEOL], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [11, 1792], [11, 1792], [12, 1984], [12, 2048], [12, 2112], [12, 2176], [12, 2240], [12, 2304], [11, 1856], [11, 1856], [11, 1920], [11, 1920], [12, 2368], [12, 2432], [12, 2496], [12, 2560]];\n  const whiteTable2 = [[-1, -1], [-1, -1], [-1, -1], [-1, -1], [8, 29], [8, 29], [8, 30], [8, 30], [8, 45], [8, 45], [8, 46], [8, 46], [7, 22], [7, 22], [7, 22], [7, 22], [7, 23], [7, 23], [7, 23], [7, 23], [8, 47], [8, 47], [8, 48], [8, 48], [6, 13], [6, 13], [6, 13], [6, 13], [6, 13], [6, 13], [6, 13], [6, 13], [7, 20], [7, 20], [7, 20], [7, 20], [8, 33], [8, 33], [8, 34], [8, 34], [8, 35], [8, 35], [8, 36], [8, 36], [8, 37], [8, 37], [8, 38], [8, 38], [7, 19], [7, 19], [7, 19], [7, 19], [8, 31], [8, 31], [8, 32], [8, 32], [6, 1], [6, 1], [6, 1], [6, 1], [6, 1], [6, 1], [6, 1], [6, 1], [6, 12], [6, 12], [6, 12], [6, 12], [6, 12], [6, 12], [6, 12], [6, 12], [8, 53], [8, 53], [8, 54], [8, 54], [7, 26], [7, 26], [7, 26], [7, 26], [8, 39], [8, 39], [8, 40], [8, 40], [8, 41], [8, 41], [8, 42], [8, 42], [8, 43], [8, 43], [8, 44], [8, 44], [7, 21], [7, 21], [7, 21], [7, 21], [7, 28], [7, 28], [7, 28], [7, 28], [8, 61], [8, 61], [8, 62], [8, 62], [8, 63], [8, 63], [8, 0], [8, 0], [8, 320], [8, 320], [8, 384], [8, 384], [5, 10], [5, 10], [5, 10], [5, 10], [5, 10], [5, 10], [5, 10], [5, 10], [5, 10], [5, 10], [5, 10], [5, 10], [5, 10], [5, 10], [5, 10], [5, 10], [5, 11], [5, 11], [5, 11], [5, 11], [5, 11], [5, 11], [5, 11], [5, 11], [5, 11], [5, 11], [5, 11], [5, 11], [5, 11], [5, 11], [5, 11], [5, 11], [7, 27], [7, 27], [7, 27], [7, 27], [8, 59], [8, 59], [8, 60], [8, 60], [9, 1472], [9, 1536], [9, 1600], [9, 1728], [7, 18], [7, 18], [7, 18], [7, 18], [7, 24], [7, 24], [7, 24], [7, 24], [8, 49], [8, 49], [8, 50], [8, 50], [8, 51], [8, 51], [8, 52], [8, 52], [7, 25], [7, 25], [7, 25], [7, 25], [8, 55], [8, 55], [8, 56], [8, 56], [8, 57], [8, 57], [8, 58], [8, 58], [6, 192], [6, 192], [6, 192], [6, 192], [6, 192], [6, 192], [6, 192], [6, 192], [6, 1664], [6, 1664], [6, 1664], [6, 1664], [6, 1664], [6, 1664], [6, 1664], [6, 1664], [8, 448], [8, 448], [8, 512], [8, 512], [9, 704], [9, 768], [8, 640], [8, 640], [8, 576], [8, 576], [9, 832], [9, 896], [9, 960], [9, 1024], [9, 1088], [9, 1152], [9, 1216], [9, 1280], [9, 1344], [9, 1408], [7, 256], [7, 256], [7, 256], [7, 256], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [5, 128], [5, 128], [5, 128], [5, 128], [5, 128], [5, 128], [5, 128], [5, 128], [5, 128], [5, 128], [5, 128], [5, 128], [5, 128], [5, 128], [5, 128], [5, 128], [5, 8], [5, 8], [5, 8], [5, 8], [5, 8], [5, 8], [5, 8], [5, 8], [5, 8], [5, 8], [5, 8], [5, 8], [5, 8], [5, 8], [5, 8], [5, 8], [5, 9], [5, 9], [5, 9], [5, 9], [5, 9], [5, 9], [5, 9], [5, 9], [5, 9], [5, 9], [5, 9], [5, 9], [5, 9], [5, 9], [5, 9], [5, 9], [6, 16], [6, 16], [6, 16], [6, 16], [6, 16], [6, 16], [6, 16], [6, 16], [6, 17], [6, 17], [6, 17], [6, 17], [6, 17], [6, 17], [6, 17], [6, 17], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [6, 14], [6, 14], [6, 14], [6, 14], [6, 14], [6, 14], [6, 14], [6, 14], [6, 15], [6, 15], [6, 15], [6, 15], [6, 15], [6, 15], [6, 15], [6, 15], [5, 64], [5, 64], [5, 64], [5, 64], [5, 64], [5, 64], [5, 64], [5, 64], [5, 64], [5, 64], [5, 64], [5, 64], [5, 64], [5, 64], [5, 64], [5, 64], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7]];\n  const blackTable1 = [[-1, -1], [-1, -1], [12, ccittEOL], [12, ccittEOL], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [11, 1792], [11, 1792], [11, 1792], [11, 1792], [12, 1984], [12, 1984], [12, 2048], [12, 2048], [12, 2112], [12, 2112], [12, 2176], [12, 2176], [12, 2240], [12, 2240], [12, 2304], [12, 2304], [11, 1856], [11, 1856], [11, 1856], [11, 1856], [11, 1920], [11, 1920], [11, 1920], [11, 1920], [12, 2368], [12, 2368], [12, 2432], [12, 2432], [12, 2496], [12, 2496], [12, 2560], [12, 2560], [10, 18], [10, 18], [10, 18], [10, 18], [10, 18], [10, 18], [10, 18], [10, 18], [12, 52], [12, 52], [13, 640], [13, 704], [13, 768], [13, 832], [12, 55], [12, 55], [12, 56], [12, 56], [13, 1280], [13, 1344], [13, 1408], [13, 1472], [12, 59], [12, 59], [12, 60], [12, 60], [13, 1536], [13, 1600], [11, 24], [11, 24], [11, 24], [11, 24], [11, 25], [11, 25], [11, 25], [11, 25], [13, 1664], [13, 1728], [12, 320], [12, 320], [12, 384], [12, 384], [12, 448], [12, 448], [13, 512], [13, 576], [12, 53], [12, 53], [12, 54], [12, 54], [13, 896], [13, 960], [13, 1024], [13, 1088], [13, 1152], [13, 1216], [10, 64], [10, 64], [10, 64], [10, 64], [10, 64], [10, 64], [10, 64], [10, 64]];\n  const blackTable2 = [[8, 13], [8, 13], [8, 13], [8, 13], [8, 13], [8, 13], [8, 13], [8, 13], [8, 13], [8, 13], [8, 13], [8, 13], [8, 13], [8, 13], [8, 13], [8, 13], [11, 23], [11, 23], [12, 50], [12, 51], [12, 44], [12, 45], [12, 46], [12, 47], [12, 57], [12, 58], [12, 61], [12, 256], [10, 16], [10, 16], [10, 16], [10, 16], [10, 17], [10, 17], [10, 17], [10, 17], [12, 48], [12, 49], [12, 62], [12, 63], [12, 30], [12, 31], [12, 32], [12, 33], [12, 40], [12, 41], [11, 22], [11, 22], [8, 14], [8, 14], [8, 14], [8, 14], [8, 14], [8, 14], [8, 14], [8, 14], [8, 14], [8, 14], [8, 14], [8, 14], [8, 14], [8, 14], [8, 14], [8, 14], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [9, 15], [9, 15], [9, 15], [9, 15], [9, 15], [9, 15], [9, 15], [9, 15], [12, 128], [12, 192], [12, 26], [12, 27], [12, 28], [12, 29], [11, 19], [11, 19], [11, 20], [11, 20], [12, 34], [12, 35], [12, 36], [12, 37], [12, 38], [12, 39], [11, 21], [11, 21], [12, 42], [12, 43], [10, 0], [10, 0], [10, 0], [10, 0], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12]];\n  const blackTable3 = [[-1, -1], [-1, -1], [-1, -1], [-1, -1], [6, 9], [6, 8], [5, 7], [5, 7], [4, 6], [4, 6], [4, 6], [4, 6], [4, 5], [4, 5], [4, 5], [4, 5], [3, 1], [3, 1], [3, 1], [3, 1], [3, 1], [3, 1], [3, 1], [3, 1], [3, 4], [3, 4], [3, 4], [3, 4], [3, 4], [3, 4], [3, 4], [3, 4], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2]];\n\n  function CCITTFaxDecoder(source, options = {}) {\n    if (!source || typeof source.next !== \"function\") {\n      throw new Error('CCITTFaxDecoder - invalid \"source\" parameter.');\n    }\n\n    this.source = source;\n    this.eof = false;\n    this.encoding = options.K || 0;\n    this.eoline = options.EndOfLine || false;\n    this.byteAlign = options.EncodedByteAlign || false;\n    this.columns = options.Columns || 1728;\n    this.rows = options.Rows || 0;\n    let eoblock = options.EndOfBlock;\n\n    if (eoblock === null || eoblock === undefined) {\n      eoblock = true;\n    }\n\n    this.eoblock = eoblock;\n    this.black = options.BlackIs1 || false;\n    this.codingLine = new Uint32Array(this.columns + 1);\n    this.refLine = new Uint32Array(this.columns + 2);\n    this.codingLine[0] = this.columns;\n    this.codingPos = 0;\n    this.row = 0;\n    this.nextLine2D = this.encoding < 0;\n    this.inputBits = 0;\n    this.inputBuf = 0;\n    this.outputBits = 0;\n    this.rowsDone = false;\n    let code1;\n\n    while ((code1 = this._lookBits(12)) === 0) {\n      this._eatBits(1);\n    }\n\n    if (code1 === 1) {\n      this._eatBits(12);\n    }\n\n    if (this.encoding > 0) {\n      this.nextLine2D = !this._lookBits(1);\n\n      this._eatBits(1);\n    }\n  }\n\n  CCITTFaxDecoder.prototype = {\n    readNextChar() {\n      if (this.eof) {\n        return -1;\n      }\n\n      const refLine = this.refLine;\n      const codingLine = this.codingLine;\n      const columns = this.columns;\n      let refPos, blackPixels, bits, i;\n\n      if (this.outputBits === 0) {\n        if (this.rowsDone) {\n          this.eof = true;\n        }\n\n        if (this.eof) {\n          return -1;\n        }\n\n        this.err = false;\n        let code1, code2, code3;\n\n        if (this.nextLine2D) {\n          for (i = 0; codingLine[i] < columns; ++i) {\n            refLine[i] = codingLine[i];\n          }\n\n          refLine[i++] = columns;\n          refLine[i] = columns;\n          codingLine[0] = 0;\n          this.codingPos = 0;\n          refPos = 0;\n          blackPixels = 0;\n\n          while (codingLine[this.codingPos] < columns) {\n            code1 = this._getTwoDimCode();\n\n            switch (code1) {\n              case twoDimPass:\n                this._addPixels(refLine[refPos + 1], blackPixels);\n\n                if (refLine[refPos + 1] < columns) {\n                  refPos += 2;\n                }\n\n                break;\n\n              case twoDimHoriz:\n                code1 = code2 = 0;\n\n                if (blackPixels) {\n                  do {\n                    code1 += code3 = this._getBlackCode();\n                  } while (code3 >= 64);\n\n                  do {\n                    code2 += code3 = this._getWhiteCode();\n                  } while (code3 >= 64);\n                } else {\n                  do {\n                    code1 += code3 = this._getWhiteCode();\n                  } while (code3 >= 64);\n\n                  do {\n                    code2 += code3 = this._getBlackCode();\n                  } while (code3 >= 64);\n                }\n\n                this._addPixels(codingLine[this.codingPos] + code1, blackPixels);\n\n                if (codingLine[this.codingPos] < columns) {\n                  this._addPixels(codingLine[this.codingPos] + code2, blackPixels ^ 1);\n                }\n\n                while (refLine[refPos] <= codingLine[this.codingPos] && refLine[refPos] < columns) {\n                  refPos += 2;\n                }\n\n                break;\n\n              case twoDimVertR3:\n                this._addPixels(refLine[refPos] + 3, blackPixels);\n\n                blackPixels ^= 1;\n\n                if (codingLine[this.codingPos] < columns) {\n                  ++refPos;\n\n                  while (refLine[refPos] <= codingLine[this.codingPos] && refLine[refPos] < columns) {\n                    refPos += 2;\n                  }\n                }\n\n                break;\n\n              case twoDimVertR2:\n                this._addPixels(refLine[refPos] + 2, blackPixels);\n\n                blackPixels ^= 1;\n\n                if (codingLine[this.codingPos] < columns) {\n                  ++refPos;\n\n                  while (refLine[refPos] <= codingLine[this.codingPos] && refLine[refPos] < columns) {\n                    refPos += 2;\n                  }\n                }\n\n                break;\n\n              case twoDimVertR1:\n                this._addPixels(refLine[refPos] + 1, blackPixels);\n\n                blackPixels ^= 1;\n\n                if (codingLine[this.codingPos] < columns) {\n                  ++refPos;\n\n                  while (refLine[refPos] <= codingLine[this.codingPos] && refLine[refPos] < columns) {\n                    refPos += 2;\n                  }\n                }\n\n                break;\n\n              case twoDimVert0:\n                this._addPixels(refLine[refPos], blackPixels);\n\n                blackPixels ^= 1;\n\n                if (codingLine[this.codingPos] < columns) {\n                  ++refPos;\n\n                  while (refLine[refPos] <= codingLine[this.codingPos] && refLine[refPos] < columns) {\n                    refPos += 2;\n                  }\n                }\n\n                break;\n\n              case twoDimVertL3:\n                this._addPixelsNeg(refLine[refPos] - 3, blackPixels);\n\n                blackPixels ^= 1;\n\n                if (codingLine[this.codingPos] < columns) {\n                  if (refPos > 0) {\n                    --refPos;\n                  } else {\n                    ++refPos;\n                  }\n\n                  while (refLine[refPos] <= codingLine[this.codingPos] && refLine[refPos] < columns) {\n                    refPos += 2;\n                  }\n                }\n\n                break;\n\n              case twoDimVertL2:\n                this._addPixelsNeg(refLine[refPos] - 2, blackPixels);\n\n                blackPixels ^= 1;\n\n                if (codingLine[this.codingPos] < columns) {\n                  if (refPos > 0) {\n                    --refPos;\n                  } else {\n                    ++refPos;\n                  }\n\n                  while (refLine[refPos] <= codingLine[this.codingPos] && refLine[refPos] < columns) {\n                    refPos += 2;\n                  }\n                }\n\n                break;\n\n              case twoDimVertL1:\n                this._addPixelsNeg(refLine[refPos] - 1, blackPixels);\n\n                blackPixels ^= 1;\n\n                if (codingLine[this.codingPos] < columns) {\n                  if (refPos > 0) {\n                    --refPos;\n                  } else {\n                    ++refPos;\n                  }\n\n                  while (refLine[refPos] <= codingLine[this.codingPos] && refLine[refPos] < columns) {\n                    refPos += 2;\n                  }\n                }\n\n                break;\n\n              case ccittEOF:\n                this._addPixels(columns, 0);\n\n                this.eof = true;\n                break;\n\n              default:\n                (0, _util.info)(\"bad 2d code\");\n\n                this._addPixels(columns, 0);\n\n                this.err = true;\n            }\n          }\n        } else {\n          codingLine[0] = 0;\n          this.codingPos = 0;\n          blackPixels = 0;\n\n          while (codingLine[this.codingPos] < columns) {\n            code1 = 0;\n\n            if (blackPixels) {\n              do {\n                code1 += code3 = this._getBlackCode();\n              } while (code3 >= 64);\n            } else {\n              do {\n                code1 += code3 = this._getWhiteCode();\n              } while (code3 >= 64);\n            }\n\n            this._addPixels(codingLine[this.codingPos] + code1, blackPixels);\n\n            blackPixels ^= 1;\n          }\n        }\n\n        let gotEOL = false;\n\n        if (this.byteAlign) {\n          this.inputBits &= ~7;\n        }\n\n        if (!this.eoblock && this.row === this.rows - 1) {\n          this.rowsDone = true;\n        } else {\n          code1 = this._lookBits(12);\n\n          if (this.eoline) {\n            while (code1 !== ccittEOF && code1 !== 1) {\n              this._eatBits(1);\n\n              code1 = this._lookBits(12);\n            }\n          } else {\n            while (code1 === 0) {\n              this._eatBits(1);\n\n              code1 = this._lookBits(12);\n            }\n          }\n\n          if (code1 === 1) {\n            this._eatBits(12);\n\n            gotEOL = true;\n          } else if (code1 === ccittEOF) {\n            this.eof = true;\n          }\n        }\n\n        if (!this.eof && this.encoding > 0 && !this.rowsDone) {\n          this.nextLine2D = !this._lookBits(1);\n\n          this._eatBits(1);\n        }\n\n        if (this.eoblock && gotEOL && this.byteAlign) {\n          code1 = this._lookBits(12);\n\n          if (code1 === 1) {\n            this._eatBits(12);\n\n            if (this.encoding > 0) {\n              this._lookBits(1);\n\n              this._eatBits(1);\n            }\n\n            if (this.encoding >= 0) {\n              for (i = 0; i < 4; ++i) {\n                code1 = this._lookBits(12);\n\n                if (code1 !== 1) {\n                  (0, _util.info)(\"bad rtc code: \" + code1);\n                }\n\n                this._eatBits(12);\n\n                if (this.encoding > 0) {\n                  this._lookBits(1);\n\n                  this._eatBits(1);\n                }\n              }\n            }\n\n            this.eof = true;\n          }\n        } else if (this.err && this.eoline) {\n          while (true) {\n            code1 = this._lookBits(13);\n\n            if (code1 === ccittEOF) {\n              this.eof = true;\n              return -1;\n            }\n\n            if (code1 >> 1 === 1) {\n              break;\n            }\n\n            this._eatBits(1);\n          }\n\n          this._eatBits(12);\n\n          if (this.encoding > 0) {\n            this._eatBits(1);\n\n            this.nextLine2D = !(code1 & 1);\n          }\n        }\n\n        if (codingLine[0] > 0) {\n          this.outputBits = codingLine[this.codingPos = 0];\n        } else {\n          this.outputBits = codingLine[this.codingPos = 1];\n        }\n\n        this.row++;\n      }\n\n      let c;\n\n      if (this.outputBits >= 8) {\n        c = this.codingPos & 1 ? 0 : 0xff;\n        this.outputBits -= 8;\n\n        if (this.outputBits === 0 && codingLine[this.codingPos] < columns) {\n          this.codingPos++;\n          this.outputBits = codingLine[this.codingPos] - codingLine[this.codingPos - 1];\n        }\n      } else {\n        bits = 8;\n        c = 0;\n\n        do {\n          if (this.outputBits > bits) {\n            c <<= bits;\n\n            if (!(this.codingPos & 1)) {\n              c |= 0xff >> 8 - bits;\n            }\n\n            this.outputBits -= bits;\n            bits = 0;\n          } else {\n            c <<= this.outputBits;\n\n            if (!(this.codingPos & 1)) {\n              c |= 0xff >> 8 - this.outputBits;\n            }\n\n            bits -= this.outputBits;\n            this.outputBits = 0;\n\n            if (codingLine[this.codingPos] < columns) {\n              this.codingPos++;\n              this.outputBits = codingLine[this.codingPos] - codingLine[this.codingPos - 1];\n            } else if (bits > 0) {\n              c <<= bits;\n              bits = 0;\n            }\n          }\n        } while (bits);\n      }\n\n      if (this.black) {\n        c ^= 0xff;\n      }\n\n      return c;\n    },\n\n    _addPixels(a1, blackPixels) {\n      const codingLine = this.codingLine;\n      let codingPos = this.codingPos;\n\n      if (a1 > codingLine[codingPos]) {\n        if (a1 > this.columns) {\n          (0, _util.info)(\"row is wrong length\");\n          this.err = true;\n          a1 = this.columns;\n        }\n\n        if (codingPos & 1 ^ blackPixels) {\n          ++codingPos;\n        }\n\n        codingLine[codingPos] = a1;\n      }\n\n      this.codingPos = codingPos;\n    },\n\n    _addPixelsNeg(a1, blackPixels) {\n      const codingLine = this.codingLine;\n      let codingPos = this.codingPos;\n\n      if (a1 > codingLine[codingPos]) {\n        if (a1 > this.columns) {\n          (0, _util.info)(\"row is wrong length\");\n          this.err = true;\n          a1 = this.columns;\n        }\n\n        if (codingPos & 1 ^ blackPixels) {\n          ++codingPos;\n        }\n\n        codingLine[codingPos] = a1;\n      } else if (a1 < codingLine[codingPos]) {\n        if (a1 < 0) {\n          (0, _util.info)(\"invalid code\");\n          this.err = true;\n          a1 = 0;\n        }\n\n        while (codingPos > 0 && a1 < codingLine[codingPos - 1]) {\n          --codingPos;\n        }\n\n        codingLine[codingPos] = a1;\n      }\n\n      this.codingPos = codingPos;\n    },\n\n    _findTableCode(start, end, table, limit) {\n      const limitValue = limit || 0;\n\n      for (let i = start; i <= end; ++i) {\n        let code = this._lookBits(i);\n\n        if (code === ccittEOF) {\n          return [true, 1, false];\n        }\n\n        if (i < end) {\n          code <<= end - i;\n        }\n\n        if (!limitValue || code >= limitValue) {\n          const p = table[code - limitValue];\n\n          if (p[0] === i) {\n            this._eatBits(i);\n\n            return [true, p[1], true];\n          }\n        }\n      }\n\n      return [false, 0, false];\n    },\n\n    _getTwoDimCode() {\n      let code = 0;\n      let p;\n\n      if (this.eoblock) {\n        code = this._lookBits(7);\n        p = twoDimTable[code];\n\n        if (p && p[0] > 0) {\n          this._eatBits(p[0]);\n\n          return p[1];\n        }\n      } else {\n        const result = this._findTableCode(1, 7, twoDimTable);\n\n        if (result[0] && result[2]) {\n          return result[1];\n        }\n      }\n\n      (0, _util.info)(\"Bad two dim code\");\n      return ccittEOF;\n    },\n\n    _getWhiteCode() {\n      let code = 0;\n      let p;\n\n      if (this.eoblock) {\n        code = this._lookBits(12);\n\n        if (code === ccittEOF) {\n          return 1;\n        }\n\n        if (code >> 5 === 0) {\n          p = whiteTable1[code];\n        } else {\n          p = whiteTable2[code >> 3];\n        }\n\n        if (p[0] > 0) {\n          this._eatBits(p[0]);\n\n          return p[1];\n        }\n      } else {\n        let result = this._findTableCode(1, 9, whiteTable2);\n\n        if (result[0]) {\n          return result[1];\n        }\n\n        result = this._findTableCode(11, 12, whiteTable1);\n\n        if (result[0]) {\n          return result[1];\n        }\n      }\n\n      (0, _util.info)(\"bad white code\");\n\n      this._eatBits(1);\n\n      return 1;\n    },\n\n    _getBlackCode() {\n      let code, p;\n\n      if (this.eoblock) {\n        code = this._lookBits(13);\n\n        if (code === ccittEOF) {\n          return 1;\n        }\n\n        if (code >> 7 === 0) {\n          p = blackTable1[code];\n        } else if (code >> 9 === 0 && code >> 7 !== 0) {\n          p = blackTable2[(code >> 1) - 64];\n        } else {\n          p = blackTable3[code >> 7];\n        }\n\n        if (p[0] > 0) {\n          this._eatBits(p[0]);\n\n          return p[1];\n        }\n      } else {\n        let result = this._findTableCode(2, 6, blackTable3);\n\n        if (result[0]) {\n          return result[1];\n        }\n\n        result = this._findTableCode(7, 12, blackTable2, 64);\n\n        if (result[0]) {\n          return result[1];\n        }\n\n        result = this._findTableCode(10, 13, blackTable1);\n\n        if (result[0]) {\n          return result[1];\n        }\n      }\n\n      (0, _util.info)(\"bad black code\");\n\n      this._eatBits(1);\n\n      return 1;\n    },\n\n    _lookBits(n) {\n      let c;\n\n      while (this.inputBits < n) {\n        if ((c = this.source.next()) === -1) {\n          if (this.inputBits === 0) {\n            return ccittEOF;\n          }\n\n          return this.inputBuf << n - this.inputBits & 0xffff >> 16 - n;\n        }\n\n        this.inputBuf = this.inputBuf << 8 | c;\n        this.inputBits += 8;\n      }\n\n      return this.inputBuf >> this.inputBits - n & 0xffff >> 16 - n;\n    },\n\n    _eatBits(n) {\n      if ((this.inputBits -= n) < 0) {\n        this.inputBits = 0;\n      }\n    }\n\n  };\n  return CCITTFaxDecoder;\n}();\n\nexports.CCITTFaxDecoder = CCITTFaxDecoder;\n\n/***/ }),\n/* 15 */\n/***/ ((__unused_webpack_module, exports, __w_pdfjs_require__) => {\n\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.Jbig2Stream = void 0;\n\nvar _primitives = __w_pdfjs_require__(5);\n\nvar _stream = __w_pdfjs_require__(12);\n\nvar _jbig = __w_pdfjs_require__(16);\n\nvar _util = __w_pdfjs_require__(2);\n\nconst Jbig2Stream = function Jbig2StreamClosure() {\n  function Jbig2Stream(stream, maybeLength, dict, params) {\n    this.stream = stream;\n    this.maybeLength = maybeLength;\n    this.dict = dict;\n    this.params = params;\n\n    _stream.DecodeStream.call(this, maybeLength);\n  }\n\n  Jbig2Stream.prototype = Object.create(_stream.DecodeStream.prototype);\n  Object.defineProperty(Jbig2Stream.prototype, \"bytes\", {\n    get() {\n      return (0, _util.shadow)(this, \"bytes\", this.stream.getBytes(this.maybeLength));\n    },\n\n    configurable: true\n  });\n\n  Jbig2Stream.prototype.ensureBuffer = function (requested) {};\n\n  Jbig2Stream.prototype.readBlock = function () {\n    if (this.eof) {\n      return;\n    }\n\n    const jbig2Image = new _jbig.Jbig2Image();\n    const chunks = [];\n\n    if ((0, _primitives.isDict)(this.params)) {\n      const globalsStream = this.params.get(\"JBIG2Globals\");\n\n      if ((0, _primitives.isStream)(globalsStream)) {\n        const globals = globalsStream.getBytes();\n        chunks.push({\n          data: globals,\n          start: 0,\n          end: globals.length\n        });\n      }\n    }\n\n    chunks.push({\n      data: this.bytes,\n      start: 0,\n      end: this.bytes.length\n    });\n    const data = jbig2Image.parseChunks(chunks);\n    const dataLength = data.length;\n\n    for (let i = 0; i < dataLength; i++) {\n      data[i] ^= 0xff;\n    }\n\n    this.buffer = data;\n    this.bufferLength = dataLength;\n    this.eof = true;\n  };\n\n  return Jbig2Stream;\n}();\n\nexports.Jbig2Stream = Jbig2Stream;\n\n/***/ }),\n/* 16 */\n/***/ ((__unused_webpack_module, exports, __w_pdfjs_require__) => {\n\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.Jbig2Image = void 0;\n\nvar _util = __w_pdfjs_require__(2);\n\nvar _core_utils = __w_pdfjs_require__(8);\n\nvar _arithmetic_decoder = __w_pdfjs_require__(17);\n\nvar _ccitt = __w_pdfjs_require__(14);\n\nclass Jbig2Error extends _util.BaseException {\n  constructor(msg) {\n    super(`JBIG2 error: ${msg}`);\n  }\n\n}\n\nvar Jbig2Image = function Jbig2ImageClosure() {\n  function ContextCache() {}\n\n  ContextCache.prototype = {\n    getContexts(id) {\n      if (id in this) {\n        return this[id];\n      }\n\n      return this[id] = new Int8Array(1 << 16);\n    }\n\n  };\n\n  function DecodingContext(data, start, end) {\n    this.data = data;\n    this.start = start;\n    this.end = end;\n  }\n\n  DecodingContext.prototype = {\n    get decoder() {\n      var decoder = new _arithmetic_decoder.ArithmeticDecoder(this.data, this.start, this.end);\n      return (0, _util.shadow)(this, \"decoder\", decoder);\n    },\n\n    get contextCache() {\n      var cache = new ContextCache();\n      return (0, _util.shadow)(this, \"contextCache\", cache);\n    }\n\n  };\n\n  function decodeInteger(contextCache, procedure, decoder) {\n    var contexts = contextCache.getContexts(procedure);\n    var prev = 1;\n\n    function readBits(length) {\n      var v = 0;\n\n      for (var i = 0; i < length; i++) {\n        var bit = decoder.readBit(contexts, prev);\n        prev = prev < 256 ? prev << 1 | bit : (prev << 1 | bit) & 511 | 256;\n        v = v << 1 | bit;\n      }\n\n      return v >>> 0;\n    }\n\n    var sign = readBits(1);\n    var value = readBits(1) ? readBits(1) ? readBits(1) ? readBits(1) ? readBits(1) ? readBits(32) + 4436 : readBits(12) + 340 : readBits(8) + 84 : readBits(6) + 20 : readBits(4) + 4 : readBits(2);\n\n    if (sign === 0) {\n      return value;\n    } else if (value > 0) {\n      return -value;\n    }\n\n    return null;\n  }\n\n  function decodeIAID(contextCache, decoder, codeLength) {\n    var contexts = contextCache.getContexts(\"IAID\");\n    var prev = 1;\n\n    for (var i = 0; i < codeLength; i++) {\n      var bit = decoder.readBit(contexts, prev);\n      prev = prev << 1 | bit;\n    }\n\n    if (codeLength < 31) {\n      return prev & (1 << codeLength) - 1;\n    }\n\n    return prev & 0x7fffffff;\n  }\n\n  var SegmentTypes = [\"SymbolDictionary\", null, null, null, \"IntermediateTextRegion\", null, \"ImmediateTextRegion\", \"ImmediateLosslessTextRegion\", null, null, null, null, null, null, null, null, \"PatternDictionary\", null, null, null, \"IntermediateHalftoneRegion\", null, \"ImmediateHalftoneRegion\", \"ImmediateLosslessHalftoneRegion\", null, null, null, null, null, null, null, null, null, null, null, null, \"IntermediateGenericRegion\", null, \"ImmediateGenericRegion\", \"ImmediateLosslessGenericRegion\", \"IntermediateGenericRefinementRegion\", null, \"ImmediateGenericRefinementRegion\", \"ImmediateLosslessGenericRefinementRegion\", null, null, null, null, \"PageInformation\", \"EndOfPage\", \"EndOfStripe\", \"EndOfFile\", \"Profiles\", \"Tables\", null, null, null, null, null, null, null, null, \"Extension\"];\n  var CodingTemplates = [[{\n    x: -1,\n    y: -2\n  }, {\n    x: 0,\n    y: -2\n  }, {\n    x: 1,\n    y: -2\n  }, {\n    x: -2,\n    y: -1\n  }, {\n    x: -1,\n    y: -1\n  }, {\n    x: 0,\n    y: -1\n  }, {\n    x: 1,\n    y: -1\n  }, {\n    x: 2,\n    y: -1\n  }, {\n    x: -4,\n    y: 0\n  }, {\n    x: -3,\n    y: 0\n  }, {\n    x: -2,\n    y: 0\n  }, {\n    x: -1,\n    y: 0\n  }], [{\n    x: -1,\n    y: -2\n  }, {\n    x: 0,\n    y: -2\n  }, {\n    x: 1,\n    y: -2\n  }, {\n    x: 2,\n    y: -2\n  }, {\n    x: -2,\n    y: -1\n  }, {\n    x: -1,\n    y: -1\n  }, {\n    x: 0,\n    y: -1\n  }, {\n    x: 1,\n    y: -1\n  }, {\n    x: 2,\n    y: -1\n  }, {\n    x: -3,\n    y: 0\n  }, {\n    x: -2,\n    y: 0\n  }, {\n    x: -1,\n    y: 0\n  }], [{\n    x: -1,\n    y: -2\n  }, {\n    x: 0,\n    y: -2\n  }, {\n    x: 1,\n    y: -2\n  }, {\n    x: -2,\n    y: -1\n  }, {\n    x: -1,\n    y: -1\n  }, {\n    x: 0,\n    y: -1\n  }, {\n    x: 1,\n    y: -1\n  }, {\n    x: -2,\n    y: 0\n  }, {\n    x: -1,\n    y: 0\n  }], [{\n    x: -3,\n    y: -1\n  }, {\n    x: -2,\n    y: -1\n  }, {\n    x: -1,\n    y: -1\n  }, {\n    x: 0,\n    y: -1\n  }, {\n    x: 1,\n    y: -1\n  }, {\n    x: -4,\n    y: 0\n  }, {\n    x: -3,\n    y: 0\n  }, {\n    x: -2,\n    y: 0\n  }, {\n    x: -1,\n    y: 0\n  }]];\n  var RefinementTemplates = [{\n    coding: [{\n      x: 0,\n      y: -1\n    }, {\n      x: 1,\n      y: -1\n    }, {\n      x: -1,\n      y: 0\n    }],\n    reference: [{\n      x: 0,\n      y: -1\n    }, {\n      x: 1,\n      y: -1\n    }, {\n      x: -1,\n      y: 0\n    }, {\n      x: 0,\n      y: 0\n    }, {\n      x: 1,\n      y: 0\n    }, {\n      x: -1,\n      y: 1\n    }, {\n      x: 0,\n      y: 1\n    }, {\n      x: 1,\n      y: 1\n    }]\n  }, {\n    coding: [{\n      x: -1,\n      y: -1\n    }, {\n      x: 0,\n      y: -1\n    }, {\n      x: 1,\n      y: -1\n    }, {\n      x: -1,\n      y: 0\n    }],\n    reference: [{\n      x: 0,\n      y: -1\n    }, {\n      x: -1,\n      y: 0\n    }, {\n      x: 0,\n      y: 0\n    }, {\n      x: 1,\n      y: 0\n    }, {\n      x: 0,\n      y: 1\n    }, {\n      x: 1,\n      y: 1\n    }]\n  }];\n  var ReusedContexts = [0x9b25, 0x0795, 0x00e5, 0x0195];\n  var RefinementReusedContexts = [0x0020, 0x0008];\n\n  function decodeBitmapTemplate0(width, height, decodingContext) {\n    var decoder = decodingContext.decoder;\n    var contexts = decodingContext.contextCache.getContexts(\"GB\");\n    var contextLabel,\n        i,\n        j,\n        pixel,\n        row,\n        row1,\n        row2,\n        bitmap = [];\n    var OLD_PIXEL_MASK = 0x7bf7;\n\n    for (i = 0; i < height; i++) {\n      row = bitmap[i] = new Uint8Array(width);\n      row1 = i < 1 ? row : bitmap[i - 1];\n      row2 = i < 2 ? row : bitmap[i - 2];\n      contextLabel = row2[0] << 13 | row2[1] << 12 | row2[2] << 11 | row1[0] << 7 | row1[1] << 6 | row1[2] << 5 | row1[3] << 4;\n\n      for (j = 0; j < width; j++) {\n        row[j] = pixel = decoder.readBit(contexts, contextLabel);\n        contextLabel = (contextLabel & OLD_PIXEL_MASK) << 1 | (j + 3 < width ? row2[j + 3] << 11 : 0) | (j + 4 < width ? row1[j + 4] << 4 : 0) | pixel;\n      }\n    }\n\n    return bitmap;\n  }\n\n  function decodeBitmap(mmr, width, height, templateIndex, prediction, skip, at, decodingContext) {\n    if (mmr) {\n      const input = new Reader(decodingContext.data, decodingContext.start, decodingContext.end);\n      return decodeMMRBitmap(input, width, height, false);\n    }\n\n    if (templateIndex === 0 && !skip && !prediction && at.length === 4 && at[0].x === 3 && at[0].y === -1 && at[1].x === -3 && at[1].y === -1 && at[2].x === 2 && at[2].y === -2 && at[3].x === -2 && at[3].y === -2) {\n      return decodeBitmapTemplate0(width, height, decodingContext);\n    }\n\n    var useskip = !!skip;\n    var template = CodingTemplates[templateIndex].concat(at);\n    template.sort(function (a, b) {\n      return a.y - b.y || a.x - b.x;\n    });\n    var templateLength = template.length;\n    var templateX = new Int8Array(templateLength);\n    var templateY = new Int8Array(templateLength);\n    var changingTemplateEntries = [];\n    var reuseMask = 0,\n        minX = 0,\n        maxX = 0,\n        minY = 0;\n    var c, k;\n\n    for (k = 0; k < templateLength; k++) {\n      templateX[k] = template[k].x;\n      templateY[k] = template[k].y;\n      minX = Math.min(minX, template[k].x);\n      maxX = Math.max(maxX, template[k].x);\n      minY = Math.min(minY, template[k].y);\n\n      if (k < templateLength - 1 && template[k].y === template[k + 1].y && template[k].x === template[k + 1].x - 1) {\n        reuseMask |= 1 << templateLength - 1 - k;\n      } else {\n        changingTemplateEntries.push(k);\n      }\n    }\n\n    var changingEntriesLength = changingTemplateEntries.length;\n    var changingTemplateX = new Int8Array(changingEntriesLength);\n    var changingTemplateY = new Int8Array(changingEntriesLength);\n    var changingTemplateBit = new Uint16Array(changingEntriesLength);\n\n    for (c = 0; c < changingEntriesLength; c++) {\n      k = changingTemplateEntries[c];\n      changingTemplateX[c] = template[k].x;\n      changingTemplateY[c] = template[k].y;\n      changingTemplateBit[c] = 1 << templateLength - 1 - k;\n    }\n\n    var sbb_left = -minX;\n    var sbb_top = -minY;\n    var sbb_right = width - maxX;\n    var pseudoPixelContext = ReusedContexts[templateIndex];\n    var row = new Uint8Array(width);\n    var bitmap = [];\n    var decoder = decodingContext.decoder;\n    var contexts = decodingContext.contextCache.getContexts(\"GB\");\n    var ltp = 0,\n        j,\n        i0,\n        j0,\n        contextLabel = 0,\n        bit,\n        shift;\n\n    for (var i = 0; i < height; i++) {\n      if (prediction) {\n        var sltp = decoder.readBit(contexts, pseudoPixelContext);\n        ltp ^= sltp;\n\n        if (ltp) {\n          bitmap.push(row);\n          continue;\n        }\n      }\n\n      row = new Uint8Array(row);\n      bitmap.push(row);\n\n      for (j = 0; j < width; j++) {\n        if (useskip && skip[i][j]) {\n          row[j] = 0;\n          continue;\n        }\n\n        if (j >= sbb_left && j < sbb_right && i >= sbb_top) {\n          contextLabel = contextLabel << 1 & reuseMask;\n\n          for (k = 0; k < changingEntriesLength; k++) {\n            i0 = i + changingTemplateY[k];\n            j0 = j + changingTemplateX[k];\n            bit = bitmap[i0][j0];\n\n            if (bit) {\n              bit = changingTemplateBit[k];\n              contextLabel |= bit;\n            }\n          }\n        } else {\n          contextLabel = 0;\n          shift = templateLength - 1;\n\n          for (k = 0; k < templateLength; k++, shift--) {\n            j0 = j + templateX[k];\n\n            if (j0 >= 0 && j0 < width) {\n              i0 = i + templateY[k];\n\n              if (i0 >= 0) {\n                bit = bitmap[i0][j0];\n\n                if (bit) {\n                  contextLabel |= bit << shift;\n                }\n              }\n            }\n          }\n        }\n\n        var pixel = decoder.readBit(contexts, contextLabel);\n        row[j] = pixel;\n      }\n    }\n\n    return bitmap;\n  }\n\n  function decodeRefinement(width, height, templateIndex, referenceBitmap, offsetX, offsetY, prediction, at, decodingContext) {\n    var codingTemplate = RefinementTemplates[templateIndex].coding;\n\n    if (templateIndex === 0) {\n      codingTemplate = codingTemplate.concat([at[0]]);\n    }\n\n    var codingTemplateLength = codingTemplate.length;\n    var codingTemplateX = new Int32Array(codingTemplateLength);\n    var codingTemplateY = new Int32Array(codingTemplateLength);\n    var k;\n\n    for (k = 0; k < codingTemplateLength; k++) {\n      codingTemplateX[k] = codingTemplate[k].x;\n      codingTemplateY[k] = codingTemplate[k].y;\n    }\n\n    var referenceTemplate = RefinementTemplates[templateIndex].reference;\n\n    if (templateIndex === 0) {\n      referenceTemplate = referenceTemplate.concat([at[1]]);\n    }\n\n    var referenceTemplateLength = referenceTemplate.length;\n    var referenceTemplateX = new Int32Array(referenceTemplateLength);\n    var referenceTemplateY = new Int32Array(referenceTemplateLength);\n\n    for (k = 0; k < referenceTemplateLength; k++) {\n      referenceTemplateX[k] = referenceTemplate[k].x;\n      referenceTemplateY[k] = referenceTemplate[k].y;\n    }\n\n    var referenceWidth = referenceBitmap[0].length;\n    var referenceHeight = referenceBitmap.length;\n    var pseudoPixelContext = RefinementReusedContexts[templateIndex];\n    var bitmap = [];\n    var decoder = decodingContext.decoder;\n    var contexts = decodingContext.contextCache.getContexts(\"GR\");\n    var ltp = 0;\n\n    for (var i = 0; i < height; i++) {\n      if (prediction) {\n        var sltp = decoder.readBit(contexts, pseudoPixelContext);\n        ltp ^= sltp;\n\n        if (ltp) {\n          throw new Jbig2Error(\"prediction is not supported\");\n        }\n      }\n\n      var row = new Uint8Array(width);\n      bitmap.push(row);\n\n      for (var j = 0; j < width; j++) {\n        var i0, j0;\n        var contextLabel = 0;\n\n        for (k = 0; k < codingTemplateLength; k++) {\n          i0 = i + codingTemplateY[k];\n          j0 = j + codingTemplateX[k];\n\n          if (i0 < 0 || j0 < 0 || j0 >= width) {\n            contextLabel <<= 1;\n          } else {\n            contextLabel = contextLabel << 1 | bitmap[i0][j0];\n          }\n        }\n\n        for (k = 0; k < referenceTemplateLength; k++) {\n          i0 = i + referenceTemplateY[k] - offsetY;\n          j0 = j + referenceTemplateX[k] - offsetX;\n\n          if (i0 < 0 || i0 >= referenceHeight || j0 < 0 || j0 >= referenceWidth) {\n            contextLabel <<= 1;\n          } else {\n            contextLabel = contextLabel << 1 | referenceBitmap[i0][j0];\n          }\n        }\n\n        var pixel = decoder.readBit(contexts, contextLabel);\n        row[j] = pixel;\n      }\n    }\n\n    return bitmap;\n  }\n\n  function decodeSymbolDictionary(huffman, refinement, symbols, numberOfNewSymbols, numberOfExportedSymbols, huffmanTables, templateIndex, at, refinementTemplateIndex, refinementAt, decodingContext, huffmanInput) {\n    if (huffman && refinement) {\n      throw new Jbig2Error(\"symbol refinement with Huffman is not supported\");\n    }\n\n    var newSymbols = [];\n    var currentHeight = 0;\n    var symbolCodeLength = (0, _core_utils.log2)(symbols.length + numberOfNewSymbols);\n    var decoder = decodingContext.decoder;\n    var contextCache = decodingContext.contextCache;\n    let tableB1, symbolWidths;\n\n    if (huffman) {\n      tableB1 = getStandardTable(1);\n      symbolWidths = [];\n      symbolCodeLength = Math.max(symbolCodeLength, 1);\n    }\n\n    while (newSymbols.length < numberOfNewSymbols) {\n      var deltaHeight = huffman ? huffmanTables.tableDeltaHeight.decode(huffmanInput) : decodeInteger(contextCache, \"IADH\", decoder);\n      currentHeight += deltaHeight;\n      let currentWidth = 0,\n          totalWidth = 0;\n      const firstSymbol = huffman ? symbolWidths.length : 0;\n\n      while (true) {\n        var deltaWidth = huffman ? huffmanTables.tableDeltaWidth.decode(huffmanInput) : decodeInteger(contextCache, \"IADW\", decoder);\n\n        if (deltaWidth === null) {\n          break;\n        }\n\n        currentWidth += deltaWidth;\n        totalWidth += currentWidth;\n        var bitmap;\n\n        if (refinement) {\n          var numberOfInstances = decodeInteger(contextCache, \"IAAI\", decoder);\n\n          if (numberOfInstances > 1) {\n            bitmap = decodeTextRegion(huffman, refinement, currentWidth, currentHeight, 0, numberOfInstances, 1, symbols.concat(newSymbols), symbolCodeLength, 0, 0, 1, 0, huffmanTables, refinementTemplateIndex, refinementAt, decodingContext, 0, huffmanInput);\n          } else {\n            var symbolId = decodeIAID(contextCache, decoder, symbolCodeLength);\n            var rdx = decodeInteger(contextCache, \"IARDX\", decoder);\n            var rdy = decodeInteger(contextCache, \"IARDY\", decoder);\n            var symbol = symbolId < symbols.length ? symbols[symbolId] : newSymbols[symbolId - symbols.length];\n            bitmap = decodeRefinement(currentWidth, currentHeight, refinementTemplateIndex, symbol, rdx, rdy, false, refinementAt, decodingContext);\n          }\n\n          newSymbols.push(bitmap);\n        } else if (huffman) {\n          symbolWidths.push(currentWidth);\n        } else {\n          bitmap = decodeBitmap(false, currentWidth, currentHeight, templateIndex, false, null, at, decodingContext);\n          newSymbols.push(bitmap);\n        }\n      }\n\n      if (huffman && !refinement) {\n        const bitmapSize = huffmanTables.tableBitmapSize.decode(huffmanInput);\n        huffmanInput.byteAlign();\n        let collectiveBitmap;\n\n        if (bitmapSize === 0) {\n          collectiveBitmap = readUncompressedBitmap(huffmanInput, totalWidth, currentHeight);\n        } else {\n          const originalEnd = huffmanInput.end;\n          const bitmapEnd = huffmanInput.position + bitmapSize;\n          huffmanInput.end = bitmapEnd;\n          collectiveBitmap = decodeMMRBitmap(huffmanInput, totalWidth, currentHeight, false);\n          huffmanInput.end = originalEnd;\n          huffmanInput.position = bitmapEnd;\n        }\n\n        const numberOfSymbolsDecoded = symbolWidths.length;\n\n        if (firstSymbol === numberOfSymbolsDecoded - 1) {\n          newSymbols.push(collectiveBitmap);\n        } else {\n          let i,\n              y,\n              xMin = 0,\n              xMax,\n              bitmapWidth,\n              symbolBitmap;\n\n          for (i = firstSymbol; i < numberOfSymbolsDecoded; i++) {\n            bitmapWidth = symbolWidths[i];\n            xMax = xMin + bitmapWidth;\n            symbolBitmap = [];\n\n            for (y = 0; y < currentHeight; y++) {\n              symbolBitmap.push(collectiveBitmap[y].subarray(xMin, xMax));\n            }\n\n            newSymbols.push(symbolBitmap);\n            xMin = xMax;\n          }\n        }\n      }\n    }\n\n    var exportedSymbols = [];\n    var flags = [],\n        currentFlag = false;\n    var totalSymbolsLength = symbols.length + numberOfNewSymbols;\n\n    while (flags.length < totalSymbolsLength) {\n      var runLength = huffman ? tableB1.decode(huffmanInput) : decodeInteger(contextCache, \"IAEX\", decoder);\n\n      while (runLength--) {\n        flags.push(currentFlag);\n      }\n\n      currentFlag = !currentFlag;\n    }\n\n    for (var i = 0, ii = symbols.length; i < ii; i++) {\n      if (flags[i]) {\n        exportedSymbols.push(symbols[i]);\n      }\n    }\n\n    for (var j = 0; j < numberOfNewSymbols; i++, j++) {\n      if (flags[i]) {\n        exportedSymbols.push(newSymbols[j]);\n      }\n    }\n\n    return exportedSymbols;\n  }\n\n  function decodeTextRegion(huffman, refinement, width, height, defaultPixelValue, numberOfSymbolInstances, stripSize, inputSymbols, symbolCodeLength, transposed, dsOffset, referenceCorner, combinationOperator, huffmanTables, refinementTemplateIndex, refinementAt, decodingContext, logStripSize, huffmanInput) {\n    if (huffman && refinement) {\n      throw new Jbig2Error(\"refinement with Huffman is not supported\");\n    }\n\n    var bitmap = [];\n    var i, row;\n\n    for (i = 0; i < height; i++) {\n      row = new Uint8Array(width);\n\n      if (defaultPixelValue) {\n        for (var j = 0; j < width; j++) {\n          row[j] = defaultPixelValue;\n        }\n      }\n\n      bitmap.push(row);\n    }\n\n    var decoder = decodingContext.decoder;\n    var contextCache = decodingContext.contextCache;\n    var stripT = huffman ? -huffmanTables.tableDeltaT.decode(huffmanInput) : -decodeInteger(contextCache, \"IADT\", decoder);\n    var firstS = 0;\n    i = 0;\n\n    while (i < numberOfSymbolInstances) {\n      var deltaT = huffman ? huffmanTables.tableDeltaT.decode(huffmanInput) : decodeInteger(contextCache, \"IADT\", decoder);\n      stripT += deltaT;\n      var deltaFirstS = huffman ? huffmanTables.tableFirstS.decode(huffmanInput) : decodeInteger(contextCache, \"IAFS\", decoder);\n      firstS += deltaFirstS;\n      var currentS = firstS;\n\n      do {\n        let currentT = 0;\n\n        if (stripSize > 1) {\n          currentT = huffman ? huffmanInput.readBits(logStripSize) : decodeInteger(contextCache, \"IAIT\", decoder);\n        }\n\n        var t = stripSize * stripT + currentT;\n        var symbolId = huffman ? huffmanTables.symbolIDTable.decode(huffmanInput) : decodeIAID(contextCache, decoder, symbolCodeLength);\n        var applyRefinement = refinement && (huffman ? huffmanInput.readBit() : decodeInteger(contextCache, \"IARI\", decoder));\n        var symbolBitmap = inputSymbols[symbolId];\n        var symbolWidth = symbolBitmap[0].length;\n        var symbolHeight = symbolBitmap.length;\n\n        if (applyRefinement) {\n          var rdw = decodeInteger(contextCache, \"IARDW\", decoder);\n          var rdh = decodeInteger(contextCache, \"IARDH\", decoder);\n          var rdx = decodeInteger(contextCache, \"IARDX\", decoder);\n          var rdy = decodeInteger(contextCache, \"IARDY\", decoder);\n          symbolWidth += rdw;\n          symbolHeight += rdh;\n          symbolBitmap = decodeRefinement(symbolWidth, symbolHeight, refinementTemplateIndex, symbolBitmap, (rdw >> 1) + rdx, (rdh >> 1) + rdy, false, refinementAt, decodingContext);\n        }\n\n        var offsetT = t - (referenceCorner & 1 ? 0 : symbolHeight - 1);\n        var offsetS = currentS - (referenceCorner & 2 ? symbolWidth - 1 : 0);\n        var s2, t2, symbolRow;\n\n        if (transposed) {\n          for (s2 = 0; s2 < symbolHeight; s2++) {\n            row = bitmap[offsetS + s2];\n\n            if (!row) {\n              continue;\n            }\n\n            symbolRow = symbolBitmap[s2];\n            var maxWidth = Math.min(width - offsetT, symbolWidth);\n\n            switch (combinationOperator) {\n              case 0:\n                for (t2 = 0; t2 < maxWidth; t2++) {\n                  row[offsetT + t2] |= symbolRow[t2];\n                }\n\n                break;\n\n              case 2:\n                for (t2 = 0; t2 < maxWidth; t2++) {\n                  row[offsetT + t2] ^= symbolRow[t2];\n                }\n\n                break;\n\n              default:\n                throw new Jbig2Error(`operator ${combinationOperator} is not supported`);\n            }\n          }\n\n          currentS += symbolHeight - 1;\n        } else {\n          for (t2 = 0; t2 < symbolHeight; t2++) {\n            row = bitmap[offsetT + t2];\n\n            if (!row) {\n              continue;\n            }\n\n            symbolRow = symbolBitmap[t2];\n\n            switch (combinationOperator) {\n              case 0:\n                for (s2 = 0; s2 < symbolWidth; s2++) {\n                  row[offsetS + s2] |= symbolRow[s2];\n                }\n\n                break;\n\n              case 2:\n                for (s2 = 0; s2 < symbolWidth; s2++) {\n                  row[offsetS + s2] ^= symbolRow[s2];\n                }\n\n                break;\n\n              default:\n                throw new Jbig2Error(`operator ${combinationOperator} is not supported`);\n            }\n          }\n\n          currentS += symbolWidth - 1;\n        }\n\n        i++;\n        var deltaS = huffman ? huffmanTables.tableDeltaS.decode(huffmanInput) : decodeInteger(contextCache, \"IADS\", decoder);\n\n        if (deltaS === null) {\n          break;\n        }\n\n        currentS += deltaS + dsOffset;\n      } while (true);\n    }\n\n    return bitmap;\n  }\n\n  function decodePatternDictionary(mmr, patternWidth, patternHeight, maxPatternIndex, template, decodingContext) {\n    const at = [];\n\n    if (!mmr) {\n      at.push({\n        x: -patternWidth,\n        y: 0\n      });\n\n      if (template === 0) {\n        at.push({\n          x: -3,\n          y: -1\n        });\n        at.push({\n          x: 2,\n          y: -2\n        });\n        at.push({\n          x: -2,\n          y: -2\n        });\n      }\n    }\n\n    const collectiveWidth = (maxPatternIndex + 1) * patternWidth;\n    const collectiveBitmap = decodeBitmap(mmr, collectiveWidth, patternHeight, template, false, null, at, decodingContext);\n    const patterns = [];\n\n    for (let i = 0; i <= maxPatternIndex; i++) {\n      const patternBitmap = [];\n      const xMin = patternWidth * i;\n      const xMax = xMin + patternWidth;\n\n      for (let y = 0; y < patternHeight; y++) {\n        patternBitmap.push(collectiveBitmap[y].subarray(xMin, xMax));\n      }\n\n      patterns.push(patternBitmap);\n    }\n\n    return patterns;\n  }\n\n  function decodeHalftoneRegion(mmr, patterns, template, regionWidth, regionHeight, defaultPixelValue, enableSkip, combinationOperator, gridWidth, gridHeight, gridOffsetX, gridOffsetY, gridVectorX, gridVectorY, decodingContext) {\n    const skip = null;\n\n    if (enableSkip) {\n      throw new Jbig2Error(\"skip is not supported\");\n    }\n\n    if (combinationOperator !== 0) {\n      throw new Jbig2Error(\"operator \" + combinationOperator + \" is not supported in halftone region\");\n    }\n\n    const regionBitmap = [];\n    let i, j, row;\n\n    for (i = 0; i < regionHeight; i++) {\n      row = new Uint8Array(regionWidth);\n\n      if (defaultPixelValue) {\n        for (j = 0; j < regionWidth; j++) {\n          row[j] = defaultPixelValue;\n        }\n      }\n\n      regionBitmap.push(row);\n    }\n\n    const numberOfPatterns = patterns.length;\n    const pattern0 = patterns[0];\n    const patternWidth = pattern0[0].length,\n          patternHeight = pattern0.length;\n    const bitsPerValue = (0, _core_utils.log2)(numberOfPatterns);\n    const at = [];\n\n    if (!mmr) {\n      at.push({\n        x: template <= 1 ? 3 : 2,\n        y: -1\n      });\n\n      if (template === 0) {\n        at.push({\n          x: -3,\n          y: -1\n        });\n        at.push({\n          x: 2,\n          y: -2\n        });\n        at.push({\n          x: -2,\n          y: -2\n        });\n      }\n    }\n\n    const grayScaleBitPlanes = [];\n    let mmrInput, bitmap;\n\n    if (mmr) {\n      mmrInput = new Reader(decodingContext.data, decodingContext.start, decodingContext.end);\n    }\n\n    for (i = bitsPerValue - 1; i >= 0; i--) {\n      if (mmr) {\n        bitmap = decodeMMRBitmap(mmrInput, gridWidth, gridHeight, true);\n      } else {\n        bitmap = decodeBitmap(false, gridWidth, gridHeight, template, false, skip, at, decodingContext);\n      }\n\n      grayScaleBitPlanes[i] = bitmap;\n    }\n\n    let mg, ng, bit, patternIndex, patternBitmap, x, y, patternRow, regionRow;\n\n    for (mg = 0; mg < gridHeight; mg++) {\n      for (ng = 0; ng < gridWidth; ng++) {\n        bit = 0;\n        patternIndex = 0;\n\n        for (j = bitsPerValue - 1; j >= 0; j--) {\n          bit = grayScaleBitPlanes[j][mg][ng] ^ bit;\n          patternIndex |= bit << j;\n        }\n\n        patternBitmap = patterns[patternIndex];\n        x = gridOffsetX + mg * gridVectorY + ng * gridVectorX >> 8;\n        y = gridOffsetY + mg * gridVectorX - ng * gridVectorY >> 8;\n\n        if (x >= 0 && x + patternWidth <= regionWidth && y >= 0 && y + patternHeight <= regionHeight) {\n          for (i = 0; i < patternHeight; i++) {\n            regionRow = regionBitmap[y + i];\n            patternRow = patternBitmap[i];\n\n            for (j = 0; j < patternWidth; j++) {\n              regionRow[x + j] |= patternRow[j];\n            }\n          }\n        } else {\n          let regionX, regionY;\n\n          for (i = 0; i < patternHeight; i++) {\n            regionY = y + i;\n\n            if (regionY < 0 || regionY >= regionHeight) {\n              continue;\n            }\n\n            regionRow = regionBitmap[regionY];\n            patternRow = patternBitmap[i];\n\n            for (j = 0; j < patternWidth; j++) {\n              regionX = x + j;\n\n              if (regionX >= 0 && regionX < regionWidth) {\n                regionRow[regionX] |= patternRow[j];\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return regionBitmap;\n  }\n\n  function readSegmentHeader(data, start) {\n    var segmentHeader = {};\n    segmentHeader.number = (0, _core_utils.readUint32)(data, start);\n    var flags = data[start + 4];\n    var segmentType = flags & 0x3f;\n\n    if (!SegmentTypes[segmentType]) {\n      throw new Jbig2Error(\"invalid segment type: \" + segmentType);\n    }\n\n    segmentHeader.type = segmentType;\n    segmentHeader.typeName = SegmentTypes[segmentType];\n    segmentHeader.deferredNonRetain = !!(flags & 0x80);\n    var pageAssociationFieldSize = !!(flags & 0x40);\n    var referredFlags = data[start + 5];\n    var referredToCount = referredFlags >> 5 & 7;\n    var retainBits = [referredFlags & 31];\n    var position = start + 6;\n\n    if (referredFlags === 7) {\n      referredToCount = (0, _core_utils.readUint32)(data, position - 1) & 0x1fffffff;\n      position += 3;\n      var bytes = referredToCount + 7 >> 3;\n      retainBits[0] = data[position++];\n\n      while (--bytes > 0) {\n        retainBits.push(data[position++]);\n      }\n    } else if (referredFlags === 5 || referredFlags === 6) {\n      throw new Jbig2Error(\"invalid referred-to flags\");\n    }\n\n    segmentHeader.retainBits = retainBits;\n    let referredToSegmentNumberSize = 4;\n\n    if (segmentHeader.number <= 256) {\n      referredToSegmentNumberSize = 1;\n    } else if (segmentHeader.number <= 65536) {\n      referredToSegmentNumberSize = 2;\n    }\n\n    var referredTo = [];\n    var i, ii;\n\n    for (i = 0; i < referredToCount; i++) {\n      let number;\n\n      if (referredToSegmentNumberSize === 1) {\n        number = data[position];\n      } else if (referredToSegmentNumberSize === 2) {\n        number = (0, _core_utils.readUint16)(data, position);\n      } else {\n        number = (0, _core_utils.readUint32)(data, position);\n      }\n\n      referredTo.push(number);\n      position += referredToSegmentNumberSize;\n    }\n\n    segmentHeader.referredTo = referredTo;\n\n    if (!pageAssociationFieldSize) {\n      segmentHeader.pageAssociation = data[position++];\n    } else {\n      segmentHeader.pageAssociation = (0, _core_utils.readUint32)(data, position);\n      position += 4;\n    }\n\n    segmentHeader.length = (0, _core_utils.readUint32)(data, position);\n    position += 4;\n\n    if (segmentHeader.length === 0xffffffff) {\n      if (segmentType === 38) {\n        var genericRegionInfo = readRegionSegmentInformation(data, position);\n        var genericRegionSegmentFlags = data[position + RegionSegmentInformationFieldLength];\n        var genericRegionMmr = !!(genericRegionSegmentFlags & 1);\n        var searchPatternLength = 6;\n        var searchPattern = new Uint8Array(searchPatternLength);\n\n        if (!genericRegionMmr) {\n          searchPattern[0] = 0xff;\n          searchPattern[1] = 0xac;\n        }\n\n        searchPattern[2] = genericRegionInfo.height >>> 24 & 0xff;\n        searchPattern[3] = genericRegionInfo.height >> 16 & 0xff;\n        searchPattern[4] = genericRegionInfo.height >> 8 & 0xff;\n        searchPattern[5] = genericRegionInfo.height & 0xff;\n\n        for (i = position, ii = data.length; i < ii; i++) {\n          var j = 0;\n\n          while (j < searchPatternLength && searchPattern[j] === data[i + j]) {\n            j++;\n          }\n\n          if (j === searchPatternLength) {\n            segmentHeader.length = i + searchPatternLength;\n            break;\n          }\n        }\n\n        if (segmentHeader.length === 0xffffffff) {\n          throw new Jbig2Error(\"segment end was not found\");\n        }\n      } else {\n        throw new Jbig2Error(\"invalid unknown segment length\");\n      }\n    }\n\n    segmentHeader.headerEnd = position;\n    return segmentHeader;\n  }\n\n  function readSegments(header, data, start, end) {\n    var segments = [];\n    var position = start;\n\n    while (position < end) {\n      var segmentHeader = readSegmentHeader(data, position);\n      position = segmentHeader.headerEnd;\n      var segment = {\n        header: segmentHeader,\n        data\n      };\n\n      if (!header.randomAccess) {\n        segment.start = position;\n        position += segmentHeader.length;\n        segment.end = position;\n      }\n\n      segments.push(segment);\n\n      if (segmentHeader.type === 51) {\n        break;\n      }\n    }\n\n    if (header.randomAccess) {\n      for (var i = 0, ii = segments.length; i < ii; i++) {\n        segments[i].start = position;\n        position += segments[i].header.length;\n        segments[i].end = position;\n      }\n    }\n\n    return segments;\n  }\n\n  function readRegionSegmentInformation(data, start) {\n    return {\n      width: (0, _core_utils.readUint32)(data, start),\n      height: (0, _core_utils.readUint32)(data, start + 4),\n      x: (0, _core_utils.readUint32)(data, start + 8),\n      y: (0, _core_utils.readUint32)(data, start + 12),\n      combinationOperator: data[start + 16] & 7\n    };\n  }\n\n  var RegionSegmentInformationFieldLength = 17;\n\n  function processSegment(segment, visitor) {\n    var header = segment.header;\n    var data = segment.data,\n        position = segment.start,\n        end = segment.end;\n    var args, at, i, atLength;\n\n    switch (header.type) {\n      case 0:\n        var dictionary = {};\n        var dictionaryFlags = (0, _core_utils.readUint16)(data, position);\n        dictionary.huffman = !!(dictionaryFlags & 1);\n        dictionary.refinement = !!(dictionaryFlags & 2);\n        dictionary.huffmanDHSelector = dictionaryFlags >> 2 & 3;\n        dictionary.huffmanDWSelector = dictionaryFlags >> 4 & 3;\n        dictionary.bitmapSizeSelector = dictionaryFlags >> 6 & 1;\n        dictionary.aggregationInstancesSelector = dictionaryFlags >> 7 & 1;\n        dictionary.bitmapCodingContextUsed = !!(dictionaryFlags & 256);\n        dictionary.bitmapCodingContextRetained = !!(dictionaryFlags & 512);\n        dictionary.template = dictionaryFlags >> 10 & 3;\n        dictionary.refinementTemplate = dictionaryFlags >> 12 & 1;\n        position += 2;\n\n        if (!dictionary.huffman) {\n          atLength = dictionary.template === 0 ? 4 : 1;\n          at = [];\n\n          for (i = 0; i < atLength; i++) {\n            at.push({\n              x: (0, _core_utils.readInt8)(data, position),\n              y: (0, _core_utils.readInt8)(data, position + 1)\n            });\n            position += 2;\n          }\n\n          dictionary.at = at;\n        }\n\n        if (dictionary.refinement && !dictionary.refinementTemplate) {\n          at = [];\n\n          for (i = 0; i < 2; i++) {\n            at.push({\n              x: (0, _core_utils.readInt8)(data, position),\n              y: (0, _core_utils.readInt8)(data, position + 1)\n            });\n            position += 2;\n          }\n\n          dictionary.refinementAt = at;\n        }\n\n        dictionary.numberOfExportedSymbols = (0, _core_utils.readUint32)(data, position);\n        position += 4;\n        dictionary.numberOfNewSymbols = (0, _core_utils.readUint32)(data, position);\n        position += 4;\n        args = [dictionary, header.number, header.referredTo, data, position, end];\n        break;\n\n      case 6:\n      case 7:\n        var textRegion = {};\n        textRegion.info = readRegionSegmentInformation(data, position);\n        position += RegionSegmentInformationFieldLength;\n        var textRegionSegmentFlags = (0, _core_utils.readUint16)(data, position);\n        position += 2;\n        textRegion.huffman = !!(textRegionSegmentFlags & 1);\n        textRegion.refinement = !!(textRegionSegmentFlags & 2);\n        textRegion.logStripSize = textRegionSegmentFlags >> 2 & 3;\n        textRegion.stripSize = 1 << textRegion.logStripSize;\n        textRegion.referenceCorner = textRegionSegmentFlags >> 4 & 3;\n        textRegion.transposed = !!(textRegionSegmentFlags & 64);\n        textRegion.combinationOperator = textRegionSegmentFlags >> 7 & 3;\n        textRegion.defaultPixelValue = textRegionSegmentFlags >> 9 & 1;\n        textRegion.dsOffset = textRegionSegmentFlags << 17 >> 27;\n        textRegion.refinementTemplate = textRegionSegmentFlags >> 15 & 1;\n\n        if (textRegion.huffman) {\n          var textRegionHuffmanFlags = (0, _core_utils.readUint16)(data, position);\n          position += 2;\n          textRegion.huffmanFS = textRegionHuffmanFlags & 3;\n          textRegion.huffmanDS = textRegionHuffmanFlags >> 2 & 3;\n          textRegion.huffmanDT = textRegionHuffmanFlags >> 4 & 3;\n          textRegion.huffmanRefinementDW = textRegionHuffmanFlags >> 6 & 3;\n          textRegion.huffmanRefinementDH = textRegionHuffmanFlags >> 8 & 3;\n          textRegion.huffmanRefinementDX = textRegionHuffmanFlags >> 10 & 3;\n          textRegion.huffmanRefinementDY = textRegionHuffmanFlags >> 12 & 3;\n          textRegion.huffmanRefinementSizeSelector = !!(textRegionHuffmanFlags & 0x4000);\n        }\n\n        if (textRegion.refinement && !textRegion.refinementTemplate) {\n          at = [];\n\n          for (i = 0; i < 2; i++) {\n            at.push({\n              x: (0, _core_utils.readInt8)(data, position),\n              y: (0, _core_utils.readInt8)(data, position + 1)\n            });\n            position += 2;\n          }\n\n          textRegion.refinementAt = at;\n        }\n\n        textRegion.numberOfSymbolInstances = (0, _core_utils.readUint32)(data, position);\n        position += 4;\n        args = [textRegion, header.referredTo, data, position, end];\n        break;\n\n      case 16:\n        const patternDictionary = {};\n        const patternDictionaryFlags = data[position++];\n        patternDictionary.mmr = !!(patternDictionaryFlags & 1);\n        patternDictionary.template = patternDictionaryFlags >> 1 & 3;\n        patternDictionary.patternWidth = data[position++];\n        patternDictionary.patternHeight = data[position++];\n        patternDictionary.maxPatternIndex = (0, _core_utils.readUint32)(data, position);\n        position += 4;\n        args = [patternDictionary, header.number, data, position, end];\n        break;\n\n      case 22:\n      case 23:\n        const halftoneRegion = {};\n        halftoneRegion.info = readRegionSegmentInformation(data, position);\n        position += RegionSegmentInformationFieldLength;\n        const halftoneRegionFlags = data[position++];\n        halftoneRegion.mmr = !!(halftoneRegionFlags & 1);\n        halftoneRegion.template = halftoneRegionFlags >> 1 & 3;\n        halftoneRegion.enableSkip = !!(halftoneRegionFlags & 8);\n        halftoneRegion.combinationOperator = halftoneRegionFlags >> 4 & 7;\n        halftoneRegion.defaultPixelValue = halftoneRegionFlags >> 7 & 1;\n        halftoneRegion.gridWidth = (0, _core_utils.readUint32)(data, position);\n        position += 4;\n        halftoneRegion.gridHeight = (0, _core_utils.readUint32)(data, position);\n        position += 4;\n        halftoneRegion.gridOffsetX = (0, _core_utils.readUint32)(data, position) & 0xffffffff;\n        position += 4;\n        halftoneRegion.gridOffsetY = (0, _core_utils.readUint32)(data, position) & 0xffffffff;\n        position += 4;\n        halftoneRegion.gridVectorX = (0, _core_utils.readUint16)(data, position);\n        position += 2;\n        halftoneRegion.gridVectorY = (0, _core_utils.readUint16)(data, position);\n        position += 2;\n        args = [halftoneRegion, header.referredTo, data, position, end];\n        break;\n\n      case 38:\n      case 39:\n        var genericRegion = {};\n        genericRegion.info = readRegionSegmentInformation(data, position);\n        position += RegionSegmentInformationFieldLength;\n        var genericRegionSegmentFlags = data[position++];\n        genericRegion.mmr = !!(genericRegionSegmentFlags & 1);\n        genericRegion.template = genericRegionSegmentFlags >> 1 & 3;\n        genericRegion.prediction = !!(genericRegionSegmentFlags & 8);\n\n        if (!genericRegion.mmr) {\n          atLength = genericRegion.template === 0 ? 4 : 1;\n          at = [];\n\n          for (i = 0; i < atLength; i++) {\n            at.push({\n              x: (0, _core_utils.readInt8)(data, position),\n              y: (0, _core_utils.readInt8)(data, position + 1)\n            });\n            position += 2;\n          }\n\n          genericRegion.at = at;\n        }\n\n        args = [genericRegion, data, position, end];\n        break;\n\n      case 48:\n        var pageInfo = {\n          width: (0, _core_utils.readUint32)(data, position),\n          height: (0, _core_utils.readUint32)(data, position + 4),\n          resolutionX: (0, _core_utils.readUint32)(data, position + 8),\n          resolutionY: (0, _core_utils.readUint32)(data, position + 12)\n        };\n\n        if (pageInfo.height === 0xffffffff) {\n          delete pageInfo.height;\n        }\n\n        var pageSegmentFlags = data[position + 16];\n        (0, _core_utils.readUint16)(data, position + 17);\n        pageInfo.lossless = !!(pageSegmentFlags & 1);\n        pageInfo.refinement = !!(pageSegmentFlags & 2);\n        pageInfo.defaultPixelValue = pageSegmentFlags >> 2 & 1;\n        pageInfo.combinationOperator = pageSegmentFlags >> 3 & 3;\n        pageInfo.requiresBuffer = !!(pageSegmentFlags & 32);\n        pageInfo.combinationOperatorOverride = !!(pageSegmentFlags & 64);\n        args = [pageInfo];\n        break;\n\n      case 49:\n        break;\n\n      case 50:\n        break;\n\n      case 51:\n        break;\n\n      case 53:\n        args = [header.number, data, position, end];\n        break;\n\n      case 62:\n        break;\n\n      default:\n        throw new Jbig2Error(`segment type ${header.typeName}(${header.type})` + \" is not implemented\");\n    }\n\n    var callbackName = \"on\" + header.typeName;\n\n    if (callbackName in visitor) {\n      visitor[callbackName].apply(visitor, args);\n    }\n  }\n\n  function processSegments(segments, visitor) {\n    for (var i = 0, ii = segments.length; i < ii; i++) {\n      processSegment(segments[i], visitor);\n    }\n  }\n\n  function parseJbig2Chunks(chunks) {\n    var visitor = new SimpleSegmentVisitor();\n\n    for (var i = 0, ii = chunks.length; i < ii; i++) {\n      var chunk = chunks[i];\n      var segments = readSegments({}, chunk.data, chunk.start, chunk.end);\n      processSegments(segments, visitor);\n    }\n\n    return visitor.buffer;\n  }\n\n  function parseJbig2(data) {\n    const end = data.length;\n    let position = 0;\n\n    if (data[position] !== 0x97 || data[position + 1] !== 0x4a || data[position + 2] !== 0x42 || data[position + 3] !== 0x32 || data[position + 4] !== 0x0d || data[position + 5] !== 0x0a || data[position + 6] !== 0x1a || data[position + 7] !== 0x0a) {\n      throw new Jbig2Error(\"parseJbig2 - invalid header.\");\n    }\n\n    const header = Object.create(null);\n    position += 8;\n    const flags = data[position++];\n    header.randomAccess = !(flags & 1);\n\n    if (!(flags & 2)) {\n      header.numberOfPages = (0, _core_utils.readUint32)(data, position);\n      position += 4;\n    }\n\n    const segments = readSegments(header, data, position, end);\n    const visitor = new SimpleSegmentVisitor();\n    processSegments(segments, visitor);\n    const {\n      width,\n      height\n    } = visitor.currentPageInfo;\n    const bitPacked = visitor.buffer;\n    const imgData = new Uint8ClampedArray(width * height);\n    let q = 0,\n        k = 0;\n\n    for (let i = 0; i < height; i++) {\n      let mask = 0,\n          buffer;\n\n      for (let j = 0; j < width; j++) {\n        if (!mask) {\n          mask = 128;\n          buffer = bitPacked[k++];\n        }\n\n        imgData[q++] = buffer & mask ? 0 : 255;\n        mask >>= 1;\n      }\n    }\n\n    return {\n      imgData,\n      width,\n      height\n    };\n  }\n\n  function SimpleSegmentVisitor() {}\n\n  SimpleSegmentVisitor.prototype = {\n    onPageInformation: function SimpleSegmentVisitor_onPageInformation(info) {\n      this.currentPageInfo = info;\n      var rowSize = info.width + 7 >> 3;\n      var buffer = new Uint8ClampedArray(rowSize * info.height);\n\n      if (info.defaultPixelValue) {\n        for (var i = 0, ii = buffer.length; i < ii; i++) {\n          buffer[i] = 0xff;\n        }\n      }\n\n      this.buffer = buffer;\n    },\n    drawBitmap: function SimpleSegmentVisitor_drawBitmap(regionInfo, bitmap) {\n      var pageInfo = this.currentPageInfo;\n      var width = regionInfo.width,\n          height = regionInfo.height;\n      var rowSize = pageInfo.width + 7 >> 3;\n      var combinationOperator = pageInfo.combinationOperatorOverride ? regionInfo.combinationOperator : pageInfo.combinationOperator;\n      var buffer = this.buffer;\n      var mask0 = 128 >> (regionInfo.x & 7);\n      var offset0 = regionInfo.y * rowSize + (regionInfo.x >> 3);\n      var i, j, mask, offset;\n\n      switch (combinationOperator) {\n        case 0:\n          for (i = 0; i < height; i++) {\n            mask = mask0;\n            offset = offset0;\n\n            for (j = 0; j < width; j++) {\n              if (bitmap[i][j]) {\n                buffer[offset] |= mask;\n              }\n\n              mask >>= 1;\n\n              if (!mask) {\n                mask = 128;\n                offset++;\n              }\n            }\n\n            offset0 += rowSize;\n          }\n\n          break;\n\n        case 2:\n          for (i = 0; i < height; i++) {\n            mask = mask0;\n            offset = offset0;\n\n            for (j = 0; j < width; j++) {\n              if (bitmap[i][j]) {\n                buffer[offset] ^= mask;\n              }\n\n              mask >>= 1;\n\n              if (!mask) {\n                mask = 128;\n                offset++;\n              }\n            }\n\n            offset0 += rowSize;\n          }\n\n          break;\n\n        default:\n          throw new Jbig2Error(`operator ${combinationOperator} is not supported`);\n      }\n    },\n    onImmediateGenericRegion: function SimpleSegmentVisitor_onImmediateGenericRegion(region, data, start, end) {\n      var regionInfo = region.info;\n      var decodingContext = new DecodingContext(data, start, end);\n      var bitmap = decodeBitmap(region.mmr, regionInfo.width, regionInfo.height, region.template, region.prediction, null, region.at, decodingContext);\n      this.drawBitmap(regionInfo, bitmap);\n    },\n    onImmediateLosslessGenericRegion: function SimpleSegmentVisitor_onImmediateLosslessGenericRegion() {\n      this.onImmediateGenericRegion.apply(this, arguments);\n    },\n    onSymbolDictionary: function SimpleSegmentVisitor_onSymbolDictionary(dictionary, currentSegment, referredSegments, data, start, end) {\n      let huffmanTables, huffmanInput;\n\n      if (dictionary.huffman) {\n        huffmanTables = getSymbolDictionaryHuffmanTables(dictionary, referredSegments, this.customTables);\n        huffmanInput = new Reader(data, start, end);\n      }\n\n      var symbols = this.symbols;\n\n      if (!symbols) {\n        this.symbols = symbols = {};\n      }\n\n      var inputSymbols = [];\n\n      for (var i = 0, ii = referredSegments.length; i < ii; i++) {\n        const referredSymbols = symbols[referredSegments[i]];\n\n        if (referredSymbols) {\n          inputSymbols = inputSymbols.concat(referredSymbols);\n        }\n      }\n\n      var decodingContext = new DecodingContext(data, start, end);\n      symbols[currentSegment] = decodeSymbolDictionary(dictionary.huffman, dictionary.refinement, inputSymbols, dictionary.numberOfNewSymbols, dictionary.numberOfExportedSymbols, huffmanTables, dictionary.template, dictionary.at, dictionary.refinementTemplate, dictionary.refinementAt, decodingContext, huffmanInput);\n    },\n    onImmediateTextRegion: function SimpleSegmentVisitor_onImmediateTextRegion(region, referredSegments, data, start, end) {\n      var regionInfo = region.info;\n      let huffmanTables, huffmanInput;\n      var symbols = this.symbols;\n      var inputSymbols = [];\n\n      for (var i = 0, ii = referredSegments.length; i < ii; i++) {\n        const referredSymbols = symbols[referredSegments[i]];\n\n        if (referredSymbols) {\n          inputSymbols = inputSymbols.concat(referredSymbols);\n        }\n      }\n\n      var symbolCodeLength = (0, _core_utils.log2)(inputSymbols.length);\n\n      if (region.huffman) {\n        huffmanInput = new Reader(data, start, end);\n        huffmanTables = getTextRegionHuffmanTables(region, referredSegments, this.customTables, inputSymbols.length, huffmanInput);\n      }\n\n      var decodingContext = new DecodingContext(data, start, end);\n      var bitmap = decodeTextRegion(region.huffman, region.refinement, regionInfo.width, regionInfo.height, region.defaultPixelValue, region.numberOfSymbolInstances, region.stripSize, inputSymbols, symbolCodeLength, region.transposed, region.dsOffset, region.referenceCorner, region.combinationOperator, huffmanTables, region.refinementTemplate, region.refinementAt, decodingContext, region.logStripSize, huffmanInput);\n      this.drawBitmap(regionInfo, bitmap);\n    },\n    onImmediateLosslessTextRegion: function SimpleSegmentVisitor_onImmediateLosslessTextRegion() {\n      this.onImmediateTextRegion.apply(this, arguments);\n    },\n\n    onPatternDictionary(dictionary, currentSegment, data, start, end) {\n      let patterns = this.patterns;\n\n      if (!patterns) {\n        this.patterns = patterns = {};\n      }\n\n      const decodingContext = new DecodingContext(data, start, end);\n      patterns[currentSegment] = decodePatternDictionary(dictionary.mmr, dictionary.patternWidth, dictionary.patternHeight, dictionary.maxPatternIndex, dictionary.template, decodingContext);\n    },\n\n    onImmediateHalftoneRegion(region, referredSegments, data, start, end) {\n      const patterns = this.patterns[referredSegments[0]];\n      const regionInfo = region.info;\n      const decodingContext = new DecodingContext(data, start, end);\n      const bitmap = decodeHalftoneRegion(region.mmr, patterns, region.template, regionInfo.width, regionInfo.height, region.defaultPixelValue, region.enableSkip, region.combinationOperator, region.gridWidth, region.gridHeight, region.gridOffsetX, region.gridOffsetY, region.gridVectorX, region.gridVectorY, decodingContext);\n      this.drawBitmap(regionInfo, bitmap);\n    },\n\n    onImmediateLosslessHalftoneRegion() {\n      this.onImmediateHalftoneRegion.apply(this, arguments);\n    },\n\n    onTables(currentSegment, data, start, end) {\n      let customTables = this.customTables;\n\n      if (!customTables) {\n        this.customTables = customTables = {};\n      }\n\n      customTables[currentSegment] = decodeTablesSegment(data, start, end);\n    }\n\n  };\n\n  function HuffmanLine(lineData) {\n    if (lineData.length === 2) {\n      this.isOOB = true;\n      this.rangeLow = 0;\n      this.prefixLength = lineData[0];\n      this.rangeLength = 0;\n      this.prefixCode = lineData[1];\n      this.isLowerRange = false;\n    } else {\n      this.isOOB = false;\n      this.rangeLow = lineData[0];\n      this.prefixLength = lineData[1];\n      this.rangeLength = lineData[2];\n      this.prefixCode = lineData[3];\n      this.isLowerRange = lineData[4] === \"lower\";\n    }\n  }\n\n  function HuffmanTreeNode(line) {\n    this.children = [];\n\n    if (line) {\n      this.isLeaf = true;\n      this.rangeLength = line.rangeLength;\n      this.rangeLow = line.rangeLow;\n      this.isLowerRange = line.isLowerRange;\n      this.isOOB = line.isOOB;\n    } else {\n      this.isLeaf = false;\n    }\n  }\n\n  HuffmanTreeNode.prototype = {\n    buildTree(line, shift) {\n      const bit = line.prefixCode >> shift & 1;\n\n      if (shift <= 0) {\n        this.children[bit] = new HuffmanTreeNode(line);\n      } else {\n        let node = this.children[bit];\n\n        if (!node) {\n          this.children[bit] = node = new HuffmanTreeNode(null);\n        }\n\n        node.buildTree(line, shift - 1);\n      }\n    },\n\n    decodeNode(reader) {\n      if (this.isLeaf) {\n        if (this.isOOB) {\n          return null;\n        }\n\n        const htOffset = reader.readBits(this.rangeLength);\n        return this.rangeLow + (this.isLowerRange ? -htOffset : htOffset);\n      }\n\n      const node = this.children[reader.readBit()];\n\n      if (!node) {\n        throw new Jbig2Error(\"invalid Huffman data\");\n      }\n\n      return node.decodeNode(reader);\n    }\n\n  };\n\n  function HuffmanTable(lines, prefixCodesDone) {\n    if (!prefixCodesDone) {\n      this.assignPrefixCodes(lines);\n    }\n\n    this.rootNode = new HuffmanTreeNode(null);\n\n    for (let i = 0, ii = lines.length; i < ii; i++) {\n      const line = lines[i];\n\n      if (line.prefixLength > 0) {\n        this.rootNode.buildTree(line, line.prefixLength - 1);\n      }\n    }\n  }\n\n  HuffmanTable.prototype = {\n    decode(reader) {\n      return this.rootNode.decodeNode(reader);\n    },\n\n    assignPrefixCodes(lines) {\n      const linesLength = lines.length;\n      let prefixLengthMax = 0;\n\n      for (let i = 0; i < linesLength; i++) {\n        prefixLengthMax = Math.max(prefixLengthMax, lines[i].prefixLength);\n      }\n\n      const histogram = new Uint32Array(prefixLengthMax + 1);\n\n      for (let i = 0; i < linesLength; i++) {\n        histogram[lines[i].prefixLength]++;\n      }\n\n      let currentLength = 1,\n          firstCode = 0,\n          currentCode,\n          currentTemp,\n          line;\n      histogram[0] = 0;\n\n      while (currentLength <= prefixLengthMax) {\n        firstCode = firstCode + histogram[currentLength - 1] << 1;\n        currentCode = firstCode;\n        currentTemp = 0;\n\n        while (currentTemp < linesLength) {\n          line = lines[currentTemp];\n\n          if (line.prefixLength === currentLength) {\n            line.prefixCode = currentCode;\n            currentCode++;\n          }\n\n          currentTemp++;\n        }\n\n        currentLength++;\n      }\n    }\n\n  };\n\n  function decodeTablesSegment(data, start, end) {\n    const flags = data[start];\n    const lowestValue = (0, _core_utils.readUint32)(data, start + 1) & 0xffffffff;\n    const highestValue = (0, _core_utils.readUint32)(data, start + 5) & 0xffffffff;\n    const reader = new Reader(data, start + 9, end);\n    const prefixSizeBits = (flags >> 1 & 7) + 1;\n    const rangeSizeBits = (flags >> 4 & 7) + 1;\n    const lines = [];\n    let prefixLength,\n        rangeLength,\n        currentRangeLow = lowestValue;\n\n    do {\n      prefixLength = reader.readBits(prefixSizeBits);\n      rangeLength = reader.readBits(rangeSizeBits);\n      lines.push(new HuffmanLine([currentRangeLow, prefixLength, rangeLength, 0]));\n      currentRangeLow += 1 << rangeLength;\n    } while (currentRangeLow < highestValue);\n\n    prefixLength = reader.readBits(prefixSizeBits);\n    lines.push(new HuffmanLine([lowestValue - 1, prefixLength, 32, 0, \"lower\"]));\n    prefixLength = reader.readBits(prefixSizeBits);\n    lines.push(new HuffmanLine([highestValue, prefixLength, 32, 0]));\n\n    if (flags & 1) {\n      prefixLength = reader.readBits(prefixSizeBits);\n      lines.push(new HuffmanLine([prefixLength, 0]));\n    }\n\n    return new HuffmanTable(lines, false);\n  }\n\n  const standardTablesCache = {};\n\n  function getStandardTable(number) {\n    let table = standardTablesCache[number];\n\n    if (table) {\n      return table;\n    }\n\n    let lines;\n\n    switch (number) {\n      case 1:\n        lines = [[0, 1, 4, 0x0], [16, 2, 8, 0x2], [272, 3, 16, 0x6], [65808, 3, 32, 0x7]];\n        break;\n\n      case 2:\n        lines = [[0, 1, 0, 0x0], [1, 2, 0, 0x2], [2, 3, 0, 0x6], [3, 4, 3, 0xe], [11, 5, 6, 0x1e], [75, 6, 32, 0x3e], [6, 0x3f]];\n        break;\n\n      case 3:\n        lines = [[-256, 8, 8, 0xfe], [0, 1, 0, 0x0], [1, 2, 0, 0x2], [2, 3, 0, 0x6], [3, 4, 3, 0xe], [11, 5, 6, 0x1e], [-257, 8, 32, 0xff, \"lower\"], [75, 7, 32, 0x7e], [6, 0x3e]];\n        break;\n\n      case 4:\n        lines = [[1, 1, 0, 0x0], [2, 2, 0, 0x2], [3, 3, 0, 0x6], [4, 4, 3, 0xe], [12, 5, 6, 0x1e], [76, 5, 32, 0x1f]];\n        break;\n\n      case 5:\n        lines = [[-255, 7, 8, 0x7e], [1, 1, 0, 0x0], [2, 2, 0, 0x2], [3, 3, 0, 0x6], [4, 4, 3, 0xe], [12, 5, 6, 0x1e], [-256, 7, 32, 0x7f, \"lower\"], [76, 6, 32, 0x3e]];\n        break;\n\n      case 6:\n        lines = [[-2048, 5, 10, 0x1c], [-1024, 4, 9, 0x8], [-512, 4, 8, 0x9], [-256, 4, 7, 0xa], [-128, 5, 6, 0x1d], [-64, 5, 5, 0x1e], [-32, 4, 5, 0xb], [0, 2, 7, 0x0], [128, 3, 7, 0x2], [256, 3, 8, 0x3], [512, 4, 9, 0xc], [1024, 4, 10, 0xd], [-2049, 6, 32, 0x3e, \"lower\"], [2048, 6, 32, 0x3f]];\n        break;\n\n      case 7:\n        lines = [[-1024, 4, 9, 0x8], [-512, 3, 8, 0x0], [-256, 4, 7, 0x9], [-128, 5, 6, 0x1a], [-64, 5, 5, 0x1b], [-32, 4, 5, 0xa], [0, 4, 5, 0xb], [32, 5, 5, 0x1c], [64, 5, 6, 0x1d], [128, 4, 7, 0xc], [256, 3, 8, 0x1], [512, 3, 9, 0x2], [1024, 3, 10, 0x3], [-1025, 5, 32, 0x1e, \"lower\"], [2048, 5, 32, 0x1f]];\n        break;\n\n      case 8:\n        lines = [[-15, 8, 3, 0xfc], [-7, 9, 1, 0x1fc], [-5, 8, 1, 0xfd], [-3, 9, 0, 0x1fd], [-2, 7, 0, 0x7c], [-1, 4, 0, 0xa], [0, 2, 1, 0x0], [2, 5, 0, 0x1a], [3, 6, 0, 0x3a], [4, 3, 4, 0x4], [20, 6, 1, 0x3b], [22, 4, 4, 0xb], [38, 4, 5, 0xc], [70, 5, 6, 0x1b], [134, 5, 7, 0x1c], [262, 6, 7, 0x3c], [390, 7, 8, 0x7d], [646, 6, 10, 0x3d], [-16, 9, 32, 0x1fe, \"lower\"], [1670, 9, 32, 0x1ff], [2, 0x1]];\n        break;\n\n      case 9:\n        lines = [[-31, 8, 4, 0xfc], [-15, 9, 2, 0x1fc], [-11, 8, 2, 0xfd], [-7, 9, 1, 0x1fd], [-5, 7, 1, 0x7c], [-3, 4, 1, 0xa], [-1, 3, 1, 0x2], [1, 3, 1, 0x3], [3, 5, 1, 0x1a], [5, 6, 1, 0x3a], [7, 3, 5, 0x4], [39, 6, 2, 0x3b], [43, 4, 5, 0xb], [75, 4, 6, 0xc], [139, 5, 7, 0x1b], [267, 5, 8, 0x1c], [523, 6, 8, 0x3c], [779, 7, 9, 0x7d], [1291, 6, 11, 0x3d], [-32, 9, 32, 0x1fe, \"lower\"], [3339, 9, 32, 0x1ff], [2, 0x0]];\n        break;\n\n      case 10:\n        lines = [[-21, 7, 4, 0x7a], [-5, 8, 0, 0xfc], [-4, 7, 0, 0x7b], [-3, 5, 0, 0x18], [-2, 2, 2, 0x0], [2, 5, 0, 0x19], [3, 6, 0, 0x36], [4, 7, 0, 0x7c], [5, 8, 0, 0xfd], [6, 2, 6, 0x1], [70, 5, 5, 0x1a], [102, 6, 5, 0x37], [134, 6, 6, 0x38], [198, 6, 7, 0x39], [326, 6, 8, 0x3a], [582, 6, 9, 0x3b], [1094, 6, 10, 0x3c], [2118, 7, 11, 0x7d], [-22, 8, 32, 0xfe, \"lower\"], [4166, 8, 32, 0xff], [2, 0x2]];\n        break;\n\n      case 11:\n        lines = [[1, 1, 0, 0x0], [2, 2, 1, 0x2], [4, 4, 0, 0xc], [5, 4, 1, 0xd], [7, 5, 1, 0x1c], [9, 5, 2, 0x1d], [13, 6, 2, 0x3c], [17, 7, 2, 0x7a], [21, 7, 3, 0x7b], [29, 7, 4, 0x7c], [45, 7, 5, 0x7d], [77, 7, 6, 0x7e], [141, 7, 32, 0x7f]];\n        break;\n\n      case 12:\n        lines = [[1, 1, 0, 0x0], [2, 2, 0, 0x2], [3, 3, 1, 0x6], [5, 5, 0, 0x1c], [6, 5, 1, 0x1d], [8, 6, 1, 0x3c], [10, 7, 0, 0x7a], [11, 7, 1, 0x7b], [13, 7, 2, 0x7c], [17, 7, 3, 0x7d], [25, 7, 4, 0x7e], [41, 8, 5, 0xfe], [73, 8, 32, 0xff]];\n        break;\n\n      case 13:\n        lines = [[1, 1, 0, 0x0], [2, 3, 0, 0x4], [3, 4, 0, 0xc], [4, 5, 0, 0x1c], [5, 4, 1, 0xd], [7, 3, 3, 0x5], [15, 6, 1, 0x3a], [17, 6, 2, 0x3b], [21, 6, 3, 0x3c], [29, 6, 4, 0x3d], [45, 6, 5, 0x3e], [77, 7, 6, 0x7e], [141, 7, 32, 0x7f]];\n        break;\n\n      case 14:\n        lines = [[-2, 3, 0, 0x4], [-1, 3, 0, 0x5], [0, 1, 0, 0x0], [1, 3, 0, 0x6], [2, 3, 0, 0x7]];\n        break;\n\n      case 15:\n        lines = [[-24, 7, 4, 0x7c], [-8, 6, 2, 0x3c], [-4, 5, 1, 0x1c], [-2, 4, 0, 0xc], [-1, 3, 0, 0x4], [0, 1, 0, 0x0], [1, 3, 0, 0x5], [2, 4, 0, 0xd], [3, 5, 1, 0x1d], [5, 6, 2, 0x3d], [9, 7, 4, 0x7d], [-25, 7, 32, 0x7e, \"lower\"], [25, 7, 32, 0x7f]];\n        break;\n\n      default:\n        throw new Jbig2Error(`standard table B.${number} does not exist`);\n    }\n\n    for (let i = 0, ii = lines.length; i < ii; i++) {\n      lines[i] = new HuffmanLine(lines[i]);\n    }\n\n    table = new HuffmanTable(lines, true);\n    standardTablesCache[number] = table;\n    return table;\n  }\n\n  function Reader(data, start, end) {\n    this.data = data;\n    this.start = start;\n    this.end = end;\n    this.position = start;\n    this.shift = -1;\n    this.currentByte = 0;\n  }\n\n  Reader.prototype = {\n    readBit() {\n      if (this.shift < 0) {\n        if (this.position >= this.end) {\n          throw new Jbig2Error(\"end of data while reading bit\");\n        }\n\n        this.currentByte = this.data[this.position++];\n        this.shift = 7;\n      }\n\n      const bit = this.currentByte >> this.shift & 1;\n      this.shift--;\n      return bit;\n    },\n\n    readBits(numBits) {\n      let result = 0,\n          i;\n\n      for (i = numBits - 1; i >= 0; i--) {\n        result |= this.readBit() << i;\n      }\n\n      return result;\n    },\n\n    byteAlign() {\n      this.shift = -1;\n    },\n\n    next() {\n      if (this.position >= this.end) {\n        return -1;\n      }\n\n      return this.data[this.position++];\n    }\n\n  };\n\n  function getCustomHuffmanTable(index, referredTo, customTables) {\n    let currentIndex = 0;\n\n    for (let i = 0, ii = referredTo.length; i < ii; i++) {\n      const table = customTables[referredTo[i]];\n\n      if (table) {\n        if (index === currentIndex) {\n          return table;\n        }\n\n        currentIndex++;\n      }\n    }\n\n    throw new Jbig2Error(\"can't find custom Huffman table\");\n  }\n\n  function getTextRegionHuffmanTables(textRegion, referredTo, customTables, numberOfSymbols, reader) {\n    const codes = [];\n\n    for (let i = 0; i <= 34; i++) {\n      const codeLength = reader.readBits(4);\n      codes.push(new HuffmanLine([i, codeLength, 0, 0]));\n    }\n\n    const runCodesTable = new HuffmanTable(codes, false);\n    codes.length = 0;\n\n    for (let i = 0; i < numberOfSymbols;) {\n      const codeLength = runCodesTable.decode(reader);\n\n      if (codeLength >= 32) {\n        let repeatedLength, numberOfRepeats, j;\n\n        switch (codeLength) {\n          case 32:\n            if (i === 0) {\n              throw new Jbig2Error(\"no previous value in symbol ID table\");\n            }\n\n            numberOfRepeats = reader.readBits(2) + 3;\n            repeatedLength = codes[i - 1].prefixLength;\n            break;\n\n          case 33:\n            numberOfRepeats = reader.readBits(3) + 3;\n            repeatedLength = 0;\n            break;\n\n          case 34:\n            numberOfRepeats = reader.readBits(7) + 11;\n            repeatedLength = 0;\n            break;\n\n          default:\n            throw new Jbig2Error(\"invalid code length in symbol ID table\");\n        }\n\n        for (j = 0; j < numberOfRepeats; j++) {\n          codes.push(new HuffmanLine([i, repeatedLength, 0, 0]));\n          i++;\n        }\n      } else {\n        codes.push(new HuffmanLine([i, codeLength, 0, 0]));\n        i++;\n      }\n    }\n\n    reader.byteAlign();\n    const symbolIDTable = new HuffmanTable(codes, false);\n    let customIndex = 0,\n        tableFirstS,\n        tableDeltaS,\n        tableDeltaT;\n\n    switch (textRegion.huffmanFS) {\n      case 0:\n      case 1:\n        tableFirstS = getStandardTable(textRegion.huffmanFS + 6);\n        break;\n\n      case 3:\n        tableFirstS = getCustomHuffmanTable(customIndex, referredTo, customTables);\n        customIndex++;\n        break;\n\n      default:\n        throw new Jbig2Error(\"invalid Huffman FS selector\");\n    }\n\n    switch (textRegion.huffmanDS) {\n      case 0:\n      case 1:\n      case 2:\n        tableDeltaS = getStandardTable(textRegion.huffmanDS + 8);\n        break;\n\n      case 3:\n        tableDeltaS = getCustomHuffmanTable(customIndex, referredTo, customTables);\n        customIndex++;\n        break;\n\n      default:\n        throw new Jbig2Error(\"invalid Huffman DS selector\");\n    }\n\n    switch (textRegion.huffmanDT) {\n      case 0:\n      case 1:\n      case 2:\n        tableDeltaT = getStandardTable(textRegion.huffmanDT + 11);\n        break;\n\n      case 3:\n        tableDeltaT = getCustomHuffmanTable(customIndex, referredTo, customTables);\n        customIndex++;\n        break;\n\n      default:\n        throw new Jbig2Error(\"invalid Huffman DT selector\");\n    }\n\n    if (textRegion.refinement) {\n      throw new Jbig2Error(\"refinement with Huffman is not supported\");\n    }\n\n    return {\n      symbolIDTable,\n      tableFirstS,\n      tableDeltaS,\n      tableDeltaT\n    };\n  }\n\n  function getSymbolDictionaryHuffmanTables(dictionary, referredTo, customTables) {\n    let customIndex = 0,\n        tableDeltaHeight,\n        tableDeltaWidth;\n\n    switch (dictionary.huffmanDHSelector) {\n      case 0:\n      case 1:\n        tableDeltaHeight = getStandardTable(dictionary.huffmanDHSelector + 4);\n        break;\n\n      case 3:\n        tableDeltaHeight = getCustomHuffmanTable(customIndex, referredTo, customTables);\n        customIndex++;\n        break;\n\n      default:\n        throw new Jbig2Error(\"invalid Huffman DH selector\");\n    }\n\n    switch (dictionary.huffmanDWSelector) {\n      case 0:\n      case 1:\n        tableDeltaWidth = getStandardTable(dictionary.huffmanDWSelector + 2);\n        break;\n\n      case 3:\n        tableDeltaWidth = getCustomHuffmanTable(customIndex, referredTo, customTables);\n        customIndex++;\n        break;\n\n      default:\n        throw new Jbig2Error(\"invalid Huffman DW selector\");\n    }\n\n    let tableBitmapSize, tableAggregateInstances;\n\n    if (dictionary.bitmapSizeSelector) {\n      tableBitmapSize = getCustomHuffmanTable(customIndex, referredTo, customTables);\n      customIndex++;\n    } else {\n      tableBitmapSize = getStandardTable(1);\n    }\n\n    if (dictionary.aggregationInstancesSelector) {\n      tableAggregateInstances = getCustomHuffmanTable(customIndex, referredTo, customTables);\n    } else {\n      tableAggregateInstances = getStandardTable(1);\n    }\n\n    return {\n      tableDeltaHeight,\n      tableDeltaWidth,\n      tableBitmapSize,\n      tableAggregateInstances\n    };\n  }\n\n  function readUncompressedBitmap(reader, width, height) {\n    const bitmap = [];\n\n    for (let y = 0; y < height; y++) {\n      const row = new Uint8Array(width);\n      bitmap.push(row);\n\n      for (let x = 0; x < width; x++) {\n        row[x] = reader.readBit();\n      }\n\n      reader.byteAlign();\n    }\n\n    return bitmap;\n  }\n\n  function decodeMMRBitmap(input, width, height, endOfBlock) {\n    const params = {\n      K: -1,\n      Columns: width,\n      Rows: height,\n      BlackIs1: true,\n      EndOfBlock: endOfBlock\n    };\n    const decoder = new _ccitt.CCITTFaxDecoder(input, params);\n    const bitmap = [];\n    let currentByte,\n        eof = false;\n\n    for (let y = 0; y < height; y++) {\n      const row = new Uint8Array(width);\n      bitmap.push(row);\n      let shift = -1;\n\n      for (let x = 0; x < width; x++) {\n        if (shift < 0) {\n          currentByte = decoder.readNextChar();\n\n          if (currentByte === -1) {\n            currentByte = 0;\n            eof = true;\n          }\n\n          shift = 7;\n        }\n\n        row[x] = currentByte >> shift & 1;\n        shift--;\n      }\n    }\n\n    if (endOfBlock && !eof) {\n      const lookForEOFLimit = 5;\n\n      for (let i = 0; i < lookForEOFLimit; i++) {\n        if (decoder.readNextChar() === -1) {\n          break;\n        }\n      }\n    }\n\n    return bitmap;\n  }\n\n  function Jbig2Image() {}\n\n  Jbig2Image.prototype = {\n    parseChunks(chunks) {\n      return parseJbig2Chunks(chunks);\n    },\n\n    parse(data) {\n      const {\n        imgData,\n        width,\n        height\n      } = parseJbig2(data);\n      this.width = width;\n      this.height = height;\n      return imgData;\n    }\n\n  };\n  return Jbig2Image;\n}();\n\nexports.Jbig2Image = Jbig2Image;\n\n/***/ }),\n/* 17 */\n/***/ ((__unused_webpack_module, exports) => {\n\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.ArithmeticDecoder = void 0;\nconst QeTable = [{\n  qe: 0x5601,\n  nmps: 1,\n  nlps: 1,\n  switchFlag: 1\n}, {\n  qe: 0x3401,\n  nmps: 2,\n  nlps: 6,\n  switchFlag: 0\n}, {\n  qe: 0x1801,\n  nmps: 3,\n  nlps: 9,\n  switchFlag: 0\n}, {\n  qe: 0x0ac1,\n  nmps: 4,\n  nlps: 12,\n  switchFlag: 0\n}, {\n  qe: 0x0521,\n  nmps: 5,\n  nlps: 29,\n  switchFlag: 0\n}, {\n  qe: 0x0221,\n  nmps: 38,\n  nlps: 33,\n  switchFlag: 0\n}, {\n  qe: 0x5601,\n  nmps: 7,\n  nlps: 6,\n  switchFlag: 1\n}, {\n  qe: 0x5401,\n  nmps: 8,\n  nlps: 14,\n  switchFlag: 0\n}, {\n  qe: 0x4801,\n  nmps: 9,\n  nlps: 14,\n  switchFlag: 0\n}, {\n  qe: 0x3801,\n  nmps: 10,\n  nlps: 14,\n  switchFlag: 0\n}, {\n  qe: 0x3001,\n  nmps: 11,\n  nlps: 17,\n  switchFlag: 0\n}, {\n  qe: 0x2401,\n  nmps: 12,\n  nlps: 18,\n  switchFlag: 0\n}, {\n  qe: 0x1c01,\n  nmps: 13,\n  nlps: 20,\n  switchFlag: 0\n}, {\n  qe: 0x1601,\n  nmps: 29,\n  nlps: 21,\n  switchFlag: 0\n}, {\n  qe: 0x5601,\n  nmps: 15,\n  nlps: 14,\n  switchFlag: 1\n}, {\n  qe: 0x5401,\n  nmps: 16,\n  nlps: 14,\n  switchFlag: 0\n}, {\n  qe: 0x5101,\n  nmps: 17,\n  nlps: 15,\n  switchFlag: 0\n}, {\n  qe: 0x4801,\n  nmps: 18,\n  nlps: 16,\n  switchFlag: 0\n}, {\n  qe: 0x3801,\n  nmps: 19,\n  nlps: 17,\n  switchFlag: 0\n}, {\n  qe: 0x3401,\n  nmps: 20,\n  nlps: 18,\n  switchFlag: 0\n}, {\n  qe: 0x3001,\n  nmps: 21,\n  nlps: 19,\n  switchFlag: 0\n}, {\n  qe: 0x2801,\n  nmps: 22,\n  nlps: 19,\n  switchFlag: 0\n}, {\n  qe: 0x2401,\n  nmps: 23,\n  nlps: 20,\n  switchFlag: 0\n}, {\n  qe: 0x2201,\n  nmps: 24,\n  nlps: 21,\n  switchFlag: 0\n}, {\n  qe: 0x1c01,\n  nmps: 25,\n  nlps: 22,\n  switchFlag: 0\n}, {\n  qe: 0x1801,\n  nmps: 26,\n  nlps: 23,\n  switchFlag: 0\n}, {\n  qe: 0x1601,\n  nmps: 27,\n  nlps: 24,\n  switchFlag: 0\n}, {\n  qe: 0x1401,\n  nmps: 28,\n  nlps: 25,\n  switchFlag: 0\n}, {\n  qe: 0x1201,\n  nmps: 29,\n  nlps: 26,\n  switchFlag: 0\n}, {\n  qe: 0x1101,\n  nmps: 30,\n  nlps: 27,\n  switchFlag: 0\n}, {\n  qe: 0x0ac1,\n  nmps: 31,\n  nlps: 28,\n  switchFlag: 0\n}, {\n  qe: 0x09c1,\n  nmps: 32,\n  nlps: 29,\n  switchFlag: 0\n}, {\n  qe: 0x08a1,\n  nmps: 33,\n  nlps: 30,\n  switchFlag: 0\n}, {\n  qe: 0x0521,\n  nmps: 34,\n  nlps: 31,\n  switchFlag: 0\n}, {\n  qe: 0x0441,\n  nmps: 35,\n  nlps: 32,\n  switchFlag: 0\n}, {\n  qe: 0x02a1,\n  nmps: 36,\n  nlps: 33,\n  switchFlag: 0\n}, {\n  qe: 0x0221,\n  nmps: 37,\n  nlps: 34,\n  switchFlag: 0\n}, {\n  qe: 0x0141,\n  nmps: 38,\n  nlps: 35,\n  switchFlag: 0\n}, {\n  qe: 0x0111,\n  nmps: 39,\n  nlps: 36,\n  switchFlag: 0\n}, {\n  qe: 0x0085,\n  nmps: 40,\n  nlps: 37,\n  switchFlag: 0\n}, {\n  qe: 0x0049,\n  nmps: 41,\n  nlps: 38,\n  switchFlag: 0\n}, {\n  qe: 0x0025,\n  nmps: 42,\n  nlps: 39,\n  switchFlag: 0\n}, {\n  qe: 0x0015,\n  nmps: 43,\n  nlps: 40,\n  switchFlag: 0\n}, {\n  qe: 0x0009,\n  nmps: 44,\n  nlps: 41,\n  switchFlag: 0\n}, {\n  qe: 0x0005,\n  nmps: 45,\n  nlps: 42,\n  switchFlag: 0\n}, {\n  qe: 0x0001,\n  nmps: 45,\n  nlps: 43,\n  switchFlag: 0\n}, {\n  qe: 0x5601,\n  nmps: 46,\n  nlps: 46,\n  switchFlag: 0\n}];\n\nclass ArithmeticDecoder {\n  constructor(data, start, end) {\n    this.data = data;\n    this.bp = start;\n    this.dataEnd = end;\n    this.chigh = data[start];\n    this.clow = 0;\n    this.byteIn();\n    this.chigh = this.chigh << 7 & 0xffff | this.clow >> 9 & 0x7f;\n    this.clow = this.clow << 7 & 0xffff;\n    this.ct -= 7;\n    this.a = 0x8000;\n  }\n\n  byteIn() {\n    const data = this.data;\n    let bp = this.bp;\n\n    if (data[bp] === 0xff) {\n      if (data[bp + 1] > 0x8f) {\n        this.clow += 0xff00;\n        this.ct = 8;\n      } else {\n        bp++;\n        this.clow += data[bp] << 9;\n        this.ct = 7;\n        this.bp = bp;\n      }\n    } else {\n      bp++;\n      this.clow += bp < this.dataEnd ? data[bp] << 8 : 0xff00;\n      this.ct = 8;\n      this.bp = bp;\n    }\n\n    if (this.clow > 0xffff) {\n      this.chigh += this.clow >> 16;\n      this.clow &= 0xffff;\n    }\n  }\n\n  readBit(contexts, pos) {\n    let cx_index = contexts[pos] >> 1,\n        cx_mps = contexts[pos] & 1;\n    const qeTableIcx = QeTable[cx_index];\n    const qeIcx = qeTableIcx.qe;\n    let d;\n    let a = this.a - qeIcx;\n\n    if (this.chigh < qeIcx) {\n      if (a < qeIcx) {\n        a = qeIcx;\n        d = cx_mps;\n        cx_index = qeTableIcx.nmps;\n      } else {\n        a = qeIcx;\n        d = 1 ^ cx_mps;\n\n        if (qeTableIcx.switchFlag === 1) {\n          cx_mps = d;\n        }\n\n        cx_index = qeTableIcx.nlps;\n      }\n    } else {\n      this.chigh -= qeIcx;\n\n      if ((a & 0x8000) !== 0) {\n        this.a = a;\n        return cx_mps;\n      }\n\n      if (a < qeIcx) {\n        d = 1 ^ cx_mps;\n\n        if (qeTableIcx.switchFlag === 1) {\n          cx_mps = d;\n        }\n\n        cx_index = qeTableIcx.nlps;\n      } else {\n        d = cx_mps;\n        cx_index = qeTableIcx.nmps;\n      }\n    }\n\n    do {\n      if (this.ct === 0) {\n        this.byteIn();\n      }\n\n      a <<= 1;\n      this.chigh = this.chigh << 1 & 0xffff | this.clow >> 15 & 1;\n      this.clow = this.clow << 1 & 0xffff;\n      this.ct--;\n    } while ((a & 0x8000) === 0);\n\n    this.a = a;\n    contexts[pos] = cx_index << 1 | cx_mps;\n    return d;\n  }\n\n}\n\nexports.ArithmeticDecoder = ArithmeticDecoder;\n\n/***/ }),\n/* 18 */\n/***/ ((__unused_webpack_module, exports, __w_pdfjs_require__) => {\n\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.JpegStream = void 0;\n\nvar _stream = __w_pdfjs_require__(12);\n\nvar _primitives = __w_pdfjs_require__(5);\n\nvar _jpg = __w_pdfjs_require__(19);\n\nvar _util = __w_pdfjs_require__(2);\n\nconst JpegStream = function JpegStreamClosure() {\n  function JpegStream(stream, maybeLength, dict, params) {\n    let ch;\n\n    while ((ch = stream.getByte()) !== -1) {\n      if (ch === 0xff) {\n        stream.skip(-1);\n        break;\n      }\n    }\n\n    this.stream = stream;\n    this.maybeLength = maybeLength;\n    this.dict = dict;\n    this.params = params;\n\n    _stream.DecodeStream.call(this, maybeLength);\n  }\n\n  JpegStream.prototype = Object.create(_stream.DecodeStream.prototype);\n  Object.defineProperty(JpegStream.prototype, \"bytes\", {\n    get: function JpegStream_bytes() {\n      return (0, _util.shadow)(this, \"bytes\", this.stream.getBytes(this.maybeLength));\n    },\n    configurable: true\n  });\n\n  JpegStream.prototype.ensureBuffer = function (requested) {};\n\n  JpegStream.prototype.readBlock = function () {\n    if (this.eof) {\n      return;\n    }\n\n    const jpegOptions = {\n      decodeTransform: undefined,\n      colorTransform: undefined\n    };\n    const decodeArr = this.dict.getArray(\"Decode\", \"D\");\n\n    if (this.forceRGB && Array.isArray(decodeArr)) {\n      const bitsPerComponent = this.dict.get(\"BitsPerComponent\") || 8;\n      const decodeArrLength = decodeArr.length;\n      const transform = new Int32Array(decodeArrLength);\n      let transformNeeded = false;\n      const maxValue = (1 << bitsPerComponent) - 1;\n\n      for (let i = 0; i < decodeArrLength; i += 2) {\n        transform[i] = (decodeArr[i + 1] - decodeArr[i]) * 256 | 0;\n        transform[i + 1] = decodeArr[i] * maxValue | 0;\n\n        if (transform[i] !== 256 || transform[i + 1] !== 0) {\n          transformNeeded = true;\n        }\n      }\n\n      if (transformNeeded) {\n        jpegOptions.decodeTransform = transform;\n      }\n    }\n\n    if ((0, _primitives.isDict)(this.params)) {\n      const colorTransform = this.params.get(\"ColorTransform\");\n\n      if (Number.isInteger(colorTransform)) {\n        jpegOptions.colorTransform = colorTransform;\n      }\n    }\n\n    const jpegImage = new _jpg.JpegImage(jpegOptions);\n    jpegImage.parse(this.bytes);\n    const data = jpegImage.getData({\n      width: this.drawWidth,\n      height: this.drawHeight,\n      forceRGB: this.forceRGB,\n      isSourcePDF: true\n    });\n    this.buffer = data;\n    this.bufferLength = data.length;\n    this.eof = true;\n  };\n\n  return JpegStream;\n}();\n\nexports.JpegStream = JpegStream;\n\n/***/ }),\n/* 19 */\n/***/ ((__unused_webpack_module, exports, __w_pdfjs_require__) => {\n\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.JpegImage = void 0;\n\nvar _util = __w_pdfjs_require__(2);\n\nvar _core_utils = __w_pdfjs_require__(8);\n\nclass JpegError extends _util.BaseException {\n  constructor(msg) {\n    super(`JPEG error: ${msg}`);\n  }\n\n}\n\nclass DNLMarkerError extends _util.BaseException {\n  constructor(message, scanLines) {\n    super(message);\n    this.scanLines = scanLines;\n  }\n\n}\n\nclass EOIMarkerError extends _util.BaseException {}\n\nvar JpegImage = function JpegImageClosure() {\n  var dctZigZag = new Uint8Array([0, 1, 8, 16, 9, 2, 3, 10, 17, 24, 32, 25, 18, 11, 4, 5, 12, 19, 26, 33, 40, 48, 41, 34, 27, 20, 13, 6, 7, 14, 21, 28, 35, 42, 49, 56, 57, 50, 43, 36, 29, 22, 15, 23, 30, 37, 44, 51, 58, 59, 52, 45, 38, 31, 39, 46, 53, 60, 61, 54, 47, 55, 62, 63]);\n  var dctCos1 = 4017;\n  var dctSin1 = 799;\n  var dctCos3 = 3406;\n  var dctSin3 = 2276;\n  var dctCos6 = 1567;\n  var dctSin6 = 3784;\n  var dctSqrt2 = 5793;\n  var dctSqrt1d2 = 2896;\n\n  function JpegImage({\n    decodeTransform = null,\n    colorTransform = -1\n  } = {}) {\n    this._decodeTransform = decodeTransform;\n    this._colorTransform = colorTransform;\n  }\n\n  function buildHuffmanTable(codeLengths, values) {\n    var k = 0,\n        code = [],\n        i,\n        j,\n        length = 16;\n\n    while (length > 0 && !codeLengths[length - 1]) {\n      length--;\n    }\n\n    code.push({\n      children: [],\n      index: 0\n    });\n    var p = code[0],\n        q;\n\n    for (i = 0; i < length; i++) {\n      for (j = 0; j < codeLengths[i]; j++) {\n        p = code.pop();\n        p.children[p.index] = values[k];\n\n        while (p.index > 0) {\n          p = code.pop();\n        }\n\n        p.index++;\n        code.push(p);\n\n        while (code.length <= i) {\n          code.push(q = {\n            children: [],\n            index: 0\n          });\n          p.children[p.index] = q.children;\n          p = q;\n        }\n\n        k++;\n      }\n\n      if (i + 1 < length) {\n        code.push(q = {\n          children: [],\n          index: 0\n        });\n        p.children[p.index] = q.children;\n        p = q;\n      }\n    }\n\n    return code[0].children;\n  }\n\n  function getBlockBufferOffset(component, row, col) {\n    return 64 * ((component.blocksPerLine + 1) * row + col);\n  }\n\n  function decodeScan(data, offset, frame, components, resetInterval, spectralStart, spectralEnd, successivePrev, successive, parseDNLMarker = false) {\n    var mcusPerLine = frame.mcusPerLine;\n    var progressive = frame.progressive;\n    const startOffset = offset;\n    let bitsData = 0,\n        bitsCount = 0;\n\n    function readBit() {\n      if (bitsCount > 0) {\n        bitsCount--;\n        return bitsData >> bitsCount & 1;\n      }\n\n      bitsData = data[offset++];\n\n      if (bitsData === 0xff) {\n        var nextByte = data[offset++];\n\n        if (nextByte) {\n          if (nextByte === 0xdc && parseDNLMarker) {\n            offset += 2;\n            const scanLines = (0, _core_utils.readUint16)(data, offset);\n            offset += 2;\n\n            if (scanLines > 0 && scanLines !== frame.scanLines) {\n              throw new DNLMarkerError(\"Found DNL marker (0xFFDC) while parsing scan data\", scanLines);\n            }\n          } else if (nextByte === 0xd9) {\n            if (parseDNLMarker) {\n              const maybeScanLines = blockRow * (frame.precision === 8 ? 8 : 0);\n\n              if (maybeScanLines > 0 && Math.round(frame.scanLines / maybeScanLines) >= 10) {\n                throw new DNLMarkerError(\"Found EOI marker (0xFFD9) while parsing scan data, \" + \"possibly caused by incorrect `scanLines` parameter\", maybeScanLines);\n              }\n            }\n\n            throw new EOIMarkerError(\"Found EOI marker (0xFFD9) while parsing scan data\");\n          }\n\n          throw new JpegError(`unexpected marker ${(bitsData << 8 | nextByte).toString(16)}`);\n        }\n      }\n\n      bitsCount = 7;\n      return bitsData >>> 7;\n    }\n\n    function decodeHuffman(tree) {\n      var node = tree;\n\n      while (true) {\n        node = node[readBit()];\n\n        switch (typeof node) {\n          case \"number\":\n            return node;\n\n          case \"object\":\n            continue;\n        }\n\n        throw new JpegError(\"invalid huffman sequence\");\n      }\n    }\n\n    function receive(length) {\n      var n = 0;\n\n      while (length > 0) {\n        n = n << 1 | readBit();\n        length--;\n      }\n\n      return n;\n    }\n\n    function receiveAndExtend(length) {\n      if (length === 1) {\n        return readBit() === 1 ? 1 : -1;\n      }\n\n      var n = receive(length);\n\n      if (n >= 1 << length - 1) {\n        return n;\n      }\n\n      return n + (-1 << length) + 1;\n    }\n\n    function decodeBaseline(component, blockOffset) {\n      var t = decodeHuffman(component.huffmanTableDC);\n      var diff = t === 0 ? 0 : receiveAndExtend(t);\n      component.blockData[blockOffset] = component.pred += diff;\n      var k = 1;\n\n      while (k < 64) {\n        var rs = decodeHuffman(component.huffmanTableAC);\n        var s = rs & 15,\n            r = rs >> 4;\n\n        if (s === 0) {\n          if (r < 15) {\n            break;\n          }\n\n          k += 16;\n          continue;\n        }\n\n        k += r;\n        var z = dctZigZag[k];\n        component.blockData[blockOffset + z] = receiveAndExtend(s);\n        k++;\n      }\n    }\n\n    function decodeDCFirst(component, blockOffset) {\n      var t = decodeHuffman(component.huffmanTableDC);\n      var diff = t === 0 ? 0 : receiveAndExtend(t) << successive;\n      component.blockData[blockOffset] = component.pred += diff;\n    }\n\n    function decodeDCSuccessive(component, blockOffset) {\n      component.blockData[blockOffset] |= readBit() << successive;\n    }\n\n    var eobrun = 0;\n\n    function decodeACFirst(component, blockOffset) {\n      if (eobrun > 0) {\n        eobrun--;\n        return;\n      }\n\n      var k = spectralStart,\n          e = spectralEnd;\n\n      while (k <= e) {\n        var rs = decodeHuffman(component.huffmanTableAC);\n        var s = rs & 15,\n            r = rs >> 4;\n\n        if (s === 0) {\n          if (r < 15) {\n            eobrun = receive(r) + (1 << r) - 1;\n            break;\n          }\n\n          k += 16;\n          continue;\n        }\n\n        k += r;\n        var z = dctZigZag[k];\n        component.blockData[blockOffset + z] = receiveAndExtend(s) * (1 << successive);\n        k++;\n      }\n    }\n\n    var successiveACState = 0,\n        successiveACNextValue;\n\n    function decodeACSuccessive(component, blockOffset) {\n      var k = spectralStart;\n      var e = spectralEnd;\n      var r = 0;\n      var s;\n      var rs;\n\n      while (k <= e) {\n        const offsetZ = blockOffset + dctZigZag[k];\n        const sign = component.blockData[offsetZ] < 0 ? -1 : 1;\n\n        switch (successiveACState) {\n          case 0:\n            rs = decodeHuffman(component.huffmanTableAC);\n            s = rs & 15;\n            r = rs >> 4;\n\n            if (s === 0) {\n              if (r < 15) {\n                eobrun = receive(r) + (1 << r);\n                successiveACState = 4;\n              } else {\n                r = 16;\n                successiveACState = 1;\n              }\n            } else {\n              if (s !== 1) {\n                throw new JpegError(\"invalid ACn encoding\");\n              }\n\n              successiveACNextValue = receiveAndExtend(s);\n              successiveACState = r ? 2 : 3;\n            }\n\n            continue;\n\n          case 1:\n          case 2:\n            if (component.blockData[offsetZ]) {\n              component.blockData[offsetZ] += sign * (readBit() << successive);\n            } else {\n              r--;\n\n              if (r === 0) {\n                successiveACState = successiveACState === 2 ? 3 : 0;\n              }\n            }\n\n            break;\n\n          case 3:\n            if (component.blockData[offsetZ]) {\n              component.blockData[offsetZ] += sign * (readBit() << successive);\n            } else {\n              component.blockData[offsetZ] = successiveACNextValue << successive;\n              successiveACState = 0;\n            }\n\n            break;\n\n          case 4:\n            if (component.blockData[offsetZ]) {\n              component.blockData[offsetZ] += sign * (readBit() << successive);\n            }\n\n            break;\n        }\n\n        k++;\n      }\n\n      if (successiveACState === 4) {\n        eobrun--;\n\n        if (eobrun === 0) {\n          successiveACState = 0;\n        }\n      }\n    }\n\n    let blockRow = 0;\n\n    function decodeMcu(component, decode, mcu, row, col) {\n      var mcuRow = mcu / mcusPerLine | 0;\n      var mcuCol = mcu % mcusPerLine;\n      blockRow = mcuRow * component.v + row;\n      var blockCol = mcuCol * component.h + col;\n      const blockOffset = getBlockBufferOffset(component, blockRow, blockCol);\n      decode(component, blockOffset);\n    }\n\n    function decodeBlock(component, decode, mcu) {\n      blockRow = mcu / component.blocksPerLine | 0;\n      var blockCol = mcu % component.blocksPerLine;\n      const blockOffset = getBlockBufferOffset(component, blockRow, blockCol);\n      decode(component, blockOffset);\n    }\n\n    var componentsLength = components.length;\n    var component, i, j, k, n;\n    var decodeFn;\n\n    if (progressive) {\n      if (spectralStart === 0) {\n        decodeFn = successivePrev === 0 ? decodeDCFirst : decodeDCSuccessive;\n      } else {\n        decodeFn = successivePrev === 0 ? decodeACFirst : decodeACSuccessive;\n      }\n    } else {\n      decodeFn = decodeBaseline;\n    }\n\n    var mcu = 0,\n        fileMarker;\n    var mcuExpected;\n\n    if (componentsLength === 1) {\n      mcuExpected = components[0].blocksPerLine * components[0].blocksPerColumn;\n    } else {\n      mcuExpected = mcusPerLine * frame.mcusPerColumn;\n    }\n\n    var h, v;\n\n    while (mcu <= mcuExpected) {\n      var mcuToRead = resetInterval ? Math.min(mcuExpected - mcu, resetInterval) : mcuExpected;\n\n      if (mcuToRead > 0) {\n        for (i = 0; i < componentsLength; i++) {\n          components[i].pred = 0;\n        }\n\n        eobrun = 0;\n\n        if (componentsLength === 1) {\n          component = components[0];\n\n          for (n = 0; n < mcuToRead; n++) {\n            decodeBlock(component, decodeFn, mcu);\n            mcu++;\n          }\n        } else {\n          for (n = 0; n < mcuToRead; n++) {\n            for (i = 0; i < componentsLength; i++) {\n              component = components[i];\n              h = component.h;\n              v = component.v;\n\n              for (j = 0; j < v; j++) {\n                for (k = 0; k < h; k++) {\n                  decodeMcu(component, decodeFn, mcu, j, k);\n                }\n              }\n            }\n\n            mcu++;\n          }\n        }\n      }\n\n      bitsCount = 0;\n      fileMarker = findNextFileMarker(data, offset);\n\n      if (!fileMarker) {\n        break;\n      }\n\n      if (fileMarker.invalid) {\n        const partialMsg = mcuToRead > 0 ? \"unexpected\" : \"excessive\";\n        (0, _util.warn)(`decodeScan - ${partialMsg} MCU data, current marker is: ${fileMarker.invalid}`);\n        offset = fileMarker.offset;\n      }\n\n      if (fileMarker.marker >= 0xffd0 && fileMarker.marker <= 0xffd7) {\n        offset += 2;\n      } else {\n        break;\n      }\n    }\n\n    return offset - startOffset;\n  }\n\n  function quantizeAndInverse(component, blockBufferOffset, p) {\n    var qt = component.quantizationTable,\n        blockData = component.blockData;\n    var v0, v1, v2, v3, v4, v5, v6, v7;\n    var p0, p1, p2, p3, p4, p5, p6, p7;\n    var t;\n\n    if (!qt) {\n      throw new JpegError(\"missing required Quantization Table.\");\n    }\n\n    for (var row = 0; row < 64; row += 8) {\n      p0 = blockData[blockBufferOffset + row];\n      p1 = blockData[blockBufferOffset + row + 1];\n      p2 = blockData[blockBufferOffset + row + 2];\n      p3 = blockData[blockBufferOffset + row + 3];\n      p4 = blockData[blockBufferOffset + row + 4];\n      p5 = blockData[blockBufferOffset + row + 5];\n      p6 = blockData[blockBufferOffset + row + 6];\n      p7 = blockData[blockBufferOffset + row + 7];\n      p0 *= qt[row];\n\n      if ((p1 | p2 | p3 | p4 | p5 | p6 | p7) === 0) {\n        t = dctSqrt2 * p0 + 512 >> 10;\n        p[row] = t;\n        p[row + 1] = t;\n        p[row + 2] = t;\n        p[row + 3] = t;\n        p[row + 4] = t;\n        p[row + 5] = t;\n        p[row + 6] = t;\n        p[row + 7] = t;\n        continue;\n      }\n\n      p1 *= qt[row + 1];\n      p2 *= qt[row + 2];\n      p3 *= qt[row + 3];\n      p4 *= qt[row + 4];\n      p5 *= qt[row + 5];\n      p6 *= qt[row + 6];\n      p7 *= qt[row + 7];\n      v0 = dctSqrt2 * p0 + 128 >> 8;\n      v1 = dctSqrt2 * p4 + 128 >> 8;\n      v2 = p2;\n      v3 = p6;\n      v4 = dctSqrt1d2 * (p1 - p7) + 128 >> 8;\n      v7 = dctSqrt1d2 * (p1 + p7) + 128 >> 8;\n      v5 = p3 << 4;\n      v6 = p5 << 4;\n      v0 = v0 + v1 + 1 >> 1;\n      v1 = v0 - v1;\n      t = v2 * dctSin6 + v3 * dctCos6 + 128 >> 8;\n      v2 = v2 * dctCos6 - v3 * dctSin6 + 128 >> 8;\n      v3 = t;\n      v4 = v4 + v6 + 1 >> 1;\n      v6 = v4 - v6;\n      v7 = v7 + v5 + 1 >> 1;\n      v5 = v7 - v5;\n      v0 = v0 + v3 + 1 >> 1;\n      v3 = v0 - v3;\n      v1 = v1 + v2 + 1 >> 1;\n      v2 = v1 - v2;\n      t = v4 * dctSin3 + v7 * dctCos3 + 2048 >> 12;\n      v4 = v4 * dctCos3 - v7 * dctSin3 + 2048 >> 12;\n      v7 = t;\n      t = v5 * dctSin1 + v6 * dctCos1 + 2048 >> 12;\n      v5 = v5 * dctCos1 - v6 * dctSin1 + 2048 >> 12;\n      v6 = t;\n      p[row] = v0 + v7;\n      p[row + 7] = v0 - v7;\n      p[row + 1] = v1 + v6;\n      p[row + 6] = v1 - v6;\n      p[row + 2] = v2 + v5;\n      p[row + 5] = v2 - v5;\n      p[row + 3] = v3 + v4;\n      p[row + 4] = v3 - v4;\n    }\n\n    for (var col = 0; col < 8; ++col) {\n      p0 = p[col];\n      p1 = p[col + 8];\n      p2 = p[col + 16];\n      p3 = p[col + 24];\n      p4 = p[col + 32];\n      p5 = p[col + 40];\n      p6 = p[col + 48];\n      p7 = p[col + 56];\n\n      if ((p1 | p2 | p3 | p4 | p5 | p6 | p7) === 0) {\n        t = dctSqrt2 * p0 + 8192 >> 14;\n\n        if (t < -2040) {\n          t = 0;\n        } else if (t >= 2024) {\n          t = 255;\n        } else {\n          t = t + 2056 >> 4;\n        }\n\n        blockData[blockBufferOffset + col] = t;\n        blockData[blockBufferOffset + col + 8] = t;\n        blockData[blockBufferOffset + col + 16] = t;\n        blockData[blockBufferOffset + col + 24] = t;\n        blockData[blockBufferOffset + col + 32] = t;\n        blockData[blockBufferOffset + col + 40] = t;\n        blockData[blockBufferOffset + col + 48] = t;\n        blockData[blockBufferOffset + col + 56] = t;\n        continue;\n      }\n\n      v0 = dctSqrt2 * p0 + 2048 >> 12;\n      v1 = dctSqrt2 * p4 + 2048 >> 12;\n      v2 = p2;\n      v3 = p6;\n      v4 = dctSqrt1d2 * (p1 - p7) + 2048 >> 12;\n      v7 = dctSqrt1d2 * (p1 + p7) + 2048 >> 12;\n      v5 = p3;\n      v6 = p5;\n      v0 = (v0 + v1 + 1 >> 1) + 4112;\n      v1 = v0 - v1;\n      t = v2 * dctSin6 + v3 * dctCos6 + 2048 >> 12;\n      v2 = v2 * dctCos6 - v3 * dctSin6 + 2048 >> 12;\n      v3 = t;\n      v4 = v4 + v6 + 1 >> 1;\n      v6 = v4 - v6;\n      v7 = v7 + v5 + 1 >> 1;\n      v5 = v7 - v5;\n      v0 = v0 + v3 + 1 >> 1;\n      v3 = v0 - v3;\n      v1 = v1 + v2 + 1 >> 1;\n      v2 = v1 - v2;\n      t = v4 * dctSin3 + v7 * dctCos3 + 2048 >> 12;\n      v4 = v4 * dctCos3 - v7 * dctSin3 + 2048 >> 12;\n      v7 = t;\n      t = v5 * dctSin1 + v6 * dctCos1 + 2048 >> 12;\n      v5 = v5 * dctCos1 - v6 * dctSin1 + 2048 >> 12;\n      v6 = t;\n      p0 = v0 + v7;\n      p7 = v0 - v7;\n      p1 = v1 + v6;\n      p6 = v1 - v6;\n      p2 = v2 + v5;\n      p5 = v2 - v5;\n      p3 = v3 + v4;\n      p4 = v3 - v4;\n\n      if (p0 < 16) {\n        p0 = 0;\n      } else if (p0 >= 4080) {\n        p0 = 255;\n      } else {\n        p0 >>= 4;\n      }\n\n      if (p1 < 16) {\n        p1 = 0;\n      } else if (p1 >= 4080) {\n        p1 = 255;\n      } else {\n        p1 >>= 4;\n      }\n\n      if (p2 < 16) {\n        p2 = 0;\n      } else if (p2 >= 4080) {\n        p2 = 255;\n      } else {\n        p2 >>= 4;\n      }\n\n      if (p3 < 16) {\n        p3 = 0;\n      } else if (p3 >= 4080) {\n        p3 = 255;\n      } else {\n        p3 >>= 4;\n      }\n\n      if (p4 < 16) {\n        p4 = 0;\n      } else if (p4 >= 4080) {\n        p4 = 255;\n      } else {\n        p4 >>= 4;\n      }\n\n      if (p5 < 16) {\n        p5 = 0;\n      } else if (p5 >= 4080) {\n        p5 = 255;\n      } else {\n        p5 >>= 4;\n      }\n\n      if (p6 < 16) {\n        p6 = 0;\n      } else if (p6 >= 4080) {\n        p6 = 255;\n      } else {\n        p6 >>= 4;\n      }\n\n      if (p7 < 16) {\n        p7 = 0;\n      } else if (p7 >= 4080) {\n        p7 = 255;\n      } else {\n        p7 >>= 4;\n      }\n\n      blockData[blockBufferOffset + col] = p0;\n      blockData[blockBufferOffset + col + 8] = p1;\n      blockData[blockBufferOffset + col + 16] = p2;\n      blockData[blockBufferOffset + col + 24] = p3;\n      blockData[blockBufferOffset + col + 32] = p4;\n      blockData[blockBufferOffset + col + 40] = p5;\n      blockData[blockBufferOffset + col + 48] = p6;\n      blockData[blockBufferOffset + col + 56] = p7;\n    }\n  }\n\n  function buildComponentData(frame, component) {\n    var blocksPerLine = component.blocksPerLine;\n    var blocksPerColumn = component.blocksPerColumn;\n    var computationBuffer = new Int16Array(64);\n\n    for (var blockRow = 0; blockRow < blocksPerColumn; blockRow++) {\n      for (var blockCol = 0; blockCol < blocksPerLine; blockCol++) {\n        var offset = getBlockBufferOffset(component, blockRow, blockCol);\n        quantizeAndInverse(component, offset, computationBuffer);\n      }\n    }\n\n    return component.blockData;\n  }\n\n  function findNextFileMarker(data, currentPos, startPos = currentPos) {\n    const maxPos = data.length - 1;\n    var newPos = startPos < currentPos ? startPos : currentPos;\n\n    if (currentPos >= maxPos) {\n      return null;\n    }\n\n    var currentMarker = (0, _core_utils.readUint16)(data, currentPos);\n\n    if (currentMarker >= 0xffc0 && currentMarker <= 0xfffe) {\n      return {\n        invalid: null,\n        marker: currentMarker,\n        offset: currentPos\n      };\n    }\n\n    var newMarker = (0, _core_utils.readUint16)(data, newPos);\n\n    while (!(newMarker >= 0xffc0 && newMarker <= 0xfffe)) {\n      if (++newPos >= maxPos) {\n        return null;\n      }\n\n      newMarker = (0, _core_utils.readUint16)(data, newPos);\n    }\n\n    return {\n      invalid: currentMarker.toString(16),\n      marker: newMarker,\n      offset: newPos\n    };\n  }\n\n  JpegImage.prototype = {\n    parse(data, {\n      dnlScanLines = null\n    } = {}) {\n      function readDataBlock() {\n        const length = (0, _core_utils.readUint16)(data, offset);\n        offset += 2;\n        let endOffset = offset + length - 2;\n        var fileMarker = findNextFileMarker(data, endOffset, offset);\n\n        if (fileMarker && fileMarker.invalid) {\n          (0, _util.warn)(\"readDataBlock - incorrect length, current marker is: \" + fileMarker.invalid);\n          endOffset = fileMarker.offset;\n        }\n\n        var array = data.subarray(offset, endOffset);\n        offset += array.length;\n        return array;\n      }\n\n      function prepareComponents(frame) {\n        var mcusPerLine = Math.ceil(frame.samplesPerLine / 8 / frame.maxH);\n        var mcusPerColumn = Math.ceil(frame.scanLines / 8 / frame.maxV);\n\n        for (var i = 0; i < frame.components.length; i++) {\n          component = frame.components[i];\n          var blocksPerLine = Math.ceil(Math.ceil(frame.samplesPerLine / 8) * component.h / frame.maxH);\n          var blocksPerColumn = Math.ceil(Math.ceil(frame.scanLines / 8) * component.v / frame.maxV);\n          var blocksPerLineForMcu = mcusPerLine * component.h;\n          var blocksPerColumnForMcu = mcusPerColumn * component.v;\n          var blocksBufferSize = 64 * blocksPerColumnForMcu * (blocksPerLineForMcu + 1);\n          component.blockData = new Int16Array(blocksBufferSize);\n          component.blocksPerLine = blocksPerLine;\n          component.blocksPerColumn = blocksPerColumn;\n        }\n\n        frame.mcusPerLine = mcusPerLine;\n        frame.mcusPerColumn = mcusPerColumn;\n      }\n\n      var offset = 0;\n      var jfif = null;\n      var adobe = null;\n      var frame, resetInterval;\n      let numSOSMarkers = 0;\n      var quantizationTables = [];\n      var huffmanTablesAC = [],\n          huffmanTablesDC = [];\n      let fileMarker = (0, _core_utils.readUint16)(data, offset);\n      offset += 2;\n\n      if (fileMarker !== 0xffd8) {\n        throw new JpegError(\"SOI not found\");\n      }\n\n      fileMarker = (0, _core_utils.readUint16)(data, offset);\n      offset += 2;\n\n      markerLoop: while (fileMarker !== 0xffd9) {\n        var i, j, l;\n\n        switch (fileMarker) {\n          case 0xffe0:\n          case 0xffe1:\n          case 0xffe2:\n          case 0xffe3:\n          case 0xffe4:\n          case 0xffe5:\n          case 0xffe6:\n          case 0xffe7:\n          case 0xffe8:\n          case 0xffe9:\n          case 0xffea:\n          case 0xffeb:\n          case 0xffec:\n          case 0xffed:\n          case 0xffee:\n          case 0xffef:\n          case 0xfffe:\n            var appData = readDataBlock();\n\n            if (fileMarker === 0xffe0) {\n              if (appData[0] === 0x4a && appData[1] === 0x46 && appData[2] === 0x49 && appData[3] === 0x46 && appData[4] === 0) {\n                jfif = {\n                  version: {\n                    major: appData[5],\n                    minor: appData[6]\n                  },\n                  densityUnits: appData[7],\n                  xDensity: appData[8] << 8 | appData[9],\n                  yDensity: appData[10] << 8 | appData[11],\n                  thumbWidth: appData[12],\n                  thumbHeight: appData[13],\n                  thumbData: appData.subarray(14, 14 + 3 * appData[12] * appData[13])\n                };\n              }\n            }\n\n            if (fileMarker === 0xffee) {\n              if (appData[0] === 0x41 && appData[1] === 0x64 && appData[2] === 0x6f && appData[3] === 0x62 && appData[4] === 0x65) {\n                adobe = {\n                  version: appData[5] << 8 | appData[6],\n                  flags0: appData[7] << 8 | appData[8],\n                  flags1: appData[9] << 8 | appData[10],\n                  transformCode: appData[11]\n                };\n              }\n            }\n\n            break;\n\n          case 0xffdb:\n            const quantizationTablesLength = (0, _core_utils.readUint16)(data, offset);\n            offset += 2;\n            var quantizationTablesEnd = quantizationTablesLength + offset - 2;\n            var z;\n\n            while (offset < quantizationTablesEnd) {\n              var quantizationTableSpec = data[offset++];\n              var tableData = new Uint16Array(64);\n\n              if (quantizationTableSpec >> 4 === 0) {\n                for (j = 0; j < 64; j++) {\n                  z = dctZigZag[j];\n                  tableData[z] = data[offset++];\n                }\n              } else if (quantizationTableSpec >> 4 === 1) {\n                for (j = 0; j < 64; j++) {\n                  z = dctZigZag[j];\n                  tableData[z] = (0, _core_utils.readUint16)(data, offset);\n                  offset += 2;\n                }\n              } else {\n                throw new JpegError(\"DQT - invalid table spec\");\n              }\n\n              quantizationTables[quantizationTableSpec & 15] = tableData;\n            }\n\n            break;\n\n          case 0xffc0:\n          case 0xffc1:\n          case 0xffc2:\n            if (frame) {\n              throw new JpegError(\"Only single frame JPEGs supported\");\n            }\n\n            offset += 2;\n            frame = {};\n            frame.extended = fileMarker === 0xffc1;\n            frame.progressive = fileMarker === 0xffc2;\n            frame.precision = data[offset++];\n            const sofScanLines = (0, _core_utils.readUint16)(data, offset);\n            offset += 2;\n            frame.scanLines = dnlScanLines || sofScanLines;\n            frame.samplesPerLine = (0, _core_utils.readUint16)(data, offset);\n            offset += 2;\n            frame.components = [];\n            frame.componentIds = {};\n            var componentsCount = data[offset++],\n                componentId;\n            var maxH = 0,\n                maxV = 0;\n\n            for (i = 0; i < componentsCount; i++) {\n              componentId = data[offset];\n              var h = data[offset + 1] >> 4;\n              var v = data[offset + 1] & 15;\n\n              if (maxH < h) {\n                maxH = h;\n              }\n\n              if (maxV < v) {\n                maxV = v;\n              }\n\n              var qId = data[offset + 2];\n              l = frame.components.push({\n                h,\n                v,\n                quantizationId: qId,\n                quantizationTable: null\n              });\n              frame.componentIds[componentId] = l - 1;\n              offset += 3;\n            }\n\n            frame.maxH = maxH;\n            frame.maxV = maxV;\n            prepareComponents(frame);\n            break;\n\n          case 0xffc4:\n            const huffmanLength = (0, _core_utils.readUint16)(data, offset);\n            offset += 2;\n\n            for (i = 2; i < huffmanLength;) {\n              var huffmanTableSpec = data[offset++];\n              var codeLengths = new Uint8Array(16);\n              var codeLengthSum = 0;\n\n              for (j = 0; j < 16; j++, offset++) {\n                codeLengthSum += codeLengths[j] = data[offset];\n              }\n\n              var huffmanValues = new Uint8Array(codeLengthSum);\n\n              for (j = 0; j < codeLengthSum; j++, offset++) {\n                huffmanValues[j] = data[offset];\n              }\n\n              i += 17 + codeLengthSum;\n              (huffmanTableSpec >> 4 === 0 ? huffmanTablesDC : huffmanTablesAC)[huffmanTableSpec & 15] = buildHuffmanTable(codeLengths, huffmanValues);\n            }\n\n            break;\n\n          case 0xffdd:\n            offset += 2;\n            resetInterval = (0, _core_utils.readUint16)(data, offset);\n            offset += 2;\n            break;\n\n          case 0xffda:\n            const parseDNLMarker = ++numSOSMarkers === 1 && !dnlScanLines;\n            offset += 2;\n            var selectorsCount = data[offset++];\n            var components = [],\n                component;\n\n            for (i = 0; i < selectorsCount; i++) {\n              const index = data[offset++];\n              var componentIndex = frame.componentIds[index];\n              component = frame.components[componentIndex];\n              component.index = index;\n              var tableSpec = data[offset++];\n              component.huffmanTableDC = huffmanTablesDC[tableSpec >> 4];\n              component.huffmanTableAC = huffmanTablesAC[tableSpec & 15];\n              components.push(component);\n            }\n\n            var spectralStart = data[offset++];\n            var spectralEnd = data[offset++];\n            var successiveApproximation = data[offset++];\n\n            try {\n              var processed = decodeScan(data, offset, frame, components, resetInterval, spectralStart, spectralEnd, successiveApproximation >> 4, successiveApproximation & 15, parseDNLMarker);\n              offset += processed;\n            } catch (ex) {\n              if (ex instanceof DNLMarkerError) {\n                (0, _util.warn)(`${ex.message} -- attempting to re-parse the JPEG image.`);\n                return this.parse(data, {\n                  dnlScanLines: ex.scanLines\n                });\n              } else if (ex instanceof EOIMarkerError) {\n                (0, _util.warn)(`${ex.message} -- ignoring the rest of the image data.`);\n                break markerLoop;\n              }\n\n              throw ex;\n            }\n\n            break;\n\n          case 0xffdc:\n            offset += 4;\n            break;\n\n          case 0xffff:\n            if (data[offset] !== 0xff) {\n              offset--;\n            }\n\n            break;\n\n          default:\n            const nextFileMarker = findNextFileMarker(data, offset - 2, offset - 3);\n\n            if (nextFileMarker && nextFileMarker.invalid) {\n              (0, _util.warn)(\"JpegImage.parse - unexpected data, current marker is: \" + nextFileMarker.invalid);\n              offset = nextFileMarker.offset;\n              break;\n            }\n\n            if (!nextFileMarker || offset >= data.length - 1) {\n              (0, _util.warn)(\"JpegImage.parse - reached the end of the image data \" + \"without finding an EOI marker (0xFFD9).\");\n              break markerLoop;\n            }\n\n            throw new JpegError(\"JpegImage.parse - unknown marker: \" + fileMarker.toString(16));\n        }\n\n        fileMarker = (0, _core_utils.readUint16)(data, offset);\n        offset += 2;\n      }\n\n      this.width = frame.samplesPerLine;\n      this.height = frame.scanLines;\n      this.jfif = jfif;\n      this.adobe = adobe;\n      this.components = [];\n\n      for (i = 0; i < frame.components.length; i++) {\n        component = frame.components[i];\n        var quantizationTable = quantizationTables[component.quantizationId];\n\n        if (quantizationTable) {\n          component.quantizationTable = quantizationTable;\n        }\n\n        this.components.push({\n          index: component.index,\n          output: buildComponentData(frame, component),\n          scaleX: component.h / frame.maxH,\n          scaleY: component.v / frame.maxV,\n          blocksPerLine: component.blocksPerLine,\n          blocksPerColumn: component.blocksPerColumn\n        });\n      }\n\n      this.numComponents = this.components.length;\n      return undefined;\n    },\n\n    _getLinearizedBlockData(width, height, isSourcePDF = false) {\n      var scaleX = this.width / width,\n          scaleY = this.height / height;\n      var component, componentScaleX, componentScaleY, blocksPerScanline;\n      var x, y, i, j, k;\n      var index;\n      var offset = 0;\n      var output;\n      var numComponents = this.components.length;\n      var dataLength = width * height * numComponents;\n      var data = new Uint8ClampedArray(dataLength);\n      var xScaleBlockOffset = new Uint32Array(width);\n      var mask3LSB = 0xfffffff8;\n      let lastComponentScaleX;\n\n      for (i = 0; i < numComponents; i++) {\n        component = this.components[i];\n        componentScaleX = component.scaleX * scaleX;\n        componentScaleY = component.scaleY * scaleY;\n        offset = i;\n        output = component.output;\n        blocksPerScanline = component.blocksPerLine + 1 << 3;\n\n        if (componentScaleX !== lastComponentScaleX) {\n          for (x = 0; x < width; x++) {\n            j = 0 | x * componentScaleX;\n            xScaleBlockOffset[x] = (j & mask3LSB) << 3 | j & 7;\n          }\n\n          lastComponentScaleX = componentScaleX;\n        }\n\n        for (y = 0; y < height; y++) {\n          j = 0 | y * componentScaleY;\n          index = blocksPerScanline * (j & mask3LSB) | (j & 7) << 3;\n\n          for (x = 0; x < width; x++) {\n            data[offset] = output[index + xScaleBlockOffset[x]];\n            offset += numComponents;\n          }\n        }\n      }\n\n      let transform = this._decodeTransform;\n\n      if (!isSourcePDF && numComponents === 4 && !transform) {\n        transform = new Int32Array([-256, 255, -256, 255, -256, 255, -256, 255]);\n      }\n\n      if (transform) {\n        for (i = 0; i < dataLength;) {\n          for (j = 0, k = 0; j < numComponents; j++, i++, k += 2) {\n            data[i] = (data[i] * transform[k] >> 8) + transform[k + 1];\n          }\n        }\n      }\n\n      return data;\n    },\n\n    get _isColorConversionNeeded() {\n      if (this.adobe) {\n        return !!this.adobe.transformCode;\n      }\n\n      if (this.numComponents === 3) {\n        if (this._colorTransform === 0) {\n          return false;\n        } else if (this.components[0].index === 0x52 && this.components[1].index === 0x47 && this.components[2].index === 0x42) {\n          return false;\n        }\n\n        return true;\n      }\n\n      if (this._colorTransform === 1) {\n        return true;\n      }\n\n      return false;\n    },\n\n    _convertYccToRgb: function convertYccToRgb(data) {\n      var Y, Cb, Cr;\n\n      for (var i = 0, length = data.length; i < length; i += 3) {\n        Y = data[i];\n        Cb = data[i + 1];\n        Cr = data[i + 2];\n        data[i] = Y - 179.456 + 1.402 * Cr;\n        data[i + 1] = Y + 135.459 - 0.344 * Cb - 0.714 * Cr;\n        data[i + 2] = Y - 226.816 + 1.772 * Cb;\n      }\n\n      return data;\n    },\n    _convertYcckToRgb: function convertYcckToRgb(data) {\n      var Y, Cb, Cr, k;\n      var offset = 0;\n\n      for (var i = 0, length = data.length; i < length; i += 4) {\n        Y = data[i];\n        Cb = data[i + 1];\n        Cr = data[i + 2];\n        k = data[i + 3];\n        data[offset++] = -122.67195406894 + Cb * (-6.60635669420364e-5 * Cb + 0.000437130475926232 * Cr - 5.4080610064599e-5 * Y + 0.00048449797120281 * k - 0.154362151871126) + Cr * (-0.000957964378445773 * Cr + 0.000817076911346625 * Y - 0.00477271405408747 * k + 1.53380253221734) + Y * (0.000961250184130688 * Y - 0.00266257332283933 * k + 0.48357088451265) + k * (-0.000336197177618394 * k + 0.484791561490776);\n        data[offset++] = 107.268039397724 + Cb * (2.19927104525741e-5 * Cb - 0.000640992018297945 * Cr + 0.000659397001245577 * Y + 0.000426105652938837 * k - 0.176491792462875) + Cr * (-0.000778269941513683 * Cr + 0.00130872261408275 * Y + 0.000770482631801132 * k - 0.151051492775562) + Y * (0.00126935368114843 * Y - 0.00265090189010898 * k + 0.25802910206845) + k * (-0.000318913117588328 * k - 0.213742400323665);\n        data[offset++] = -20.810012546947 + Cb * (-0.000570115196973677 * Cb - 2.63409051004589e-5 * Cr + 0.0020741088115012 * Y - 0.00288260236853442 * k + 0.814272968359295) + Cr * (-1.53496057440975e-5 * Cr - 0.000132689043961446 * Y + 0.000560833691242812 * k - 0.195152027534049) + Y * (0.00174418132927582 * Y - 0.00255243321439347 * k + 0.116935020465145) + k * (-0.000343531996510555 * k + 0.24165260232407);\n      }\n\n      return data.subarray(0, offset);\n    },\n    _convertYcckToCmyk: function convertYcckToCmyk(data) {\n      var Y, Cb, Cr;\n\n      for (var i = 0, length = data.length; i < length; i += 4) {\n        Y = data[i];\n        Cb = data[i + 1];\n        Cr = data[i + 2];\n        data[i] = 434.456 - Y - 1.402 * Cr;\n        data[i + 1] = 119.541 - Y + 0.344 * Cb + 0.714 * Cr;\n        data[i + 2] = 481.816 - Y - 1.772 * Cb;\n      }\n\n      return data;\n    },\n    _convertCmykToRgb: function convertCmykToRgb(data) {\n      var c, m, y, k;\n      var offset = 0;\n\n      for (var i = 0, length = data.length; i < length; i += 4) {\n        c = data[i];\n        m = data[i + 1];\n        y = data[i + 2];\n        k = data[i + 3];\n        data[offset++] = 255 + c * (-0.00006747147073602441 * c + 0.0008379262121013727 * m + 0.0002894718188643294 * y + 0.003264231057537806 * k - 1.1185611867203937) + m * (0.000026374107616089405 * m - 0.00008626949158638572 * y - 0.0002748769067499491 * k - 0.02155688794978967) + y * (-0.00003878099212869363 * y - 0.0003267808279485286 * k + 0.0686742238595345) - k * (0.0003361971776183937 * k + 0.7430659151342254);\n        data[offset++] = 255 + c * (0.00013596372813588848 * c + 0.000924537132573585 * m + 0.00010567359618683593 * y + 0.0004791864687436512 * k - 0.3109689587515875) + m * (-0.00023545346108370344 * m + 0.0002702845253534714 * y + 0.0020200308977307156 * k - 0.7488052167015494) + y * (0.00006834815998235662 * y + 0.00015168452363460973 * k - 0.09751927774728933) - k * (0.00031891311758832814 * k + 0.7364883807733168);\n        data[offset++] = 255 + c * (0.000013598650411385307 * c + 0.00012423956175490851 * m + 0.0004751985097583589 * y - 0.0000036729317476630422 * k - 0.05562186980264034) + m * (0.00016141380598724676 * m + 0.0009692239130725186 * y + 0.0007782692450036253 * k - 0.44015232367526463) + y * (5.068882914068769e-7 * y + 0.0017778369011375071 * k - 0.7591454649749609) - k * (0.0003435319965105553 * k + 0.7063770186160144);\n      }\n\n      return data.subarray(0, offset);\n    },\n\n    getData({\n      width,\n      height,\n      forceRGB = false,\n      isSourcePDF = false\n    }) {\n      if (this.numComponents > 4) {\n        throw new JpegError(\"Unsupported color mode\");\n      }\n\n      var data = this._getLinearizedBlockData(width, height, isSourcePDF);\n\n      if (this.numComponents === 1 && forceRGB) {\n        var dataLength = data.length;\n        var rgbData = new Uint8ClampedArray(dataLength * 3);\n        var offset = 0;\n\n        for (var i = 0; i < dataLength; i++) {\n          var grayColor = data[i];\n          rgbData[offset++] = grayColor;\n          rgbData[offset++] = grayColor;\n          rgbData[offset++] = grayColor;\n        }\n\n        return rgbData;\n      } else if (this.numComponents === 3 && this._isColorConversionNeeded) {\n        return this._convertYccToRgb(data);\n      } else if (this.numComponents === 4) {\n        if (this._isColorConversionNeeded) {\n          if (forceRGB) {\n            return this._convertYcckToRgb(data);\n          }\n\n          return this._convertYcckToCmyk(data);\n        } else if (forceRGB) {\n          return this._convertCmykToRgb(data);\n        }\n      }\n\n      return data;\n    }\n\n  };\n  return JpegImage;\n}();\n\nexports.JpegImage = JpegImage;\n\n/***/ }),\n/* 20 */\n/***/ ((__unused_webpack_module, exports, __w_pdfjs_require__) => {\n\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.JpxStream = void 0;\n\nvar _stream = __w_pdfjs_require__(12);\n\nvar _jpx = __w_pdfjs_require__(21);\n\nvar _util = __w_pdfjs_require__(2);\n\nconst JpxStream = function JpxStreamClosure() {\n  function JpxStream(stream, maybeLength, dict, params) {\n    this.stream = stream;\n    this.maybeLength = maybeLength;\n    this.dict = dict;\n    this.params = params;\n\n    _stream.DecodeStream.call(this, maybeLength);\n  }\n\n  JpxStream.prototype = Object.create(_stream.DecodeStream.prototype);\n  Object.defineProperty(JpxStream.prototype, \"bytes\", {\n    get: function JpxStream_bytes() {\n      return (0, _util.shadow)(this, \"bytes\", this.stream.getBytes(this.maybeLength));\n    },\n    configurable: true\n  });\n\n  JpxStream.prototype.ensureBuffer = function (requested) {};\n\n  JpxStream.prototype.readBlock = function () {\n    if (this.eof) {\n      return;\n    }\n\n    const jpxImage = new _jpx.JpxImage();\n    jpxImage.parse(this.bytes);\n    const width = jpxImage.width;\n    const height = jpxImage.height;\n    const componentsCount = jpxImage.componentsCount;\n    const tileCount = jpxImage.tiles.length;\n\n    if (tileCount === 1) {\n      this.buffer = jpxImage.tiles[0].items;\n    } else {\n      const data = new Uint8ClampedArray(width * height * componentsCount);\n\n      for (let k = 0; k < tileCount; k++) {\n        const tileComponents = jpxImage.tiles[k];\n        const tileWidth = tileComponents.width;\n        const tileHeight = tileComponents.height;\n        const tileLeft = tileComponents.left;\n        const tileTop = tileComponents.top;\n        const src = tileComponents.items;\n        let srcPosition = 0;\n        let dataPosition = (width * tileTop + tileLeft) * componentsCount;\n        const imgRowSize = width * componentsCount;\n        const tileRowSize = tileWidth * componentsCount;\n\n        for (let j = 0; j < tileHeight; j++) {\n          const rowBytes = src.subarray(srcPosition, srcPosition + tileRowSize);\n          data.set(rowBytes, dataPosition);\n          srcPosition += tileRowSize;\n          dataPosition += imgRowSize;\n        }\n      }\n\n      this.buffer = data;\n    }\n\n    this.bufferLength = this.buffer.length;\n    this.eof = true;\n  };\n\n  return JpxStream;\n}();\n\nexports.JpxStream = JpxStream;\n\n/***/ }),\n/* 21 */\n/***/ ((__unused_webpack_module, exports, __w_pdfjs_require__) => {\n\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.JpxImage = void 0;\n\nvar _util = __w_pdfjs_require__(2);\n\nvar _core_utils = __w_pdfjs_require__(8);\n\nvar _arithmetic_decoder = __w_pdfjs_require__(17);\n\nclass JpxError extends _util.BaseException {\n  constructor(msg) {\n    super(`JPX error: ${msg}`);\n  }\n\n}\n\nvar JpxImage = function JpxImageClosure() {\n  var SubbandsGainLog2 = {\n    LL: 0,\n    LH: 1,\n    HL: 1,\n    HH: 2\n  };\n\n  function JpxImage() {\n    this.failOnCorruptedImage = false;\n  }\n\n  JpxImage.prototype = {\n    parse: function JpxImage_parse(data) {\n      var head = (0, _core_utils.readUint16)(data, 0);\n\n      if (head === 0xff4f) {\n        this.parseCodestream(data, 0, data.length);\n        return;\n      }\n\n      var position = 0,\n          length = data.length;\n\n      while (position < length) {\n        var headerSize = 8;\n        var lbox = (0, _core_utils.readUint32)(data, position);\n        var tbox = (0, _core_utils.readUint32)(data, position + 4);\n        position += headerSize;\n\n        if (lbox === 1) {\n          lbox = (0, _core_utils.readUint32)(data, position) * 4294967296 + (0, _core_utils.readUint32)(data, position + 4);\n          position += 8;\n          headerSize += 8;\n        }\n\n        if (lbox === 0) {\n          lbox = length - position + headerSize;\n        }\n\n        if (lbox < headerSize) {\n          throw new JpxError(\"Invalid box field size\");\n        }\n\n        var dataLength = lbox - headerSize;\n        var jumpDataLength = true;\n\n        switch (tbox) {\n          case 0x6a703268:\n            jumpDataLength = false;\n            break;\n\n          case 0x636f6c72:\n            var method = data[position];\n\n            if (method === 1) {\n              var colorspace = (0, _core_utils.readUint32)(data, position + 3);\n\n              switch (colorspace) {\n                case 16:\n                case 17:\n                case 18:\n                  break;\n\n                default:\n                  (0, _util.warn)(\"Unknown colorspace \" + colorspace);\n                  break;\n              }\n            } else if (method === 2) {\n              (0, _util.info)(\"ICC profile not supported\");\n            }\n\n            break;\n\n          case 0x6a703263:\n            this.parseCodestream(data, position, position + dataLength);\n            break;\n\n          case 0x6a502020:\n            if ((0, _core_utils.readUint32)(data, position) !== 0x0d0a870a) {\n              (0, _util.warn)(\"Invalid JP2 signature\");\n            }\n\n            break;\n\n          case 0x6a501a1a:\n          case 0x66747970:\n          case 0x72726571:\n          case 0x72657320:\n          case 0x69686472:\n            break;\n\n          default:\n            var headerType = String.fromCharCode(tbox >> 24 & 0xff, tbox >> 16 & 0xff, tbox >> 8 & 0xff, tbox & 0xff);\n            (0, _util.warn)(\"Unsupported header type \" + tbox + \" (\" + headerType + \")\");\n            break;\n        }\n\n        if (jumpDataLength) {\n          position += dataLength;\n        }\n      }\n    },\n    parseImageProperties: function JpxImage_parseImageProperties(stream) {\n      var newByte = stream.getByte();\n\n      while (newByte >= 0) {\n        var oldByte = newByte;\n        newByte = stream.getByte();\n        var code = oldByte << 8 | newByte;\n\n        if (code === 0xff51) {\n          stream.skip(4);\n          var Xsiz = stream.getInt32() >>> 0;\n          var Ysiz = stream.getInt32() >>> 0;\n          var XOsiz = stream.getInt32() >>> 0;\n          var YOsiz = stream.getInt32() >>> 0;\n          stream.skip(16);\n          var Csiz = stream.getUint16();\n          this.width = Xsiz - XOsiz;\n          this.height = Ysiz - YOsiz;\n          this.componentsCount = Csiz;\n          this.bitsPerComponent = 8;\n          return;\n        }\n      }\n\n      throw new JpxError(\"No size marker found in JPX stream\");\n    },\n    parseCodestream: function JpxImage_parseCodestream(data, start, end) {\n      var context = {};\n      var doNotRecover = false;\n\n      try {\n        var position = start;\n\n        while (position + 1 < end) {\n          var code = (0, _core_utils.readUint16)(data, position);\n          position += 2;\n          var length = 0,\n              j,\n              sqcd,\n              spqcds,\n              spqcdSize,\n              scalarExpounded,\n              tile;\n\n          switch (code) {\n            case 0xff4f:\n              context.mainHeader = true;\n              break;\n\n            case 0xffd9:\n              break;\n\n            case 0xff51:\n              length = (0, _core_utils.readUint16)(data, position);\n              var siz = {};\n              siz.Xsiz = (0, _core_utils.readUint32)(data, position + 4);\n              siz.Ysiz = (0, _core_utils.readUint32)(data, position + 8);\n              siz.XOsiz = (0, _core_utils.readUint32)(data, position + 12);\n              siz.YOsiz = (0, _core_utils.readUint32)(data, position + 16);\n              siz.XTsiz = (0, _core_utils.readUint32)(data, position + 20);\n              siz.YTsiz = (0, _core_utils.readUint32)(data, position + 24);\n              siz.XTOsiz = (0, _core_utils.readUint32)(data, position + 28);\n              siz.YTOsiz = (0, _core_utils.readUint32)(data, position + 32);\n              var componentsCount = (0, _core_utils.readUint16)(data, position + 36);\n              siz.Csiz = componentsCount;\n              var components = [];\n              j = position + 38;\n\n              for (var i = 0; i < componentsCount; i++) {\n                var component = {\n                  precision: (data[j] & 0x7f) + 1,\n                  isSigned: !!(data[j] & 0x80),\n                  XRsiz: data[j + 1],\n                  YRsiz: data[j + 2]\n                };\n                j += 3;\n                calculateComponentDimensions(component, siz);\n                components.push(component);\n              }\n\n              context.SIZ = siz;\n              context.components = components;\n              calculateTileGrids(context, components);\n              context.QCC = [];\n              context.COC = [];\n              break;\n\n            case 0xff5c:\n              length = (0, _core_utils.readUint16)(data, position);\n              var qcd = {};\n              j = position + 2;\n              sqcd = data[j++];\n\n              switch (sqcd & 0x1f) {\n                case 0:\n                  spqcdSize = 8;\n                  scalarExpounded = true;\n                  break;\n\n                case 1:\n                  spqcdSize = 16;\n                  scalarExpounded = false;\n                  break;\n\n                case 2:\n                  spqcdSize = 16;\n                  scalarExpounded = true;\n                  break;\n\n                default:\n                  throw new Error(\"Invalid SQcd value \" + sqcd);\n              }\n\n              qcd.noQuantization = spqcdSize === 8;\n              qcd.scalarExpounded = scalarExpounded;\n              qcd.guardBits = sqcd >> 5;\n              spqcds = [];\n\n              while (j < length + position) {\n                var spqcd = {};\n\n                if (spqcdSize === 8) {\n                  spqcd.epsilon = data[j++] >> 3;\n                  spqcd.mu = 0;\n                } else {\n                  spqcd.epsilon = data[j] >> 3;\n                  spqcd.mu = (data[j] & 0x7) << 8 | data[j + 1];\n                  j += 2;\n                }\n\n                spqcds.push(spqcd);\n              }\n\n              qcd.SPqcds = spqcds;\n\n              if (context.mainHeader) {\n                context.QCD = qcd;\n              } else {\n                context.currentTile.QCD = qcd;\n                context.currentTile.QCC = [];\n              }\n\n              break;\n\n            case 0xff5d:\n              length = (0, _core_utils.readUint16)(data, position);\n              var qcc = {};\n              j = position + 2;\n              var cqcc;\n\n              if (context.SIZ.Csiz < 257) {\n                cqcc = data[j++];\n              } else {\n                cqcc = (0, _core_utils.readUint16)(data, j);\n                j += 2;\n              }\n\n              sqcd = data[j++];\n\n              switch (sqcd & 0x1f) {\n                case 0:\n                  spqcdSize = 8;\n                  scalarExpounded = true;\n                  break;\n\n                case 1:\n                  spqcdSize = 16;\n                  scalarExpounded = false;\n                  break;\n\n                case 2:\n                  spqcdSize = 16;\n                  scalarExpounded = true;\n                  break;\n\n                default:\n                  throw new Error(\"Invalid SQcd value \" + sqcd);\n              }\n\n              qcc.noQuantization = spqcdSize === 8;\n              qcc.scalarExpounded = scalarExpounded;\n              qcc.guardBits = sqcd >> 5;\n              spqcds = [];\n\n              while (j < length + position) {\n                spqcd = {};\n\n                if (spqcdSize === 8) {\n                  spqcd.epsilon = data[j++] >> 3;\n                  spqcd.mu = 0;\n                } else {\n                  spqcd.epsilon = data[j] >> 3;\n                  spqcd.mu = (data[j] & 0x7) << 8 | data[j + 1];\n                  j += 2;\n                }\n\n                spqcds.push(spqcd);\n              }\n\n              qcc.SPqcds = spqcds;\n\n              if (context.mainHeader) {\n                context.QCC[cqcc] = qcc;\n              } else {\n                context.currentTile.QCC[cqcc] = qcc;\n              }\n\n              break;\n\n            case 0xff52:\n              length = (0, _core_utils.readUint16)(data, position);\n              var cod = {};\n              j = position + 2;\n              var scod = data[j++];\n              cod.entropyCoderWithCustomPrecincts = !!(scod & 1);\n              cod.sopMarkerUsed = !!(scod & 2);\n              cod.ephMarkerUsed = !!(scod & 4);\n              cod.progressionOrder = data[j++];\n              cod.layersCount = (0, _core_utils.readUint16)(data, j);\n              j += 2;\n              cod.multipleComponentTransform = data[j++];\n              cod.decompositionLevelsCount = data[j++];\n              cod.xcb = (data[j++] & 0xf) + 2;\n              cod.ycb = (data[j++] & 0xf) + 2;\n              var blockStyle = data[j++];\n              cod.selectiveArithmeticCodingBypass = !!(blockStyle & 1);\n              cod.resetContextProbabilities = !!(blockStyle & 2);\n              cod.terminationOnEachCodingPass = !!(blockStyle & 4);\n              cod.verticallyStripe = !!(blockStyle & 8);\n              cod.predictableTermination = !!(blockStyle & 16);\n              cod.segmentationSymbolUsed = !!(blockStyle & 32);\n              cod.reversibleTransformation = data[j++];\n\n              if (cod.entropyCoderWithCustomPrecincts) {\n                var precinctsSizes = [];\n\n                while (j < length + position) {\n                  var precinctsSize = data[j++];\n                  precinctsSizes.push({\n                    PPx: precinctsSize & 0xf,\n                    PPy: precinctsSize >> 4\n                  });\n                }\n\n                cod.precinctsSizes = precinctsSizes;\n              }\n\n              var unsupported = [];\n\n              if (cod.selectiveArithmeticCodingBypass) {\n                unsupported.push(\"selectiveArithmeticCodingBypass\");\n              }\n\n              if (cod.resetContextProbabilities) {\n                unsupported.push(\"resetContextProbabilities\");\n              }\n\n              if (cod.terminationOnEachCodingPass) {\n                unsupported.push(\"terminationOnEachCodingPass\");\n              }\n\n              if (cod.verticallyStripe) {\n                unsupported.push(\"verticallyStripe\");\n              }\n\n              if (cod.predictableTermination) {\n                unsupported.push(\"predictableTermination\");\n              }\n\n              if (unsupported.length > 0) {\n                doNotRecover = true;\n                (0, _util.warn)(`JPX: Unsupported COD options (${unsupported.join(\", \")}).`);\n              }\n\n              if (context.mainHeader) {\n                context.COD = cod;\n              } else {\n                context.currentTile.COD = cod;\n                context.currentTile.COC = [];\n              }\n\n              break;\n\n            case 0xff90:\n              length = (0, _core_utils.readUint16)(data, position);\n              tile = {};\n              tile.index = (0, _core_utils.readUint16)(data, position + 2);\n              tile.length = (0, _core_utils.readUint32)(data, position + 4);\n              tile.dataEnd = tile.length + position - 2;\n              tile.partIndex = data[position + 8];\n              tile.partsCount = data[position + 9];\n              context.mainHeader = false;\n\n              if (tile.partIndex === 0) {\n                tile.COD = context.COD;\n                tile.COC = context.COC.slice(0);\n                tile.QCD = context.QCD;\n                tile.QCC = context.QCC.slice(0);\n              }\n\n              context.currentTile = tile;\n              break;\n\n            case 0xff93:\n              tile = context.currentTile;\n\n              if (tile.partIndex === 0) {\n                initializeTile(context, tile.index);\n                buildPackets(context);\n              }\n\n              length = tile.dataEnd - position;\n              parseTilePackets(context, data, position, length);\n              break;\n\n            case 0xff53:\n              (0, _util.warn)(\"JPX: Codestream code 0xFF53 (COC) is not implemented.\");\n\n            case 0xff55:\n            case 0xff57:\n            case 0xff58:\n            case 0xff64:\n              length = (0, _core_utils.readUint16)(data, position);\n              break;\n\n            default:\n              throw new Error(\"Unknown codestream code: \" + code.toString(16));\n          }\n\n          position += length;\n        }\n      } catch (e) {\n        if (doNotRecover || this.failOnCorruptedImage) {\n          throw new JpxError(e.message);\n        } else {\n          (0, _util.warn)(`JPX: Trying to recover from: \"${e.message}\".`);\n        }\n      }\n\n      this.tiles = transformComponents(context);\n      this.width = context.SIZ.Xsiz - context.SIZ.XOsiz;\n      this.height = context.SIZ.Ysiz - context.SIZ.YOsiz;\n      this.componentsCount = context.SIZ.Csiz;\n    }\n  };\n\n  function calculateComponentDimensions(component, siz) {\n    component.x0 = Math.ceil(siz.XOsiz / component.XRsiz);\n    component.x1 = Math.ceil(siz.Xsiz / component.XRsiz);\n    component.y0 = Math.ceil(siz.YOsiz / component.YRsiz);\n    component.y1 = Math.ceil(siz.Ysiz / component.YRsiz);\n    component.width = component.x1 - component.x0;\n    component.height = component.y1 - component.y0;\n  }\n\n  function calculateTileGrids(context, components) {\n    var siz = context.SIZ;\n    var tile,\n        tiles = [];\n    var numXtiles = Math.ceil((siz.Xsiz - siz.XTOsiz) / siz.XTsiz);\n    var numYtiles = Math.ceil((siz.Ysiz - siz.YTOsiz) / siz.YTsiz);\n\n    for (var q = 0; q < numYtiles; q++) {\n      for (var p = 0; p < numXtiles; p++) {\n        tile = {};\n        tile.tx0 = Math.max(siz.XTOsiz + p * siz.XTsiz, siz.XOsiz);\n        tile.ty0 = Math.max(siz.YTOsiz + q * siz.YTsiz, siz.YOsiz);\n        tile.tx1 = Math.min(siz.XTOsiz + (p + 1) * siz.XTsiz, siz.Xsiz);\n        tile.ty1 = Math.min(siz.YTOsiz + (q + 1) * siz.YTsiz, siz.Ysiz);\n        tile.width = tile.tx1 - tile.tx0;\n        tile.height = tile.ty1 - tile.ty0;\n        tile.components = [];\n        tiles.push(tile);\n      }\n    }\n\n    context.tiles = tiles;\n    var componentsCount = siz.Csiz;\n\n    for (var i = 0, ii = componentsCount; i < ii; i++) {\n      var component = components[i];\n\n      for (var j = 0, jj = tiles.length; j < jj; j++) {\n        var tileComponent = {};\n        tile = tiles[j];\n        tileComponent.tcx0 = Math.ceil(tile.tx0 / component.XRsiz);\n        tileComponent.tcy0 = Math.ceil(tile.ty0 / component.YRsiz);\n        tileComponent.tcx1 = Math.ceil(tile.tx1 / component.XRsiz);\n        tileComponent.tcy1 = Math.ceil(tile.ty1 / component.YRsiz);\n        tileComponent.width = tileComponent.tcx1 - tileComponent.tcx0;\n        tileComponent.height = tileComponent.tcy1 - tileComponent.tcy0;\n        tile.components[i] = tileComponent;\n      }\n    }\n  }\n\n  function getBlocksDimensions(context, component, r) {\n    var codOrCoc = component.codingStyleParameters;\n    var result = {};\n\n    if (!codOrCoc.entropyCoderWithCustomPrecincts) {\n      result.PPx = 15;\n      result.PPy = 15;\n    } else {\n      result.PPx = codOrCoc.precinctsSizes[r].PPx;\n      result.PPy = codOrCoc.precinctsSizes[r].PPy;\n    }\n\n    result.xcb_ = r > 0 ? Math.min(codOrCoc.xcb, result.PPx - 1) : Math.min(codOrCoc.xcb, result.PPx);\n    result.ycb_ = r > 0 ? Math.min(codOrCoc.ycb, result.PPy - 1) : Math.min(codOrCoc.ycb, result.PPy);\n    return result;\n  }\n\n  function buildPrecincts(context, resolution, dimensions) {\n    var precinctWidth = 1 << dimensions.PPx;\n    var precinctHeight = 1 << dimensions.PPy;\n    var isZeroRes = resolution.resLevel === 0;\n    var precinctWidthInSubband = 1 << dimensions.PPx + (isZeroRes ? 0 : -1);\n    var precinctHeightInSubband = 1 << dimensions.PPy + (isZeroRes ? 0 : -1);\n    var numprecinctswide = resolution.trx1 > resolution.trx0 ? Math.ceil(resolution.trx1 / precinctWidth) - Math.floor(resolution.trx0 / precinctWidth) : 0;\n    var numprecinctshigh = resolution.try1 > resolution.try0 ? Math.ceil(resolution.try1 / precinctHeight) - Math.floor(resolution.try0 / precinctHeight) : 0;\n    var numprecincts = numprecinctswide * numprecinctshigh;\n    resolution.precinctParameters = {\n      precinctWidth,\n      precinctHeight,\n      numprecinctswide,\n      numprecinctshigh,\n      numprecincts,\n      precinctWidthInSubband,\n      precinctHeightInSubband\n    };\n  }\n\n  function buildCodeblocks(context, subband, dimensions) {\n    var xcb_ = dimensions.xcb_;\n    var ycb_ = dimensions.ycb_;\n    var codeblockWidth = 1 << xcb_;\n    var codeblockHeight = 1 << ycb_;\n    var cbx0 = subband.tbx0 >> xcb_;\n    var cby0 = subband.tby0 >> ycb_;\n    var cbx1 = subband.tbx1 + codeblockWidth - 1 >> xcb_;\n    var cby1 = subband.tby1 + codeblockHeight - 1 >> ycb_;\n    var precinctParameters = subband.resolution.precinctParameters;\n    var codeblocks = [];\n    var precincts = [];\n    var i, j, codeblock, precinctNumber;\n\n    for (j = cby0; j < cby1; j++) {\n      for (i = cbx0; i < cbx1; i++) {\n        codeblock = {\n          cbx: i,\n          cby: j,\n          tbx0: codeblockWidth * i,\n          tby0: codeblockHeight * j,\n          tbx1: codeblockWidth * (i + 1),\n          tby1: codeblockHeight * (j + 1)\n        };\n        codeblock.tbx0_ = Math.max(subband.tbx0, codeblock.tbx0);\n        codeblock.tby0_ = Math.max(subband.tby0, codeblock.tby0);\n        codeblock.tbx1_ = Math.min(subband.tbx1, codeblock.tbx1);\n        codeblock.tby1_ = Math.min(subband.tby1, codeblock.tby1);\n        var pi = Math.floor((codeblock.tbx0_ - subband.tbx0) / precinctParameters.precinctWidthInSubband);\n        var pj = Math.floor((codeblock.tby0_ - subband.tby0) / precinctParameters.precinctHeightInSubband);\n        precinctNumber = pi + pj * precinctParameters.numprecinctswide;\n        codeblock.precinctNumber = precinctNumber;\n        codeblock.subbandType = subband.type;\n        codeblock.Lblock = 3;\n\n        if (codeblock.tbx1_ <= codeblock.tbx0_ || codeblock.tby1_ <= codeblock.tby0_) {\n          continue;\n        }\n\n        codeblocks.push(codeblock);\n        var precinct = precincts[precinctNumber];\n\n        if (precinct !== undefined) {\n          if (i < precinct.cbxMin) {\n            precinct.cbxMin = i;\n          } else if (i > precinct.cbxMax) {\n            precinct.cbxMax = i;\n          }\n\n          if (j < precinct.cbyMin) {\n            precinct.cbxMin = j;\n          } else if (j > precinct.cbyMax) {\n            precinct.cbyMax = j;\n          }\n        } else {\n          precincts[precinctNumber] = precinct = {\n            cbxMin: i,\n            cbyMin: j,\n            cbxMax: i,\n            cbyMax: j\n          };\n        }\n\n        codeblock.precinct = precinct;\n      }\n    }\n\n    subband.codeblockParameters = {\n      codeblockWidth: xcb_,\n      codeblockHeight: ycb_,\n      numcodeblockwide: cbx1 - cbx0 + 1,\n      numcodeblockhigh: cby1 - cby0 + 1\n    };\n    subband.codeblocks = codeblocks;\n    subband.precincts = precincts;\n  }\n\n  function createPacket(resolution, precinctNumber, layerNumber) {\n    var precinctCodeblocks = [];\n    var subbands = resolution.subbands;\n\n    for (var i = 0, ii = subbands.length; i < ii; i++) {\n      var subband = subbands[i];\n      var codeblocks = subband.codeblocks;\n\n      for (var j = 0, jj = codeblocks.length; j < jj; j++) {\n        var codeblock = codeblocks[j];\n\n        if (codeblock.precinctNumber !== precinctNumber) {\n          continue;\n        }\n\n        precinctCodeblocks.push(codeblock);\n      }\n    }\n\n    return {\n      layerNumber,\n      codeblocks: precinctCodeblocks\n    };\n  }\n\n  function LayerResolutionComponentPositionIterator(context) {\n    var siz = context.SIZ;\n    var tileIndex = context.currentTile.index;\n    var tile = context.tiles[tileIndex];\n    var layersCount = tile.codingStyleDefaultParameters.layersCount;\n    var componentsCount = siz.Csiz;\n    var maxDecompositionLevelsCount = 0;\n\n    for (var q = 0; q < componentsCount; q++) {\n      maxDecompositionLevelsCount = Math.max(maxDecompositionLevelsCount, tile.components[q].codingStyleParameters.decompositionLevelsCount);\n    }\n\n    var l = 0,\n        r = 0,\n        i = 0,\n        k = 0;\n\n    this.nextPacket = function JpxImage_nextPacket() {\n      for (; l < layersCount; l++) {\n        for (; r <= maxDecompositionLevelsCount; r++) {\n          for (; i < componentsCount; i++) {\n            var component = tile.components[i];\n\n            if (r > component.codingStyleParameters.decompositionLevelsCount) {\n              continue;\n            }\n\n            var resolution = component.resolutions[r];\n            var numprecincts = resolution.precinctParameters.numprecincts;\n\n            for (; k < numprecincts;) {\n              var packet = createPacket(resolution, k, l);\n              k++;\n              return packet;\n            }\n\n            k = 0;\n          }\n\n          i = 0;\n        }\n\n        r = 0;\n      }\n\n      throw new JpxError(\"Out of packets\");\n    };\n  }\n\n  function ResolutionLayerComponentPositionIterator(context) {\n    var siz = context.SIZ;\n    var tileIndex = context.currentTile.index;\n    var tile = context.tiles[tileIndex];\n    var layersCount = tile.codingStyleDefaultParameters.layersCount;\n    var componentsCount = siz.Csiz;\n    var maxDecompositionLevelsCount = 0;\n\n    for (var q = 0; q < componentsCount; q++) {\n      maxDecompositionLevelsCount = Math.max(maxDecompositionLevelsCount, tile.components[q].codingStyleParameters.decompositionLevelsCount);\n    }\n\n    var r = 0,\n        l = 0,\n        i = 0,\n        k = 0;\n\n    this.nextPacket = function JpxImage_nextPacket() {\n      for (; r <= maxDecompositionLevelsCount; r++) {\n        for (; l < layersCount; l++) {\n          for (; i < componentsCount; i++) {\n            var component = tile.components[i];\n\n            if (r > component.codingStyleParameters.decompositionLevelsCount) {\n              continue;\n            }\n\n            var resolution = component.resolutions[r];\n            var numprecincts = resolution.precinctParameters.numprecincts;\n\n            for (; k < numprecincts;) {\n              var packet = createPacket(resolution, k, l);\n              k++;\n              return packet;\n            }\n\n            k = 0;\n          }\n\n          i = 0;\n        }\n\n        l = 0;\n      }\n\n      throw new JpxError(\"Out of packets\");\n    };\n  }\n\n  function ResolutionPositionComponentLayerIterator(context) {\n    var siz = context.SIZ;\n    var tileIndex = context.currentTile.index;\n    var tile = context.tiles[tileIndex];\n    var layersCount = tile.codingStyleDefaultParameters.layersCount;\n    var componentsCount = siz.Csiz;\n    var l, r, c, p;\n    var maxDecompositionLevelsCount = 0;\n\n    for (c = 0; c < componentsCount; c++) {\n      const component = tile.components[c];\n      maxDecompositionLevelsCount = Math.max(maxDecompositionLevelsCount, component.codingStyleParameters.decompositionLevelsCount);\n    }\n\n    var maxNumPrecinctsInLevel = new Int32Array(maxDecompositionLevelsCount + 1);\n\n    for (r = 0; r <= maxDecompositionLevelsCount; ++r) {\n      var maxNumPrecincts = 0;\n\n      for (c = 0; c < componentsCount; ++c) {\n        var resolutions = tile.components[c].resolutions;\n\n        if (r < resolutions.length) {\n          maxNumPrecincts = Math.max(maxNumPrecincts, resolutions[r].precinctParameters.numprecincts);\n        }\n      }\n\n      maxNumPrecinctsInLevel[r] = maxNumPrecincts;\n    }\n\n    l = 0;\n    r = 0;\n    c = 0;\n    p = 0;\n\n    this.nextPacket = function JpxImage_nextPacket() {\n      for (; r <= maxDecompositionLevelsCount; r++) {\n        for (; p < maxNumPrecinctsInLevel[r]; p++) {\n          for (; c < componentsCount; c++) {\n            const component = tile.components[c];\n\n            if (r > component.codingStyleParameters.decompositionLevelsCount) {\n              continue;\n            }\n\n            var resolution = component.resolutions[r];\n            var numprecincts = resolution.precinctParameters.numprecincts;\n\n            if (p >= numprecincts) {\n              continue;\n            }\n\n            for (; l < layersCount;) {\n              var packet = createPacket(resolution, p, l);\n              l++;\n              return packet;\n            }\n\n            l = 0;\n          }\n\n          c = 0;\n        }\n\n        p = 0;\n      }\n\n      throw new JpxError(\"Out of packets\");\n    };\n  }\n\n  function PositionComponentResolutionLayerIterator(context) {\n    var siz = context.SIZ;\n    var tileIndex = context.currentTile.index;\n    var tile = context.tiles[tileIndex];\n    var layersCount = tile.codingStyleDefaultParameters.layersCount;\n    var componentsCount = siz.Csiz;\n    var precinctsSizes = getPrecinctSizesInImageScale(tile);\n    var precinctsIterationSizes = precinctsSizes;\n    var l = 0,\n        r = 0,\n        c = 0,\n        px = 0,\n        py = 0;\n\n    this.nextPacket = function JpxImage_nextPacket() {\n      for (; py < precinctsIterationSizes.maxNumHigh; py++) {\n        for (; px < precinctsIterationSizes.maxNumWide; px++) {\n          for (; c < componentsCount; c++) {\n            var component = tile.components[c];\n            var decompositionLevelsCount = component.codingStyleParameters.decompositionLevelsCount;\n\n            for (; r <= decompositionLevelsCount; r++) {\n              var resolution = component.resolutions[r];\n              var sizeInImageScale = precinctsSizes.components[c].resolutions[r];\n              var k = getPrecinctIndexIfExist(px, py, sizeInImageScale, precinctsIterationSizes, resolution);\n\n              if (k === null) {\n                continue;\n              }\n\n              for (; l < layersCount;) {\n                var packet = createPacket(resolution, k, l);\n                l++;\n                return packet;\n              }\n\n              l = 0;\n            }\n\n            r = 0;\n          }\n\n          c = 0;\n        }\n\n        px = 0;\n      }\n\n      throw new JpxError(\"Out of packets\");\n    };\n  }\n\n  function ComponentPositionResolutionLayerIterator(context) {\n    var siz = context.SIZ;\n    var tileIndex = context.currentTile.index;\n    var tile = context.tiles[tileIndex];\n    var layersCount = tile.codingStyleDefaultParameters.layersCount;\n    var componentsCount = siz.Csiz;\n    var precinctsSizes = getPrecinctSizesInImageScale(tile);\n    var l = 0,\n        r = 0,\n        c = 0,\n        px = 0,\n        py = 0;\n\n    this.nextPacket = function JpxImage_nextPacket() {\n      for (; c < componentsCount; ++c) {\n        var component = tile.components[c];\n        var precinctsIterationSizes = precinctsSizes.components[c];\n        var decompositionLevelsCount = component.codingStyleParameters.decompositionLevelsCount;\n\n        for (; py < precinctsIterationSizes.maxNumHigh; py++) {\n          for (; px < precinctsIterationSizes.maxNumWide; px++) {\n            for (; r <= decompositionLevelsCount; r++) {\n              var resolution = component.resolutions[r];\n              var sizeInImageScale = precinctsIterationSizes.resolutions[r];\n              var k = getPrecinctIndexIfExist(px, py, sizeInImageScale, precinctsIterationSizes, resolution);\n\n              if (k === null) {\n                continue;\n              }\n\n              for (; l < layersCount;) {\n                var packet = createPacket(resolution, k, l);\n                l++;\n                return packet;\n              }\n\n              l = 0;\n            }\n\n            r = 0;\n          }\n\n          px = 0;\n        }\n\n        py = 0;\n      }\n\n      throw new JpxError(\"Out of packets\");\n    };\n  }\n\n  function getPrecinctIndexIfExist(pxIndex, pyIndex, sizeInImageScale, precinctIterationSizes, resolution) {\n    var posX = pxIndex * precinctIterationSizes.minWidth;\n    var posY = pyIndex * precinctIterationSizes.minHeight;\n\n    if (posX % sizeInImageScale.width !== 0 || posY % sizeInImageScale.height !== 0) {\n      return null;\n    }\n\n    var startPrecinctRowIndex = posY / sizeInImageScale.width * resolution.precinctParameters.numprecinctswide;\n    return posX / sizeInImageScale.height + startPrecinctRowIndex;\n  }\n\n  function getPrecinctSizesInImageScale(tile) {\n    var componentsCount = tile.components.length;\n    var minWidth = Number.MAX_VALUE;\n    var minHeight = Number.MAX_VALUE;\n    var maxNumWide = 0;\n    var maxNumHigh = 0;\n    var sizePerComponent = new Array(componentsCount);\n\n    for (var c = 0; c < componentsCount; c++) {\n      var component = tile.components[c];\n      var decompositionLevelsCount = component.codingStyleParameters.decompositionLevelsCount;\n      var sizePerResolution = new Array(decompositionLevelsCount + 1);\n      var minWidthCurrentComponent = Number.MAX_VALUE;\n      var minHeightCurrentComponent = Number.MAX_VALUE;\n      var maxNumWideCurrentComponent = 0;\n      var maxNumHighCurrentComponent = 0;\n      var scale = 1;\n\n      for (var r = decompositionLevelsCount; r >= 0; --r) {\n        var resolution = component.resolutions[r];\n        var widthCurrentResolution = scale * resolution.precinctParameters.precinctWidth;\n        var heightCurrentResolution = scale * resolution.precinctParameters.precinctHeight;\n        minWidthCurrentComponent = Math.min(minWidthCurrentComponent, widthCurrentResolution);\n        minHeightCurrentComponent = Math.min(minHeightCurrentComponent, heightCurrentResolution);\n        maxNumWideCurrentComponent = Math.max(maxNumWideCurrentComponent, resolution.precinctParameters.numprecinctswide);\n        maxNumHighCurrentComponent = Math.max(maxNumHighCurrentComponent, resolution.precinctParameters.numprecinctshigh);\n        sizePerResolution[r] = {\n          width: widthCurrentResolution,\n          height: heightCurrentResolution\n        };\n        scale <<= 1;\n      }\n\n      minWidth = Math.min(minWidth, minWidthCurrentComponent);\n      minHeight = Math.min(minHeight, minHeightCurrentComponent);\n      maxNumWide = Math.max(maxNumWide, maxNumWideCurrentComponent);\n      maxNumHigh = Math.max(maxNumHigh, maxNumHighCurrentComponent);\n      sizePerComponent[c] = {\n        resolutions: sizePerResolution,\n        minWidth: minWidthCurrentComponent,\n        minHeight: minHeightCurrentComponent,\n        maxNumWide: maxNumWideCurrentComponent,\n        maxNumHigh: maxNumHighCurrentComponent\n      };\n    }\n\n    return {\n      components: sizePerComponent,\n      minWidth,\n      minHeight,\n      maxNumWide,\n      maxNumHigh\n    };\n  }\n\n  function buildPackets(context) {\n    var siz = context.SIZ;\n    var tileIndex = context.currentTile.index;\n    var tile = context.tiles[tileIndex];\n    var componentsCount = siz.Csiz;\n\n    for (var c = 0; c < componentsCount; c++) {\n      var component = tile.components[c];\n      var decompositionLevelsCount = component.codingStyleParameters.decompositionLevelsCount;\n      var resolutions = [];\n      var subbands = [];\n\n      for (var r = 0; r <= decompositionLevelsCount; r++) {\n        var blocksDimensions = getBlocksDimensions(context, component, r);\n        var resolution = {};\n        var scale = 1 << decompositionLevelsCount - r;\n        resolution.trx0 = Math.ceil(component.tcx0 / scale);\n        resolution.try0 = Math.ceil(component.tcy0 / scale);\n        resolution.trx1 = Math.ceil(component.tcx1 / scale);\n        resolution.try1 = Math.ceil(component.tcy1 / scale);\n        resolution.resLevel = r;\n        buildPrecincts(context, resolution, blocksDimensions);\n        resolutions.push(resolution);\n        var subband;\n\n        if (r === 0) {\n          subband = {};\n          subband.type = \"LL\";\n          subband.tbx0 = Math.ceil(component.tcx0 / scale);\n          subband.tby0 = Math.ceil(component.tcy0 / scale);\n          subband.tbx1 = Math.ceil(component.tcx1 / scale);\n          subband.tby1 = Math.ceil(component.tcy1 / scale);\n          subband.resolution = resolution;\n          buildCodeblocks(context, subband, blocksDimensions);\n          subbands.push(subband);\n          resolution.subbands = [subband];\n        } else {\n          var bscale = 1 << decompositionLevelsCount - r + 1;\n          var resolutionSubbands = [];\n          subband = {};\n          subband.type = \"HL\";\n          subband.tbx0 = Math.ceil(component.tcx0 / bscale - 0.5);\n          subband.tby0 = Math.ceil(component.tcy0 / bscale);\n          subband.tbx1 = Math.ceil(component.tcx1 / bscale - 0.5);\n          subband.tby1 = Math.ceil(component.tcy1 / bscale);\n          subband.resolution = resolution;\n          buildCodeblocks(context, subband, blocksDimensions);\n          subbands.push(subband);\n          resolutionSubbands.push(subband);\n          subband = {};\n          subband.type = \"LH\";\n          subband.tbx0 = Math.ceil(component.tcx0 / bscale);\n          subband.tby0 = Math.ceil(component.tcy0 / bscale - 0.5);\n          subband.tbx1 = Math.ceil(component.tcx1 / bscale);\n          subband.tby1 = Math.ceil(component.tcy1 / bscale - 0.5);\n          subband.resolution = resolution;\n          buildCodeblocks(context, subband, blocksDimensions);\n          subbands.push(subband);\n          resolutionSubbands.push(subband);\n          subband = {};\n          subband.type = \"HH\";\n          subband.tbx0 = Math.ceil(component.tcx0 / bscale - 0.5);\n          subband.tby0 = Math.ceil(component.tcy0 / bscale - 0.5);\n          subband.tbx1 = Math.ceil(component.tcx1 / bscale - 0.5);\n          subband.tby1 = Math.ceil(component.tcy1 / bscale - 0.5);\n          subband.resolution = resolution;\n          buildCodeblocks(context, subband, blocksDimensions);\n          subbands.push(subband);\n          resolutionSubbands.push(subband);\n          resolution.subbands = resolutionSubbands;\n        }\n      }\n\n      component.resolutions = resolutions;\n      component.subbands = subbands;\n    }\n\n    var progressionOrder = tile.codingStyleDefaultParameters.progressionOrder;\n\n    switch (progressionOrder) {\n      case 0:\n        tile.packetsIterator = new LayerResolutionComponentPositionIterator(context);\n        break;\n\n      case 1:\n        tile.packetsIterator = new ResolutionLayerComponentPositionIterator(context);\n        break;\n\n      case 2:\n        tile.packetsIterator = new ResolutionPositionComponentLayerIterator(context);\n        break;\n\n      case 3:\n        tile.packetsIterator = new PositionComponentResolutionLayerIterator(context);\n        break;\n\n      case 4:\n        tile.packetsIterator = new ComponentPositionResolutionLayerIterator(context);\n        break;\n\n      default:\n        throw new JpxError(`Unsupported progression order ${progressionOrder}`);\n    }\n  }\n\n  function parseTilePackets(context, data, offset, dataLength) {\n    var position = 0;\n    var buffer,\n        bufferSize = 0,\n        skipNextBit = false;\n\n    function readBits(count) {\n      while (bufferSize < count) {\n        var b = data[offset + position];\n        position++;\n\n        if (skipNextBit) {\n          buffer = buffer << 7 | b;\n          bufferSize += 7;\n          skipNextBit = false;\n        } else {\n          buffer = buffer << 8 | b;\n          bufferSize += 8;\n        }\n\n        if (b === 0xff) {\n          skipNextBit = true;\n        }\n      }\n\n      bufferSize -= count;\n      return buffer >>> bufferSize & (1 << count) - 1;\n    }\n\n    function skipMarkerIfEqual(value) {\n      if (data[offset + position - 1] === 0xff && data[offset + position] === value) {\n        skipBytes(1);\n        return true;\n      } else if (data[offset + position] === 0xff && data[offset + position + 1] === value) {\n        skipBytes(2);\n        return true;\n      }\n\n      return false;\n    }\n\n    function skipBytes(count) {\n      position += count;\n    }\n\n    function alignToByte() {\n      bufferSize = 0;\n\n      if (skipNextBit) {\n        position++;\n        skipNextBit = false;\n      }\n    }\n\n    function readCodingpasses() {\n      if (readBits(1) === 0) {\n        return 1;\n      }\n\n      if (readBits(1) === 0) {\n        return 2;\n      }\n\n      var value = readBits(2);\n\n      if (value < 3) {\n        return value + 3;\n      }\n\n      value = readBits(5);\n\n      if (value < 31) {\n        return value + 6;\n      }\n\n      value = readBits(7);\n      return value + 37;\n    }\n\n    var tileIndex = context.currentTile.index;\n    var tile = context.tiles[tileIndex];\n    var sopMarkerUsed = context.COD.sopMarkerUsed;\n    var ephMarkerUsed = context.COD.ephMarkerUsed;\n    var packetsIterator = tile.packetsIterator;\n\n    while (position < dataLength) {\n      alignToByte();\n\n      if (sopMarkerUsed && skipMarkerIfEqual(0x91)) {\n        skipBytes(4);\n      }\n\n      var packet = packetsIterator.nextPacket();\n\n      if (!readBits(1)) {\n        continue;\n      }\n\n      var layerNumber = packet.layerNumber;\n      var queue = [],\n          codeblock;\n\n      for (var i = 0, ii = packet.codeblocks.length; i < ii; i++) {\n        codeblock = packet.codeblocks[i];\n        var precinct = codeblock.precinct;\n        var codeblockColumn = codeblock.cbx - precinct.cbxMin;\n        var codeblockRow = codeblock.cby - precinct.cbyMin;\n        var codeblockIncluded = false;\n        var firstTimeInclusion = false;\n        var valueReady;\n\n        if (codeblock.included !== undefined) {\n          codeblockIncluded = !!readBits(1);\n        } else {\n          precinct = codeblock.precinct;\n          var inclusionTree, zeroBitPlanesTree;\n\n          if (precinct.inclusionTree !== undefined) {\n            inclusionTree = precinct.inclusionTree;\n          } else {\n            var width = precinct.cbxMax - precinct.cbxMin + 1;\n            var height = precinct.cbyMax - precinct.cbyMin + 1;\n            inclusionTree = new InclusionTree(width, height, layerNumber);\n            zeroBitPlanesTree = new TagTree(width, height);\n            precinct.inclusionTree = inclusionTree;\n            precinct.zeroBitPlanesTree = zeroBitPlanesTree;\n          }\n\n          if (inclusionTree.reset(codeblockColumn, codeblockRow, layerNumber)) {\n            while (true) {\n              if (readBits(1)) {\n                valueReady = !inclusionTree.nextLevel();\n\n                if (valueReady) {\n                  codeblock.included = true;\n                  codeblockIncluded = firstTimeInclusion = true;\n                  break;\n                }\n              } else {\n                inclusionTree.incrementValue(layerNumber);\n                break;\n              }\n            }\n          }\n        }\n\n        if (!codeblockIncluded) {\n          continue;\n        }\n\n        if (firstTimeInclusion) {\n          zeroBitPlanesTree = precinct.zeroBitPlanesTree;\n          zeroBitPlanesTree.reset(codeblockColumn, codeblockRow);\n\n          while (true) {\n            if (readBits(1)) {\n              valueReady = !zeroBitPlanesTree.nextLevel();\n\n              if (valueReady) {\n                break;\n              }\n            } else {\n              zeroBitPlanesTree.incrementValue();\n            }\n          }\n\n          codeblock.zeroBitPlanes = zeroBitPlanesTree.value;\n        }\n\n        var codingpasses = readCodingpasses();\n\n        while (readBits(1)) {\n          codeblock.Lblock++;\n        }\n\n        var codingpassesLog2 = (0, _core_utils.log2)(codingpasses);\n        var bits = (codingpasses < 1 << codingpassesLog2 ? codingpassesLog2 - 1 : codingpassesLog2) + codeblock.Lblock;\n        var codedDataLength = readBits(bits);\n        queue.push({\n          codeblock,\n          codingpasses,\n          dataLength: codedDataLength\n        });\n      }\n\n      alignToByte();\n\n      if (ephMarkerUsed) {\n        skipMarkerIfEqual(0x92);\n      }\n\n      while (queue.length > 0) {\n        var packetItem = queue.shift();\n        codeblock = packetItem.codeblock;\n\n        if (codeblock.data === undefined) {\n          codeblock.data = [];\n        }\n\n        codeblock.data.push({\n          data,\n          start: offset + position,\n          end: offset + position + packetItem.dataLength,\n          codingpasses: packetItem.codingpasses\n        });\n        position += packetItem.dataLength;\n      }\n    }\n\n    return position;\n  }\n\n  function copyCoefficients(coefficients, levelWidth, levelHeight, subband, delta, mb, reversible, segmentationSymbolUsed) {\n    var x0 = subband.tbx0;\n    var y0 = subband.tby0;\n    var width = subband.tbx1 - subband.tbx0;\n    var codeblocks = subband.codeblocks;\n    var right = subband.type.charAt(0) === \"H\" ? 1 : 0;\n    var bottom = subband.type.charAt(1) === \"H\" ? levelWidth : 0;\n\n    for (var i = 0, ii = codeblocks.length; i < ii; ++i) {\n      var codeblock = codeblocks[i];\n      var blockWidth = codeblock.tbx1_ - codeblock.tbx0_;\n      var blockHeight = codeblock.tby1_ - codeblock.tby0_;\n\n      if (blockWidth === 0 || blockHeight === 0) {\n        continue;\n      }\n\n      if (codeblock.data === undefined) {\n        continue;\n      }\n\n      var bitModel, currentCodingpassType;\n      bitModel = new BitModel(blockWidth, blockHeight, codeblock.subbandType, codeblock.zeroBitPlanes, mb);\n      currentCodingpassType = 2;\n      var data = codeblock.data,\n          totalLength = 0,\n          codingpasses = 0;\n      var j, jj, dataItem;\n\n      for (j = 0, jj = data.length; j < jj; j++) {\n        dataItem = data[j];\n        totalLength += dataItem.end - dataItem.start;\n        codingpasses += dataItem.codingpasses;\n      }\n\n      var encodedData = new Uint8Array(totalLength);\n      var position = 0;\n\n      for (j = 0, jj = data.length; j < jj; j++) {\n        dataItem = data[j];\n        var chunk = dataItem.data.subarray(dataItem.start, dataItem.end);\n        encodedData.set(chunk, position);\n        position += chunk.length;\n      }\n\n      var decoder = new _arithmetic_decoder.ArithmeticDecoder(encodedData, 0, totalLength);\n      bitModel.setDecoder(decoder);\n\n      for (j = 0; j < codingpasses; j++) {\n        switch (currentCodingpassType) {\n          case 0:\n            bitModel.runSignificancePropagationPass();\n            break;\n\n          case 1:\n            bitModel.runMagnitudeRefinementPass();\n            break;\n\n          case 2:\n            bitModel.runCleanupPass();\n\n            if (segmentationSymbolUsed) {\n              bitModel.checkSegmentationSymbol();\n            }\n\n            break;\n        }\n\n        currentCodingpassType = (currentCodingpassType + 1) % 3;\n      }\n\n      var offset = codeblock.tbx0_ - x0 + (codeblock.tby0_ - y0) * width;\n      var sign = bitModel.coefficentsSign;\n      var magnitude = bitModel.coefficentsMagnitude;\n      var bitsDecoded = bitModel.bitsDecoded;\n      var magnitudeCorrection = reversible ? 0 : 0.5;\n      var k, n, nb;\n      position = 0;\n      var interleave = subband.type !== \"LL\";\n\n      for (j = 0; j < blockHeight; j++) {\n        var row = offset / width | 0;\n        var levelOffset = 2 * row * (levelWidth - width) + right + bottom;\n\n        for (k = 0; k < blockWidth; k++) {\n          n = magnitude[position];\n\n          if (n !== 0) {\n            n = (n + magnitudeCorrection) * delta;\n\n            if (sign[position] !== 0) {\n              n = -n;\n            }\n\n            nb = bitsDecoded[position];\n            var pos = interleave ? levelOffset + (offset << 1) : offset;\n\n            if (reversible && nb >= mb) {\n              coefficients[pos] = n;\n            } else {\n              coefficients[pos] = n * (1 << mb - nb);\n            }\n          }\n\n          offset++;\n          position++;\n        }\n\n        offset += width - blockWidth;\n      }\n    }\n  }\n\n  function transformTile(context, tile, c) {\n    var component = tile.components[c];\n    var codingStyleParameters = component.codingStyleParameters;\n    var quantizationParameters = component.quantizationParameters;\n    var decompositionLevelsCount = codingStyleParameters.decompositionLevelsCount;\n    var spqcds = quantizationParameters.SPqcds;\n    var scalarExpounded = quantizationParameters.scalarExpounded;\n    var guardBits = quantizationParameters.guardBits;\n    var segmentationSymbolUsed = codingStyleParameters.segmentationSymbolUsed;\n    var precision = context.components[c].precision;\n    var reversible = codingStyleParameters.reversibleTransformation;\n    var transform = reversible ? new ReversibleTransform() : new IrreversibleTransform();\n    var subbandCoefficients = [];\n    var b = 0;\n\n    for (var i = 0; i <= decompositionLevelsCount; i++) {\n      var resolution = component.resolutions[i];\n      var width = resolution.trx1 - resolution.trx0;\n      var height = resolution.try1 - resolution.try0;\n      var coefficients = new Float32Array(width * height);\n\n      for (var j = 0, jj = resolution.subbands.length; j < jj; j++) {\n        var mu, epsilon;\n\n        if (!scalarExpounded) {\n          mu = spqcds[0].mu;\n          epsilon = spqcds[0].epsilon + (i > 0 ? 1 - i : 0);\n        } else {\n          mu = spqcds[b].mu;\n          epsilon = spqcds[b].epsilon;\n          b++;\n        }\n\n        var subband = resolution.subbands[j];\n        var gainLog2 = SubbandsGainLog2[subband.type];\n        var delta = reversible ? 1 : 2 ** (precision + gainLog2 - epsilon) * (1 + mu / 2048);\n        var mb = guardBits + epsilon - 1;\n        copyCoefficients(coefficients, width, height, subband, delta, mb, reversible, segmentationSymbolUsed);\n      }\n\n      subbandCoefficients.push({\n        width,\n        height,\n        items: coefficients\n      });\n    }\n\n    var result = transform.calculate(subbandCoefficients, component.tcx0, component.tcy0);\n    return {\n      left: component.tcx0,\n      top: component.tcy0,\n      width: result.width,\n      height: result.height,\n      items: result.items\n    };\n  }\n\n  function transformComponents(context) {\n    var siz = context.SIZ;\n    var components = context.components;\n    var componentsCount = siz.Csiz;\n    var resultImages = [];\n\n    for (var i = 0, ii = context.tiles.length; i < ii; i++) {\n      var tile = context.tiles[i];\n      var transformedTiles = [];\n      var c;\n\n      for (c = 0; c < componentsCount; c++) {\n        transformedTiles[c] = transformTile(context, tile, c);\n      }\n\n      var tile0 = transformedTiles[0];\n      var out = new Uint8ClampedArray(tile0.items.length * componentsCount);\n      var result = {\n        left: tile0.left,\n        top: tile0.top,\n        width: tile0.width,\n        height: tile0.height,\n        items: out\n      };\n      var shift, offset;\n      var pos = 0,\n          j,\n          jj,\n          y0,\n          y1,\n          y2;\n\n      if (tile.codingStyleDefaultParameters.multipleComponentTransform) {\n        var fourComponents = componentsCount === 4;\n        var y0items = transformedTiles[0].items;\n        var y1items = transformedTiles[1].items;\n        var y2items = transformedTiles[2].items;\n        var y3items = fourComponents ? transformedTiles[3].items : null;\n        shift = components[0].precision - 8;\n        offset = (128 << shift) + 0.5;\n        var component0 = tile.components[0];\n        var alpha01 = componentsCount - 3;\n        jj = y0items.length;\n\n        if (!component0.codingStyleParameters.reversibleTransformation) {\n          for (j = 0; j < jj; j++, pos += alpha01) {\n            y0 = y0items[j] + offset;\n            y1 = y1items[j];\n            y2 = y2items[j];\n            out[pos++] = y0 + 1.402 * y2 >> shift;\n            out[pos++] = y0 - 0.34413 * y1 - 0.71414 * y2 >> shift;\n            out[pos++] = y0 + 1.772 * y1 >> shift;\n          }\n        } else {\n          for (j = 0; j < jj; j++, pos += alpha01) {\n            y0 = y0items[j] + offset;\n            y1 = y1items[j];\n            y2 = y2items[j];\n            const g = y0 - (y2 + y1 >> 2);\n            out[pos++] = g + y2 >> shift;\n            out[pos++] = g >> shift;\n            out[pos++] = g + y1 >> shift;\n          }\n        }\n\n        if (fourComponents) {\n          for (j = 0, pos = 3; j < jj; j++, pos += 4) {\n            out[pos] = y3items[j] + offset >> shift;\n          }\n        }\n      } else {\n        for (c = 0; c < componentsCount; c++) {\n          var items = transformedTiles[c].items;\n          shift = components[c].precision - 8;\n          offset = (128 << shift) + 0.5;\n\n          for (pos = c, j = 0, jj = items.length; j < jj; j++) {\n            out[pos] = items[j] + offset >> shift;\n            pos += componentsCount;\n          }\n        }\n      }\n\n      resultImages.push(result);\n    }\n\n    return resultImages;\n  }\n\n  function initializeTile(context, tileIndex) {\n    var siz = context.SIZ;\n    var componentsCount = siz.Csiz;\n    var tile = context.tiles[tileIndex];\n\n    for (var c = 0; c < componentsCount; c++) {\n      var component = tile.components[c];\n      var qcdOrQcc = context.currentTile.QCC[c] !== undefined ? context.currentTile.QCC[c] : context.currentTile.QCD;\n      component.quantizationParameters = qcdOrQcc;\n      var codOrCoc = context.currentTile.COC[c] !== undefined ? context.currentTile.COC[c] : context.currentTile.COD;\n      component.codingStyleParameters = codOrCoc;\n    }\n\n    tile.codingStyleDefaultParameters = context.currentTile.COD;\n  }\n\n  var TagTree = function TagTreeClosure() {\n    function TagTree(width, height) {\n      var levelsLength = (0, _core_utils.log2)(Math.max(width, height)) + 1;\n      this.levels = [];\n\n      for (var i = 0; i < levelsLength; i++) {\n        var level = {\n          width,\n          height,\n          items: []\n        };\n        this.levels.push(level);\n        width = Math.ceil(width / 2);\n        height = Math.ceil(height / 2);\n      }\n    }\n\n    TagTree.prototype = {\n      reset: function TagTree_reset(i, j) {\n        var currentLevel = 0,\n            value = 0,\n            level;\n\n        while (currentLevel < this.levels.length) {\n          level = this.levels[currentLevel];\n          var index = i + j * level.width;\n\n          if (level.items[index] !== undefined) {\n            value = level.items[index];\n            break;\n          }\n\n          level.index = index;\n          i >>= 1;\n          j >>= 1;\n          currentLevel++;\n        }\n\n        currentLevel--;\n        level = this.levels[currentLevel];\n        level.items[level.index] = value;\n        this.currentLevel = currentLevel;\n        delete this.value;\n      },\n      incrementValue: function TagTree_incrementValue() {\n        var level = this.levels[this.currentLevel];\n        level.items[level.index]++;\n      },\n      nextLevel: function TagTree_nextLevel() {\n        var currentLevel = this.currentLevel;\n        var level = this.levels[currentLevel];\n        var value = level.items[level.index];\n        currentLevel--;\n\n        if (currentLevel < 0) {\n          this.value = value;\n          return false;\n        }\n\n        this.currentLevel = currentLevel;\n        level = this.levels[currentLevel];\n        level.items[level.index] = value;\n        return true;\n      }\n    };\n    return TagTree;\n  }();\n\n  var InclusionTree = function InclusionTreeClosure() {\n    function InclusionTree(width, height, defaultValue) {\n      var levelsLength = (0, _core_utils.log2)(Math.max(width, height)) + 1;\n      this.levels = [];\n\n      for (var i = 0; i < levelsLength; i++) {\n        var items = new Uint8Array(width * height);\n\n        for (var j = 0, jj = items.length; j < jj; j++) {\n          items[j] = defaultValue;\n        }\n\n        var level = {\n          width,\n          height,\n          items\n        };\n        this.levels.push(level);\n        width = Math.ceil(width / 2);\n        height = Math.ceil(height / 2);\n      }\n    }\n\n    InclusionTree.prototype = {\n      reset: function InclusionTree_reset(i, j, stopValue) {\n        var currentLevel = 0;\n\n        while (currentLevel < this.levels.length) {\n          var level = this.levels[currentLevel];\n          var index = i + j * level.width;\n          level.index = index;\n          var value = level.items[index];\n\n          if (value === 0xff) {\n            break;\n          }\n\n          if (value > stopValue) {\n            this.currentLevel = currentLevel;\n            this.propagateValues();\n            return false;\n          }\n\n          i >>= 1;\n          j >>= 1;\n          currentLevel++;\n        }\n\n        this.currentLevel = currentLevel - 1;\n        return true;\n      },\n      incrementValue: function InclusionTree_incrementValue(stopValue) {\n        var level = this.levels[this.currentLevel];\n        level.items[level.index] = stopValue + 1;\n        this.propagateValues();\n      },\n      propagateValues: function InclusionTree_propagateValues() {\n        var levelIndex = this.currentLevel;\n        var level = this.levels[levelIndex];\n        var currentValue = level.items[level.index];\n\n        while (--levelIndex >= 0) {\n          level = this.levels[levelIndex];\n          level.items[level.index] = currentValue;\n        }\n      },\n      nextLevel: function InclusionTree_nextLevel() {\n        var currentLevel = this.currentLevel;\n        var level = this.levels[currentLevel];\n        var value = level.items[level.index];\n        level.items[level.index] = 0xff;\n        currentLevel--;\n\n        if (currentLevel < 0) {\n          return false;\n        }\n\n        this.currentLevel = currentLevel;\n        level = this.levels[currentLevel];\n        level.items[level.index] = value;\n        return true;\n      }\n    };\n    return InclusionTree;\n  }();\n\n  var BitModel = function BitModelClosure() {\n    var UNIFORM_CONTEXT = 17;\n    var RUNLENGTH_CONTEXT = 18;\n    var LLAndLHContextsLabel = new Uint8Array([0, 5, 8, 0, 3, 7, 8, 0, 4, 7, 8, 0, 0, 0, 0, 0, 1, 6, 8, 0, 3, 7, 8, 0, 4, 7, 8, 0, 0, 0, 0, 0, 2, 6, 8, 0, 3, 7, 8, 0, 4, 7, 8, 0, 0, 0, 0, 0, 2, 6, 8, 0, 3, 7, 8, 0, 4, 7, 8, 0, 0, 0, 0, 0, 2, 6, 8, 0, 3, 7, 8, 0, 4, 7, 8]);\n    var HLContextLabel = new Uint8Array([0, 3, 4, 0, 5, 7, 7, 0, 8, 8, 8, 0, 0, 0, 0, 0, 1, 3, 4, 0, 6, 7, 7, 0, 8, 8, 8, 0, 0, 0, 0, 0, 2, 3, 4, 0, 6, 7, 7, 0, 8, 8, 8, 0, 0, 0, 0, 0, 2, 3, 4, 0, 6, 7, 7, 0, 8, 8, 8, 0, 0, 0, 0, 0, 2, 3, 4, 0, 6, 7, 7, 0, 8, 8, 8]);\n    var HHContextLabel = new Uint8Array([0, 1, 2, 0, 1, 2, 2, 0, 2, 2, 2, 0, 0, 0, 0, 0, 3, 4, 5, 0, 4, 5, 5, 0, 5, 5, 5, 0, 0, 0, 0, 0, 6, 7, 7, 0, 7, 7, 7, 0, 7, 7, 7, 0, 0, 0, 0, 0, 8, 8, 8, 0, 8, 8, 8, 0, 8, 8, 8, 0, 0, 0, 0, 0, 8, 8, 8, 0, 8, 8, 8, 0, 8, 8, 8]);\n\n    function BitModel(width, height, subband, zeroBitPlanes, mb) {\n      this.width = width;\n      this.height = height;\n      let contextLabelTable;\n\n      if (subband === \"HH\") {\n        contextLabelTable = HHContextLabel;\n      } else if (subband === \"HL\") {\n        contextLabelTable = HLContextLabel;\n      } else {\n        contextLabelTable = LLAndLHContextsLabel;\n      }\n\n      this.contextLabelTable = contextLabelTable;\n      var coefficientCount = width * height;\n      this.neighborsSignificance = new Uint8Array(coefficientCount);\n      this.coefficentsSign = new Uint8Array(coefficientCount);\n      let coefficentsMagnitude;\n\n      if (mb > 14) {\n        coefficentsMagnitude = new Uint32Array(coefficientCount);\n      } else if (mb > 6) {\n        coefficentsMagnitude = new Uint16Array(coefficientCount);\n      } else {\n        coefficentsMagnitude = new Uint8Array(coefficientCount);\n      }\n\n      this.coefficentsMagnitude = coefficentsMagnitude;\n      this.processingFlags = new Uint8Array(coefficientCount);\n      var bitsDecoded = new Uint8Array(coefficientCount);\n\n      if (zeroBitPlanes !== 0) {\n        for (var i = 0; i < coefficientCount; i++) {\n          bitsDecoded[i] = zeroBitPlanes;\n        }\n      }\n\n      this.bitsDecoded = bitsDecoded;\n      this.reset();\n    }\n\n    BitModel.prototype = {\n      setDecoder: function BitModel_setDecoder(decoder) {\n        this.decoder = decoder;\n      },\n      reset: function BitModel_reset() {\n        this.contexts = new Int8Array(19);\n        this.contexts[0] = 4 << 1 | 0;\n        this.contexts[UNIFORM_CONTEXT] = 46 << 1 | 0;\n        this.contexts[RUNLENGTH_CONTEXT] = 3 << 1 | 0;\n      },\n      setNeighborsSignificance: function BitModel_setNeighborsSignificance(row, column, index) {\n        var neighborsSignificance = this.neighborsSignificance;\n        var width = this.width,\n            height = this.height;\n        var left = column > 0;\n        var right = column + 1 < width;\n        var i;\n\n        if (row > 0) {\n          i = index - width;\n\n          if (left) {\n            neighborsSignificance[i - 1] += 0x10;\n          }\n\n          if (right) {\n            neighborsSignificance[i + 1] += 0x10;\n          }\n\n          neighborsSignificance[i] += 0x04;\n        }\n\n        if (row + 1 < height) {\n          i = index + width;\n\n          if (left) {\n            neighborsSignificance[i - 1] += 0x10;\n          }\n\n          if (right) {\n            neighborsSignificance[i + 1] += 0x10;\n          }\n\n          neighborsSignificance[i] += 0x04;\n        }\n\n        if (left) {\n          neighborsSignificance[index - 1] += 0x01;\n        }\n\n        if (right) {\n          neighborsSignificance[index + 1] += 0x01;\n        }\n\n        neighborsSignificance[index] |= 0x80;\n      },\n      runSignificancePropagationPass: function BitModel_runSignificancePropagationPass() {\n        var decoder = this.decoder;\n        var width = this.width,\n            height = this.height;\n        var coefficentsMagnitude = this.coefficentsMagnitude;\n        var coefficentsSign = this.coefficentsSign;\n        var neighborsSignificance = this.neighborsSignificance;\n        var processingFlags = this.processingFlags;\n        var contexts = this.contexts;\n        var labels = this.contextLabelTable;\n        var bitsDecoded = this.bitsDecoded;\n        var processedInverseMask = ~1;\n        var processedMask = 1;\n        var firstMagnitudeBitMask = 2;\n\n        for (var i0 = 0; i0 < height; i0 += 4) {\n          for (var j = 0; j < width; j++) {\n            var index = i0 * width + j;\n\n            for (var i1 = 0; i1 < 4; i1++, index += width) {\n              var i = i0 + i1;\n\n              if (i >= height) {\n                break;\n              }\n\n              processingFlags[index] &= processedInverseMask;\n\n              if (coefficentsMagnitude[index] || !neighborsSignificance[index]) {\n                continue;\n              }\n\n              var contextLabel = labels[neighborsSignificance[index]];\n              var decision = decoder.readBit(contexts, contextLabel);\n\n              if (decision) {\n                var sign = this.decodeSignBit(i, j, index);\n                coefficentsSign[index] = sign;\n                coefficentsMagnitude[index] = 1;\n                this.setNeighborsSignificance(i, j, index);\n                processingFlags[index] |= firstMagnitudeBitMask;\n              }\n\n              bitsDecoded[index]++;\n              processingFlags[index] |= processedMask;\n            }\n          }\n        }\n      },\n      decodeSignBit: function BitModel_decodeSignBit(row, column, index) {\n        var width = this.width,\n            height = this.height;\n        var coefficentsMagnitude = this.coefficentsMagnitude;\n        var coefficentsSign = this.coefficentsSign;\n        var contribution, sign0, sign1, significance1;\n        var contextLabel, decoded;\n        significance1 = column > 0 && coefficentsMagnitude[index - 1] !== 0;\n\n        if (column + 1 < width && coefficentsMagnitude[index + 1] !== 0) {\n          sign1 = coefficentsSign[index + 1];\n\n          if (significance1) {\n            sign0 = coefficentsSign[index - 1];\n            contribution = 1 - sign1 - sign0;\n          } else {\n            contribution = 1 - sign1 - sign1;\n          }\n        } else if (significance1) {\n          sign0 = coefficentsSign[index - 1];\n          contribution = 1 - sign0 - sign0;\n        } else {\n          contribution = 0;\n        }\n\n        var horizontalContribution = 3 * contribution;\n        significance1 = row > 0 && coefficentsMagnitude[index - width] !== 0;\n\n        if (row + 1 < height && coefficentsMagnitude[index + width] !== 0) {\n          sign1 = coefficentsSign[index + width];\n\n          if (significance1) {\n            sign0 = coefficentsSign[index - width];\n            contribution = 1 - sign1 - sign0 + horizontalContribution;\n          } else {\n            contribution = 1 - sign1 - sign1 + horizontalContribution;\n          }\n        } else if (significance1) {\n          sign0 = coefficentsSign[index - width];\n          contribution = 1 - sign0 - sign0 + horizontalContribution;\n        } else {\n          contribution = horizontalContribution;\n        }\n\n        if (contribution >= 0) {\n          contextLabel = 9 + contribution;\n          decoded = this.decoder.readBit(this.contexts, contextLabel);\n        } else {\n          contextLabel = 9 - contribution;\n          decoded = this.decoder.readBit(this.contexts, contextLabel) ^ 1;\n        }\n\n        return decoded;\n      },\n      runMagnitudeRefinementPass: function BitModel_runMagnitudeRefinementPass() {\n        var decoder = this.decoder;\n        var width = this.width,\n            height = this.height;\n        var coefficentsMagnitude = this.coefficentsMagnitude;\n        var neighborsSignificance = this.neighborsSignificance;\n        var contexts = this.contexts;\n        var bitsDecoded = this.bitsDecoded;\n        var processingFlags = this.processingFlags;\n        var processedMask = 1;\n        var firstMagnitudeBitMask = 2;\n        var length = width * height;\n        var width4 = width * 4;\n\n        for (var index0 = 0, indexNext; index0 < length; index0 = indexNext) {\n          indexNext = Math.min(length, index0 + width4);\n\n          for (var j = 0; j < width; j++) {\n            for (var index = index0 + j; index < indexNext; index += width) {\n              if (!coefficentsMagnitude[index] || (processingFlags[index] & processedMask) !== 0) {\n                continue;\n              }\n\n              var contextLabel = 16;\n\n              if ((processingFlags[index] & firstMagnitudeBitMask) !== 0) {\n                processingFlags[index] ^= firstMagnitudeBitMask;\n                var significance = neighborsSignificance[index] & 127;\n                contextLabel = significance === 0 ? 15 : 14;\n              }\n\n              var bit = decoder.readBit(contexts, contextLabel);\n              coefficentsMagnitude[index] = coefficentsMagnitude[index] << 1 | bit;\n              bitsDecoded[index]++;\n              processingFlags[index] |= processedMask;\n            }\n          }\n        }\n      },\n      runCleanupPass: function BitModel_runCleanupPass() {\n        var decoder = this.decoder;\n        var width = this.width,\n            height = this.height;\n        var neighborsSignificance = this.neighborsSignificance;\n        var coefficentsMagnitude = this.coefficentsMagnitude;\n        var coefficentsSign = this.coefficentsSign;\n        var contexts = this.contexts;\n        var labels = this.contextLabelTable;\n        var bitsDecoded = this.bitsDecoded;\n        var processingFlags = this.processingFlags;\n        var processedMask = 1;\n        var firstMagnitudeBitMask = 2;\n        var oneRowDown = width;\n        var twoRowsDown = width * 2;\n        var threeRowsDown = width * 3;\n        var iNext;\n\n        for (var i0 = 0; i0 < height; i0 = iNext) {\n          iNext = Math.min(i0 + 4, height);\n          var indexBase = i0 * width;\n          var checkAllEmpty = i0 + 3 < height;\n\n          for (var j = 0; j < width; j++) {\n            var index0 = indexBase + j;\n            var allEmpty = checkAllEmpty && processingFlags[index0] === 0 && processingFlags[index0 + oneRowDown] === 0 && processingFlags[index0 + twoRowsDown] === 0 && processingFlags[index0 + threeRowsDown] === 0 && neighborsSignificance[index0] === 0 && neighborsSignificance[index0 + oneRowDown] === 0 && neighborsSignificance[index0 + twoRowsDown] === 0 && neighborsSignificance[index0 + threeRowsDown] === 0;\n            var i1 = 0,\n                index = index0;\n            var i = i0,\n                sign;\n\n            if (allEmpty) {\n              var hasSignificantCoefficent = decoder.readBit(contexts, RUNLENGTH_CONTEXT);\n\n              if (!hasSignificantCoefficent) {\n                bitsDecoded[index0]++;\n                bitsDecoded[index0 + oneRowDown]++;\n                bitsDecoded[index0 + twoRowsDown]++;\n                bitsDecoded[index0 + threeRowsDown]++;\n                continue;\n              }\n\n              i1 = decoder.readBit(contexts, UNIFORM_CONTEXT) << 1 | decoder.readBit(contexts, UNIFORM_CONTEXT);\n\n              if (i1 !== 0) {\n                i = i0 + i1;\n                index += i1 * width;\n              }\n\n              sign = this.decodeSignBit(i, j, index);\n              coefficentsSign[index] = sign;\n              coefficentsMagnitude[index] = 1;\n              this.setNeighborsSignificance(i, j, index);\n              processingFlags[index] |= firstMagnitudeBitMask;\n              index = index0;\n\n              for (var i2 = i0; i2 <= i; i2++, index += width) {\n                bitsDecoded[index]++;\n              }\n\n              i1++;\n            }\n\n            for (i = i0 + i1; i < iNext; i++, index += width) {\n              if (coefficentsMagnitude[index] || (processingFlags[index] & processedMask) !== 0) {\n                continue;\n              }\n\n              var contextLabel = labels[neighborsSignificance[index]];\n              var decision = decoder.readBit(contexts, contextLabel);\n\n              if (decision === 1) {\n                sign = this.decodeSignBit(i, j, index);\n                coefficentsSign[index] = sign;\n                coefficentsMagnitude[index] = 1;\n                this.setNeighborsSignificance(i, j, index);\n                processingFlags[index] |= firstMagnitudeBitMask;\n              }\n\n              bitsDecoded[index]++;\n            }\n          }\n        }\n      },\n      checkSegmentationSymbol: function BitModel_checkSegmentationSymbol() {\n        var decoder = this.decoder;\n        var contexts = this.contexts;\n        var symbol = decoder.readBit(contexts, UNIFORM_CONTEXT) << 3 | decoder.readBit(contexts, UNIFORM_CONTEXT) << 2 | decoder.readBit(contexts, UNIFORM_CONTEXT) << 1 | decoder.readBit(contexts, UNIFORM_CONTEXT);\n\n        if (symbol !== 0xa) {\n          throw new JpxError(\"Invalid segmentation symbol\");\n        }\n      }\n    };\n    return BitModel;\n  }();\n\n  var Transform = function TransformClosure() {\n    function Transform() {}\n\n    Transform.prototype.calculate = function transformCalculate(subbands, u0, v0) {\n      var ll = subbands[0];\n\n      for (var i = 1, ii = subbands.length; i < ii; i++) {\n        ll = this.iterate(ll, subbands[i], u0, v0);\n      }\n\n      return ll;\n    };\n\n    Transform.prototype.extend = function extend(buffer, offset, size) {\n      var i1 = offset - 1,\n          j1 = offset + 1;\n      var i2 = offset + size - 2,\n          j2 = offset + size;\n      buffer[i1--] = buffer[j1++];\n      buffer[j2++] = buffer[i2--];\n      buffer[i1--] = buffer[j1++];\n      buffer[j2++] = buffer[i2--];\n      buffer[i1--] = buffer[j1++];\n      buffer[j2++] = buffer[i2--];\n      buffer[i1] = buffer[j1];\n      buffer[j2] = buffer[i2];\n    };\n\n    Transform.prototype.iterate = function Transform_iterate(ll, hl_lh_hh, u0, v0) {\n      var llWidth = ll.width,\n          llHeight = ll.height,\n          llItems = ll.items;\n      var width = hl_lh_hh.width;\n      var height = hl_lh_hh.height;\n      var items = hl_lh_hh.items;\n      var i, j, k, l, u, v;\n\n      for (k = 0, i = 0; i < llHeight; i++) {\n        l = i * 2 * width;\n\n        for (j = 0; j < llWidth; j++, k++, l += 2) {\n          items[l] = llItems[k];\n        }\n      }\n\n      llItems = ll.items = null;\n      var bufferPadding = 4;\n      var rowBuffer = new Float32Array(width + 2 * bufferPadding);\n\n      if (width === 1) {\n        if ((u0 & 1) !== 0) {\n          for (v = 0, k = 0; v < height; v++, k += width) {\n            items[k] *= 0.5;\n          }\n        }\n      } else {\n        for (v = 0, k = 0; v < height; v++, k += width) {\n          rowBuffer.set(items.subarray(k, k + width), bufferPadding);\n          this.extend(rowBuffer, bufferPadding, width);\n          this.filter(rowBuffer, bufferPadding, width);\n          items.set(rowBuffer.subarray(bufferPadding, bufferPadding + width), k);\n        }\n      }\n\n      var numBuffers = 16;\n      var colBuffers = [];\n\n      for (i = 0; i < numBuffers; i++) {\n        colBuffers.push(new Float32Array(height + 2 * bufferPadding));\n      }\n\n      var b,\n          currentBuffer = 0;\n      ll = bufferPadding + height;\n\n      if (height === 1) {\n        if ((v0 & 1) !== 0) {\n          for (u = 0; u < width; u++) {\n            items[u] *= 0.5;\n          }\n        }\n      } else {\n        for (u = 0; u < width; u++) {\n          if (currentBuffer === 0) {\n            numBuffers = Math.min(width - u, numBuffers);\n\n            for (k = u, l = bufferPadding; l < ll; k += width, l++) {\n              for (b = 0; b < numBuffers; b++) {\n                colBuffers[b][l] = items[k + b];\n              }\n            }\n\n            currentBuffer = numBuffers;\n          }\n\n          currentBuffer--;\n          var buffer = colBuffers[currentBuffer];\n          this.extend(buffer, bufferPadding, height);\n          this.filter(buffer, bufferPadding, height);\n\n          if (currentBuffer === 0) {\n            k = u - numBuffers + 1;\n\n            for (l = bufferPadding; l < ll; k += width, l++) {\n              for (b = 0; b < numBuffers; b++) {\n                items[k + b] = colBuffers[b][l];\n              }\n            }\n          }\n        }\n      }\n\n      return {\n        width,\n        height,\n        items\n      };\n    };\n\n    return Transform;\n  }();\n\n  var IrreversibleTransform = function IrreversibleTransformClosure() {\n    function IrreversibleTransform() {\n      Transform.call(this);\n    }\n\n    IrreversibleTransform.prototype = Object.create(Transform.prototype);\n\n    IrreversibleTransform.prototype.filter = function irreversibleTransformFilter(x, offset, length) {\n      var len = length >> 1;\n      offset = offset | 0;\n      var j, n, current, next;\n      var alpha = -1.586134342059924;\n      var beta = -0.052980118572961;\n      var gamma = 0.882911075530934;\n      var delta = 0.443506852043971;\n      var K = 1.230174104914001;\n      var K_ = 1 / K;\n      j = offset - 3;\n\n      for (n = len + 4; n--; j += 2) {\n        x[j] *= K_;\n      }\n\n      j = offset - 2;\n      current = delta * x[j - 1];\n\n      for (n = len + 3; n--; j += 2) {\n        next = delta * x[j + 1];\n        x[j] = K * x[j] - current - next;\n\n        if (n--) {\n          j += 2;\n          current = delta * x[j + 1];\n          x[j] = K * x[j] - current - next;\n        } else {\n          break;\n        }\n      }\n\n      j = offset - 1;\n      current = gamma * x[j - 1];\n\n      for (n = len + 2; n--; j += 2) {\n        next = gamma * x[j + 1];\n        x[j] -= current + next;\n\n        if (n--) {\n          j += 2;\n          current = gamma * x[j + 1];\n          x[j] -= current + next;\n        } else {\n          break;\n        }\n      }\n\n      j = offset;\n      current = beta * x[j - 1];\n\n      for (n = len + 1; n--; j += 2) {\n        next = beta * x[j + 1];\n        x[j] -= current + next;\n\n        if (n--) {\n          j += 2;\n          current = beta * x[j + 1];\n          x[j] -= current + next;\n        } else {\n          break;\n        }\n      }\n\n      if (len !== 0) {\n        j = offset + 1;\n        current = alpha * x[j - 1];\n\n        for (n = len; n--; j += 2) {\n          next = alpha * x[j + 1];\n          x[j] -= current + next;\n\n          if (n--) {\n            j += 2;\n            current = alpha * x[j + 1];\n            x[j] -= current + next;\n          } else {\n            break;\n          }\n        }\n      }\n    };\n\n    return IrreversibleTransform;\n  }();\n\n  var ReversibleTransform = function ReversibleTransformClosure() {\n    function ReversibleTransform() {\n      Transform.call(this);\n    }\n\n    ReversibleTransform.prototype = Object.create(Transform.prototype);\n\n    ReversibleTransform.prototype.filter = function reversibleTransformFilter(x, offset, length) {\n      var len = length >> 1;\n      offset = offset | 0;\n      var j, n;\n\n      for (j = offset, n = len + 1; n--; j += 2) {\n        x[j] -= x[j - 1] + x[j + 1] + 2 >> 2;\n      }\n\n      for (j = offset + 1, n = len; n--; j += 2) {\n        x[j] += x[j - 1] + x[j + 1] >> 1;\n      }\n    };\n\n    return ReversibleTransform;\n  }();\n\n  return JpxImage;\n}();\n\nexports.JpxImage = JpxImage;\n\n/***/ }),\n/* 22 */\n/***/ ((__unused_webpack_module, exports, __w_pdfjs_require__) => {\n\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.PDF20 = exports.PDF17 = exports.CipherTransformFactory = exports.calculateSHA512 = exports.calculateSHA384 = exports.calculateSHA256 = exports.calculateMD5 = exports.ARCFourCipher = exports.AES256Cipher = exports.AES128Cipher = void 0;\n\nvar _util = __w_pdfjs_require__(2);\n\nvar _primitives = __w_pdfjs_require__(5);\n\nvar _stream = __w_pdfjs_require__(12);\n\nvar ARCFourCipher = function ARCFourCipherClosure() {\n  function ARCFourCipher(key) {\n    this.a = 0;\n    this.b = 0;\n    var s = new Uint8Array(256);\n    var i,\n        j = 0,\n        tmp,\n        keyLength = key.length;\n\n    for (i = 0; i < 256; ++i) {\n      s[i] = i;\n    }\n\n    for (i = 0; i < 256; ++i) {\n      tmp = s[i];\n      j = j + tmp + key[i % keyLength] & 0xff;\n      s[i] = s[j];\n      s[j] = tmp;\n    }\n\n    this.s = s;\n  }\n\n  ARCFourCipher.prototype = {\n    encryptBlock: function ARCFourCipher_encryptBlock(data) {\n      var i,\n          n = data.length,\n          tmp,\n          tmp2;\n      var a = this.a,\n          b = this.b,\n          s = this.s;\n      var output = new Uint8Array(n);\n\n      for (i = 0; i < n; ++i) {\n        a = a + 1 & 0xff;\n        tmp = s[a];\n        b = b + tmp & 0xff;\n        tmp2 = s[b];\n        s[a] = tmp2;\n        s[b] = tmp;\n        output[i] = data[i] ^ s[tmp + tmp2 & 0xff];\n      }\n\n      this.a = a;\n      this.b = b;\n      return output;\n    }\n  };\n  ARCFourCipher.prototype.decryptBlock = ARCFourCipher.prototype.encryptBlock;\n  ARCFourCipher.prototype.encrypt = ARCFourCipher.prototype.encryptBlock;\n  return ARCFourCipher;\n}();\n\nexports.ARCFourCipher = ARCFourCipher;\n\nvar calculateMD5 = function calculateMD5Closure() {\n  var r = new Uint8Array([7, 12, 17, 22, 7, 12, 17, 22, 7, 12, 17, 22, 7, 12, 17, 22, 5, 9, 14, 20, 5, 9, 14, 20, 5, 9, 14, 20, 5, 9, 14, 20, 4, 11, 16, 23, 4, 11, 16, 23, 4, 11, 16, 23, 4, 11, 16, 23, 6, 10, 15, 21, 6, 10, 15, 21, 6, 10, 15, 21, 6, 10, 15, 21]);\n  var k = new Int32Array([-680876936, -389564586, 606105819, -1044525330, -176418897, 1200080426, -1473231341, -45705983, 1770035416, -1958414417, -42063, -1990404162, 1804603682, -40341101, -1502002290, 1236535329, -165796510, -1069501632, 643717713, -373897302, -701558691, 38016083, -660478335, -405537848, 568446438, -1019803690, -187363961, 1163531501, -1444681467, -51403784, 1735328473, -1926607734, -378558, -2022574463, 1839030562, -35309556, -1530992060, 1272893353, -155497632, -1094730640, 681279174, -358537222, -722521979, 76029189, -640364487, -421815835, 530742520, -995338651, -198630844, 1126891415, -1416354905, -57434055, 1700485571, -1894986606, -1051523, -2054922799, 1873313359, -30611744, -1560198380, 1309151649, -145523070, -1120210379, 718787259, -343485551]);\n\n  function hash(data, offset, length) {\n    var h0 = 1732584193,\n        h1 = -271733879,\n        h2 = -1732584194,\n        h3 = 271733878;\n    var paddedLength = length + 72 & ~63;\n    var padded = new Uint8Array(paddedLength);\n    var i, j, n;\n\n    for (i = 0; i < length; ++i) {\n      padded[i] = data[offset++];\n    }\n\n    padded[i++] = 0x80;\n    n = paddedLength - 8;\n\n    while (i < n) {\n      padded[i++] = 0;\n    }\n\n    padded[i++] = length << 3 & 0xff;\n    padded[i++] = length >> 5 & 0xff;\n    padded[i++] = length >> 13 & 0xff;\n    padded[i++] = length >> 21 & 0xff;\n    padded[i++] = length >>> 29 & 0xff;\n    padded[i++] = 0;\n    padded[i++] = 0;\n    padded[i++] = 0;\n    var w = new Int32Array(16);\n\n    for (i = 0; i < paddedLength;) {\n      for (j = 0; j < 16; ++j, i += 4) {\n        w[j] = padded[i] | padded[i + 1] << 8 | padded[i + 2] << 16 | padded[i + 3] << 24;\n      }\n\n      var a = h0,\n          b = h1,\n          c = h2,\n          d = h3,\n          f,\n          g;\n\n      for (j = 0; j < 64; ++j) {\n        if (j < 16) {\n          f = b & c | ~b & d;\n          g = j;\n        } else if (j < 32) {\n          f = d & b | ~d & c;\n          g = 5 * j + 1 & 15;\n        } else if (j < 48) {\n          f = b ^ c ^ d;\n          g = 3 * j + 5 & 15;\n        } else {\n          f = c ^ (b | ~d);\n          g = 7 * j & 15;\n        }\n\n        var tmp = d,\n            rotateArg = a + f + k[j] + w[g] | 0,\n            rotate = r[j];\n        d = c;\n        c = b;\n        b = b + (rotateArg << rotate | rotateArg >>> 32 - rotate) | 0;\n        a = tmp;\n      }\n\n      h0 = h0 + a | 0;\n      h1 = h1 + b | 0;\n      h2 = h2 + c | 0;\n      h3 = h3 + d | 0;\n    }\n\n    return new Uint8Array([h0 & 0xFF, h0 >> 8 & 0xFF, h0 >> 16 & 0xFF, h0 >>> 24 & 0xFF, h1 & 0xFF, h1 >> 8 & 0xFF, h1 >> 16 & 0xFF, h1 >>> 24 & 0xFF, h2 & 0xFF, h2 >> 8 & 0xFF, h2 >> 16 & 0xFF, h2 >>> 24 & 0xFF, h3 & 0xFF, h3 >> 8 & 0xFF, h3 >> 16 & 0xFF, h3 >>> 24 & 0xFF]);\n  }\n\n  return hash;\n}();\n\nexports.calculateMD5 = calculateMD5;\n\nvar Word64 = function Word64Closure() {\n  function Word64(highInteger, lowInteger) {\n    this.high = highInteger | 0;\n    this.low = lowInteger | 0;\n  }\n\n  Word64.prototype = {\n    and: function Word64_and(word) {\n      this.high &= word.high;\n      this.low &= word.low;\n    },\n    xor: function Word64_xor(word) {\n      this.high ^= word.high;\n      this.low ^= word.low;\n    },\n    or: function Word64_or(word) {\n      this.high |= word.high;\n      this.low |= word.low;\n    },\n    shiftRight: function Word64_shiftRight(places) {\n      if (places >= 32) {\n        this.low = this.high >>> places - 32 | 0;\n        this.high = 0;\n      } else {\n        this.low = this.low >>> places | this.high << 32 - places;\n        this.high = this.high >>> places | 0;\n      }\n    },\n    shiftLeft: function Word64_shiftLeft(places) {\n      if (places >= 32) {\n        this.high = this.low << places - 32;\n        this.low = 0;\n      } else {\n        this.high = this.high << places | this.low >>> 32 - places;\n        this.low = this.low << places;\n      }\n    },\n    rotateRight: function Word64_rotateRight(places) {\n      var low, high;\n\n      if (places & 32) {\n        high = this.low;\n        low = this.high;\n      } else {\n        low = this.low;\n        high = this.high;\n      }\n\n      places &= 31;\n      this.low = low >>> places | high << 32 - places;\n      this.high = high >>> places | low << 32 - places;\n    },\n    not: function Word64_not() {\n      this.high = ~this.high;\n      this.low = ~this.low;\n    },\n    add: function Word64_add(word) {\n      var lowAdd = (this.low >>> 0) + (word.low >>> 0);\n      var highAdd = (this.high >>> 0) + (word.high >>> 0);\n\n      if (lowAdd > 0xffffffff) {\n        highAdd += 1;\n      }\n\n      this.low = lowAdd | 0;\n      this.high = highAdd | 0;\n    },\n    copyTo: function Word64_copyTo(bytes, offset) {\n      bytes[offset] = this.high >>> 24 & 0xff;\n      bytes[offset + 1] = this.high >> 16 & 0xff;\n      bytes[offset + 2] = this.high >> 8 & 0xff;\n      bytes[offset + 3] = this.high & 0xff;\n      bytes[offset + 4] = this.low >>> 24 & 0xff;\n      bytes[offset + 5] = this.low >> 16 & 0xff;\n      bytes[offset + 6] = this.low >> 8 & 0xff;\n      bytes[offset + 7] = this.low & 0xff;\n    },\n    assign: function Word64_assign(word) {\n      this.high = word.high;\n      this.low = word.low;\n    }\n  };\n  return Word64;\n}();\n\nvar calculateSHA256 = function calculateSHA256Closure() {\n  function rotr(x, n) {\n    return x >>> n | x << 32 - n;\n  }\n\n  function ch(x, y, z) {\n    return x & y ^ ~x & z;\n  }\n\n  function maj(x, y, z) {\n    return x & y ^ x & z ^ y & z;\n  }\n\n  function sigma(x) {\n    return rotr(x, 2) ^ rotr(x, 13) ^ rotr(x, 22);\n  }\n\n  function sigmaPrime(x) {\n    return rotr(x, 6) ^ rotr(x, 11) ^ rotr(x, 25);\n  }\n\n  function littleSigma(x) {\n    return rotr(x, 7) ^ rotr(x, 18) ^ x >>> 3;\n  }\n\n  function littleSigmaPrime(x) {\n    return rotr(x, 17) ^ rotr(x, 19) ^ x >>> 10;\n  }\n\n  var k = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85, 0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n\n  function hash(data, offset, length) {\n    var h0 = 0x6a09e667,\n        h1 = 0xbb67ae85,\n        h2 = 0x3c6ef372,\n        h3 = 0xa54ff53a,\n        h4 = 0x510e527f,\n        h5 = 0x9b05688c,\n        h6 = 0x1f83d9ab,\n        h7 = 0x5be0cd19;\n    var paddedLength = Math.ceil((length + 9) / 64) * 64;\n    var padded = new Uint8Array(paddedLength);\n    var i, j, n;\n\n    for (i = 0; i < length; ++i) {\n      padded[i] = data[offset++];\n    }\n\n    padded[i++] = 0x80;\n    n = paddedLength - 8;\n\n    while (i < n) {\n      padded[i++] = 0;\n    }\n\n    padded[i++] = 0;\n    padded[i++] = 0;\n    padded[i++] = 0;\n    padded[i++] = length >>> 29 & 0xff;\n    padded[i++] = length >> 21 & 0xff;\n    padded[i++] = length >> 13 & 0xff;\n    padded[i++] = length >> 5 & 0xff;\n    padded[i++] = length << 3 & 0xff;\n    var w = new Uint32Array(64);\n\n    for (i = 0; i < paddedLength;) {\n      for (j = 0; j < 16; ++j) {\n        w[j] = padded[i] << 24 | padded[i + 1] << 16 | padded[i + 2] << 8 | padded[i + 3];\n        i += 4;\n      }\n\n      for (j = 16; j < 64; ++j) {\n        w[j] = littleSigmaPrime(w[j - 2]) + w[j - 7] + littleSigma(w[j - 15]) + w[j - 16] | 0;\n      }\n\n      var a = h0,\n          b = h1,\n          c = h2,\n          d = h3,\n          e = h4,\n          f = h5,\n          g = h6,\n          h = h7,\n          t1,\n          t2;\n\n      for (j = 0; j < 64; ++j) {\n        t1 = h + sigmaPrime(e) + ch(e, f, g) + k[j] + w[j];\n        t2 = sigma(a) + maj(a, b, c);\n        h = g;\n        g = f;\n        f = e;\n        e = d + t1 | 0;\n        d = c;\n        c = b;\n        b = a;\n        a = t1 + t2 | 0;\n      }\n\n      h0 = h0 + a | 0;\n      h1 = h1 + b | 0;\n      h2 = h2 + c | 0;\n      h3 = h3 + d | 0;\n      h4 = h4 + e | 0;\n      h5 = h5 + f | 0;\n      h6 = h6 + g | 0;\n      h7 = h7 + h | 0;\n    }\n\n    return new Uint8Array([h0 >> 24 & 0xFF, h0 >> 16 & 0xFF, h0 >> 8 & 0xFF, h0 & 0xFF, h1 >> 24 & 0xFF, h1 >> 16 & 0xFF, h1 >> 8 & 0xFF, h1 & 0xFF, h2 >> 24 & 0xFF, h2 >> 16 & 0xFF, h2 >> 8 & 0xFF, h2 & 0xFF, h3 >> 24 & 0xFF, h3 >> 16 & 0xFF, h3 >> 8 & 0xFF, h3 & 0xFF, h4 >> 24 & 0xFF, h4 >> 16 & 0xFF, h4 >> 8 & 0xFF, h4 & 0xFF, h5 >> 24 & 0xFF, h5 >> 16 & 0xFF, h5 >> 8 & 0xFF, h5 & 0xFF, h6 >> 24 & 0xFF, h6 >> 16 & 0xFF, h6 >> 8 & 0xFF, h6 & 0xFF, h7 >> 24 & 0xFF, h7 >> 16 & 0xFF, h7 >> 8 & 0xFF, h7 & 0xFF]);\n  }\n\n  return hash;\n}();\n\nexports.calculateSHA256 = calculateSHA256;\n\nvar calculateSHA512 = function calculateSHA512Closure() {\n  function ch(result, x, y, z, tmp) {\n    result.assign(x);\n    result.and(y);\n    tmp.assign(x);\n    tmp.not();\n    tmp.and(z);\n    result.xor(tmp);\n  }\n\n  function maj(result, x, y, z, tmp) {\n    result.assign(x);\n    result.and(y);\n    tmp.assign(x);\n    tmp.and(z);\n    result.xor(tmp);\n    tmp.assign(y);\n    tmp.and(z);\n    result.xor(tmp);\n  }\n\n  function sigma(result, x, tmp) {\n    result.assign(x);\n    result.rotateRight(28);\n    tmp.assign(x);\n    tmp.rotateRight(34);\n    result.xor(tmp);\n    tmp.assign(x);\n    tmp.rotateRight(39);\n    result.xor(tmp);\n  }\n\n  function sigmaPrime(result, x, tmp) {\n    result.assign(x);\n    result.rotateRight(14);\n    tmp.assign(x);\n    tmp.rotateRight(18);\n    result.xor(tmp);\n    tmp.assign(x);\n    tmp.rotateRight(41);\n    result.xor(tmp);\n  }\n\n  function littleSigma(result, x, tmp) {\n    result.assign(x);\n    result.rotateRight(1);\n    tmp.assign(x);\n    tmp.rotateRight(8);\n    result.xor(tmp);\n    tmp.assign(x);\n    tmp.shiftRight(7);\n    result.xor(tmp);\n  }\n\n  function littleSigmaPrime(result, x, tmp) {\n    result.assign(x);\n    result.rotateRight(19);\n    tmp.assign(x);\n    tmp.rotateRight(61);\n    result.xor(tmp);\n    tmp.assign(x);\n    tmp.shiftRight(6);\n    result.xor(tmp);\n  }\n\n  var k = [new Word64(0x428a2f98, 0xd728ae22), new Word64(0x71374491, 0x23ef65cd), new Word64(0xb5c0fbcf, 0xec4d3b2f), new Word64(0xe9b5dba5, 0x8189dbbc), new Word64(0x3956c25b, 0xf348b538), new Word64(0x59f111f1, 0xb605d019), new Word64(0x923f82a4, 0xaf194f9b), new Word64(0xab1c5ed5, 0xda6d8118), new Word64(0xd807aa98, 0xa3030242), new Word64(0x12835b01, 0x45706fbe), new Word64(0x243185be, 0x4ee4b28c), new Word64(0x550c7dc3, 0xd5ffb4e2), new Word64(0x72be5d74, 0xf27b896f), new Word64(0x80deb1fe, 0x3b1696b1), new Word64(0x9bdc06a7, 0x25c71235), new Word64(0xc19bf174, 0xcf692694), new Word64(0xe49b69c1, 0x9ef14ad2), new Word64(0xefbe4786, 0x384f25e3), new Word64(0x0fc19dc6, 0x8b8cd5b5), new Word64(0x240ca1cc, 0x77ac9c65), new Word64(0x2de92c6f, 0x592b0275), new Word64(0x4a7484aa, 0x6ea6e483), new Word64(0x5cb0a9dc, 0xbd41fbd4), new Word64(0x76f988da, 0x831153b5), new Word64(0x983e5152, 0xee66dfab), new Word64(0xa831c66d, 0x2db43210), new Word64(0xb00327c8, 0x98fb213f), new Word64(0xbf597fc7, 0xbeef0ee4), new Word64(0xc6e00bf3, 0x3da88fc2), new Word64(0xd5a79147, 0x930aa725), new Word64(0x06ca6351, 0xe003826f), new Word64(0x14292967, 0x0a0e6e70), new Word64(0x27b70a85, 0x46d22ffc), new Word64(0x2e1b2138, 0x5c26c926), new Word64(0x4d2c6dfc, 0x5ac42aed), new Word64(0x53380d13, 0x9d95b3df), new Word64(0x650a7354, 0x8baf63de), new Word64(0x766a0abb, 0x3c77b2a8), new Word64(0x81c2c92e, 0x47edaee6), new Word64(0x92722c85, 0x1482353b), new Word64(0xa2bfe8a1, 0x4cf10364), new Word64(0xa81a664b, 0xbc423001), new Word64(0xc24b8b70, 0xd0f89791), new Word64(0xc76c51a3, 0x0654be30), new Word64(0xd192e819, 0xd6ef5218), new Word64(0xd6990624, 0x5565a910), new Word64(0xf40e3585, 0x5771202a), new Word64(0x106aa070, 0x32bbd1b8), new Word64(0x19a4c116, 0xb8d2d0c8), new Word64(0x1e376c08, 0x5141ab53), new Word64(0x2748774c, 0xdf8eeb99), new Word64(0x34b0bcb5, 0xe19b48a8), new Word64(0x391c0cb3, 0xc5c95a63), new Word64(0x4ed8aa4a, 0xe3418acb), new Word64(0x5b9cca4f, 0x7763e373), new Word64(0x682e6ff3, 0xd6b2b8a3), new Word64(0x748f82ee, 0x5defb2fc), new Word64(0x78a5636f, 0x43172f60), new Word64(0x84c87814, 0xa1f0ab72), new Word64(0x8cc70208, 0x1a6439ec), new Word64(0x90befffa, 0x23631e28), new Word64(0xa4506ceb, 0xde82bde9), new Word64(0xbef9a3f7, 0xb2c67915), new Word64(0xc67178f2, 0xe372532b), new Word64(0xca273ece, 0xea26619c), new Word64(0xd186b8c7, 0x21c0c207), new Word64(0xeada7dd6, 0xcde0eb1e), new Word64(0xf57d4f7f, 0xee6ed178), new Word64(0x06f067aa, 0x72176fba), new Word64(0x0a637dc5, 0xa2c898a6), new Word64(0x113f9804, 0xbef90dae), new Word64(0x1b710b35, 0x131c471b), new Word64(0x28db77f5, 0x23047d84), new Word64(0x32caab7b, 0x40c72493), new Word64(0x3c9ebe0a, 0x15c9bebc), new Word64(0x431d67c4, 0x9c100d4c), new Word64(0x4cc5d4be, 0xcb3e42b6), new Word64(0x597f299c, 0xfc657e2a), new Word64(0x5fcb6fab, 0x3ad6faec), new Word64(0x6c44198c, 0x4a475817)];\n\n  function hash(data, offset, length, mode384) {\n    mode384 = !!mode384;\n    var h0, h1, h2, h3, h4, h5, h6, h7;\n\n    if (!mode384) {\n      h0 = new Word64(0x6a09e667, 0xf3bcc908);\n      h1 = new Word64(0xbb67ae85, 0x84caa73b);\n      h2 = new Word64(0x3c6ef372, 0xfe94f82b);\n      h3 = new Word64(0xa54ff53a, 0x5f1d36f1);\n      h4 = new Word64(0x510e527f, 0xade682d1);\n      h5 = new Word64(0x9b05688c, 0x2b3e6c1f);\n      h6 = new Word64(0x1f83d9ab, 0xfb41bd6b);\n      h7 = new Word64(0x5be0cd19, 0x137e2179);\n    } else {\n      h0 = new Word64(0xcbbb9d5d, 0xc1059ed8);\n      h1 = new Word64(0x629a292a, 0x367cd507);\n      h2 = new Word64(0x9159015a, 0x3070dd17);\n      h3 = new Word64(0x152fecd8, 0xf70e5939);\n      h4 = new Word64(0x67332667, 0xffc00b31);\n      h5 = new Word64(0x8eb44a87, 0x68581511);\n      h6 = new Word64(0xdb0c2e0d, 0x64f98fa7);\n      h7 = new Word64(0x47b5481d, 0xbefa4fa4);\n    }\n\n    var paddedLength = Math.ceil((length + 17) / 128) * 128;\n    var padded = new Uint8Array(paddedLength);\n    var i, j, n;\n\n    for (i = 0; i < length; ++i) {\n      padded[i] = data[offset++];\n    }\n\n    padded[i++] = 0x80;\n    n = paddedLength - 16;\n\n    while (i < n) {\n      padded[i++] = 0;\n    }\n\n    padded[i++] = 0;\n    padded[i++] = 0;\n    padded[i++] = 0;\n    padded[i++] = 0;\n    padded[i++] = 0;\n    padded[i++] = 0;\n    padded[i++] = 0;\n    padded[i++] = 0;\n    padded[i++] = 0;\n    padded[i++] = 0;\n    padded[i++] = 0;\n    padded[i++] = length >>> 29 & 0xff;\n    padded[i++] = length >> 21 & 0xff;\n    padded[i++] = length >> 13 & 0xff;\n    padded[i++] = length >> 5 & 0xff;\n    padded[i++] = length << 3 & 0xff;\n    var w = new Array(80);\n\n    for (i = 0; i < 80; i++) {\n      w[i] = new Word64(0, 0);\n    }\n\n    var a = new Word64(0, 0),\n        b = new Word64(0, 0),\n        c = new Word64(0, 0);\n    var d = new Word64(0, 0),\n        e = new Word64(0, 0),\n        f = new Word64(0, 0);\n    var g = new Word64(0, 0),\n        h = new Word64(0, 0);\n    var t1 = new Word64(0, 0),\n        t2 = new Word64(0, 0);\n    var tmp1 = new Word64(0, 0),\n        tmp2 = new Word64(0, 0),\n        tmp3;\n\n    for (i = 0; i < paddedLength;) {\n      for (j = 0; j < 16; ++j) {\n        w[j].high = padded[i] << 24 | padded[i + 1] << 16 | padded[i + 2] << 8 | padded[i + 3];\n        w[j].low = padded[i + 4] << 24 | padded[i + 5] << 16 | padded[i + 6] << 8 | padded[i + 7];\n        i += 8;\n      }\n\n      for (j = 16; j < 80; ++j) {\n        tmp3 = w[j];\n        littleSigmaPrime(tmp3, w[j - 2], tmp2);\n        tmp3.add(w[j - 7]);\n        littleSigma(tmp1, w[j - 15], tmp2);\n        tmp3.add(tmp1);\n        tmp3.add(w[j - 16]);\n      }\n\n      a.assign(h0);\n      b.assign(h1);\n      c.assign(h2);\n      d.assign(h3);\n      e.assign(h4);\n      f.assign(h5);\n      g.assign(h6);\n      h.assign(h7);\n\n      for (j = 0; j < 80; ++j) {\n        t1.assign(h);\n        sigmaPrime(tmp1, e, tmp2);\n        t1.add(tmp1);\n        ch(tmp1, e, f, g, tmp2);\n        t1.add(tmp1);\n        t1.add(k[j]);\n        t1.add(w[j]);\n        sigma(t2, a, tmp2);\n        maj(tmp1, a, b, c, tmp2);\n        t2.add(tmp1);\n        tmp3 = h;\n        h = g;\n        g = f;\n        f = e;\n        d.add(t1);\n        e = d;\n        d = c;\n        c = b;\n        b = a;\n        tmp3.assign(t1);\n        tmp3.add(t2);\n        a = tmp3;\n      }\n\n      h0.add(a);\n      h1.add(b);\n      h2.add(c);\n      h3.add(d);\n      h4.add(e);\n      h5.add(f);\n      h6.add(g);\n      h7.add(h);\n    }\n\n    var result;\n\n    if (!mode384) {\n      result = new Uint8Array(64);\n      h0.copyTo(result, 0);\n      h1.copyTo(result, 8);\n      h2.copyTo(result, 16);\n      h3.copyTo(result, 24);\n      h4.copyTo(result, 32);\n      h5.copyTo(result, 40);\n      h6.copyTo(result, 48);\n      h7.copyTo(result, 56);\n    } else {\n      result = new Uint8Array(48);\n      h0.copyTo(result, 0);\n      h1.copyTo(result, 8);\n      h2.copyTo(result, 16);\n      h3.copyTo(result, 24);\n      h4.copyTo(result, 32);\n      h5.copyTo(result, 40);\n    }\n\n    return result;\n  }\n\n  return hash;\n}();\n\nexports.calculateSHA512 = calculateSHA512;\n\nvar calculateSHA384 = function calculateSHA384Closure() {\n  function hash(data, offset, length) {\n    return calculateSHA512(data, offset, length, true);\n  }\n\n  return hash;\n}();\n\nexports.calculateSHA384 = calculateSHA384;\n\nvar NullCipher = function NullCipherClosure() {\n  function NullCipher() {}\n\n  NullCipher.prototype = {\n    decryptBlock: function NullCipher_decryptBlock(data) {\n      return data;\n    },\n    encrypt: function NullCipher_encrypt(data) {\n      return data;\n    }\n  };\n  return NullCipher;\n}();\n\nclass AESBaseCipher {\n  constructor() {\n    if (this.constructor === AESBaseCipher) {\n      (0, _util.unreachable)(\"Cannot initialize AESBaseCipher.\");\n    }\n\n    this._s = new Uint8Array([0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76, 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, 0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15, 0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, 0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84, 0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, 0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8, 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, 0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73, 0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, 0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79, 0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08, 0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, 0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, 0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, 0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16]);\n    this._inv_s = new Uint8Array([0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb, 0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb, 0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e, 0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25, 0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92, 0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84, 0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06, 0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b, 0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73, 0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e, 0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b, 0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4, 0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f, 0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef, 0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61, 0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d]);\n    this._mix = new Uint32Array([0x00000000, 0x0e090d0b, 0x1c121a16, 0x121b171d, 0x3824342c, 0x362d3927, 0x24362e3a, 0x2a3f2331, 0x70486858, 0x7e416553, 0x6c5a724e, 0x62537f45, 0x486c5c74, 0x4665517f, 0x547e4662, 0x5a774b69, 0xe090d0b0, 0xee99ddbb, 0xfc82caa6, 0xf28bc7ad, 0xd8b4e49c, 0xd6bde997, 0xc4a6fe8a, 0xcaaff381, 0x90d8b8e8, 0x9ed1b5e3, 0x8ccaa2fe, 0x82c3aff5, 0xa8fc8cc4, 0xa6f581cf, 0xb4ee96d2, 0xbae79bd9, 0xdb3bbb7b, 0xd532b670, 0xc729a16d, 0xc920ac66, 0xe31f8f57, 0xed16825c, 0xff0d9541, 0xf104984a, 0xab73d323, 0xa57ade28, 0xb761c935, 0xb968c43e, 0x9357e70f, 0x9d5eea04, 0x8f45fd19, 0x814cf012, 0x3bab6bcb, 0x35a266c0, 0x27b971dd, 0x29b07cd6, 0x038f5fe7, 0x0d8652ec, 0x1f9d45f1, 0x119448fa, 0x4be30393, 0x45ea0e98, 0x57f11985, 0x59f8148e, 0x73c737bf, 0x7dce3ab4, 0x6fd52da9, 0x61dc20a2, 0xad766df6, 0xa37f60fd, 0xb16477e0, 0xbf6d7aeb, 0x955259da, 0x9b5b54d1, 0x894043cc, 0x87494ec7, 0xdd3e05ae, 0xd33708a5, 0xc12c1fb8, 0xcf2512b3, 0xe51a3182, 0xeb133c89, 0xf9082b94, 0xf701269f, 0x4de6bd46, 0x43efb04d, 0x51f4a750, 0x5ffdaa5b, 0x75c2896a, 0x7bcb8461, 0x69d0937c, 0x67d99e77, 0x3daed51e, 0x33a7d815, 0x21bccf08, 0x2fb5c203, 0x058ae132, 0x0b83ec39, 0x1998fb24, 0x1791f62f, 0x764dd68d, 0x7844db86, 0x6a5fcc9b, 0x6456c190, 0x4e69e2a1, 0x4060efaa, 0x527bf8b7, 0x5c72f5bc, 0x0605bed5, 0x080cb3de, 0x1a17a4c3, 0x141ea9c8, 0x3e218af9, 0x302887f2, 0x223390ef, 0x2c3a9de4, 0x96dd063d, 0x98d40b36, 0x8acf1c2b, 0x84c61120, 0xaef93211, 0xa0f03f1a, 0xb2eb2807, 0xbce2250c, 0xe6956e65, 0xe89c636e, 0xfa877473, 0xf48e7978, 0xdeb15a49, 0xd0b85742, 0xc2a3405f, 0xccaa4d54, 0x41ecdaf7, 0x4fe5d7fc, 0x5dfec0e1, 0x53f7cdea, 0x79c8eedb, 0x77c1e3d0, 0x65daf4cd, 0x6bd3f9c6, 0x31a4b2af, 0x3fadbfa4, 0x2db6a8b9, 0x23bfa5b2, 0x09808683, 0x07898b88, 0x15929c95, 0x1b9b919e, 0xa17c0a47, 0xaf75074c, 0xbd6e1051, 0xb3671d5a, 0x99583e6b, 0x97513360, 0x854a247d, 0x8b432976, 0xd134621f, 0xdf3d6f14, 0xcd267809, 0xc32f7502, 0xe9105633, 0xe7195b38, 0xf5024c25, 0xfb0b412e, 0x9ad7618c, 0x94de6c87, 0x86c57b9a, 0x88cc7691, 0xa2f355a0, 0xacfa58ab, 0xbee14fb6, 0xb0e842bd, 0xea9f09d4, 0xe49604df, 0xf68d13c2, 0xf8841ec9, 0xd2bb3df8, 0xdcb230f3, 0xcea927ee, 0xc0a02ae5, 0x7a47b13c, 0x744ebc37, 0x6655ab2a, 0x685ca621, 0x42638510, 0x4c6a881b, 0x5e719f06, 0x5078920d, 0x0a0fd964, 0x0406d46f, 0x161dc372, 0x1814ce79, 0x322bed48, 0x3c22e043, 0x2e39f75e, 0x2030fa55, 0xec9ab701, 0xe293ba0a, 0xf088ad17, 0xfe81a01c, 0xd4be832d, 0xdab78e26, 0xc8ac993b, 0xc6a59430, 0x9cd2df59, 0x92dbd252, 0x80c0c54f, 0x8ec9c844, 0xa4f6eb75, 0xaaffe67e, 0xb8e4f163, 0xb6edfc68, 0x0c0a67b1, 0x02036aba, 0x10187da7, 0x1e1170ac, 0x342e539d, 0x3a275e96, 0x283c498b, 0x26354480, 0x7c420fe9, 0x724b02e2, 0x605015ff, 0x6e5918f4, 0x44663bc5, 0x4a6f36ce, 0x587421d3, 0x567d2cd8, 0x37a10c7a, 0x39a80171, 0x2bb3166c, 0x25ba1b67, 0x0f853856, 0x018c355d, 0x13972240, 0x1d9e2f4b, 0x47e96422, 0x49e06929, 0x5bfb7e34, 0x55f2733f, 0x7fcd500e, 0x71c45d05, 0x63df4a18, 0x6dd64713, 0xd731dcca, 0xd938d1c1, 0xcb23c6dc, 0xc52acbd7, 0xef15e8e6, 0xe11ce5ed, 0xf307f2f0, 0xfd0efffb, 0xa779b492, 0xa970b999, 0xbb6bae84, 0xb562a38f, 0x9f5d80be, 0x91548db5, 0x834f9aa8, 0x8d4697a3]);\n    this._mixCol = new Uint8Array(256);\n\n    for (let i = 0; i < 256; i++) {\n      if (i < 128) {\n        this._mixCol[i] = i << 1;\n      } else {\n        this._mixCol[i] = i << 1 ^ 0x1b;\n      }\n    }\n\n    this.buffer = new Uint8Array(16);\n    this.bufferPosition = 0;\n  }\n\n  _expandKey(cipherKey) {\n    (0, _util.unreachable)(\"Cannot call `_expandKey` on the base class\");\n  }\n\n  _decrypt(input, key) {\n    let t, u, v;\n    const state = new Uint8Array(16);\n    state.set(input);\n\n    for (let j = 0, k = this._keySize; j < 16; ++j, ++k) {\n      state[j] ^= key[k];\n    }\n\n    for (let i = this._cyclesOfRepetition - 1; i >= 1; --i) {\n      t = state[13];\n      state[13] = state[9];\n      state[9] = state[5];\n      state[5] = state[1];\n      state[1] = t;\n      t = state[14];\n      u = state[10];\n      state[14] = state[6];\n      state[10] = state[2];\n      state[6] = t;\n      state[2] = u;\n      t = state[15];\n      u = state[11];\n      v = state[7];\n      state[15] = state[3];\n      state[11] = t;\n      state[7] = u;\n      state[3] = v;\n\n      for (let j = 0; j < 16; ++j) {\n        state[j] = this._inv_s[state[j]];\n      }\n\n      for (let j = 0, k = i * 16; j < 16; ++j, ++k) {\n        state[j] ^= key[k];\n      }\n\n      for (let j = 0; j < 16; j += 4) {\n        const s0 = this._mix[state[j]];\n        const s1 = this._mix[state[j + 1]];\n        const s2 = this._mix[state[j + 2]];\n        const s3 = this._mix[state[j + 3]];\n        t = s0 ^ s1 >>> 8 ^ s1 << 24 ^ s2 >>> 16 ^ s2 << 16 ^ s3 >>> 24 ^ s3 << 8;\n        state[j] = t >>> 24 & 0xff;\n        state[j + 1] = t >> 16 & 0xff;\n        state[j + 2] = t >> 8 & 0xff;\n        state[j + 3] = t & 0xff;\n      }\n    }\n\n    t = state[13];\n    state[13] = state[9];\n    state[9] = state[5];\n    state[5] = state[1];\n    state[1] = t;\n    t = state[14];\n    u = state[10];\n    state[14] = state[6];\n    state[10] = state[2];\n    state[6] = t;\n    state[2] = u;\n    t = state[15];\n    u = state[11];\n    v = state[7];\n    state[15] = state[3];\n    state[11] = t;\n    state[7] = u;\n    state[3] = v;\n\n    for (let j = 0; j < 16; ++j) {\n      state[j] = this._inv_s[state[j]];\n      state[j] ^= key[j];\n    }\n\n    return state;\n  }\n\n  _encrypt(input, key) {\n    const s = this._s;\n    let t, u, v;\n    const state = new Uint8Array(16);\n    state.set(input);\n\n    for (let j = 0; j < 16; ++j) {\n      state[j] ^= key[j];\n    }\n\n    for (let i = 1; i < this._cyclesOfRepetition; i++) {\n      for (let j = 0; j < 16; ++j) {\n        state[j] = s[state[j]];\n      }\n\n      v = state[1];\n      state[1] = state[5];\n      state[5] = state[9];\n      state[9] = state[13];\n      state[13] = v;\n      v = state[2];\n      u = state[6];\n      state[2] = state[10];\n      state[6] = state[14];\n      state[10] = v;\n      state[14] = u;\n      v = state[3];\n      u = state[7];\n      t = state[11];\n      state[3] = state[15];\n      state[7] = v;\n      state[11] = u;\n      state[15] = t;\n\n      for (let j = 0; j < 16; j += 4) {\n        const s0 = state[j + 0];\n        const s1 = state[j + 1];\n        const s2 = state[j + 2];\n        const s3 = state[j + 3];\n        t = s0 ^ s1 ^ s2 ^ s3;\n        state[j + 0] ^= t ^ this._mixCol[s0 ^ s1];\n        state[j + 1] ^= t ^ this._mixCol[s1 ^ s2];\n        state[j + 2] ^= t ^ this._mixCol[s2 ^ s3];\n        state[j + 3] ^= t ^ this._mixCol[s3 ^ s0];\n      }\n\n      for (let j = 0, k = i * 16; j < 16; ++j, ++k) {\n        state[j] ^= key[k];\n      }\n    }\n\n    for (let j = 0; j < 16; ++j) {\n      state[j] = s[state[j]];\n    }\n\n    v = state[1];\n    state[1] = state[5];\n    state[5] = state[9];\n    state[9] = state[13];\n    state[13] = v;\n    v = state[2];\n    u = state[6];\n    state[2] = state[10];\n    state[6] = state[14];\n    state[10] = v;\n    state[14] = u;\n    v = state[3];\n    u = state[7];\n    t = state[11];\n    state[3] = state[15];\n    state[7] = v;\n    state[11] = u;\n    state[15] = t;\n\n    for (let j = 0, k = this._keySize; j < 16; ++j, ++k) {\n      state[j] ^= key[k];\n    }\n\n    return state;\n  }\n\n  _decryptBlock2(data, finalize) {\n    const sourceLength = data.length;\n    let buffer = this.buffer,\n        bufferLength = this.bufferPosition;\n    const result = [];\n    let iv = this.iv;\n\n    for (let i = 0; i < sourceLength; ++i) {\n      buffer[bufferLength] = data[i];\n      ++bufferLength;\n\n      if (bufferLength < 16) {\n        continue;\n      }\n\n      const plain = this._decrypt(buffer, this._key);\n\n      for (let j = 0; j < 16; ++j) {\n        plain[j] ^= iv[j];\n      }\n\n      iv = buffer;\n      result.push(plain);\n      buffer = new Uint8Array(16);\n      bufferLength = 0;\n    }\n\n    this.buffer = buffer;\n    this.bufferLength = bufferLength;\n    this.iv = iv;\n\n    if (result.length === 0) {\n      return new Uint8Array(0);\n    }\n\n    let outputLength = 16 * result.length;\n\n    if (finalize) {\n      const lastBlock = result[result.length - 1];\n      let psLen = lastBlock[15];\n\n      if (psLen <= 16) {\n        for (let i = 15, ii = 16 - psLen; i >= ii; --i) {\n          if (lastBlock[i] !== psLen) {\n            psLen = 0;\n            break;\n          }\n        }\n\n        outputLength -= psLen;\n        result[result.length - 1] = lastBlock.subarray(0, 16 - psLen);\n      }\n    }\n\n    const output = new Uint8Array(outputLength);\n\n    for (let i = 0, j = 0, ii = result.length; i < ii; ++i, j += 16) {\n      output.set(result[i], j);\n    }\n\n    return output;\n  }\n\n  decryptBlock(data, finalize, iv = null) {\n    const sourceLength = data.length;\n    const buffer = this.buffer;\n    let bufferLength = this.bufferPosition;\n\n    if (iv) {\n      this.iv = iv;\n    } else {\n      for (let i = 0; bufferLength < 16 && i < sourceLength; ++i, ++bufferLength) {\n        buffer[bufferLength] = data[i];\n      }\n\n      if (bufferLength < 16) {\n        this.bufferLength = bufferLength;\n        return new Uint8Array(0);\n      }\n\n      this.iv = buffer;\n      data = data.subarray(16);\n    }\n\n    this.buffer = new Uint8Array(16);\n    this.bufferLength = 0;\n    this.decryptBlock = this._decryptBlock2;\n    return this.decryptBlock(data, finalize);\n  }\n\n  encrypt(data, iv) {\n    const sourceLength = data.length;\n    let buffer = this.buffer,\n        bufferLength = this.bufferPosition;\n    const result = [];\n\n    if (!iv) {\n      iv = new Uint8Array(16);\n    }\n\n    for (let i = 0; i < sourceLength; ++i) {\n      buffer[bufferLength] = data[i];\n      ++bufferLength;\n\n      if (bufferLength < 16) {\n        continue;\n      }\n\n      for (let j = 0; j < 16; ++j) {\n        buffer[j] ^= iv[j];\n      }\n\n      const cipher = this._encrypt(buffer, this._key);\n\n      iv = cipher;\n      result.push(cipher);\n      buffer = new Uint8Array(16);\n      bufferLength = 0;\n    }\n\n    this.buffer = buffer;\n    this.bufferLength = bufferLength;\n    this.iv = iv;\n\n    if (result.length === 0) {\n      return new Uint8Array(0);\n    }\n\n    const outputLength = 16 * result.length;\n    const output = new Uint8Array(outputLength);\n\n    for (let i = 0, j = 0, ii = result.length; i < ii; ++i, j += 16) {\n      output.set(result[i], j);\n    }\n\n    return output;\n  }\n\n}\n\nclass AES128Cipher extends AESBaseCipher {\n  constructor(key) {\n    super();\n    this._cyclesOfRepetition = 10;\n    this._keySize = 160;\n    this._rcon = new Uint8Array([0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d]);\n    this._key = this._expandKey(key);\n  }\n\n  _expandKey(cipherKey) {\n    const b = 176;\n    const s = this._s;\n    const rcon = this._rcon;\n    const result = new Uint8Array(b);\n    result.set(cipherKey);\n\n    for (let j = 16, i = 1; j < b; ++i) {\n      let t1 = result[j - 3];\n      let t2 = result[j - 2];\n      let t3 = result[j - 1];\n      let t4 = result[j - 4];\n      t1 = s[t1];\n      t2 = s[t2];\n      t3 = s[t3];\n      t4 = s[t4];\n      t1 = t1 ^ rcon[i];\n\n      for (let n = 0; n < 4; ++n) {\n        result[j] = t1 ^= result[j - 16];\n        j++;\n        result[j] = t2 ^= result[j - 16];\n        j++;\n        result[j] = t3 ^= result[j - 16];\n        j++;\n        result[j] = t4 ^= result[j - 16];\n        j++;\n      }\n    }\n\n    return result;\n  }\n\n}\n\nexports.AES128Cipher = AES128Cipher;\n\nclass AES256Cipher extends AESBaseCipher {\n  constructor(key) {\n    super();\n    this._cyclesOfRepetition = 14;\n    this._keySize = 224;\n    this._key = this._expandKey(key);\n  }\n\n  _expandKey(cipherKey) {\n    const b = 240;\n    const s = this._s;\n    const result = new Uint8Array(b);\n    result.set(cipherKey);\n    let r = 1;\n    let t1, t2, t3, t4;\n\n    for (let j = 32, i = 1; j < b; ++i) {\n      if (j % 32 === 16) {\n        t1 = s[t1];\n        t2 = s[t2];\n        t3 = s[t3];\n        t4 = s[t4];\n      } else if (j % 32 === 0) {\n        t1 = result[j - 3];\n        t2 = result[j - 2];\n        t3 = result[j - 1];\n        t4 = result[j - 4];\n        t1 = s[t1];\n        t2 = s[t2];\n        t3 = s[t3];\n        t4 = s[t4];\n        t1 = t1 ^ r;\n\n        if ((r <<= 1) >= 256) {\n          r = (r ^ 0x1b) & 0xff;\n        }\n      }\n\n      for (let n = 0; n < 4; ++n) {\n        result[j] = t1 ^= result[j - 32];\n        j++;\n        result[j] = t2 ^= result[j - 32];\n        j++;\n        result[j] = t3 ^= result[j - 32];\n        j++;\n        result[j] = t4 ^= result[j - 32];\n        j++;\n      }\n    }\n\n    return result;\n  }\n\n}\n\nexports.AES256Cipher = AES256Cipher;\n\nvar PDF17 = function PDF17Closure() {\n  function compareByteArrays(array1, array2) {\n    if (array1.length !== array2.length) {\n      return false;\n    }\n\n    for (var i = 0; i < array1.length; i++) {\n      if (array1[i] !== array2[i]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  function PDF17() {}\n\n  PDF17.prototype = {\n    checkOwnerPassword: function PDF17_checkOwnerPassword(password, ownerValidationSalt, userBytes, ownerPassword) {\n      var hashData = new Uint8Array(password.length + 56);\n      hashData.set(password, 0);\n      hashData.set(ownerValidationSalt, password.length);\n      hashData.set(userBytes, password.length + ownerValidationSalt.length);\n      var result = calculateSHA256(hashData, 0, hashData.length);\n      return compareByteArrays(result, ownerPassword);\n    },\n    checkUserPassword: function PDF17_checkUserPassword(password, userValidationSalt, userPassword) {\n      var hashData = new Uint8Array(password.length + 8);\n      hashData.set(password, 0);\n      hashData.set(userValidationSalt, password.length);\n      var result = calculateSHA256(hashData, 0, hashData.length);\n      return compareByteArrays(result, userPassword);\n    },\n    getOwnerKey: function PDF17_getOwnerKey(password, ownerKeySalt, userBytes, ownerEncryption) {\n      var hashData = new Uint8Array(password.length + 56);\n      hashData.set(password, 0);\n      hashData.set(ownerKeySalt, password.length);\n      hashData.set(userBytes, password.length + ownerKeySalt.length);\n      var key = calculateSHA256(hashData, 0, hashData.length);\n      var cipher = new AES256Cipher(key);\n      return cipher.decryptBlock(ownerEncryption, false, new Uint8Array(16));\n    },\n    getUserKey: function PDF17_getUserKey(password, userKeySalt, userEncryption) {\n      var hashData = new Uint8Array(password.length + 8);\n      hashData.set(password, 0);\n      hashData.set(userKeySalt, password.length);\n      var key = calculateSHA256(hashData, 0, hashData.length);\n      var cipher = new AES256Cipher(key);\n      return cipher.decryptBlock(userEncryption, false, new Uint8Array(16));\n    }\n  };\n  return PDF17;\n}();\n\nexports.PDF17 = PDF17;\n\nvar PDF20 = function PDF20Closure() {\n  function concatArrays(array1, array2) {\n    var t = new Uint8Array(array1.length + array2.length);\n    t.set(array1, 0);\n    t.set(array2, array1.length);\n    return t;\n  }\n\n  function calculatePDF20Hash(password, input, userBytes) {\n    var k = calculateSHA256(input, 0, input.length).subarray(0, 32);\n    var e = [0];\n    var i = 0;\n\n    while (i < 64 || e[e.length - 1] > i - 32) {\n      var arrayLength = password.length + k.length + userBytes.length;\n      var k1 = new Uint8Array(arrayLength * 64);\n      var array = concatArrays(password, k);\n      array = concatArrays(array, userBytes);\n\n      for (var j = 0, pos = 0; j < 64; j++, pos += arrayLength) {\n        k1.set(array, pos);\n      }\n\n      var cipher = new AES128Cipher(k.subarray(0, 16));\n      e = cipher.encrypt(k1, k.subarray(16, 32));\n      var remainder = 0;\n\n      for (var z = 0; z < 16; z++) {\n        remainder *= 256 % 3;\n        remainder %= 3;\n        remainder += (e[z] >>> 0) % 3;\n        remainder %= 3;\n      }\n\n      if (remainder === 0) {\n        k = calculateSHA256(e, 0, e.length);\n      } else if (remainder === 1) {\n        k = calculateSHA384(e, 0, e.length);\n      } else if (remainder === 2) {\n        k = calculateSHA512(e, 0, e.length);\n      }\n\n      i++;\n    }\n\n    return k.subarray(0, 32);\n  }\n\n  function PDF20() {}\n\n  function compareByteArrays(array1, array2) {\n    if (array1.length !== array2.length) {\n      return false;\n    }\n\n    for (var i = 0; i < array1.length; i++) {\n      if (array1[i] !== array2[i]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  PDF20.prototype = {\n    hash: function PDF20_hash(password, concatBytes, userBytes) {\n      return calculatePDF20Hash(password, concatBytes, userBytes);\n    },\n    checkOwnerPassword: function PDF20_checkOwnerPassword(password, ownerValidationSalt, userBytes, ownerPassword) {\n      var hashData = new Uint8Array(password.length + 56);\n      hashData.set(password, 0);\n      hashData.set(ownerValidationSalt, password.length);\n      hashData.set(userBytes, password.length + ownerValidationSalt.length);\n      var result = calculatePDF20Hash(password, hashData, userBytes);\n      return compareByteArrays(result, ownerPassword);\n    },\n    checkUserPassword: function PDF20_checkUserPassword(password, userValidationSalt, userPassword) {\n      var hashData = new Uint8Array(password.length + 8);\n      hashData.set(password, 0);\n      hashData.set(userValidationSalt, password.length);\n      var result = calculatePDF20Hash(password, hashData, []);\n      return compareByteArrays(result, userPassword);\n    },\n    getOwnerKey: function PDF20_getOwnerKey(password, ownerKeySalt, userBytes, ownerEncryption) {\n      var hashData = new Uint8Array(password.length + 56);\n      hashData.set(password, 0);\n      hashData.set(ownerKeySalt, password.length);\n      hashData.set(userBytes, password.length + ownerKeySalt.length);\n      var key = calculatePDF20Hash(password, hashData, userBytes);\n      var cipher = new AES256Cipher(key);\n      return cipher.decryptBlock(ownerEncryption, false, new Uint8Array(16));\n    },\n    getUserKey: function PDF20_getUserKey(password, userKeySalt, userEncryption) {\n      var hashData = new Uint8Array(password.length + 8);\n      hashData.set(password, 0);\n      hashData.set(userKeySalt, password.length);\n      var key = calculatePDF20Hash(password, hashData, []);\n      var cipher = new AES256Cipher(key);\n      return cipher.decryptBlock(userEncryption, false, new Uint8Array(16));\n    }\n  };\n  return PDF20;\n}();\n\nexports.PDF20 = PDF20;\n\nvar CipherTransform = function CipherTransformClosure() {\n  function CipherTransform(stringCipherConstructor, streamCipherConstructor) {\n    this.StringCipherConstructor = stringCipherConstructor;\n    this.StreamCipherConstructor = streamCipherConstructor;\n  }\n\n  CipherTransform.prototype = {\n    createStream: function CipherTransform_createStream(stream, length) {\n      var cipher = new this.StreamCipherConstructor();\n      return new _stream.DecryptStream(stream, length, function cipherTransformDecryptStream(data, finalize) {\n        return cipher.decryptBlock(data, finalize);\n      });\n    },\n    decryptString: function CipherTransform_decryptString(s) {\n      var cipher = new this.StringCipherConstructor();\n      var data = (0, _util.stringToBytes)(s);\n      data = cipher.decryptBlock(data, true);\n      return (0, _util.bytesToString)(data);\n    },\n    encryptString: function CipherTransform_encryptString(s) {\n      const cipher = new this.StringCipherConstructor();\n\n      if (cipher instanceof AESBaseCipher) {\n        const strLen = s.length;\n        const pad = 16 - strLen % 16;\n\n        if (pad !== 16) {\n          s = s.padEnd(16 * Math.ceil(strLen / 16), String.fromCharCode(pad));\n        }\n\n        const iv = new Uint8Array(16);\n\n        if (typeof crypto !== \"undefined\") {\n          crypto.getRandomValues(iv);\n        } else {\n          for (let i = 0; i < 16; i++) {\n            iv[i] = Math.floor(256 * Math.random());\n          }\n        }\n\n        let data = (0, _util.stringToBytes)(s);\n        data = cipher.encrypt(data, iv);\n        const buf = new Uint8Array(16 + data.length);\n        buf.set(iv);\n        buf.set(data, 16);\n        return (0, _util.bytesToString)(buf);\n      }\n\n      let data = (0, _util.stringToBytes)(s);\n      data = cipher.encrypt(data);\n      return (0, _util.bytesToString)(data);\n    }\n  };\n  return CipherTransform;\n}();\n\nvar CipherTransformFactory = function CipherTransformFactoryClosure() {\n  var defaultPasswordBytes = new Uint8Array([0x28, 0xBF, 0x4E, 0x5E, 0x4E, 0x75, 0x8A, 0x41, 0x64, 0x00, 0x4E, 0x56, 0xFF, 0xFA, 0x01, 0x08, 0x2E, 0x2E, 0x00, 0xB6, 0xD0, 0x68, 0x3E, 0x80, 0x2F, 0x0C, 0xA9, 0xFE, 0x64, 0x53, 0x69, 0x7A]);\n\n  function createEncryptionKey20(revision, password, ownerPassword, ownerValidationSalt, ownerKeySalt, uBytes, userPassword, userValidationSalt, userKeySalt, ownerEncryption, userEncryption, perms) {\n    if (password) {\n      var passwordLength = Math.min(127, password.length);\n      password = password.subarray(0, passwordLength);\n    } else {\n      password = [];\n    }\n\n    var pdfAlgorithm;\n\n    if (revision === 6) {\n      pdfAlgorithm = new PDF20();\n    } else {\n      pdfAlgorithm = new PDF17();\n    }\n\n    if (pdfAlgorithm.checkUserPassword(password, userValidationSalt, userPassword)) {\n      return pdfAlgorithm.getUserKey(password, userKeySalt, userEncryption);\n    } else if (password.length && pdfAlgorithm.checkOwnerPassword(password, ownerValidationSalt, uBytes, ownerPassword)) {\n      return pdfAlgorithm.getOwnerKey(password, ownerKeySalt, uBytes, ownerEncryption);\n    }\n\n    return null;\n  }\n\n  function prepareKeyData(fileId, password, ownerPassword, userPassword, flags, revision, keyLength, encryptMetadata) {\n    var hashDataSize = 40 + ownerPassword.length + fileId.length;\n    var hashData = new Uint8Array(hashDataSize),\n        i = 0,\n        j,\n        n;\n\n    if (password) {\n      n = Math.min(32, password.length);\n\n      for (; i < n; ++i) {\n        hashData[i] = password[i];\n      }\n    }\n\n    j = 0;\n\n    while (i < 32) {\n      hashData[i++] = defaultPasswordBytes[j++];\n    }\n\n    for (j = 0, n = ownerPassword.length; j < n; ++j) {\n      hashData[i++] = ownerPassword[j];\n    }\n\n    hashData[i++] = flags & 0xff;\n    hashData[i++] = flags >> 8 & 0xff;\n    hashData[i++] = flags >> 16 & 0xff;\n    hashData[i++] = flags >>> 24 & 0xff;\n\n    for (j = 0, n = fileId.length; j < n; ++j) {\n      hashData[i++] = fileId[j];\n    }\n\n    if (revision >= 4 && !encryptMetadata) {\n      hashData[i++] = 0xff;\n      hashData[i++] = 0xff;\n      hashData[i++] = 0xff;\n      hashData[i++] = 0xff;\n    }\n\n    var hash = calculateMD5(hashData, 0, i);\n    var keyLengthInBytes = keyLength >> 3;\n\n    if (revision >= 3) {\n      for (j = 0; j < 50; ++j) {\n        hash = calculateMD5(hash, 0, keyLengthInBytes);\n      }\n    }\n\n    var encryptionKey = hash.subarray(0, keyLengthInBytes);\n    var cipher, checkData;\n\n    if (revision >= 3) {\n      for (i = 0; i < 32; ++i) {\n        hashData[i] = defaultPasswordBytes[i];\n      }\n\n      for (j = 0, n = fileId.length; j < n; ++j) {\n        hashData[i++] = fileId[j];\n      }\n\n      cipher = new ARCFourCipher(encryptionKey);\n      checkData = cipher.encryptBlock(calculateMD5(hashData, 0, i));\n      n = encryptionKey.length;\n      var derivedKey = new Uint8Array(n),\n          k;\n\n      for (j = 1; j <= 19; ++j) {\n        for (k = 0; k < n; ++k) {\n          derivedKey[k] = encryptionKey[k] ^ j;\n        }\n\n        cipher = new ARCFourCipher(derivedKey);\n        checkData = cipher.encryptBlock(checkData);\n      }\n\n      for (j = 0, n = checkData.length; j < n; ++j) {\n        if (userPassword[j] !== checkData[j]) {\n          return null;\n        }\n      }\n    } else {\n      cipher = new ARCFourCipher(encryptionKey);\n      checkData = cipher.encryptBlock(defaultPasswordBytes);\n\n      for (j = 0, n = checkData.length; j < n; ++j) {\n        if (userPassword[j] !== checkData[j]) {\n          return null;\n        }\n      }\n    }\n\n    return encryptionKey;\n  }\n\n  function decodeUserPassword(password, ownerPassword, revision, keyLength) {\n    var hashData = new Uint8Array(32),\n        i = 0,\n        j,\n        n;\n    n = Math.min(32, password.length);\n\n    for (; i < n; ++i) {\n      hashData[i] = password[i];\n    }\n\n    j = 0;\n\n    while (i < 32) {\n      hashData[i++] = defaultPasswordBytes[j++];\n    }\n\n    var hash = calculateMD5(hashData, 0, i);\n    var keyLengthInBytes = keyLength >> 3;\n\n    if (revision >= 3) {\n      for (j = 0; j < 50; ++j) {\n        hash = calculateMD5(hash, 0, hash.length);\n      }\n    }\n\n    var cipher, userPassword;\n\n    if (revision >= 3) {\n      userPassword = ownerPassword;\n      var derivedKey = new Uint8Array(keyLengthInBytes),\n          k;\n\n      for (j = 19; j >= 0; j--) {\n        for (k = 0; k < keyLengthInBytes; ++k) {\n          derivedKey[k] = hash[k] ^ j;\n        }\n\n        cipher = new ARCFourCipher(derivedKey);\n        userPassword = cipher.encryptBlock(userPassword);\n      }\n    } else {\n      cipher = new ARCFourCipher(hash.subarray(0, keyLengthInBytes));\n      userPassword = cipher.encryptBlock(ownerPassword);\n    }\n\n    return userPassword;\n  }\n\n  var identityName = _primitives.Name.get(\"Identity\");\n\n  function CipherTransformFactory(dict, fileId, password) {\n    var filter = dict.get(\"Filter\");\n\n    if (!(0, _primitives.isName)(filter, \"Standard\")) {\n      throw new _util.FormatError(\"unknown encryption method\");\n    }\n\n    this.dict = dict;\n    var algorithm = dict.get(\"V\");\n\n    if (!Number.isInteger(algorithm) || algorithm !== 1 && algorithm !== 2 && algorithm !== 4 && algorithm !== 5) {\n      throw new _util.FormatError(\"unsupported encryption algorithm\");\n    }\n\n    this.algorithm = algorithm;\n    var keyLength = dict.get(\"Length\");\n\n    if (!keyLength) {\n      if (algorithm <= 3) {\n        keyLength = 40;\n      } else {\n        var cfDict = dict.get(\"CF\");\n        var streamCryptoName = dict.get(\"StmF\");\n\n        if ((0, _primitives.isDict)(cfDict) && (0, _primitives.isName)(streamCryptoName)) {\n          cfDict.suppressEncryption = true;\n          var handlerDict = cfDict.get(streamCryptoName.name);\n          keyLength = handlerDict && handlerDict.get(\"Length\") || 128;\n\n          if (keyLength < 40) {\n            keyLength <<= 3;\n          }\n        }\n      }\n    }\n\n    if (!Number.isInteger(keyLength) || keyLength < 40 || keyLength % 8 !== 0) {\n      throw new _util.FormatError(\"invalid key length\");\n    }\n\n    var ownerPassword = (0, _util.stringToBytes)(dict.get(\"O\")).subarray(0, 32);\n    var userPassword = (0, _util.stringToBytes)(dict.get(\"U\")).subarray(0, 32);\n    var flags = dict.get(\"P\");\n    var revision = dict.get(\"R\");\n    var encryptMetadata = (algorithm === 4 || algorithm === 5) && dict.get(\"EncryptMetadata\") !== false;\n    this.encryptMetadata = encryptMetadata;\n    var fileIdBytes = (0, _util.stringToBytes)(fileId);\n    var passwordBytes;\n\n    if (password) {\n      if (revision === 6) {\n        try {\n          password = (0, _util.utf8StringToString)(password);\n        } catch (ex) {\n          (0, _util.warn)(\"CipherTransformFactory: \" + \"Unable to convert UTF8 encoded password.\");\n        }\n      }\n\n      passwordBytes = (0, _util.stringToBytes)(password);\n    }\n\n    var encryptionKey;\n\n    if (algorithm !== 5) {\n      encryptionKey = prepareKeyData(fileIdBytes, passwordBytes, ownerPassword, userPassword, flags, revision, keyLength, encryptMetadata);\n    } else {\n      var ownerValidationSalt = (0, _util.stringToBytes)(dict.get(\"O\")).subarray(32, 40);\n      var ownerKeySalt = (0, _util.stringToBytes)(dict.get(\"O\")).subarray(40, 48);\n      var uBytes = (0, _util.stringToBytes)(dict.get(\"U\")).subarray(0, 48);\n      var userValidationSalt = (0, _util.stringToBytes)(dict.get(\"U\")).subarray(32, 40);\n      var userKeySalt = (0, _util.stringToBytes)(dict.get(\"U\")).subarray(40, 48);\n      var ownerEncryption = (0, _util.stringToBytes)(dict.get(\"OE\"));\n      var userEncryption = (0, _util.stringToBytes)(dict.get(\"UE\"));\n      var perms = (0, _util.stringToBytes)(dict.get(\"Perms\"));\n      encryptionKey = createEncryptionKey20(revision, passwordBytes, ownerPassword, ownerValidationSalt, ownerKeySalt, uBytes, userPassword, userValidationSalt, userKeySalt, ownerEncryption, userEncryption, perms);\n    }\n\n    if (!encryptionKey && !password) {\n      throw new _util.PasswordException(\"No password given\", _util.PasswordResponses.NEED_PASSWORD);\n    } else if (!encryptionKey && password) {\n      var decodedPassword = decodeUserPassword(passwordBytes, ownerPassword, revision, keyLength);\n      encryptionKey = prepareKeyData(fileIdBytes, decodedPassword, ownerPassword, userPassword, flags, revision, keyLength, encryptMetadata);\n    }\n\n    if (!encryptionKey) {\n      throw new _util.PasswordException(\"Incorrect Password\", _util.PasswordResponses.INCORRECT_PASSWORD);\n    }\n\n    this.encryptionKey = encryptionKey;\n\n    if (algorithm >= 4) {\n      var cf = dict.get(\"CF\");\n\n      if ((0, _primitives.isDict)(cf)) {\n        cf.suppressEncryption = true;\n      }\n\n      this.cf = cf;\n      this.stmf = dict.get(\"StmF\") || identityName;\n      this.strf = dict.get(\"StrF\") || identityName;\n      this.eff = dict.get(\"EFF\") || this.stmf;\n    }\n  }\n\n  function buildObjectKey(num, gen, encryptionKey, isAes) {\n    var key = new Uint8Array(encryptionKey.length + 9),\n        i,\n        n;\n\n    for (i = 0, n = encryptionKey.length; i < n; ++i) {\n      key[i] = encryptionKey[i];\n    }\n\n    key[i++] = num & 0xff;\n    key[i++] = num >> 8 & 0xff;\n    key[i++] = num >> 16 & 0xff;\n    key[i++] = gen & 0xff;\n    key[i++] = gen >> 8 & 0xff;\n\n    if (isAes) {\n      key[i++] = 0x73;\n      key[i++] = 0x41;\n      key[i++] = 0x6c;\n      key[i++] = 0x54;\n    }\n\n    var hash = calculateMD5(key, 0, i);\n    return hash.subarray(0, Math.min(encryptionKey.length + 5, 16));\n  }\n\n  function buildCipherConstructor(cf, name, num, gen, key) {\n    if (!(0, _primitives.isName)(name)) {\n      throw new _util.FormatError(\"Invalid crypt filter name.\");\n    }\n\n    var cryptFilter = cf.get(name.name);\n    var cfm;\n\n    if (cryptFilter !== null && cryptFilter !== undefined) {\n      cfm = cryptFilter.get(\"CFM\");\n    }\n\n    if (!cfm || cfm.name === \"None\") {\n      return function cipherTransformFactoryBuildCipherConstructorNone() {\n        return new NullCipher();\n      };\n    }\n\n    if (cfm.name === \"V2\") {\n      return function cipherTransformFactoryBuildCipherConstructorV2() {\n        return new ARCFourCipher(buildObjectKey(num, gen, key, false));\n      };\n    }\n\n    if (cfm.name === \"AESV2\") {\n      return function cipherTransformFactoryBuildCipherConstructorAESV2() {\n        return new AES128Cipher(buildObjectKey(num, gen, key, true));\n      };\n    }\n\n    if (cfm.name === \"AESV3\") {\n      return function cipherTransformFactoryBuildCipherConstructorAESV3() {\n        return new AES256Cipher(key);\n      };\n    }\n\n    throw new _util.FormatError(\"Unknown crypto method\");\n  }\n\n  CipherTransformFactory.prototype = {\n    createCipherTransform: function CipherTransformFactory_createCipherTransform(num, gen) {\n      if (this.algorithm === 4 || this.algorithm === 5) {\n        return new CipherTransform(buildCipherConstructor(this.cf, this.stmf, num, gen, this.encryptionKey), buildCipherConstructor(this.cf, this.strf, num, gen, this.encryptionKey));\n      }\n\n      var key = buildObjectKey(num, gen, this.encryptionKey, false);\n\n      var cipherConstructor = function buildCipherCipherConstructor() {\n        return new ARCFourCipher(key);\n      };\n\n      return new CipherTransform(cipherConstructor, cipherConstructor);\n    }\n  };\n  return CipherTransformFactory;\n}();\n\nexports.CipherTransformFactory = CipherTransformFactory;\n\n/***/ }),\n/* 23 */\n/***/ ((__unused_webpack_module, exports, __w_pdfjs_require__) => {\n\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.ColorSpace = void 0;\n\nvar _util = __w_pdfjs_require__(2);\n\nvar _primitives = __w_pdfjs_require__(5);\n\nvar _core_utils = __w_pdfjs_require__(8);\n\nfunction resizeRgbImage(src, dest, w1, h1, w2, h2, alpha01) {\n  const COMPONENTS = 3;\n  alpha01 = alpha01 !== 1 ? 0 : alpha01;\n  const xRatio = w1 / w2;\n  const yRatio = h1 / h2;\n  let newIndex = 0,\n      oldIndex;\n  const xScaled = new Uint16Array(w2);\n  const w1Scanline = w1 * COMPONENTS;\n\n  for (let i = 0; i < w2; i++) {\n    xScaled[i] = Math.floor(i * xRatio) * COMPONENTS;\n  }\n\n  for (let i = 0; i < h2; i++) {\n    const py = Math.floor(i * yRatio) * w1Scanline;\n\n    for (let j = 0; j < w2; j++) {\n      oldIndex = py + xScaled[j];\n      dest[newIndex++] = src[oldIndex++];\n      dest[newIndex++] = src[oldIndex++];\n      dest[newIndex++] = src[oldIndex++];\n      newIndex += alpha01;\n    }\n  }\n}\n\nclass ColorSpace {\n  constructor(name, numComps) {\n    if (this.constructor === ColorSpace) {\n      (0, _util.unreachable)(\"Cannot initialize ColorSpace.\");\n    }\n\n    this.name = name;\n    this.numComps = numComps;\n  }\n\n  getRgb(src, srcOffset) {\n    const rgb = new Uint8ClampedArray(3);\n    this.getRgbItem(src, srcOffset, rgb, 0);\n    return rgb;\n  }\n\n  getRgbItem(src, srcOffset, dest, destOffset) {\n    (0, _util.unreachable)(\"Should not call ColorSpace.getRgbItem\");\n  }\n\n  getRgbBuffer(src, srcOffset, count, dest, destOffset, bits, alpha01) {\n    (0, _util.unreachable)(\"Should not call ColorSpace.getRgbBuffer\");\n  }\n\n  getOutputLength(inputLength, alpha01) {\n    (0, _util.unreachable)(\"Should not call ColorSpace.getOutputLength\");\n  }\n\n  isPassthrough(bits) {\n    return false;\n  }\n\n  isDefaultDecode(decodeMap, bpc) {\n    return ColorSpace.isDefaultDecode(decodeMap, this.numComps);\n  }\n\n  fillRgb(dest, originalWidth, originalHeight, width, height, actualHeight, bpc, comps, alpha01) {\n    const count = originalWidth * originalHeight;\n    let rgbBuf = null;\n    const numComponentColors = 1 << bpc;\n    const needsResizing = originalHeight !== height || originalWidth !== width;\n\n    if (this.isPassthrough(bpc)) {\n      rgbBuf = comps;\n    } else if (this.numComps === 1 && count > numComponentColors && this.name !== \"DeviceGray\" && this.name !== \"DeviceRGB\") {\n      const allColors = bpc <= 8 ? new Uint8Array(numComponentColors) : new Uint16Array(numComponentColors);\n\n      for (let i = 0; i < numComponentColors; i++) {\n        allColors[i] = i;\n      }\n\n      const colorMap = new Uint8ClampedArray(numComponentColors * 3);\n      this.getRgbBuffer(allColors, 0, numComponentColors, colorMap, 0, bpc, 0);\n\n      if (!needsResizing) {\n        let destPos = 0;\n\n        for (let i = 0; i < count; ++i) {\n          const key = comps[i] * 3;\n          dest[destPos++] = colorMap[key];\n          dest[destPos++] = colorMap[key + 1];\n          dest[destPos++] = colorMap[key + 2];\n          destPos += alpha01;\n        }\n      } else {\n        rgbBuf = new Uint8Array(count * 3);\n        let rgbPos = 0;\n\n        for (let i = 0; i < count; ++i) {\n          const key = comps[i] * 3;\n          rgbBuf[rgbPos++] = colorMap[key];\n          rgbBuf[rgbPos++] = colorMap[key + 1];\n          rgbBuf[rgbPos++] = colorMap[key + 2];\n        }\n      }\n    } else {\n      if (!needsResizing) {\n        this.getRgbBuffer(comps, 0, width * actualHeight, dest, 0, bpc, alpha01);\n      } else {\n        rgbBuf = new Uint8ClampedArray(count * 3);\n        this.getRgbBuffer(comps, 0, count, rgbBuf, 0, bpc, 0);\n      }\n    }\n\n    if (rgbBuf) {\n      if (needsResizing) {\n        resizeRgbImage(rgbBuf, dest, originalWidth, originalHeight, width, height, alpha01);\n      } else {\n        let destPos = 0,\n            rgbPos = 0;\n\n        for (let i = 0, ii = width * actualHeight; i < ii; i++) {\n          dest[destPos++] = rgbBuf[rgbPos++];\n          dest[destPos++] = rgbBuf[rgbPos++];\n          dest[destPos++] = rgbBuf[rgbPos++];\n          destPos += alpha01;\n        }\n      }\n    }\n  }\n\n  get usesZeroToOneRange() {\n    return (0, _util.shadow)(this, \"usesZeroToOneRange\", true);\n  }\n\n  static _cache(cacheKey, xref, localColorSpaceCache, parsedColorSpace) {\n    if (!localColorSpaceCache) {\n      throw new Error('ColorSpace._cache - expected \"localColorSpaceCache\" argument.');\n    }\n\n    if (!parsedColorSpace) {\n      throw new Error('ColorSpace._cache - expected \"parsedColorSpace\" argument.');\n    }\n\n    let csName, csRef;\n\n    if (cacheKey instanceof _primitives.Ref) {\n      csRef = cacheKey;\n      cacheKey = xref.fetch(cacheKey);\n    }\n\n    if (cacheKey instanceof _primitives.Name) {\n      csName = cacheKey.name;\n    }\n\n    if (csName || csRef) {\n      localColorSpaceCache.set(csName, csRef, parsedColorSpace);\n    }\n  }\n\n  static getCached(cacheKey, xref, localColorSpaceCache) {\n    if (!localColorSpaceCache) {\n      throw new Error('ColorSpace.getCached - expected \"localColorSpaceCache\" argument.');\n    }\n\n    if (cacheKey instanceof _primitives.Ref) {\n      const localColorSpace = localColorSpaceCache.getByRef(cacheKey);\n\n      if (localColorSpace) {\n        return localColorSpace;\n      }\n\n      try {\n        cacheKey = xref.fetch(cacheKey);\n      } catch (ex) {\n        if (ex instanceof _core_utils.MissingDataException) {\n          throw ex;\n        }\n      }\n    }\n\n    if (cacheKey instanceof _primitives.Name) {\n      const localColorSpace = localColorSpaceCache.getByName(cacheKey.name);\n\n      if (localColorSpace) {\n        return localColorSpace;\n      }\n    }\n\n    return null;\n  }\n\n  static async parseAsync({\n    cs,\n    xref,\n    resources = null,\n    pdfFunctionFactory,\n    localColorSpaceCache\n  }) {\n    const parsedColorSpace = this._parse(cs, xref, resources, pdfFunctionFactory);\n\n    this._cache(cs, xref, localColorSpaceCache, parsedColorSpace);\n\n    return parsedColorSpace;\n  }\n\n  static parse({\n    cs,\n    xref,\n    resources = null,\n    pdfFunctionFactory,\n    localColorSpaceCache\n  }) {\n    const cachedColorSpace = this.getCached(cs, xref, localColorSpaceCache);\n\n    if (cachedColorSpace) {\n      return cachedColorSpace;\n    }\n\n    const parsedColorSpace = this._parse(cs, xref, resources, pdfFunctionFactory);\n\n    this._cache(cs, xref, localColorSpaceCache, parsedColorSpace);\n\n    return parsedColorSpace;\n  }\n\n  static _parse(cs, xref, resources = null, pdfFunctionFactory) {\n    cs = xref.fetchIfRef(cs);\n\n    if ((0, _primitives.isName)(cs)) {\n      switch (cs.name) {\n        case \"DeviceGray\":\n        case \"G\":\n          return this.singletons.gray;\n\n        case \"DeviceRGB\":\n        case \"RGB\":\n          return this.singletons.rgb;\n\n        case \"DeviceCMYK\":\n        case \"CMYK\":\n          return this.singletons.cmyk;\n\n        case \"Pattern\":\n          return new PatternCS(null);\n\n        default:\n          if ((0, _primitives.isDict)(resources)) {\n            const colorSpaces = resources.get(\"ColorSpace\");\n\n            if ((0, _primitives.isDict)(colorSpaces)) {\n              const resourcesCS = colorSpaces.get(cs.name);\n\n              if (resourcesCS) {\n                if ((0, _primitives.isName)(resourcesCS)) {\n                  return this._parse(resourcesCS, xref, resources, pdfFunctionFactory);\n                }\n\n                cs = resourcesCS;\n                break;\n              }\n            }\n          }\n\n          throw new _util.FormatError(`Unrecognized ColorSpace: ${cs.name}`);\n      }\n    }\n\n    if (Array.isArray(cs)) {\n      const mode = xref.fetchIfRef(cs[0]).name;\n      let params, numComps, baseCS, whitePoint, blackPoint, gamma;\n\n      switch (mode) {\n        case \"DeviceGray\":\n        case \"G\":\n          return this.singletons.gray;\n\n        case \"DeviceRGB\":\n        case \"RGB\":\n          return this.singletons.rgb;\n\n        case \"DeviceCMYK\":\n        case \"CMYK\":\n          return this.singletons.cmyk;\n\n        case \"CalGray\":\n          params = xref.fetchIfRef(cs[1]);\n          whitePoint = params.getArray(\"WhitePoint\");\n          blackPoint = params.getArray(\"BlackPoint\");\n          gamma = params.get(\"Gamma\");\n          return new CalGrayCS(whitePoint, blackPoint, gamma);\n\n        case \"CalRGB\":\n          params = xref.fetchIfRef(cs[1]);\n          whitePoint = params.getArray(\"WhitePoint\");\n          blackPoint = params.getArray(\"BlackPoint\");\n          gamma = params.getArray(\"Gamma\");\n          const matrix = params.getArray(\"Matrix\");\n          return new CalRGBCS(whitePoint, blackPoint, gamma, matrix);\n\n        case \"ICCBased\":\n          const stream = xref.fetchIfRef(cs[1]);\n          const dict = stream.dict;\n          numComps = dict.get(\"N\");\n          const alt = dict.get(\"Alternate\");\n\n          if (alt) {\n            const altCS = this._parse(alt, xref, resources, pdfFunctionFactory);\n\n            if (altCS.numComps === numComps) {\n              return altCS;\n            }\n\n            (0, _util.warn)(\"ICCBased color space: Ignoring incorrect /Alternate entry.\");\n          }\n\n          if (numComps === 1) {\n            return this.singletons.gray;\n          } else if (numComps === 3) {\n            return this.singletons.rgb;\n          } else if (numComps === 4) {\n            return this.singletons.cmyk;\n          }\n\n          break;\n\n        case \"Pattern\":\n          baseCS = cs[1] || null;\n\n          if (baseCS) {\n            baseCS = this._parse(baseCS, xref, resources, pdfFunctionFactory);\n          }\n\n          return new PatternCS(baseCS);\n\n        case \"Indexed\":\n        case \"I\":\n          baseCS = this._parse(cs[1], xref, resources, pdfFunctionFactory);\n          const hiVal = xref.fetchIfRef(cs[2]) + 1;\n          const lookup = xref.fetchIfRef(cs[3]);\n          return new IndexedCS(baseCS, hiVal, lookup);\n\n        case \"Separation\":\n        case \"DeviceN\":\n          const name = xref.fetchIfRef(cs[1]);\n          numComps = Array.isArray(name) ? name.length : 1;\n          baseCS = this._parse(cs[2], xref, resources, pdfFunctionFactory);\n          const tintFn = pdfFunctionFactory.create(cs[3]);\n          return new AlternateCS(numComps, baseCS, tintFn);\n\n        case \"Lab\":\n          params = xref.fetchIfRef(cs[1]);\n          whitePoint = params.getArray(\"WhitePoint\");\n          blackPoint = params.getArray(\"BlackPoint\");\n          const range = params.getArray(\"Range\");\n          return new LabCS(whitePoint, blackPoint, range);\n\n        default:\n          throw new _util.FormatError(`Unimplemented ColorSpace object: ${mode}`);\n      }\n    }\n\n    throw new _util.FormatError(`Unrecognized ColorSpace object: ${cs}`);\n  }\n\n  static isDefaultDecode(decode, numComps) {\n    if (!Array.isArray(decode)) {\n      return true;\n    }\n\n    if (numComps * 2 !== decode.length) {\n      (0, _util.warn)(\"The decode map is not the correct length\");\n      return true;\n    }\n\n    for (let i = 0, ii = decode.length; i < ii; i += 2) {\n      if (decode[i] !== 0 || decode[i + 1] !== 1) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  static get singletons() {\n    return (0, _util.shadow)(this, \"singletons\", {\n      get gray() {\n        return (0, _util.shadow)(this, \"gray\", new DeviceGrayCS());\n      },\n\n      get rgb() {\n        return (0, _util.shadow)(this, \"rgb\", new DeviceRgbCS());\n      },\n\n      get cmyk() {\n        return (0, _util.shadow)(this, \"cmyk\", new DeviceCmykCS());\n      }\n\n    });\n  }\n\n}\n\nexports.ColorSpace = ColorSpace;\n\nclass AlternateCS extends ColorSpace {\n  constructor(numComps, base, tintFn) {\n    super(\"Alternate\", numComps);\n    this.base = base;\n    this.tintFn = tintFn;\n    this.tmpBuf = new Float32Array(base.numComps);\n  }\n\n  getRgbItem(src, srcOffset, dest, destOffset) {\n    const tmpBuf = this.tmpBuf;\n    this.tintFn(src, srcOffset, tmpBuf, 0);\n    this.base.getRgbItem(tmpBuf, 0, dest, destOffset);\n  }\n\n  getRgbBuffer(src, srcOffset, count, dest, destOffset, bits, alpha01) {\n    const tintFn = this.tintFn;\n    const base = this.base;\n    const scale = 1 / ((1 << bits) - 1);\n    const baseNumComps = base.numComps;\n    const usesZeroToOneRange = base.usesZeroToOneRange;\n    const isPassthrough = (base.isPassthrough(8) || !usesZeroToOneRange) && alpha01 === 0;\n    let pos = isPassthrough ? destOffset : 0;\n    const baseBuf = isPassthrough ? dest : new Uint8ClampedArray(baseNumComps * count);\n    const numComps = this.numComps;\n    const scaled = new Float32Array(numComps);\n    const tinted = new Float32Array(baseNumComps);\n    let i, j;\n\n    for (i = 0; i < count; i++) {\n      for (j = 0; j < numComps; j++) {\n        scaled[j] = src[srcOffset++] * scale;\n      }\n\n      tintFn(scaled, 0, tinted, 0);\n\n      if (usesZeroToOneRange) {\n        for (j = 0; j < baseNumComps; j++) {\n          baseBuf[pos++] = tinted[j] * 255;\n        }\n      } else {\n        base.getRgbItem(tinted, 0, baseBuf, pos);\n        pos += baseNumComps;\n      }\n    }\n\n    if (!isPassthrough) {\n      base.getRgbBuffer(baseBuf, 0, count, dest, destOffset, 8, alpha01);\n    }\n  }\n\n  getOutputLength(inputLength, alpha01) {\n    return this.base.getOutputLength(inputLength * this.base.numComps / this.numComps, alpha01);\n  }\n\n}\n\nclass PatternCS extends ColorSpace {\n  constructor(baseCS) {\n    super(\"Pattern\", null);\n    this.base = baseCS;\n  }\n\n  isDefaultDecode(decodeMap, bpc) {\n    (0, _util.unreachable)(\"Should not call PatternCS.isDefaultDecode\");\n  }\n\n}\n\nclass IndexedCS extends ColorSpace {\n  constructor(base, highVal, lookup) {\n    super(\"Indexed\", 1);\n    this.base = base;\n    this.highVal = highVal;\n    const length = base.numComps * highVal;\n    this.lookup = new Uint8Array(length);\n\n    if ((0, _primitives.isStream)(lookup)) {\n      const bytes = lookup.getBytes(length);\n      this.lookup.set(bytes);\n    } else if (typeof lookup === \"string\") {\n      for (let i = 0; i < length; ++i) {\n        this.lookup[i] = lookup.charCodeAt(i) & 0xff;\n      }\n    } else {\n      throw new _util.FormatError(`IndexedCS - unrecognized lookup table: ${lookup}`);\n    }\n  }\n\n  getRgbItem(src, srcOffset, dest, destOffset) {\n    const numComps = this.base.numComps;\n    const start = src[srcOffset] * numComps;\n    this.base.getRgbBuffer(this.lookup, start, 1, dest, destOffset, 8, 0);\n  }\n\n  getRgbBuffer(src, srcOffset, count, dest, destOffset, bits, alpha01) {\n    const base = this.base;\n    const numComps = base.numComps;\n    const outputDelta = base.getOutputLength(numComps, alpha01);\n    const lookup = this.lookup;\n\n    for (let i = 0; i < count; ++i) {\n      const lookupPos = src[srcOffset++] * numComps;\n      base.getRgbBuffer(lookup, lookupPos, 1, dest, destOffset, 8, alpha01);\n      destOffset += outputDelta;\n    }\n  }\n\n  getOutputLength(inputLength, alpha01) {\n    return this.base.getOutputLength(inputLength * this.base.numComps, alpha01);\n  }\n\n  isDefaultDecode(decodeMap, bpc) {\n    if (!Array.isArray(decodeMap)) {\n      return true;\n    }\n\n    if (decodeMap.length !== 2) {\n      (0, _util.warn)(\"Decode map length is not correct\");\n      return true;\n    }\n\n    if (!Number.isInteger(bpc) || bpc < 1) {\n      (0, _util.warn)(\"Bits per component is not correct\");\n      return true;\n    }\n\n    return decodeMap[0] === 0 && decodeMap[1] === (1 << bpc) - 1;\n  }\n\n}\n\nclass DeviceGrayCS extends ColorSpace {\n  constructor() {\n    super(\"DeviceGray\", 1);\n  }\n\n  getRgbItem(src, srcOffset, dest, destOffset) {\n    const c = src[srcOffset] * 255;\n    dest[destOffset] = dest[destOffset + 1] = dest[destOffset + 2] = c;\n  }\n\n  getRgbBuffer(src, srcOffset, count, dest, destOffset, bits, alpha01) {\n    const scale = 255 / ((1 << bits) - 1);\n    let j = srcOffset,\n        q = destOffset;\n\n    for (let i = 0; i < count; ++i) {\n      const c = scale * src[j++];\n      dest[q++] = c;\n      dest[q++] = c;\n      dest[q++] = c;\n      q += alpha01;\n    }\n  }\n\n  getOutputLength(inputLength, alpha01) {\n    return inputLength * (3 + alpha01);\n  }\n\n}\n\nclass DeviceRgbCS extends ColorSpace {\n  constructor() {\n    super(\"DeviceRGB\", 3);\n  }\n\n  getRgbItem(src, srcOffset, dest, destOffset) {\n    dest[destOffset] = src[srcOffset] * 255;\n    dest[destOffset + 1] = src[srcOffset + 1] * 255;\n    dest[destOffset + 2] = src[srcOffset + 2] * 255;\n  }\n\n  getRgbBuffer(src, srcOffset, count, dest, destOffset, bits, alpha01) {\n    if (bits === 8 && alpha01 === 0) {\n      dest.set(src.subarray(srcOffset, srcOffset + count * 3), destOffset);\n      return;\n    }\n\n    const scale = 255 / ((1 << bits) - 1);\n    let j = srcOffset,\n        q = destOffset;\n\n    for (let i = 0; i < count; ++i) {\n      dest[q++] = scale * src[j++];\n      dest[q++] = scale * src[j++];\n      dest[q++] = scale * src[j++];\n      q += alpha01;\n    }\n  }\n\n  getOutputLength(inputLength, alpha01) {\n    return inputLength * (3 + alpha01) / 3 | 0;\n  }\n\n  isPassthrough(bits) {\n    return bits === 8;\n  }\n\n}\n\nconst DeviceCmykCS = function DeviceCmykCSClosure() {\n  function convertToRgb(src, srcOffset, srcScale, dest, destOffset) {\n    const c = src[srcOffset] * srcScale;\n    const m = src[srcOffset + 1] * srcScale;\n    const y = src[srcOffset + 2] * srcScale;\n    const k = src[srcOffset + 3] * srcScale;\n    dest[destOffset] = 255 + c * (-4.387332384609988 * c + 54.48615194189176 * m + 18.82290502165302 * y + 212.25662451639585 * k + -285.2331026137004) + m * (1.7149763477362134 * m - 5.6096736904047315 * y + -17.873870861415444 * k - 5.497006427196366) + y * (-2.5217340131683033 * y - 21.248923337353073 * k + 17.5119270841813) + k * (-21.86122147463605 * k - 189.48180835922747);\n    dest[destOffset + 1] = 255 + c * (8.841041422036149 * c + 60.118027045597366 * m + 6.871425592049007 * y + 31.159100130055922 * k + -79.2970844816548) + m * (-15.310361306967817 * m + 17.575251261109482 * y + 131.35250912493976 * k - 190.9453302588951) + y * (4.444339102852739 * y + 9.8632861493405 * k - 24.86741582555878) + k * (-20.737325471181034 * k - 187.80453709719578);\n    dest[destOffset + 2] = 255 + c * (0.8842522430003296 * c + 8.078677503112928 * m + 30.89978309703729 * y - 0.23883238689178934 * k + -14.183576799673286) + m * (10.49593273432072 * m + 63.02378494754052 * y + 50.606957656360734 * k - 112.23884253719248) + y * (0.03296041114873217 * y + 115.60384449646641 * k + -193.58209356861505) + k * (-22.33816807309886 * k - 180.12613974708367);\n  }\n\n  class DeviceCmykCS extends ColorSpace {\n    constructor() {\n      super(\"DeviceCMYK\", 4);\n    }\n\n    getRgbItem(src, srcOffset, dest, destOffset) {\n      convertToRgb(src, srcOffset, 1, dest, destOffset);\n    }\n\n    getRgbBuffer(src, srcOffset, count, dest, destOffset, bits, alpha01) {\n      const scale = 1 / ((1 << bits) - 1);\n\n      for (let i = 0; i < count; i++) {\n        convertToRgb(src, srcOffset, scale, dest, destOffset);\n        srcOffset += 4;\n        destOffset += 3 + alpha01;\n      }\n    }\n\n    getOutputLength(inputLength, alpha01) {\n      return inputLength / 4 * (3 + alpha01) | 0;\n    }\n\n  }\n\n  return DeviceCmykCS;\n}();\n\nconst CalGrayCS = function CalGrayCSClosure() {\n  function convertToRgb(cs, src, srcOffset, dest, destOffset, scale) {\n    const A = src[srcOffset] * scale;\n    const AG = A ** cs.G;\n    const L = cs.YW * AG;\n    const val = Math.max(295.8 * L ** 0.333333333333333333 - 40.8, 0);\n    dest[destOffset] = val;\n    dest[destOffset + 1] = val;\n    dest[destOffset + 2] = val;\n  }\n\n  class CalGrayCS extends ColorSpace {\n    constructor(whitePoint, blackPoint, gamma) {\n      super(\"CalGray\", 1);\n\n      if (!whitePoint) {\n        throw new _util.FormatError(\"WhitePoint missing - required for color space CalGray\");\n      }\n\n      blackPoint = blackPoint || [0, 0, 0];\n      gamma = gamma || 1;\n      this.XW = whitePoint[0];\n      this.YW = whitePoint[1];\n      this.ZW = whitePoint[2];\n      this.XB = blackPoint[0];\n      this.YB = blackPoint[1];\n      this.ZB = blackPoint[2];\n      this.G = gamma;\n\n      if (this.XW < 0 || this.ZW < 0 || this.YW !== 1) {\n        throw new _util.FormatError(`Invalid WhitePoint components for ${this.name}` + \", no fallback available\");\n      }\n\n      if (this.XB < 0 || this.YB < 0 || this.ZB < 0) {\n        (0, _util.info)(`Invalid BlackPoint for ${this.name}, falling back to default.`);\n        this.XB = this.YB = this.ZB = 0;\n      }\n\n      if (this.XB !== 0 || this.YB !== 0 || this.ZB !== 0) {\n        (0, _util.warn)(`${this.name}, BlackPoint: XB: ${this.XB}, YB: ${this.YB}, ` + `ZB: ${this.ZB}, only default values are supported.`);\n      }\n\n      if (this.G < 1) {\n        (0, _util.info)(`Invalid Gamma: ${this.G} for ${this.name}, ` + \"falling back to default.\");\n        this.G = 1;\n      }\n    }\n\n    getRgbItem(src, srcOffset, dest, destOffset) {\n      convertToRgb(this, src, srcOffset, dest, destOffset, 1);\n    }\n\n    getRgbBuffer(src, srcOffset, count, dest, destOffset, bits, alpha01) {\n      const scale = 1 / ((1 << bits) - 1);\n\n      for (let i = 0; i < count; ++i) {\n        convertToRgb(this, src, srcOffset, dest, destOffset, scale);\n        srcOffset += 1;\n        destOffset += 3 + alpha01;\n      }\n    }\n\n    getOutputLength(inputLength, alpha01) {\n      return inputLength * (3 + alpha01);\n    }\n\n  }\n\n  return CalGrayCS;\n}();\n\nconst CalRGBCS = function CalRGBCSClosure() {\n  const BRADFORD_SCALE_MATRIX = new Float32Array([0.8951, 0.2664, -0.1614, -0.7502, 1.7135, 0.0367, 0.0389, -0.0685, 1.0296]);\n  const BRADFORD_SCALE_INVERSE_MATRIX = new Float32Array([0.9869929, -0.1470543, 0.1599627, 0.4323053, 0.5183603, 0.0492912, -0.0085287, 0.0400428, 0.9684867]);\n  const SRGB_D65_XYZ_TO_RGB_MATRIX = new Float32Array([3.2404542, -1.5371385, -0.4985314, -0.9692660, 1.8760108, 0.0415560, 0.0556434, -0.2040259, 1.0572252]);\n  const FLAT_WHITEPOINT_MATRIX = new Float32Array([1, 1, 1]);\n  const tempNormalizeMatrix = new Float32Array(3);\n  const tempConvertMatrix1 = new Float32Array(3);\n  const tempConvertMatrix2 = new Float32Array(3);\n  const DECODE_L_CONSTANT = ((8 + 16) / 116) ** 3 / 8.0;\n\n  function matrixProduct(a, b, result) {\n    result[0] = a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n    result[1] = a[3] * b[0] + a[4] * b[1] + a[5] * b[2];\n    result[2] = a[6] * b[0] + a[7] * b[1] + a[8] * b[2];\n  }\n\n  function convertToFlat(sourceWhitePoint, LMS, result) {\n    result[0] = LMS[0] * 1 / sourceWhitePoint[0];\n    result[1] = LMS[1] * 1 / sourceWhitePoint[1];\n    result[2] = LMS[2] * 1 / sourceWhitePoint[2];\n  }\n\n  function convertToD65(sourceWhitePoint, LMS, result) {\n    const D65X = 0.95047;\n    const D65Y = 1;\n    const D65Z = 1.08883;\n    result[0] = LMS[0] * D65X / sourceWhitePoint[0];\n    result[1] = LMS[1] * D65Y / sourceWhitePoint[1];\n    result[2] = LMS[2] * D65Z / sourceWhitePoint[2];\n  }\n\n  function sRGBTransferFunction(color) {\n    if (color <= 0.0031308) {\n      return adjustToRange(0, 1, 12.92 * color);\n    }\n\n    if (color >= 0.99554525) {\n      return 1;\n    }\n\n    return adjustToRange(0, 1, (1 + 0.055) * color ** (1 / 2.4) - 0.055);\n  }\n\n  function adjustToRange(min, max, value) {\n    return Math.max(min, Math.min(max, value));\n  }\n\n  function decodeL(L) {\n    if (L < 0) {\n      return -decodeL(-L);\n    }\n\n    if (L > 8.0) {\n      return ((L + 16) / 116) ** 3;\n    }\n\n    return L * DECODE_L_CONSTANT;\n  }\n\n  function compensateBlackPoint(sourceBlackPoint, XYZ_Flat, result) {\n    if (sourceBlackPoint[0] === 0 && sourceBlackPoint[1] === 0 && sourceBlackPoint[2] === 0) {\n      result[0] = XYZ_Flat[0];\n      result[1] = XYZ_Flat[1];\n      result[2] = XYZ_Flat[2];\n      return;\n    }\n\n    const zeroDecodeL = decodeL(0);\n    const X_DST = zeroDecodeL;\n    const X_SRC = decodeL(sourceBlackPoint[0]);\n    const Y_DST = zeroDecodeL;\n    const Y_SRC = decodeL(sourceBlackPoint[1]);\n    const Z_DST = zeroDecodeL;\n    const Z_SRC = decodeL(sourceBlackPoint[2]);\n    const X_Scale = (1 - X_DST) / (1 - X_SRC);\n    const X_Offset = 1 - X_Scale;\n    const Y_Scale = (1 - Y_DST) / (1 - Y_SRC);\n    const Y_Offset = 1 - Y_Scale;\n    const Z_Scale = (1 - Z_DST) / (1 - Z_SRC);\n    const Z_Offset = 1 - Z_Scale;\n    result[0] = XYZ_Flat[0] * X_Scale + X_Offset;\n    result[1] = XYZ_Flat[1] * Y_Scale + Y_Offset;\n    result[2] = XYZ_Flat[2] * Z_Scale + Z_Offset;\n  }\n\n  function normalizeWhitePointToFlat(sourceWhitePoint, XYZ_In, result) {\n    if (sourceWhitePoint[0] === 1 && sourceWhitePoint[2] === 1) {\n      result[0] = XYZ_In[0];\n      result[1] = XYZ_In[1];\n      result[2] = XYZ_In[2];\n      return;\n    }\n\n    const LMS = result;\n    matrixProduct(BRADFORD_SCALE_MATRIX, XYZ_In, LMS);\n    const LMS_Flat = tempNormalizeMatrix;\n    convertToFlat(sourceWhitePoint, LMS, LMS_Flat);\n    matrixProduct(BRADFORD_SCALE_INVERSE_MATRIX, LMS_Flat, result);\n  }\n\n  function normalizeWhitePointToD65(sourceWhitePoint, XYZ_In, result) {\n    const LMS = result;\n    matrixProduct(BRADFORD_SCALE_MATRIX, XYZ_In, LMS);\n    const LMS_D65 = tempNormalizeMatrix;\n    convertToD65(sourceWhitePoint, LMS, LMS_D65);\n    matrixProduct(BRADFORD_SCALE_INVERSE_MATRIX, LMS_D65, result);\n  }\n\n  function convertToRgb(cs, src, srcOffset, dest, destOffset, scale) {\n    const A = adjustToRange(0, 1, src[srcOffset] * scale);\n    const B = adjustToRange(0, 1, src[srcOffset + 1] * scale);\n    const C = adjustToRange(0, 1, src[srcOffset + 2] * scale);\n    const AGR = A === 1 ? 1 : A ** cs.GR;\n    const BGG = B === 1 ? 1 : B ** cs.GG;\n    const CGB = C === 1 ? 1 : C ** cs.GB;\n    const X = cs.MXA * AGR + cs.MXB * BGG + cs.MXC * CGB;\n    const Y = cs.MYA * AGR + cs.MYB * BGG + cs.MYC * CGB;\n    const Z = cs.MZA * AGR + cs.MZB * BGG + cs.MZC * CGB;\n    const XYZ = tempConvertMatrix1;\n    XYZ[0] = X;\n    XYZ[1] = Y;\n    XYZ[2] = Z;\n    const XYZ_Flat = tempConvertMatrix2;\n    normalizeWhitePointToFlat(cs.whitePoint, XYZ, XYZ_Flat);\n    const XYZ_Black = tempConvertMatrix1;\n    compensateBlackPoint(cs.blackPoint, XYZ_Flat, XYZ_Black);\n    const XYZ_D65 = tempConvertMatrix2;\n    normalizeWhitePointToD65(FLAT_WHITEPOINT_MATRIX, XYZ_Black, XYZ_D65);\n    const SRGB = tempConvertMatrix1;\n    matrixProduct(SRGB_D65_XYZ_TO_RGB_MATRIX, XYZ_D65, SRGB);\n    dest[destOffset] = sRGBTransferFunction(SRGB[0]) * 255;\n    dest[destOffset + 1] = sRGBTransferFunction(SRGB[1]) * 255;\n    dest[destOffset + 2] = sRGBTransferFunction(SRGB[2]) * 255;\n  }\n\n  class CalRGBCS extends ColorSpace {\n    constructor(whitePoint, blackPoint, gamma, matrix) {\n      super(\"CalRGB\", 3);\n\n      if (!whitePoint) {\n        throw new _util.FormatError(\"WhitePoint missing - required for color space CalRGB\");\n      }\n\n      blackPoint = blackPoint || new Float32Array(3);\n      gamma = gamma || new Float32Array([1, 1, 1]);\n      matrix = matrix || new Float32Array([1, 0, 0, 0, 1, 0, 0, 0, 1]);\n      const XW = whitePoint[0];\n      const YW = whitePoint[1];\n      const ZW = whitePoint[2];\n      this.whitePoint = whitePoint;\n      const XB = blackPoint[0];\n      const YB = blackPoint[1];\n      const ZB = blackPoint[2];\n      this.blackPoint = blackPoint;\n      this.GR = gamma[0];\n      this.GG = gamma[1];\n      this.GB = gamma[2];\n      this.MXA = matrix[0];\n      this.MYA = matrix[1];\n      this.MZA = matrix[2];\n      this.MXB = matrix[3];\n      this.MYB = matrix[4];\n      this.MZB = matrix[5];\n      this.MXC = matrix[6];\n      this.MYC = matrix[7];\n      this.MZC = matrix[8];\n\n      if (XW < 0 || ZW < 0 || YW !== 1) {\n        throw new _util.FormatError(`Invalid WhitePoint components for ${this.name}` + \", no fallback available\");\n      }\n\n      if (XB < 0 || YB < 0 || ZB < 0) {\n        (0, _util.info)(`Invalid BlackPoint for ${this.name} [${XB}, ${YB}, ${ZB}], ` + \"falling back to default.\");\n        this.blackPoint = new Float32Array(3);\n      }\n\n      if (this.GR < 0 || this.GG < 0 || this.GB < 0) {\n        (0, _util.info)(`Invalid Gamma [${this.GR}, ${this.GG}, ${this.GB}] for ` + `${this.name}, falling back to default.`);\n        this.GR = this.GG = this.GB = 1;\n      }\n    }\n\n    getRgbItem(src, srcOffset, dest, destOffset) {\n      convertToRgb(this, src, srcOffset, dest, destOffset, 1);\n    }\n\n    getRgbBuffer(src, srcOffset, count, dest, destOffset, bits, alpha01) {\n      const scale = 1 / ((1 << bits) - 1);\n\n      for (let i = 0; i < count; ++i) {\n        convertToRgb(this, src, srcOffset, dest, destOffset, scale);\n        srcOffset += 3;\n        destOffset += 3 + alpha01;\n      }\n    }\n\n    getOutputLength(inputLength, alpha01) {\n      return inputLength * (3 + alpha01) / 3 | 0;\n    }\n\n  }\n\n  return CalRGBCS;\n}();\n\nconst LabCS = function LabCSClosure() {\n  function fn_g(x) {\n    let result;\n\n    if (x >= 6 / 29) {\n      result = x * x * x;\n    } else {\n      result = 108 / 841 * (x - 4 / 29);\n    }\n\n    return result;\n  }\n\n  function decode(value, high1, low2, high2) {\n    return low2 + value * (high2 - low2) / high1;\n  }\n\n  function convertToRgb(cs, src, srcOffset, maxVal, dest, destOffset) {\n    let Ls = src[srcOffset];\n    let as = src[srcOffset + 1];\n    let bs = src[srcOffset + 2];\n\n    if (maxVal !== false) {\n      Ls = decode(Ls, maxVal, 0, 100);\n      as = decode(as, maxVal, cs.amin, cs.amax);\n      bs = decode(bs, maxVal, cs.bmin, cs.bmax);\n    }\n\n    if (as > cs.amax) {\n      as = cs.amax;\n    } else if (as < cs.amin) {\n      as = cs.amin;\n    }\n\n    if (bs > cs.bmax) {\n      bs = cs.bmax;\n    } else if (bs < cs.bmin) {\n      bs = cs.bmin;\n    }\n\n    const M = (Ls + 16) / 116;\n    const L = M + as / 500;\n    const N = M - bs / 200;\n    const X = cs.XW * fn_g(L);\n    const Y = cs.YW * fn_g(M);\n    const Z = cs.ZW * fn_g(N);\n    let r, g, b;\n\n    if (cs.ZW < 1) {\n      r = X * 3.1339 + Y * -1.617 + Z * -0.4906;\n      g = X * -0.9785 + Y * 1.916 + Z * 0.0333;\n      b = X * 0.072 + Y * -0.229 + Z * 1.4057;\n    } else {\n      r = X * 3.2406 + Y * -1.5372 + Z * -0.4986;\n      g = X * -0.9689 + Y * 1.8758 + Z * 0.0415;\n      b = X * 0.0557 + Y * -0.204 + Z * 1.057;\n    }\n\n    dest[destOffset] = Math.sqrt(r) * 255;\n    dest[destOffset + 1] = Math.sqrt(g) * 255;\n    dest[destOffset + 2] = Math.sqrt(b) * 255;\n  }\n\n  class LabCS extends ColorSpace {\n    constructor(whitePoint, blackPoint, range) {\n      super(\"Lab\", 3);\n\n      if (!whitePoint) {\n        throw new _util.FormatError(\"WhitePoint missing - required for color space Lab\");\n      }\n\n      blackPoint = blackPoint || [0, 0, 0];\n      range = range || [-100, 100, -100, 100];\n      this.XW = whitePoint[0];\n      this.YW = whitePoint[1];\n      this.ZW = whitePoint[2];\n      this.amin = range[0];\n      this.amax = range[1];\n      this.bmin = range[2];\n      this.bmax = range[3];\n      this.XB = blackPoint[0];\n      this.YB = blackPoint[1];\n      this.ZB = blackPoint[2];\n\n      if (this.XW < 0 || this.ZW < 0 || this.YW !== 1) {\n        throw new _util.FormatError(\"Invalid WhitePoint components, no fallback available\");\n      }\n\n      if (this.XB < 0 || this.YB < 0 || this.ZB < 0) {\n        (0, _util.info)(\"Invalid BlackPoint, falling back to default\");\n        this.XB = this.YB = this.ZB = 0;\n      }\n\n      if (this.amin > this.amax || this.bmin > this.bmax) {\n        (0, _util.info)(\"Invalid Range, falling back to defaults\");\n        this.amin = -100;\n        this.amax = 100;\n        this.bmin = -100;\n        this.bmax = 100;\n      }\n    }\n\n    getRgbItem(src, srcOffset, dest, destOffset) {\n      convertToRgb(this, src, srcOffset, false, dest, destOffset);\n    }\n\n    getRgbBuffer(src, srcOffset, count, dest, destOffset, bits, alpha01) {\n      const maxVal = (1 << bits) - 1;\n\n      for (let i = 0; i < count; i++) {\n        convertToRgb(this, src, srcOffset, maxVal, dest, destOffset);\n        srcOffset += 3;\n        destOffset += 3 + alpha01;\n      }\n    }\n\n    getOutputLength(inputLength, alpha01) {\n      return inputLength * (3 + alpha01) / 3 | 0;\n    }\n\n    isDefaultDecode(decodeMap, bpc) {\n      return true;\n    }\n\n    get usesZeroToOneRange() {\n      return (0, _util.shadow)(this, \"usesZeroToOneRange\", false);\n    }\n\n  }\n\n  return LabCS;\n}();\n\n/***/ }),\n/* 24 */\n/***/ ((__unused_webpack_module, exports, __w_pdfjs_require__) => {\n\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.LocalTilingPatternCache = exports.LocalImageCache = exports.LocalGStateCache = exports.LocalFunctionCache = exports.LocalColorSpaceCache = exports.GlobalImageCache = void 0;\n\nvar _util = __w_pdfjs_require__(2);\n\nvar _primitives = __w_pdfjs_require__(5);\n\nclass BaseLocalCache {\n  constructor(options) {\n    if (this.constructor === BaseLocalCache) {\n      (0, _util.unreachable)(\"Cannot initialize BaseLocalCache.\");\n    }\n\n    if (!options || !options.onlyRefs) {\n      this._nameRefMap = new Map();\n      this._imageMap = new Map();\n    }\n\n    this._imageCache = new _primitives.RefSetCache();\n  }\n\n  getByName(name) {\n    const ref = this._nameRefMap.get(name);\n\n    if (ref) {\n      return this.getByRef(ref);\n    }\n\n    return this._imageMap.get(name) || null;\n  }\n\n  getByRef(ref) {\n    return this._imageCache.get(ref) || null;\n  }\n\n  set(name, ref, data) {\n    (0, _util.unreachable)(\"Abstract method `set` called.\");\n  }\n\n}\n\nclass LocalImageCache extends BaseLocalCache {\n  set(name, ref = null, data) {\n    if (!name) {\n      throw new Error('LocalImageCache.set - expected \"name\" argument.');\n    }\n\n    if (ref) {\n      if (this._imageCache.has(ref)) {\n        return;\n      }\n\n      this._nameRefMap.set(name, ref);\n\n      this._imageCache.put(ref, data);\n\n      return;\n    }\n\n    if (this._imageMap.has(name)) {\n      return;\n    }\n\n    this._imageMap.set(name, data);\n  }\n\n}\n\nexports.LocalImageCache = LocalImageCache;\n\nclass LocalColorSpaceCache extends BaseLocalCache {\n  set(name = null, ref = null, data) {\n    if (!name && !ref) {\n      throw new Error('LocalColorSpaceCache.set - expected \"name\" and/or \"ref\" argument.');\n    }\n\n    if (ref) {\n      if (this._imageCache.has(ref)) {\n        return;\n      }\n\n      if (name) {\n        this._nameRefMap.set(name, ref);\n      }\n\n      this._imageCache.put(ref, data);\n\n      return;\n    }\n\n    if (this._imageMap.has(name)) {\n      return;\n    }\n\n    this._imageMap.set(name, data);\n  }\n\n}\n\nexports.LocalColorSpaceCache = LocalColorSpaceCache;\n\nclass LocalFunctionCache extends BaseLocalCache {\n  constructor(options) {\n    super({\n      onlyRefs: true\n    });\n  }\n\n  getByName(name) {\n    (0, _util.unreachable)(\"Should not call `getByName` method.\");\n  }\n\n  set(name = null, ref, data) {\n    if (!ref) {\n      throw new Error('LocalFunctionCache.set - expected \"ref\" argument.');\n    }\n\n    if (this._imageCache.has(ref)) {\n      return;\n    }\n\n    this._imageCache.put(ref, data);\n  }\n\n}\n\nexports.LocalFunctionCache = LocalFunctionCache;\n\nclass LocalGStateCache extends BaseLocalCache {\n  set(name, ref = null, data) {\n    if (!name) {\n      throw new Error('LocalGStateCache.set - expected \"name\" argument.');\n    }\n\n    if (ref) {\n      if (this._imageCache.has(ref)) {\n        return;\n      }\n\n      this._nameRefMap.set(name, ref);\n\n      this._imageCache.put(ref, data);\n\n      return;\n    }\n\n    if (this._imageMap.has(name)) {\n      return;\n    }\n\n    this._imageMap.set(name, data);\n  }\n\n}\n\nexports.LocalGStateCache = LocalGStateCache;\n\nclass LocalTilingPatternCache extends BaseLocalCache {\n  set(name, ref = null, data) {\n    if (!name) {\n      throw new Error('LocalTilingPatternCache.set - expected \"name\" argument.');\n    }\n\n    if (ref) {\n      if (this._imageCache.has(ref)) {\n        return;\n      }\n\n      this._nameRefMap.set(name, ref);\n\n      this._imageCache.put(ref, data);\n\n      return;\n    }\n\n    if (this._imageMap.has(name)) {\n      return;\n    }\n\n    this._imageMap.set(name, data);\n  }\n\n}\n\nexports.LocalTilingPatternCache = LocalTilingPatternCache;\n\nclass GlobalImageCache {\n  static get NUM_PAGES_THRESHOLD() {\n    return (0, _util.shadow)(this, \"NUM_PAGES_THRESHOLD\", 2);\n  }\n\n  static get MAX_IMAGES_TO_CACHE() {\n    return (0, _util.shadow)(this, \"MAX_IMAGES_TO_CACHE\", 10);\n  }\n\n  constructor() {\n    this._refCache = new _primitives.RefSetCache();\n    this._imageCache = new _primitives.RefSetCache();\n  }\n\n  shouldCache(ref, pageIndex) {\n    const pageIndexSet = this._refCache.get(ref);\n\n    const numPages = pageIndexSet ? pageIndexSet.size + (pageIndexSet.has(pageIndex) ? 0 : 1) : 1;\n\n    if (numPages < GlobalImageCache.NUM_PAGES_THRESHOLD) {\n      return false;\n    }\n\n    if (!this._imageCache.has(ref) && this._imageCache.size >= GlobalImageCache.MAX_IMAGES_TO_CACHE) {\n      return false;\n    }\n\n    return true;\n  }\n\n  addPageIndex(ref, pageIndex) {\n    let pageIndexSet = this._refCache.get(ref);\n\n    if (!pageIndexSet) {\n      pageIndexSet = new Set();\n\n      this._refCache.put(ref, pageIndexSet);\n    }\n\n    pageIndexSet.add(pageIndex);\n  }\n\n  getData(ref, pageIndex) {\n    const pageIndexSet = this._refCache.get(ref);\n\n    if (!pageIndexSet) {\n      return null;\n    }\n\n    if (pageIndexSet.size < GlobalImageCache.NUM_PAGES_THRESHOLD) {\n      return null;\n    }\n\n    if (!this._imageCache.has(ref)) {\n      return null;\n    }\n\n    pageIndexSet.add(pageIndex);\n    return this._imageCache.get(ref);\n  }\n\n  setData(ref, data) {\n    if (!this._refCache.has(ref)) {\n      throw new Error('GlobalImageCache.setData - expected \"addPageIndex\" to have been called.');\n    }\n\n    if (this._imageCache.has(ref)) {\n      return;\n    }\n\n    if (this._imageCache.size >= GlobalImageCache.MAX_IMAGES_TO_CACHE) {\n      (0, _util.info)(\"GlobalImageCache.setData - ignoring image above MAX_IMAGES_TO_CACHE.\");\n      return;\n    }\n\n    this._imageCache.put(ref, data);\n  }\n\n  clear(onlyData = false) {\n    if (!onlyData) {\n      this._refCache.clear();\n    }\n\n    this._imageCache.clear();\n  }\n\n}\n\nexports.GlobalImageCache = GlobalImageCache;\n\n/***/ }),\n/* 25 */\n/***/ ((__unused_webpack_module, exports, __w_pdfjs_require__) => {\n\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.getQuadPoints = getQuadPoints;\nexports.MarkupAnnotation = exports.AnnotationFactory = exports.AnnotationBorderStyle = exports.Annotation = void 0;\n\nvar _util = __w_pdfjs_require__(2);\n\nvar _obj = __w_pdfjs_require__(10);\n\nvar _core_utils = __w_pdfjs_require__(8);\n\nvar _default_appearance = __w_pdfjs_require__(26);\n\nvar _primitives = __w_pdfjs_require__(5);\n\nvar _colorspace = __w_pdfjs_require__(23);\n\nvar _operator_list = __w_pdfjs_require__(44);\n\nvar _stream = __w_pdfjs_require__(12);\n\nvar _writer = __w_pdfjs_require__(46);\n\nclass AnnotationFactory {\n  static create(xref, ref, pdfManager, idFactory) {\n    return pdfManager.ensureCatalog(\"acroForm\").then(acroForm => {\n      return pdfManager.ensure(this, \"_create\", [xref, ref, pdfManager, idFactory, acroForm]);\n    });\n  }\n\n  static _create(xref, ref, pdfManager, idFactory, acroForm) {\n    const dict = xref.fetchIfRef(ref);\n\n    if (!(0, _primitives.isDict)(dict)) {\n      return undefined;\n    }\n\n    const id = (0, _primitives.isRef)(ref) ? ref.toString() : `annot_${idFactory.createObjId()}`;\n    let subtype = dict.get(\"Subtype\");\n    subtype = (0, _primitives.isName)(subtype) ? subtype.name : null;\n    const parameters = {\n      xref,\n      ref,\n      dict,\n      subtype,\n      id,\n      pdfManager,\n      acroForm: acroForm instanceof _primitives.Dict ? acroForm : _primitives.Dict.empty\n    };\n\n    switch (subtype) {\n      case \"Link\":\n        return new LinkAnnotation(parameters);\n\n      case \"Text\":\n        return new TextAnnotation(parameters);\n\n      case \"Widget\":\n        let fieldType = (0, _core_utils.getInheritableProperty)({\n          dict,\n          key: \"FT\"\n        });\n        fieldType = (0, _primitives.isName)(fieldType) ? fieldType.name : null;\n\n        switch (fieldType) {\n          case \"Tx\":\n            return new TextWidgetAnnotation(parameters);\n\n          case \"Btn\":\n            return new ButtonWidgetAnnotation(parameters);\n\n          case \"Ch\":\n            return new ChoiceWidgetAnnotation(parameters);\n        }\n\n        (0, _util.warn)('Unimplemented widget field type \"' + fieldType + '\", ' + \"falling back to base field type.\");\n        return new WidgetAnnotation(parameters);\n\n      case \"Popup\":\n        return new PopupAnnotation(parameters);\n\n      case \"FreeText\":\n        return new FreeTextAnnotation(parameters);\n\n      case \"Line\":\n        return new LineAnnotation(parameters);\n\n      case \"Square\":\n        return new SquareAnnotation(parameters);\n\n      case \"Circle\":\n        return new CircleAnnotation(parameters);\n\n      case \"PolyLine\":\n        return new PolylineAnnotation(parameters);\n\n      case \"Polygon\":\n        return new PolygonAnnotation(parameters);\n\n      case \"Caret\":\n        return new CaretAnnotation(parameters);\n\n      case \"Ink\":\n        return new InkAnnotation(parameters);\n\n      case \"Highlight\":\n        return new HighlightAnnotation(parameters);\n\n      case \"Underline\":\n        return new UnderlineAnnotation(parameters);\n\n      case \"Squiggly\":\n        return new SquigglyAnnotation(parameters);\n\n      case \"StrikeOut\":\n        return new StrikeOutAnnotation(parameters);\n\n      case \"Stamp\":\n        return new StampAnnotation(parameters);\n\n      case \"FileAttachment\":\n        return new FileAttachmentAnnotation(parameters);\n\n      default:\n        if (!subtype) {\n          (0, _util.warn)(\"Annotation is missing the required /Subtype.\");\n        } else {\n          (0, _util.warn)('Unimplemented annotation type \"' + subtype + '\", ' + \"falling back to base annotation.\");\n        }\n\n        return new Annotation(parameters);\n    }\n  }\n\n}\n\nexports.AnnotationFactory = AnnotationFactory;\n\nfunction getQuadPoints(dict, rect) {\n  if (!dict.has(\"QuadPoints\")) {\n    return null;\n  }\n\n  const quadPoints = dict.getArray(\"QuadPoints\");\n\n  if (!Array.isArray(quadPoints) || quadPoints.length === 0 || quadPoints.length % 8 > 0) {\n    return null;\n  }\n\n  const quadPointsLists = [];\n\n  for (let i = 0, ii = quadPoints.length / 8; i < ii; i++) {\n    quadPointsLists.push([]);\n\n    for (let j = i * 8, jj = i * 8 + 8; j < jj; j += 2) {\n      const x = quadPoints[j];\n      const y = quadPoints[j + 1];\n\n      if (rect !== null && (x < rect[0] || x > rect[2] || y < rect[1] || y > rect[3])) {\n        return null;\n      }\n\n      quadPointsLists[i].push({\n        x,\n        y\n      });\n    }\n  }\n\n  return quadPointsLists.map(quadPointsList => {\n    const [minX, maxX, minY, maxY] = quadPointsList.reduce(([mX, MX, mY, MY], quadPoint) => [Math.min(mX, quadPoint.x), Math.max(MX, quadPoint.x), Math.min(mY, quadPoint.y), Math.max(MY, quadPoint.y)], [Number.MAX_VALUE, Number.MIN_VALUE, Number.MAX_VALUE, Number.MIN_VALUE]);\n    return [{\n      x: minX,\n      y: maxY\n    }, {\n      x: maxX,\n      y: maxY\n    }, {\n      x: minX,\n      y: minY\n    }, {\n      x: maxX,\n      y: minY\n    }];\n  });\n}\n\nfunction getTransformMatrix(rect, bbox, matrix) {\n  const [minX, minY, maxX, maxY] = _util.Util.getAxialAlignedBoundingBox(bbox, matrix);\n\n  if (minX === maxX || minY === maxY) {\n    return [1, 0, 0, 1, rect[0], rect[1]];\n  }\n\n  const xRatio = (rect[2] - rect[0]) / (maxX - minX);\n  const yRatio = (rect[3] - rect[1]) / (maxY - minY);\n  return [xRatio, 0, 0, yRatio, rect[0] - minX * xRatio, rect[1] - minY * yRatio];\n}\n\nclass Annotation {\n  constructor(params) {\n    const dict = params.dict;\n    this.setContents(dict.get(\"Contents\"));\n    this.setModificationDate(dict.get(\"M\"));\n    this.setFlags(dict.get(\"F\"));\n    this.setRectangle(dict.getArray(\"Rect\"));\n    this.setColor(dict.getArray(\"C\"));\n    this.setBorderStyle(dict);\n    this.setAppearance(dict);\n    this._streams = [];\n\n    if (this.appearance) {\n      this._streams.push(this.appearance);\n    }\n\n    this.data = {\n      annotationFlags: this.flags,\n      borderStyle: this.borderStyle,\n      color: this.color,\n      contents: this.contents,\n      hasAppearance: !!this.appearance,\n      id: params.id,\n      modificationDate: this.modificationDate,\n      rect: this.rectangle,\n      subtype: params.subtype\n    };\n    this._fallbackFontDict = null;\n  }\n\n  _hasFlag(flags, flag) {\n    return !!(flags & flag);\n  }\n\n  _isViewable(flags) {\n    return !this._hasFlag(flags, _util.AnnotationFlag.INVISIBLE) && !this._hasFlag(flags, _util.AnnotationFlag.NOVIEW);\n  }\n\n  _isPrintable(flags) {\n    return this._hasFlag(flags, _util.AnnotationFlag.PRINT) && !this._hasFlag(flags, _util.AnnotationFlag.INVISIBLE);\n  }\n\n  isHidden(annotationStorage) {\n    const data = annotationStorage && annotationStorage[this.data.id];\n\n    if (data && \"hidden\" in data) {\n      return data.hidden;\n    }\n\n    return this._hasFlag(this.flags, _util.AnnotationFlag.HIDDEN);\n  }\n\n  get viewable() {\n    if (this.data.quadPoints === null) {\n      return false;\n    }\n\n    if (this.flags === 0) {\n      return true;\n    }\n\n    return this._isViewable(this.flags);\n  }\n\n  get printable() {\n    if (this.data.quadPoints === null) {\n      return false;\n    }\n\n    if (this.flags === 0) {\n      return false;\n    }\n\n    return this._isPrintable(this.flags);\n  }\n\n  setContents(contents) {\n    this.contents = (0, _util.stringToPDFString)(contents || \"\");\n  }\n\n  setModificationDate(modificationDate) {\n    this.modificationDate = (0, _util.isString)(modificationDate) ? modificationDate : null;\n  }\n\n  setFlags(flags) {\n    this.flags = Number.isInteger(flags) && flags > 0 ? flags : 0;\n  }\n\n  hasFlag(flag) {\n    return this._hasFlag(this.flags, flag);\n  }\n\n  setRectangle(rectangle) {\n    if (Array.isArray(rectangle) && rectangle.length === 4) {\n      this.rectangle = _util.Util.normalizeRect(rectangle);\n    } else {\n      this.rectangle = [0, 0, 0, 0];\n    }\n  }\n\n  setColor(color) {\n    const rgbColor = new Uint8ClampedArray(3);\n\n    if (!Array.isArray(color)) {\n      this.color = rgbColor;\n      return;\n    }\n\n    switch (color.length) {\n      case 0:\n        this.color = null;\n        break;\n\n      case 1:\n        _colorspace.ColorSpace.singletons.gray.getRgbItem(color, 0, rgbColor, 0);\n\n        this.color = rgbColor;\n        break;\n\n      case 3:\n        _colorspace.ColorSpace.singletons.rgb.getRgbItem(color, 0, rgbColor, 0);\n\n        this.color = rgbColor;\n        break;\n\n      case 4:\n        _colorspace.ColorSpace.singletons.cmyk.getRgbItem(color, 0, rgbColor, 0);\n\n        this.color = rgbColor;\n        break;\n\n      default:\n        this.color = rgbColor;\n        break;\n    }\n  }\n\n  setBorderStyle(borderStyle) {\n    this.borderStyle = new AnnotationBorderStyle();\n\n    if (!(0, _primitives.isDict)(borderStyle)) {\n      return;\n    }\n\n    if (borderStyle.has(\"BS\")) {\n      const dict = borderStyle.get(\"BS\");\n      const dictType = dict.get(\"Type\");\n\n      if (!dictType || (0, _primitives.isName)(dictType, \"Border\")) {\n        this.borderStyle.setWidth(dict.get(\"W\"), this.rectangle);\n        this.borderStyle.setStyle(dict.get(\"S\"));\n        this.borderStyle.setDashArray(dict.getArray(\"D\"));\n      }\n    } else if (borderStyle.has(\"Border\")) {\n      const array = borderStyle.getArray(\"Border\");\n\n      if (Array.isArray(array) && array.length >= 3) {\n        this.borderStyle.setHorizontalCornerRadius(array[0]);\n        this.borderStyle.setVerticalCornerRadius(array[1]);\n        this.borderStyle.setWidth(array[2], this.rectangle);\n\n        if (array.length === 4) {\n          this.borderStyle.setDashArray(array[3]);\n        }\n      }\n    } else {\n      this.borderStyle.setWidth(0);\n    }\n  }\n\n  setAppearance(dict) {\n    this.appearance = null;\n    const appearanceStates = dict.get(\"AP\");\n\n    if (!(0, _primitives.isDict)(appearanceStates)) {\n      return;\n    }\n\n    const normalAppearanceState = appearanceStates.get(\"N\");\n\n    if ((0, _primitives.isStream)(normalAppearanceState)) {\n      this.appearance = normalAppearanceState;\n      return;\n    }\n\n    if (!(0, _primitives.isDict)(normalAppearanceState)) {\n      return;\n    }\n\n    const as = dict.get(\"AS\");\n\n    if (!(0, _primitives.isName)(as) || !normalAppearanceState.has(as.name)) {\n      return;\n    }\n\n    this.appearance = normalAppearanceState.get(as.name);\n  }\n\n  loadResources(keys) {\n    return this.appearance.dict.getAsync(\"Resources\").then(resources => {\n      if (!resources) {\n        return undefined;\n      }\n\n      const objectLoader = new _obj.ObjectLoader(resources, keys, resources.xref);\n      return objectLoader.load().then(function () {\n        return resources;\n      });\n    });\n  }\n\n  getOperatorList(evaluator, task, renderForms, annotationStorage) {\n    if (!this.appearance) {\n      return Promise.resolve(new _operator_list.OperatorList());\n    }\n\n    const appearance = this.appearance;\n    const data = this.data;\n    const appearanceDict = appearance.dict;\n    const resourcesPromise = this.loadResources([\"ExtGState\", \"ColorSpace\", \"Pattern\", \"Shading\", \"XObject\", \"Font\"]);\n    const bbox = appearanceDict.getArray(\"BBox\") || [0, 0, 1, 1];\n    const matrix = appearanceDict.getArray(\"Matrix\") || [1, 0, 0, 1, 0, 0];\n    const transform = getTransformMatrix(data.rect, bbox, matrix);\n    return resourcesPromise.then(resources => {\n      const opList = new _operator_list.OperatorList();\n      opList.addOp(_util.OPS.beginAnnotation, [data.rect, transform, matrix]);\n      return evaluator.getOperatorList({\n        stream: appearance,\n        task,\n        resources,\n        operatorList: opList,\n        fallbackFontDict: this._fallbackFontDict\n      }).then(() => {\n        opList.addOp(_util.OPS.endAnnotation, []);\n        this.reset();\n        return opList;\n      });\n    });\n  }\n\n  async save(evaluator, task, annotationStorage) {\n    return null;\n  }\n\n  getFieldObject() {\n    return null;\n  }\n\n  reset() {\n    for (const stream of this._streams) {\n      stream.reset();\n    }\n  }\n\n}\n\nexports.Annotation = Annotation;\n\nclass AnnotationBorderStyle {\n  constructor() {\n    this.width = 1;\n    this.style = _util.AnnotationBorderStyleType.SOLID;\n    this.dashArray = [3];\n    this.horizontalCornerRadius = 0;\n    this.verticalCornerRadius = 0;\n  }\n\n  setWidth(width, rect = [0, 0, 0, 0]) {\n    if ((0, _primitives.isName)(width)) {\n      this.width = 0;\n      return;\n    }\n\n    if (Number.isInteger(width)) {\n      if (width > 0) {\n        const maxWidth = (rect[2] - rect[0]) / 2;\n        const maxHeight = (rect[3] - rect[1]) / 2;\n\n        if (maxWidth > 0 && maxHeight > 0 && (width > maxWidth || width > maxHeight)) {\n          (0, _util.warn)(`AnnotationBorderStyle.setWidth - ignoring width: ${width}`);\n          width = 1;\n        }\n      }\n\n      this.width = width;\n    }\n  }\n\n  setStyle(style) {\n    if (!(0, _primitives.isName)(style)) {\n      return;\n    }\n\n    switch (style.name) {\n      case \"S\":\n        this.style = _util.AnnotationBorderStyleType.SOLID;\n        break;\n\n      case \"D\":\n        this.style = _util.AnnotationBorderStyleType.DASHED;\n        break;\n\n      case \"B\":\n        this.style = _util.AnnotationBorderStyleType.BEVELED;\n        break;\n\n      case \"I\":\n        this.style = _util.AnnotationBorderStyleType.INSET;\n        break;\n\n      case \"U\":\n        this.style = _util.AnnotationBorderStyleType.UNDERLINE;\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  setDashArray(dashArray) {\n    if (Array.isArray(dashArray) && dashArray.length > 0) {\n      let isValid = true;\n      let allZeros = true;\n\n      for (const element of dashArray) {\n        const validNumber = +element >= 0;\n\n        if (!validNumber) {\n          isValid = false;\n          break;\n        } else if (element > 0) {\n          allZeros = false;\n        }\n      }\n\n      if (isValid && !allZeros) {\n        this.dashArray = dashArray;\n      } else {\n        this.width = 0;\n      }\n    } else if (dashArray) {\n      this.width = 0;\n    }\n  }\n\n  setHorizontalCornerRadius(radius) {\n    if (Number.isInteger(radius)) {\n      this.horizontalCornerRadius = radius;\n    }\n  }\n\n  setVerticalCornerRadius(radius) {\n    if (Number.isInteger(radius)) {\n      this.verticalCornerRadius = radius;\n    }\n  }\n\n}\n\nexports.AnnotationBorderStyle = AnnotationBorderStyle;\n\nclass MarkupAnnotation extends Annotation {\n  constructor(parameters) {\n    super(parameters);\n    const dict = parameters.dict;\n\n    if (dict.has(\"IRT\")) {\n      const rawIRT = dict.getRaw(\"IRT\");\n      this.data.inReplyTo = (0, _primitives.isRef)(rawIRT) ? rawIRT.toString() : null;\n      const rt = dict.get(\"RT\");\n      this.data.replyType = (0, _primitives.isName)(rt) ? rt.name : _util.AnnotationReplyType.REPLY;\n    }\n\n    if (this.data.replyType === _util.AnnotationReplyType.GROUP) {\n      const parent = dict.get(\"IRT\");\n      this.data.title = (0, _util.stringToPDFString)(parent.get(\"T\") || \"\");\n      this.setContents(parent.get(\"Contents\"));\n      this.data.contents = this.contents;\n\n      if (!parent.has(\"CreationDate\")) {\n        this.data.creationDate = null;\n      } else {\n        this.setCreationDate(parent.get(\"CreationDate\"));\n        this.data.creationDate = this.creationDate;\n      }\n\n      if (!parent.has(\"M\")) {\n        this.data.modificationDate = null;\n      } else {\n        this.setModificationDate(parent.get(\"M\"));\n        this.data.modificationDate = this.modificationDate;\n      }\n\n      this.data.hasPopup = parent.has(\"Popup\");\n\n      if (!parent.has(\"C\")) {\n        this.data.color = null;\n      } else {\n        this.setColor(parent.getArray(\"C\"));\n        this.data.color = this.color;\n      }\n    } else {\n      this.data.title = (0, _util.stringToPDFString)(dict.get(\"T\") || \"\");\n      this.setCreationDate(dict.get(\"CreationDate\"));\n      this.data.creationDate = this.creationDate;\n      this.data.hasPopup = dict.has(\"Popup\");\n\n      if (!dict.has(\"C\")) {\n        this.data.color = null;\n      }\n    }\n  }\n\n  setCreationDate(creationDate) {\n    this.creationDate = (0, _util.isString)(creationDate) ? creationDate : null;\n  }\n\n  _setDefaultAppearance({\n    xref,\n    extra,\n    strokeColor,\n    fillColor,\n    blendMode,\n    pointsCallback\n  }) {\n    let minX = Number.MAX_VALUE;\n    let minY = Number.MAX_VALUE;\n    let maxX = Number.MIN_VALUE;\n    let maxY = Number.MIN_VALUE;\n    const buffer = [\"q\"];\n\n    if (extra) {\n      buffer.push(extra);\n    }\n\n    if (strokeColor) {\n      buffer.push(`${strokeColor[0]} ${strokeColor[1]} ${strokeColor[2]} RG`);\n    }\n\n    if (fillColor) {\n      buffer.push(`${fillColor[0]} ${fillColor[1]} ${fillColor[2]} rg`);\n    }\n\n    for (const points of this.data.quadPoints) {\n      const [mX, MX, mY, MY] = pointsCallback(buffer, points);\n      minX = Math.min(minX, mX);\n      maxX = Math.max(maxX, MX);\n      minY = Math.min(minY, mY);\n      maxY = Math.max(maxY, MY);\n    }\n\n    buffer.push(\"Q\");\n    const formDict = new _primitives.Dict(xref);\n    const appearanceStreamDict = new _primitives.Dict(xref);\n    appearanceStreamDict.set(\"Subtype\", _primitives.Name.get(\"Form\"));\n    const appearanceStream = new _stream.StringStream(buffer.join(\" \"));\n    appearanceStream.dict = appearanceStreamDict;\n    formDict.set(\"Fm0\", appearanceStream);\n    const gsDict = new _primitives.Dict(xref);\n\n    if (blendMode) {\n      gsDict.set(\"BM\", _primitives.Name.get(blendMode));\n    }\n\n    const stateDict = new _primitives.Dict(xref);\n    stateDict.set(\"GS0\", gsDict);\n    const resources = new _primitives.Dict(xref);\n    resources.set(\"ExtGState\", stateDict);\n    resources.set(\"XObject\", formDict);\n    const appearanceDict = new _primitives.Dict(xref);\n    appearanceDict.set(\"Resources\", resources);\n    const bbox = this.data.rect = [minX, minY, maxX, maxY];\n    appearanceDict.set(\"BBox\", bbox);\n    this.appearance = new _stream.StringStream(\"/GS0 gs /Fm0 Do\");\n    this.appearance.dict = appearanceDict;\n\n    this._streams.push(this.appearance, appearanceStream);\n  }\n\n}\n\nexports.MarkupAnnotation = MarkupAnnotation;\n\nclass WidgetAnnotation extends Annotation {\n  constructor(params) {\n    super(params);\n    const dict = params.dict;\n    const data = this.data;\n    this.ref = params.ref;\n    data.annotationType = _util.AnnotationType.WIDGET;\n    data.fieldName = this._constructFieldName(dict);\n    data.actions = (0, _core_utils.collectActions)(params.xref, dict, _util.AnnotationActionEventType);\n    const fieldValue = (0, _core_utils.getInheritableProperty)({\n      dict,\n      key: \"V\",\n      getArray: true\n    });\n    data.fieldValue = this._decodeFormValue(fieldValue);\n    const defaultFieldValue = (0, _core_utils.getInheritableProperty)({\n      dict,\n      key: \"DV\",\n      getArray: true\n    });\n    data.defaultFieldValue = this._decodeFormValue(defaultFieldValue);\n    data.alternativeText = (0, _util.stringToPDFString)(dict.get(\"TU\") || \"\");\n    const defaultAppearance = (0, _core_utils.getInheritableProperty)({\n      dict,\n      key: \"DA\"\n    }) || params.acroForm.get(\"DA\") || \"\";\n    data.defaultAppearance = (0, _util.isString)(defaultAppearance) ? defaultAppearance : \"\";\n    data.defaultAppearanceData = (0, _default_appearance.parseDefaultAppearance)(data.defaultAppearance);\n    const fieldType = (0, _core_utils.getInheritableProperty)({\n      dict,\n      key: \"FT\"\n    });\n    data.fieldType = (0, _primitives.isName)(fieldType) ? fieldType.name : null;\n    const localResources = (0, _core_utils.getInheritableProperty)({\n      dict,\n      key: \"DR\"\n    });\n    const acroFormResources = params.acroForm.get(\"DR\");\n    const appearanceResources = this.appearance && this.appearance.dict.get(\"Resources\");\n    this._fieldResources = {\n      localResources,\n      acroFormResources,\n      appearanceResources,\n      mergedResources: _primitives.Dict.merge({\n        xref: params.xref,\n        dictArray: [localResources, appearanceResources, acroFormResources],\n        mergeSubDicts: true\n      })\n    };\n    data.fieldFlags = (0, _core_utils.getInheritableProperty)({\n      dict,\n      key: \"Ff\"\n    });\n\n    if (!Number.isInteger(data.fieldFlags) || data.fieldFlags < 0) {\n      data.fieldFlags = 0;\n    }\n\n    data.readOnly = this.hasFieldFlag(_util.AnnotationFieldFlag.READONLY);\n    data.hidden = this._hasFlag(data.annotationFlags, _util.AnnotationFlag.HIDDEN);\n\n    if (data.fieldType === \"Sig\") {\n      data.fieldValue = null;\n      this.setFlags(_util.AnnotationFlag.HIDDEN);\n      data.hidden = true;\n    }\n  }\n\n  _constructFieldName(dict) {\n    if (!dict.has(\"T\") && !dict.has(\"Parent\")) {\n      (0, _util.warn)(\"Unknown field name, falling back to empty field name.\");\n      return \"\";\n    }\n\n    if (!dict.has(\"Parent\")) {\n      return (0, _util.stringToPDFString)(dict.get(\"T\"));\n    }\n\n    const fieldName = [];\n\n    if (dict.has(\"T\")) {\n      fieldName.unshift((0, _util.stringToPDFString)(dict.get(\"T\")));\n    }\n\n    let loopDict = dict;\n\n    while (loopDict.has(\"Parent\")) {\n      loopDict = loopDict.get(\"Parent\");\n\n      if (!(0, _primitives.isDict)(loopDict)) {\n        break;\n      }\n\n      if (loopDict.has(\"T\")) {\n        fieldName.unshift((0, _util.stringToPDFString)(loopDict.get(\"T\")));\n      }\n    }\n\n    return fieldName.join(\".\");\n  }\n\n  _decodeFormValue(formValue) {\n    if (Array.isArray(formValue)) {\n      return formValue.filter(item => (0, _util.isString)(item)).map(item => (0, _util.stringToPDFString)(item));\n    } else if ((0, _primitives.isName)(formValue)) {\n      return (0, _util.stringToPDFString)(formValue.name);\n    } else if ((0, _util.isString)(formValue)) {\n      return (0, _util.stringToPDFString)(formValue);\n    }\n\n    return null;\n  }\n\n  hasFieldFlag(flag) {\n    return !!(this.data.fieldFlags & flag);\n  }\n\n  getOperatorList(evaluator, task, renderForms, annotationStorage) {\n    if (renderForms) {\n      return Promise.resolve(new _operator_list.OperatorList());\n    }\n\n    if (!this._hasText) {\n      return super.getOperatorList(evaluator, task, renderForms, annotationStorage);\n    }\n\n    return this._getAppearance(evaluator, task, annotationStorage).then(content => {\n      if (this.appearance && content === null) {\n        return super.getOperatorList(evaluator, task, renderForms, annotationStorage);\n      }\n\n      const operatorList = new _operator_list.OperatorList();\n\n      if (!this.data.defaultAppearance || content === null) {\n        return operatorList;\n      }\n\n      const matrix = [1, 0, 0, 1, 0, 0];\n      const bbox = [0, 0, this.data.rect[2] - this.data.rect[0], this.data.rect[3] - this.data.rect[1]];\n      const transform = getTransformMatrix(this.data.rect, bbox, matrix);\n      operatorList.addOp(_util.OPS.beginAnnotation, [this.data.rect, transform, matrix]);\n      const stream = new _stream.StringStream(content);\n      return evaluator.getOperatorList({\n        stream,\n        task,\n        resources: this._fieldResources.mergedResources,\n        operatorList\n      }).then(function () {\n        operatorList.addOp(_util.OPS.endAnnotation, []);\n        return operatorList;\n      });\n    });\n  }\n\n  async save(evaluator, task, annotationStorage) {\n    const value = annotationStorage[this.data.id] && annotationStorage[this.data.id].value;\n\n    if (value === this.data.fieldValue || value === undefined) {\n      return null;\n    }\n\n    let appearance = await this._getAppearance(evaluator, task, annotationStorage);\n\n    if (appearance === null) {\n      return null;\n    }\n\n    const {\n      xref\n    } = evaluator;\n    const dict = xref.fetchIfRef(this.ref);\n\n    if (!(0, _primitives.isDict)(dict)) {\n      return null;\n    }\n\n    const bbox = [0, 0, this.data.rect[2] - this.data.rect[0], this.data.rect[3] - this.data.rect[1]];\n    const xfa = {\n      path: (0, _util.stringToPDFString)(dict.get(\"T\") || \"\"),\n      value\n    };\n    const newRef = xref.getNewRef();\n    const AP = new _primitives.Dict(xref);\n    AP.set(\"N\", newRef);\n    const encrypt = xref.encrypt;\n    let originalTransform = null;\n    let newTransform = null;\n\n    if (encrypt) {\n      originalTransform = encrypt.createCipherTransform(this.ref.num, this.ref.gen);\n      newTransform = encrypt.createCipherTransform(newRef.num, newRef.gen);\n      appearance = newTransform.encryptString(appearance);\n    }\n\n    dict.set(\"V\", (0, _util.isAscii)(value) ? value : (0, _util.stringToUTF16BEString)(value));\n    dict.set(\"AP\", AP);\n    dict.set(\"M\", `D:${(0, _util.getModificationDate)()}`);\n    const appearanceDict = new _primitives.Dict(xref);\n    appearanceDict.set(\"Length\", appearance.length);\n    appearanceDict.set(\"Subtype\", _primitives.Name.get(\"Form\"));\n    appearanceDict.set(\"Resources\", this._getSaveFieldResources(xref));\n    appearanceDict.set(\"BBox\", bbox);\n    const bufferOriginal = [`${this.ref.num} ${this.ref.gen} obj\\n`];\n    (0, _writer.writeDict)(dict, bufferOriginal, originalTransform);\n    bufferOriginal.push(\"\\nendobj\\n\");\n    const bufferNew = [`${newRef.num} ${newRef.gen} obj\\n`];\n    (0, _writer.writeDict)(appearanceDict, bufferNew, newTransform);\n    bufferNew.push(\" stream\\n\");\n    bufferNew.push(appearance);\n    bufferNew.push(\"\\nendstream\\nendobj\\n\");\n    return [{\n      ref: this.ref,\n      data: bufferOriginal.join(\"\"),\n      xfa\n    }, {\n      ref: newRef,\n      data: bufferNew.join(\"\"),\n      xfa: null\n    }];\n  }\n\n  async _getAppearance(evaluator, task, annotationStorage) {\n    const isPassword = this.hasFieldFlag(_util.AnnotationFieldFlag.PASSWORD);\n\n    if (!annotationStorage || isPassword) {\n      return null;\n    }\n\n    const value = annotationStorage[this.data.id] && annotationStorage[this.data.id].value;\n\n    if (value === undefined) {\n      return null;\n    }\n\n    if (value === \"\") {\n      return \"\";\n    }\n\n    const defaultPadding = 2;\n    const hPadding = defaultPadding;\n    const totalHeight = this.data.rect[3] - this.data.rect[1];\n    const totalWidth = this.data.rect[2] - this.data.rect[0];\n\n    if (!this.data.defaultAppearance) {\n      this.data.defaultAppearance = \"/Helvetica 0 Tf 0 g\";\n      this.data.defaultAppearanceData = (0, _default_appearance.parseDefaultAppearance)(this.data.defaultAppearance);\n    }\n\n    const font = await this._getFontData(evaluator, task);\n\n    const fontSize = this._computeFontSize(font, totalHeight);\n\n    let descent = font.descent;\n\n    if (isNaN(descent)) {\n      descent = 0;\n    }\n\n    const vPadding = defaultPadding + Math.abs(descent) * fontSize;\n    const defaultAppearance = this.data.defaultAppearance;\n    const alignment = this.data.textAlignment;\n\n    if (this.data.multiLine) {\n      return this._getMultilineAppearance(defaultAppearance, value, font, fontSize, totalWidth, totalHeight, alignment, hPadding, vPadding);\n    }\n\n    const encodedString = font.encodeString(value).join(\"\");\n\n    if (this.data.comb) {\n      return this._getCombAppearance(defaultAppearance, font, encodedString, totalWidth, hPadding, vPadding);\n    }\n\n    if (alignment === 0 || alignment > 2) {\n      return \"/Tx BMC q BT \" + defaultAppearance + ` 1 0 0 1 ${hPadding} ${vPadding} Tm (${(0, _util.escapeString)(encodedString)}) Tj` + \" ET Q EMC\";\n    }\n\n    const renderedText = this._renderText(encodedString, font, fontSize, totalWidth, alignment, hPadding, vPadding);\n\n    return \"/Tx BMC q BT \" + defaultAppearance + ` 1 0 0 1 0 0 Tm ${renderedText}` + \" ET Q EMC\";\n  }\n\n  async _getFontData(evaluator, task) {\n    const operatorList = new _operator_list.OperatorList();\n    const initialState = {\n      font: null,\n\n      clone() {\n        return this;\n      }\n\n    };\n    const {\n      fontName,\n      fontSize\n    } = this.data.defaultAppearanceData;\n    await evaluator.handleSetFont(this._fieldResources.mergedResources, [fontName, fontSize], null, operatorList, task, initialState, null);\n    return initialState.font;\n  }\n\n  _computeFontSize(font, height) {\n    let fontSize = this.data.defaultAppearanceData.fontSize;\n\n    if (!fontSize) {\n      const {\n        fontColor,\n        fontName\n      } = this.data.defaultAppearanceData;\n      let capHeight;\n\n      if (font.capHeight) {\n        capHeight = font.capHeight;\n      } else {\n        const glyphs = font.charsToGlyphs(font.encodeString(\"M\").join(\"\"));\n\n        if (glyphs.length === 1 && glyphs[0].width) {\n          const em = glyphs[0].width / 1000;\n          capHeight = 0.7 * em;\n        } else {\n          capHeight = 0.7;\n        }\n      }\n\n      fontSize = Math.max(1, Math.floor(height / (1.5 * capHeight)));\n      this.data.defaultAppearance = (0, _default_appearance.createDefaultAppearance)({\n        fontSize,\n        fontName,\n        fontColor\n      });\n    }\n\n    return fontSize;\n  }\n\n  _renderText(text, font, fontSize, totalWidth, alignment, hPadding, vPadding) {\n    const glyphs = font.charsToGlyphs(text);\n    const scale = fontSize / 1000;\n    let width = 0;\n\n    for (const glyph of glyphs) {\n      width += glyph.width * scale;\n    }\n\n    let shift;\n\n    if (alignment === 1) {\n      shift = (totalWidth - width) / 2;\n    } else if (alignment === 2) {\n      shift = totalWidth - width - hPadding;\n    } else {\n      shift = hPadding;\n    }\n\n    shift = shift.toFixed(2);\n    vPadding = vPadding.toFixed(2);\n    return `${shift} ${vPadding} Td (${(0, _util.escapeString)(text)}) Tj`;\n  }\n\n  _getSaveFieldResources(xref) {\n    const {\n      localResources,\n      appearanceResources,\n      acroFormResources\n    } = this._fieldResources;\n    const fontNameStr = this.data.defaultAppearanceData && this.data.defaultAppearanceData.fontName.name;\n\n    if (!fontNameStr) {\n      return localResources || _primitives.Dict.empty;\n    }\n\n    for (const resources of [localResources, appearanceResources]) {\n      if (resources instanceof _primitives.Dict) {\n        const localFont = resources.get(\"Font\");\n\n        if (localFont instanceof _primitives.Dict && localFont.has(fontNameStr)) {\n          return resources;\n        }\n      }\n    }\n\n    if (acroFormResources instanceof _primitives.Dict) {\n      const acroFormFont = acroFormResources.get(\"Font\");\n\n      if (acroFormFont instanceof _primitives.Dict && acroFormFont.has(fontNameStr)) {\n        const subFontDict = new _primitives.Dict(xref);\n        subFontDict.set(fontNameStr, acroFormFont.getRaw(fontNameStr));\n        const subResourcesDict = new _primitives.Dict(xref);\n        subResourcesDict.set(\"Font\", subFontDict);\n        return _primitives.Dict.merge({\n          xref,\n          dictArray: [subResourcesDict, localResources],\n          mergeSubDicts: true\n        });\n      }\n    }\n\n    return localResources || _primitives.Dict.empty;\n  }\n\n  getFieldObject() {\n    if (this.data.fieldType === \"Sig\") {\n      return {\n        id: this.data.id,\n        value: null,\n        type: \"signature\"\n      };\n    }\n\n    return null;\n  }\n\n}\n\nclass TextWidgetAnnotation extends WidgetAnnotation {\n  constructor(params) {\n    super(params);\n    this._hasText = true;\n    const dict = params.dict;\n\n    if (!(0, _util.isString)(this.data.fieldValue)) {\n      this.data.fieldValue = \"\";\n    }\n\n    let alignment = (0, _core_utils.getInheritableProperty)({\n      dict,\n      key: \"Q\"\n    });\n\n    if (!Number.isInteger(alignment) || alignment < 0 || alignment > 2) {\n      alignment = null;\n    }\n\n    this.data.textAlignment = alignment;\n    let maximumLength = (0, _core_utils.getInheritableProperty)({\n      dict,\n      key: \"MaxLen\"\n    });\n\n    if (!Number.isInteger(maximumLength) || maximumLength < 0) {\n      maximumLength = null;\n    }\n\n    this.data.maxLen = maximumLength;\n    this.data.multiLine = this.hasFieldFlag(_util.AnnotationFieldFlag.MULTILINE);\n    this.data.comb = this.hasFieldFlag(_util.AnnotationFieldFlag.COMB) && !this.hasFieldFlag(_util.AnnotationFieldFlag.MULTILINE) && !this.hasFieldFlag(_util.AnnotationFieldFlag.PASSWORD) && !this.hasFieldFlag(_util.AnnotationFieldFlag.FILESELECT) && this.data.maxLen !== null;\n  }\n\n  _getCombAppearance(defaultAppearance, font, text, width, hPadding, vPadding) {\n    const combWidth = (width / this.data.maxLen).toFixed(2);\n    const buf = [];\n    const positions = font.getCharPositions(text);\n\n    for (const [start, end] of positions) {\n      buf.push(`(${(0, _util.escapeString)(text.substring(start, end))}) Tj`);\n    }\n\n    const renderedComb = buf.join(` ${combWidth} 0 Td `);\n    return \"/Tx BMC q BT \" + defaultAppearance + ` 1 0 0 1 ${hPadding} ${vPadding} Tm ${renderedComb}` + \" ET Q EMC\";\n  }\n\n  _getMultilineAppearance(defaultAppearance, text, font, fontSize, width, height, alignment, hPadding, vPadding) {\n    const lines = text.split(/\\r\\n|\\r|\\n/);\n    const buf = [];\n    const totalWidth = width - 2 * hPadding;\n\n    for (const line of lines) {\n      const chunks = this._splitLine(line, font, fontSize, totalWidth);\n\n      for (const chunk of chunks) {\n        const padding = buf.length === 0 ? hPadding : 0;\n        buf.push(this._renderText(chunk, font, fontSize, width, alignment, padding, -fontSize));\n      }\n    }\n\n    const renderedText = buf.join(\"\\n\");\n    return \"/Tx BMC q BT \" + defaultAppearance + ` 1 0 0 1 0 ${height} Tm ${renderedText}` + \" ET Q EMC\";\n  }\n\n  _splitLine(line, font, fontSize, width) {\n    line = font.encodeString(line).join(\"\");\n    const glyphs = font.charsToGlyphs(line);\n\n    if (glyphs.length <= 1) {\n      return [line];\n    }\n\n    const positions = font.getCharPositions(line);\n    const scale = fontSize / 1000;\n    const chunks = [];\n    let lastSpacePosInStringStart = -1,\n        lastSpacePosInStringEnd = -1,\n        lastSpacePos = -1,\n        startChunk = 0,\n        currentWidth = 0;\n\n    for (let i = 0, ii = glyphs.length; i < ii; i++) {\n      const [start, end] = positions[i];\n      const glyph = glyphs[i];\n      const glyphWidth = glyph.width * scale;\n\n      if (glyph.unicode === \" \") {\n        if (currentWidth + glyphWidth > width) {\n          chunks.push(line.substring(startChunk, start));\n          startChunk = start;\n          currentWidth = glyphWidth;\n          lastSpacePosInStringStart = -1;\n          lastSpacePos = -1;\n        } else {\n          currentWidth += glyphWidth;\n          lastSpacePosInStringStart = start;\n          lastSpacePosInStringEnd = end;\n          lastSpacePos = i;\n        }\n      } else {\n        if (currentWidth + glyphWidth > width) {\n          if (lastSpacePosInStringStart !== -1) {\n            chunks.push(line.substring(startChunk, lastSpacePosInStringEnd));\n            startChunk = lastSpacePosInStringEnd;\n            i = lastSpacePos + 1;\n            lastSpacePosInStringStart = -1;\n            currentWidth = 0;\n          } else {\n            chunks.push(line.substring(startChunk, start));\n            startChunk = start;\n            currentWidth = glyphWidth;\n          }\n        } else {\n          currentWidth += glyphWidth;\n        }\n      }\n    }\n\n    if (startChunk < line.length) {\n      chunks.push(line.substring(startChunk, line.length));\n    }\n\n    return chunks;\n  }\n\n  getFieldObject() {\n    return {\n      id: this.data.id,\n      value: this.data.fieldValue,\n      defaultValue: this.data.defaultFieldValue,\n      multiline: this.data.multiLine,\n      password: this.hasFieldFlag(_util.AnnotationFieldFlag.PASSWORD),\n      charLimit: this.data.maxLen,\n      comb: this.data.comb,\n      editable: !this.data.readOnly,\n      hidden: this.data.hidden,\n      name: this.data.fieldName,\n      rect: this.data.rect,\n      actions: this.data.actions,\n      type: \"text\"\n    };\n  }\n\n}\n\nclass ButtonWidgetAnnotation extends WidgetAnnotation {\n  constructor(params) {\n    super(params);\n    this.checkedAppearance = null;\n    this.uncheckedAppearance = null;\n    this.data.checkBox = !this.hasFieldFlag(_util.AnnotationFieldFlag.RADIO) && !this.hasFieldFlag(_util.AnnotationFieldFlag.PUSHBUTTON);\n    this.data.radioButton = this.hasFieldFlag(_util.AnnotationFieldFlag.RADIO) && !this.hasFieldFlag(_util.AnnotationFieldFlag.PUSHBUTTON);\n    this.data.pushButton = this.hasFieldFlag(_util.AnnotationFieldFlag.PUSHBUTTON);\n    this.data.isTooltipOnly = false;\n\n    if (this.data.checkBox) {\n      this._processCheckBox(params);\n    } else if (this.data.radioButton) {\n      this._processRadioButton(params);\n    } else if (this.data.pushButton) {\n      this._processPushButton(params);\n    } else {\n      (0, _util.warn)(\"Invalid field flags for button widget annotation\");\n    }\n  }\n\n  getOperatorList(evaluator, task, renderForms, annotationStorage) {\n    if (this.data.pushButton) {\n      return super.getOperatorList(evaluator, task, false, annotationStorage);\n    }\n\n    if (annotationStorage) {\n      const value = annotationStorage[this.data.id] && annotationStorage[this.data.id].value;\n\n      if (value === undefined) {\n        return super.getOperatorList(evaluator, task, renderForms, annotationStorage);\n      }\n\n      let appearance;\n\n      if (value) {\n        appearance = this.checkedAppearance;\n      } else {\n        appearance = this.uncheckedAppearance;\n      }\n\n      if (appearance) {\n        const savedAppearance = this.appearance;\n        this.appearance = appearance;\n        const operatorList = super.getOperatorList(evaluator, task, renderForms, annotationStorage);\n        this.appearance = savedAppearance;\n        return operatorList;\n      }\n\n      return Promise.resolve(new _operator_list.OperatorList());\n    }\n\n    return super.getOperatorList(evaluator, task, renderForms, annotationStorage);\n  }\n\n  async save(evaluator, task, annotationStorage) {\n    if (this.data.checkBox) {\n      return this._saveCheckbox(evaluator, task, annotationStorage);\n    }\n\n    if (this.data.radioButton) {\n      return this._saveRadioButton(evaluator, task, annotationStorage);\n    }\n\n    return null;\n  }\n\n  async _saveCheckbox(evaluator, task, annotationStorage) {\n    const value = annotationStorage[this.data.id] && annotationStorage[this.data.id].value;\n\n    if (value === undefined) {\n      return null;\n    }\n\n    const defaultValue = this.data.fieldValue && this.data.fieldValue !== \"Off\";\n\n    if (defaultValue === value) {\n      return null;\n    }\n\n    const dict = evaluator.xref.fetchIfRef(this.ref);\n\n    if (!(0, _primitives.isDict)(dict)) {\n      return null;\n    }\n\n    const xfa = {\n      path: (0, _util.stringToPDFString)(dict.get(\"T\") || \"\"),\n      value: value ? this.data.exportValue : \"\"\n    };\n\n    const name = _primitives.Name.get(value ? this.data.exportValue : \"Off\");\n\n    dict.set(\"V\", name);\n    dict.set(\"AS\", name);\n    dict.set(\"M\", `D:${(0, _util.getModificationDate)()}`);\n    const encrypt = evaluator.xref.encrypt;\n    let originalTransform = null;\n\n    if (encrypt) {\n      originalTransform = encrypt.createCipherTransform(this.ref.num, this.ref.gen);\n    }\n\n    const buffer = [`${this.ref.num} ${this.ref.gen} obj\\n`];\n    (0, _writer.writeDict)(dict, buffer, originalTransform);\n    buffer.push(\"\\nendobj\\n\");\n    return [{\n      ref: this.ref,\n      data: buffer.join(\"\"),\n      xfa\n    }];\n  }\n\n  async _saveRadioButton(evaluator, task, annotationStorage) {\n    const value = annotationStorage[this.data.id] && annotationStorage[this.data.id].value;\n\n    if (value === undefined) {\n      return null;\n    }\n\n    const defaultValue = this.data.fieldValue === this.data.buttonValue;\n\n    if (defaultValue === value) {\n      return null;\n    }\n\n    const dict = evaluator.xref.fetchIfRef(this.ref);\n\n    if (!(0, _primitives.isDict)(dict)) {\n      return null;\n    }\n\n    const xfa = {\n      path: (0, _util.stringToPDFString)(dict.get(\"T\") || \"\"),\n      value: value ? this.data.buttonValue : \"\"\n    };\n\n    const name = _primitives.Name.get(value ? this.data.buttonValue : \"Off\");\n\n    let parentBuffer = null;\n    const encrypt = evaluator.xref.encrypt;\n\n    if (value) {\n      if ((0, _primitives.isRef)(this.parent)) {\n        const parent = evaluator.xref.fetch(this.parent);\n        let parentTransform = null;\n\n        if (encrypt) {\n          parentTransform = encrypt.createCipherTransform(this.parent.num, this.parent.gen);\n        }\n\n        parent.set(\"V\", name);\n        parentBuffer = [`${this.parent.num} ${this.parent.gen} obj\\n`];\n        (0, _writer.writeDict)(parent, parentBuffer, parentTransform);\n        parentBuffer.push(\"\\nendobj\\n\");\n      } else if ((0, _primitives.isDict)(this.parent)) {\n        this.parent.set(\"V\", name);\n      }\n    }\n\n    dict.set(\"AS\", name);\n    dict.set(\"M\", `D:${(0, _util.getModificationDate)()}`);\n    let originalTransform = null;\n\n    if (encrypt) {\n      originalTransform = encrypt.createCipherTransform(this.ref.num, this.ref.gen);\n    }\n\n    const buffer = [`${this.ref.num} ${this.ref.gen} obj\\n`];\n    (0, _writer.writeDict)(dict, buffer, originalTransform);\n    buffer.push(\"\\nendobj\\n\");\n    const newRefs = [{\n      ref: this.ref,\n      data: buffer.join(\"\"),\n      xfa\n    }];\n\n    if (parentBuffer !== null) {\n      newRefs.push({\n        ref: this.parent,\n        data: parentBuffer.join(\"\"),\n        xfa: null\n      });\n    }\n\n    return newRefs;\n  }\n\n  _processCheckBox(params) {\n    const customAppearance = params.dict.get(\"AP\");\n\n    if (!(0, _primitives.isDict)(customAppearance)) {\n      return;\n    }\n\n    const normalAppearance = customAppearance.get(\"N\");\n\n    if (!(0, _primitives.isDict)(normalAppearance)) {\n      return;\n    }\n\n    const exportValues = normalAppearance.getKeys();\n\n    if (!exportValues.includes(\"Off\")) {\n      exportValues.push(\"Off\");\n    }\n\n    if (exportValues.length !== 2) {\n      return;\n    }\n\n    this.data.exportValue = exportValues[0] === \"Off\" ? exportValues[1] : exportValues[0];\n    this.checkedAppearance = normalAppearance.get(this.data.exportValue);\n    this.uncheckedAppearance = normalAppearance.get(\"Off\") || null;\n\n    this._streams.push(this.checkedAppearance);\n\n    if (this.uncheckedAppearance) {\n      this._streams.push(this.uncheckedAppearance);\n    }\n\n    this._fallbackFontDict = this.fallbackFontDict;\n  }\n\n  _processRadioButton(params) {\n    this.data.fieldValue = this.data.buttonValue = null;\n    const fieldParent = params.dict.get(\"Parent\");\n\n    if ((0, _primitives.isDict)(fieldParent)) {\n      this.parent = params.dict.getRaw(\"Parent\");\n      const fieldParentValue = fieldParent.get(\"V\");\n\n      if ((0, _primitives.isName)(fieldParentValue)) {\n        this.data.fieldValue = this._decodeFormValue(fieldParentValue);\n      }\n    }\n\n    const appearanceStates = params.dict.get(\"AP\");\n\n    if (!(0, _primitives.isDict)(appearanceStates)) {\n      return;\n    }\n\n    const normalAppearance = appearanceStates.get(\"N\");\n\n    if (!(0, _primitives.isDict)(normalAppearance)) {\n      return;\n    }\n\n    for (const key of normalAppearance.getKeys()) {\n      if (key !== \"Off\") {\n        this.data.buttonValue = this._decodeFormValue(key);\n        break;\n      }\n    }\n\n    this.checkedAppearance = normalAppearance.get(this.data.buttonValue);\n    this.uncheckedAppearance = normalAppearance.get(\"Off\") || null;\n\n    this._streams.push(this.checkedAppearance);\n\n    if (this.uncheckedAppearance) {\n      this._streams.push(this.uncheckedAppearance);\n    }\n\n    this._fallbackFontDict = this.fallbackFontDict;\n  }\n\n  _processPushButton(params) {\n    if (!params.dict.has(\"A\") && !params.dict.has(\"AA\") && !this.data.alternativeText) {\n      (0, _util.warn)(\"Push buttons without action dictionaries are not supported\");\n      return;\n    }\n\n    this.data.isTooltipOnly = !params.dict.has(\"A\") && !params.dict.has(\"AA\");\n\n    _obj.Catalog.parseDestDictionary({\n      destDict: params.dict,\n      resultObj: this.data,\n      docBaseUrl: params.pdfManager.docBaseUrl\n    });\n  }\n\n  getFieldObject() {\n    let type = \"button\";\n    let exportValues;\n\n    if (this.data.checkBox) {\n      type = \"checkbox\";\n      exportValues = this.data.exportValue;\n    } else if (this.data.radioButton) {\n      type = \"radiobutton\";\n      exportValues = this.data.buttonValue;\n    }\n\n    return {\n      id: this.data.id,\n      value: this.data.fieldValue || \"Off\",\n      defaultValue: this.data.defaultFieldValue,\n      exportValues,\n      editable: !this.data.readOnly,\n      name: this.data.fieldName,\n      rect: this.data.rect,\n      hidden: this.data.hidden,\n      actions: this.data.actions,\n      type\n    };\n  }\n\n  get fallbackFontDict() {\n    const dict = new _primitives.Dict();\n    dict.set(\"BaseFont\", _primitives.Name.get(\"ZapfDingbats\"));\n    dict.set(\"Type\", _primitives.Name.get(\"FallbackType\"));\n    dict.set(\"Subtype\", _primitives.Name.get(\"FallbackType\"));\n    dict.set(\"Encoding\", _primitives.Name.get(\"ZapfDingbatsEncoding\"));\n    return (0, _util.shadow)(this, \"fallbackFontDict\", dict);\n  }\n\n}\n\nclass ChoiceWidgetAnnotation extends WidgetAnnotation {\n  constructor(params) {\n    super(params);\n    this.data.options = [];\n    const options = (0, _core_utils.getInheritableProperty)({\n      dict: params.dict,\n      key: \"Opt\"\n    });\n\n    if (Array.isArray(options)) {\n      const xref = params.xref;\n\n      for (let i = 0, ii = options.length; i < ii; i++) {\n        const option = xref.fetchIfRef(options[i]);\n        const isOptionArray = Array.isArray(option);\n        this.data.options[i] = {\n          exportValue: this._decodeFormValue(isOptionArray ? xref.fetchIfRef(option[0]) : option),\n          displayValue: this._decodeFormValue(isOptionArray ? xref.fetchIfRef(option[1]) : option)\n        };\n      }\n    }\n\n    if ((0, _util.isString)(this.data.fieldValue)) {\n      this.data.fieldValue = [this.data.fieldValue];\n    } else if (!this.data.fieldValue) {\n      this.data.fieldValue = [];\n    }\n\n    this.data.combo = this.hasFieldFlag(_util.AnnotationFieldFlag.COMBO);\n    this.data.multiSelect = this.hasFieldFlag(_util.AnnotationFieldFlag.MULTISELECT);\n    this._hasText = true;\n  }\n\n  getFieldObject() {\n    const type = this.data.combo ? \"combobox\" : \"listbox\";\n    const value = this.data.fieldValue.length > 0 ? this.data.fieldValue[0] : null;\n    return {\n      id: this.data.id,\n      value,\n      defaultValue: this.data.defaultFieldValue,\n      editable: !this.data.readOnly,\n      name: this.data.fieldName,\n      rect: this.data.rect,\n      numItems: this.data.fieldValue.length,\n      multipleSelection: this.data.multiSelect,\n      hidden: this.data.hidden,\n      actions: this.data.actions,\n      type\n    };\n  }\n\n}\n\nclass TextAnnotation extends MarkupAnnotation {\n  constructor(parameters) {\n    const DEFAULT_ICON_SIZE = 22;\n    super(parameters);\n    const dict = parameters.dict;\n    this.data.annotationType = _util.AnnotationType.TEXT;\n\n    if (this.data.hasAppearance) {\n      this.data.name = \"NoIcon\";\n    } else {\n      this.data.rect[1] = this.data.rect[3] - DEFAULT_ICON_SIZE;\n      this.data.rect[2] = this.data.rect[0] + DEFAULT_ICON_SIZE;\n      this.data.name = dict.has(\"Name\") ? dict.get(\"Name\").name : \"Note\";\n    }\n\n    if (dict.has(\"State\")) {\n      this.data.state = dict.get(\"State\") || null;\n      this.data.stateModel = dict.get(\"StateModel\") || null;\n    } else {\n      this.data.state = null;\n      this.data.stateModel = null;\n    }\n  }\n\n}\n\nclass LinkAnnotation extends Annotation {\n  constructor(params) {\n    super(params);\n    this.data.annotationType = _util.AnnotationType.LINK;\n    const quadPoints = getQuadPoints(params.dict, this.rectangle);\n\n    if (quadPoints) {\n      this.data.quadPoints = quadPoints;\n    }\n\n    _obj.Catalog.parseDestDictionary({\n      destDict: params.dict,\n      resultObj: this.data,\n      docBaseUrl: params.pdfManager.docBaseUrl\n    });\n  }\n\n}\n\nclass PopupAnnotation extends Annotation {\n  constructor(parameters) {\n    super(parameters);\n    this.data.annotationType = _util.AnnotationType.POPUP;\n    let parentItem = parameters.dict.get(\"Parent\");\n\n    if (!parentItem) {\n      (0, _util.warn)(\"Popup annotation has a missing or invalid parent annotation.\");\n      return;\n    }\n\n    const parentSubtype = parentItem.get(\"Subtype\");\n    this.data.parentType = (0, _primitives.isName)(parentSubtype) ? parentSubtype.name : null;\n    const rawParent = parameters.dict.getRaw(\"Parent\");\n    this.data.parentId = (0, _primitives.isRef)(rawParent) ? rawParent.toString() : null;\n    const parentRect = parentItem.getArray(\"Rect\");\n\n    if (Array.isArray(parentRect) && parentRect.length === 4) {\n      this.data.parentRect = _util.Util.normalizeRect(parentRect);\n    } else {\n      this.data.parentRect = [0, 0, 0, 0];\n    }\n\n    const rt = parentItem.get(\"RT\");\n\n    if ((0, _primitives.isName)(rt, _util.AnnotationReplyType.GROUP)) {\n      parentItem = parentItem.get(\"IRT\");\n    }\n\n    if (!parentItem.has(\"M\")) {\n      this.data.modificationDate = null;\n    } else {\n      this.setModificationDate(parentItem.get(\"M\"));\n      this.data.modificationDate = this.modificationDate;\n    }\n\n    if (!parentItem.has(\"C\")) {\n      this.data.color = null;\n    } else {\n      this.setColor(parentItem.getArray(\"C\"));\n      this.data.color = this.color;\n    }\n\n    if (!this.viewable) {\n      const parentFlags = parentItem.get(\"F\");\n\n      if (this._isViewable(parentFlags)) {\n        this.setFlags(parentFlags);\n      }\n    }\n\n    this.data.title = (0, _util.stringToPDFString)(parentItem.get(\"T\") || \"\");\n    this.data.contents = (0, _util.stringToPDFString)(parentItem.get(\"Contents\") || \"\");\n  }\n\n}\n\nclass FreeTextAnnotation extends MarkupAnnotation {\n  constructor(parameters) {\n    super(parameters);\n    this.data.annotationType = _util.AnnotationType.FREETEXT;\n  }\n\n}\n\nclass LineAnnotation extends MarkupAnnotation {\n  constructor(parameters) {\n    super(parameters);\n    this.data.annotationType = _util.AnnotationType.LINE;\n    this.data.lineCoordinates = _util.Util.normalizeRect(parameters.dict.getArray(\"L\"));\n  }\n\n}\n\nclass SquareAnnotation extends MarkupAnnotation {\n  constructor(parameters) {\n    super(parameters);\n    this.data.annotationType = _util.AnnotationType.SQUARE;\n  }\n\n}\n\nclass CircleAnnotation extends MarkupAnnotation {\n  constructor(parameters) {\n    super(parameters);\n    this.data.annotationType = _util.AnnotationType.CIRCLE;\n  }\n\n}\n\nclass PolylineAnnotation extends MarkupAnnotation {\n  constructor(parameters) {\n    super(parameters);\n    this.data.annotationType = _util.AnnotationType.POLYLINE;\n    this.data.vertices = [];\n    const rawVertices = parameters.dict.getArray(\"Vertices\");\n\n    if (!Array.isArray(rawVertices)) {\n      return;\n    }\n\n    for (let i = 0, ii = rawVertices.length; i < ii; i += 2) {\n      this.data.vertices.push({\n        x: rawVertices[i],\n        y: rawVertices[i + 1]\n      });\n    }\n  }\n\n}\n\nclass PolygonAnnotation extends PolylineAnnotation {\n  constructor(parameters) {\n    super(parameters);\n    this.data.annotationType = _util.AnnotationType.POLYGON;\n  }\n\n}\n\nclass CaretAnnotation extends MarkupAnnotation {\n  constructor(parameters) {\n    super(parameters);\n    this.data.annotationType = _util.AnnotationType.CARET;\n  }\n\n}\n\nclass InkAnnotation extends MarkupAnnotation {\n  constructor(parameters) {\n    super(parameters);\n    this.data.annotationType = _util.AnnotationType.INK;\n    this.data.inkLists = [];\n    const rawInkLists = parameters.dict.getArray(\"InkList\");\n\n    if (!Array.isArray(rawInkLists)) {\n      return;\n    }\n\n    const xref = parameters.xref;\n\n    for (let i = 0, ii = rawInkLists.length; i < ii; ++i) {\n      this.data.inkLists.push([]);\n\n      for (let j = 0, jj = rawInkLists[i].length; j < jj; j += 2) {\n        this.data.inkLists[i].push({\n          x: xref.fetchIfRef(rawInkLists[i][j]),\n          y: xref.fetchIfRef(rawInkLists[i][j + 1])\n        });\n      }\n    }\n  }\n\n}\n\nclass HighlightAnnotation extends MarkupAnnotation {\n  constructor(parameters) {\n    super(parameters);\n    this.data.annotationType = _util.AnnotationType.HIGHLIGHT;\n    const quadPoints = this.data.quadPoints = getQuadPoints(parameters.dict, null);\n\n    if (quadPoints) {\n      if (!this.appearance) {\n        const fillColor = this.color ? Array.from(this.color).map(c => c / 255) : [1, 1, 0];\n\n        this._setDefaultAppearance({\n          xref: parameters.xref,\n          fillColor,\n          blendMode: \"Multiply\",\n          pointsCallback: (buffer, points) => {\n            buffer.push(`${points[0].x} ${points[0].y} m`);\n            buffer.push(`${points[1].x} ${points[1].y} l`);\n            buffer.push(`${points[3].x} ${points[3].y} l`);\n            buffer.push(`${points[2].x} ${points[2].y} l`);\n            buffer.push(\"f\");\n            return [points[0].x, points[1].x, points[3].y, points[1].y];\n          }\n        });\n      }\n    } else {\n      this.data.hasPopup = false;\n    }\n  }\n\n}\n\nclass UnderlineAnnotation extends MarkupAnnotation {\n  constructor(parameters) {\n    super(parameters);\n    this.data.annotationType = _util.AnnotationType.UNDERLINE;\n    const quadPoints = this.data.quadPoints = getQuadPoints(parameters.dict, null);\n\n    if (quadPoints) {\n      if (!this.appearance) {\n        const strokeColor = this.color ? Array.from(this.color).map(c => c / 255) : [0, 0, 0];\n\n        this._setDefaultAppearance({\n          xref: parameters.xref,\n          extra: \"[] 0 d 1 w\",\n          strokeColor,\n          pointsCallback: (buffer, points) => {\n            buffer.push(`${points[2].x} ${points[2].y} m`);\n            buffer.push(`${points[3].x} ${points[3].y} l`);\n            buffer.push(\"S\");\n            return [points[0].x, points[1].x, points[3].y, points[1].y];\n          }\n        });\n      }\n    } else {\n      this.data.hasPopup = false;\n    }\n  }\n\n}\n\nclass SquigglyAnnotation extends MarkupAnnotation {\n  constructor(parameters) {\n    super(parameters);\n    this.data.annotationType = _util.AnnotationType.SQUIGGLY;\n    const quadPoints = this.data.quadPoints = getQuadPoints(parameters.dict, null);\n\n    if (quadPoints) {\n      if (!this.appearance) {\n        const strokeColor = this.color ? Array.from(this.color).map(c => c / 255) : [0, 0, 0];\n\n        this._setDefaultAppearance({\n          xref: parameters.xref,\n          extra: \"[] 0 d 1 w\",\n          strokeColor,\n          pointsCallback: (buffer, points) => {\n            const dy = (points[0].y - points[2].y) / 6;\n            let shift = dy;\n            let x = points[2].x;\n            const y = points[2].y;\n            const xEnd = points[3].x;\n            buffer.push(`${x} ${y + shift} m`);\n\n            do {\n              x += 2;\n              shift = shift === 0 ? dy : 0;\n              buffer.push(`${x} ${y + shift} l`);\n            } while (x < xEnd);\n\n            buffer.push(\"S\");\n            return [points[2].x, xEnd, y - 2 * dy, y + 2 * dy];\n          }\n        });\n      }\n    } else {\n      this.data.hasPopup = false;\n    }\n  }\n\n}\n\nclass StrikeOutAnnotation extends MarkupAnnotation {\n  constructor(parameters) {\n    super(parameters);\n    this.data.annotationType = _util.AnnotationType.STRIKEOUT;\n    const quadPoints = this.data.quadPoints = getQuadPoints(parameters.dict, null);\n\n    if (quadPoints) {\n      if (!this.appearance) {\n        const strokeColor = this.color ? Array.from(this.color).map(c => c / 255) : [0, 0, 0];\n\n        this._setDefaultAppearance({\n          xref: parameters.xref,\n          extra: \"[] 0 d 1 w\",\n          strokeColor,\n          pointsCallback: (buffer, points) => {\n            buffer.push(`${(points[0].x + points[2].x) / 2}` + ` ${(points[0].y + points[2].y) / 2} m`);\n            buffer.push(`${(points[1].x + points[3].x) / 2}` + ` ${(points[1].y + points[3].y) / 2} l`);\n            buffer.push(\"S\");\n            return [points[0].x, points[1].x, points[3].y, points[1].y];\n          }\n        });\n      }\n    } else {\n      this.data.hasPopup = false;\n    }\n  }\n\n}\n\nclass StampAnnotation extends MarkupAnnotation {\n  constructor(parameters) {\n    super(parameters);\n    this.data.annotationType = _util.AnnotationType.STAMP;\n  }\n\n}\n\nclass FileAttachmentAnnotation extends MarkupAnnotation {\n  constructor(parameters) {\n    super(parameters);\n    const file = new _obj.FileSpec(parameters.dict.get(\"FS\"), parameters.xref);\n    this.data.annotationType = _util.AnnotationType.FILEATTACHMENT;\n    this.data.file = file.serializable;\n  }\n\n}\n\n/***/ }),\n/* 26 */\n/***/ ((__unused_webpack_module, exports, __w_pdfjs_require__) => {\n\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.createDefaultAppearance = createDefaultAppearance;\nexports.parseDefaultAppearance = parseDefaultAppearance;\n\nvar _primitives = __w_pdfjs_require__(5);\n\nvar _util = __w_pdfjs_require__(2);\n\nvar _colorspace = __w_pdfjs_require__(23);\n\nvar _core_utils = __w_pdfjs_require__(8);\n\nvar _evaluator = __w_pdfjs_require__(27);\n\nvar _stream = __w_pdfjs_require__(12);\n\nclass DefaultAppearanceEvaluator extends _evaluator.EvaluatorPreprocessor {\n  constructor(str) {\n    super(new _stream.StringStream(str));\n  }\n\n  parse() {\n    const operation = {\n      fn: 0,\n      args: []\n    };\n    const result = {\n      fontSize: 0,\n      fontName: _primitives.Name.get(\"\"),\n      fontColor: new Uint8ClampedArray([0, 0, 0])\n    };\n\n    try {\n      while (true) {\n        operation.args.length = 0;\n\n        if (!this.read(operation)) {\n          break;\n        }\n\n        if (this.savedStatesDepth !== 0) {\n          continue;\n        }\n\n        const {\n          fn,\n          args\n        } = operation;\n\n        switch (fn | 0) {\n          case _util.OPS.setFont:\n            const [fontName, fontSize] = args;\n\n            if ((0, _primitives.isName)(fontName)) {\n              result.fontName = fontName;\n            }\n\n            if (typeof fontSize === \"number\" && fontSize > 0) {\n              result.fontSize = fontSize;\n            }\n\n            break;\n\n          case _util.OPS.setFillRGBColor:\n            _colorspace.ColorSpace.singletons.rgb.getRgbItem(args, 0, result.fontColor, 0);\n\n            break;\n\n          case _util.OPS.setFillGray:\n            _colorspace.ColorSpace.singletons.gray.getRgbItem(args, 0, result.fontColor, 0);\n\n            break;\n\n          case _util.OPS.setFillColorSpace:\n            _colorspace.ColorSpace.singletons.cmyk.getRgbItem(args, 0, result.fontColor, 0);\n\n            break;\n        }\n      }\n    } catch (reason) {\n      (0, _util.warn)(`parseDefaultAppearance - ignoring errors: \"${reason}\".`);\n    }\n\n    return result;\n  }\n\n}\n\nfunction parseDefaultAppearance(str) {\n  return new DefaultAppearanceEvaluator(str).parse();\n}\n\nfunction createDefaultAppearance({\n  fontSize,\n  fontName,\n  fontColor\n}) {\n  let colorCmd;\n\n  if (fontColor.every(c => c === 0)) {\n    colorCmd = \"0 g\";\n  } else {\n    colorCmd = Array.from(fontColor).map(c => (c / 255).toFixed(2)).join(\" \") + \" rg\";\n  }\n\n  return `/${(0, _core_utils.escapePDFName)(fontName.name)} ${fontSize} Tf ${colorCmd}`;\n}\n\n/***/ }),\n/* 27 */\n/***/ ((__unused_webpack_module, exports, __w_pdfjs_require__) => {\n\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.PartialEvaluator = exports.EvaluatorPreprocessor = void 0;\n\nvar _util = __w_pdfjs_require__(2);\n\nvar _cmap = __w_pdfjs_require__(28);\n\nvar _primitives = __w_pdfjs_require__(5);\n\nvar _fonts = __w_pdfjs_require__(29);\n\nvar _encodings = __w_pdfjs_require__(32);\n\nvar _core_utils = __w_pdfjs_require__(8);\n\nvar _unicode = __w_pdfjs_require__(35);\n\nvar _standard_fonts = __w_pdfjs_require__(34);\n\nvar _pattern = __w_pdfjs_require__(38);\n\nvar _function = __w_pdfjs_require__(39);\n\nvar _parser = __w_pdfjs_require__(11);\n\nvar _image_utils = __w_pdfjs_require__(24);\n\nvar _bidi = __w_pdfjs_require__(41);\n\nvar _colorspace = __w_pdfjs_require__(23);\n\nvar _stream = __w_pdfjs_require__(12);\n\nvar _glyphlist = __w_pdfjs_require__(33);\n\nvar _metrics = __w_pdfjs_require__(42);\n\nvar _murmurhash = __w_pdfjs_require__(43);\n\nvar _operator_list = __w_pdfjs_require__(44);\n\nvar _image = __w_pdfjs_require__(45);\n\nconst DefaultPartialEvaluatorOptions = Object.freeze({\n  maxImageSize: -1,\n  disableFontFace: false,\n  ignoreErrors: false,\n  isEvalSupported: true,\n  fontExtraProperties: false\n});\nconst PatternType = {\n  TILING: 1,\n  SHADING: 2\n};\nconst deferred = Promise.resolve();\n\nfunction normalizeBlendMode(value, parsingArray = false) {\n  if (Array.isArray(value)) {\n    for (let i = 0, ii = value.length; i < ii; i++) {\n      const maybeBM = normalizeBlendMode(value[i], true);\n\n      if (maybeBM) {\n        return maybeBM;\n      }\n    }\n\n    (0, _util.warn)(`Unsupported blend mode Array: ${value}`);\n    return \"source-over\";\n  }\n\n  if (!(0, _primitives.isName)(value)) {\n    if (parsingArray) {\n      return null;\n    }\n\n    return \"source-over\";\n  }\n\n  switch (value.name) {\n    case \"Normal\":\n    case \"Compatible\":\n      return \"source-over\";\n\n    case \"Multiply\":\n      return \"multiply\";\n\n    case \"Screen\":\n      return \"screen\";\n\n    case \"Overlay\":\n      return \"overlay\";\n\n    case \"Darken\":\n      return \"darken\";\n\n    case \"Lighten\":\n      return \"lighten\";\n\n    case \"ColorDodge\":\n      return \"color-dodge\";\n\n    case \"ColorBurn\":\n      return \"color-burn\";\n\n    case \"HardLight\":\n      return \"hard-light\";\n\n    case \"SoftLight\":\n      return \"soft-light\";\n\n    case \"Difference\":\n      return \"difference\";\n\n    case \"Exclusion\":\n      return \"exclusion\";\n\n    case \"Hue\":\n      return \"hue\";\n\n    case \"Saturation\":\n      return \"saturation\";\n\n    case \"Color\":\n      return \"color\";\n\n    case \"Luminosity\":\n      return \"luminosity\";\n  }\n\n  if (parsingArray) {\n    return null;\n  }\n\n  (0, _util.warn)(`Unsupported blend mode: ${value.name}`);\n  return \"source-over\";\n}\n\nclass TimeSlotManager {\n  static get TIME_SLOT_DURATION_MS() {\n    return (0, _util.shadow)(this, \"TIME_SLOT_DURATION_MS\", 20);\n  }\n\n  static get CHECK_TIME_EVERY() {\n    return (0, _util.shadow)(this, \"CHECK_TIME_EVERY\", 100);\n  }\n\n  constructor() {\n    this.reset();\n  }\n\n  check() {\n    if (++this.checked < TimeSlotManager.CHECK_TIME_EVERY) {\n      return false;\n    }\n\n    this.checked = 0;\n    return this.endTime <= Date.now();\n  }\n\n  reset() {\n    this.endTime = Date.now() + TimeSlotManager.TIME_SLOT_DURATION_MS;\n    this.checked = 0;\n  }\n\n}\n\nclass PartialEvaluator {\n  constructor({\n    xref,\n    handler,\n    pageIndex,\n    idFactory,\n    fontCache,\n    builtInCMapCache,\n    globalImageCache,\n    options = null\n  }) {\n    this.xref = xref;\n    this.handler = handler;\n    this.pageIndex = pageIndex;\n    this.idFactory = idFactory;\n    this.fontCache = fontCache;\n    this.builtInCMapCache = builtInCMapCache;\n    this.globalImageCache = globalImageCache;\n    this.options = options || DefaultPartialEvaluatorOptions;\n    this.parsingType3Font = false;\n    this._fetchBuiltInCMapBound = this.fetchBuiltInCMap.bind(this);\n  }\n\n  get _pdfFunctionFactory() {\n    const pdfFunctionFactory = new _function.PDFFunctionFactory({\n      xref: this.xref,\n      isEvalSupported: this.options.isEvalSupported\n    });\n    return (0, _util.shadow)(this, \"_pdfFunctionFactory\", pdfFunctionFactory);\n  }\n\n  clone(newOptions = DefaultPartialEvaluatorOptions) {\n    var newEvaluator = Object.create(this);\n    newEvaluator.options = newOptions;\n    return newEvaluator;\n  }\n\n  hasBlendModes(resources, nonBlendModesSet) {\n    if (!(resources instanceof _primitives.Dict)) {\n      return false;\n    }\n\n    if (resources.objId && nonBlendModesSet.has(resources.objId)) {\n      return false;\n    }\n\n    const processed = new _primitives.RefSet(nonBlendModesSet);\n\n    if (resources.objId) {\n      processed.put(resources.objId);\n    }\n\n    var nodes = [resources],\n        xref = this.xref;\n\n    while (nodes.length) {\n      var node = nodes.shift();\n      var graphicStates = node.get(\"ExtGState\");\n\n      if (graphicStates instanceof _primitives.Dict) {\n        for (let graphicState of graphicStates.getRawValues()) {\n          if (graphicState instanceof _primitives.Ref) {\n            if (processed.has(graphicState)) {\n              continue;\n            }\n\n            try {\n              graphicState = xref.fetch(graphicState);\n            } catch (ex) {\n              if (ex instanceof _core_utils.MissingDataException) {\n                throw ex;\n              }\n\n              processed.put(graphicState);\n              (0, _util.info)(`hasBlendModes - ignoring ExtGState: \"${ex}\".`);\n              continue;\n            }\n          }\n\n          if (!(graphicState instanceof _primitives.Dict)) {\n            continue;\n          }\n\n          if (graphicState.objId) {\n            processed.put(graphicState.objId);\n          }\n\n          const bm = graphicState.get(\"BM\");\n\n          if (bm instanceof _primitives.Name) {\n            if (bm.name !== \"Normal\") {\n              return true;\n            }\n\n            continue;\n          }\n\n          if (bm !== undefined && Array.isArray(bm)) {\n            for (const element of bm) {\n              if (element instanceof _primitives.Name && element.name !== \"Normal\") {\n                return true;\n              }\n            }\n          }\n        }\n      }\n\n      var xObjects = node.get(\"XObject\");\n\n      if (!(xObjects instanceof _primitives.Dict)) {\n        continue;\n      }\n\n      for (let xObject of xObjects.getRawValues()) {\n        if (xObject instanceof _primitives.Ref) {\n          if (processed.has(xObject)) {\n            continue;\n          }\n\n          try {\n            xObject = xref.fetch(xObject);\n          } catch (ex) {\n            if (ex instanceof _core_utils.MissingDataException) {\n              throw ex;\n            }\n\n            processed.put(xObject);\n            (0, _util.info)(`hasBlendModes - ignoring XObject: \"${ex}\".`);\n            continue;\n          }\n        }\n\n        if (!(0, _primitives.isStream)(xObject)) {\n          continue;\n        }\n\n        if (xObject.dict.objId) {\n          processed.put(xObject.dict.objId);\n        }\n\n        var xResources = xObject.dict.get(\"Resources\");\n\n        if (!(xResources instanceof _primitives.Dict)) {\n          continue;\n        }\n\n        if (xResources.objId && processed.has(xResources.objId)) {\n          continue;\n        }\n\n        nodes.push(xResources);\n\n        if (xResources.objId) {\n          processed.put(xResources.objId);\n        }\n      }\n    }\n\n    processed.forEach(ref => {\n      nonBlendModesSet.put(ref);\n    });\n    return false;\n  }\n\n  async fetchBuiltInCMap(name) {\n    const cachedData = this.builtInCMapCache.get(name);\n\n    if (cachedData) {\n      return cachedData;\n    }\n\n    const readableStream = this.handler.sendWithStream(\"FetchBuiltInCMap\", {\n      name\n    });\n    const reader = readableStream.getReader();\n    const data = await new Promise(function (resolve, reject) {\n      function pump() {\n        reader.read().then(function ({\n          value,\n          done\n        }) {\n          if (done) {\n            return;\n          }\n\n          resolve(value);\n          pump();\n        }, reject);\n      }\n\n      pump();\n    });\n\n    if (data.compressionType !== _util.CMapCompressionType.NONE) {\n      this.builtInCMapCache.set(name, data);\n    }\n\n    return data;\n  }\n\n  async buildFormXObject(resources, xobj, smask, operatorList, task, initialState, localColorSpaceCache) {\n    var dict = xobj.dict;\n    var matrix = dict.getArray(\"Matrix\");\n    var bbox = dict.getArray(\"BBox\");\n\n    if (Array.isArray(bbox) && bbox.length === 4) {\n      bbox = _util.Util.normalizeRect(bbox);\n    } else {\n      bbox = null;\n    }\n\n    let optionalContent = null;\n\n    if (dict.has(\"OC\")) {\n      optionalContent = await this.parseMarkedContentProps(dict.get(\"OC\"), resources);\n      operatorList.addOp(_util.OPS.beginMarkedContentProps, [\"OC\", optionalContent]);\n    }\n\n    var group = dict.get(\"Group\");\n\n    if (group) {\n      var groupOptions = {\n        matrix,\n        bbox,\n        smask,\n        isolated: false,\n        knockout: false\n      };\n      var groupSubtype = group.get(\"S\");\n      var colorSpace = null;\n\n      if ((0, _primitives.isName)(groupSubtype, \"Transparency\")) {\n        groupOptions.isolated = group.get(\"I\") || false;\n        groupOptions.knockout = group.get(\"K\") || false;\n\n        if (group.has(\"CS\")) {\n          const cs = group.getRaw(\"CS\");\n\n          const cachedColorSpace = _colorspace.ColorSpace.getCached(cs, this.xref, localColorSpaceCache);\n\n          if (cachedColorSpace) {\n            colorSpace = cachedColorSpace;\n          } else {\n            colorSpace = await this.parseColorSpace({\n              cs,\n              resources,\n              localColorSpaceCache\n            });\n          }\n        }\n      }\n\n      if (smask && smask.backdrop) {\n        colorSpace = colorSpace || _colorspace.ColorSpace.singletons.rgb;\n        smask.backdrop = colorSpace.getRgb(smask.backdrop, 0);\n      }\n\n      operatorList.addOp(_util.OPS.beginGroup, [groupOptions]);\n    }\n\n    operatorList.addOp(_util.OPS.paintFormXObjectBegin, [matrix, bbox]);\n    return this.getOperatorList({\n      stream: xobj,\n      task,\n      resources: dict.get(\"Resources\") || resources,\n      operatorList,\n      initialState\n    }).then(function () {\n      operatorList.addOp(_util.OPS.paintFormXObjectEnd, []);\n\n      if (group) {\n        operatorList.addOp(_util.OPS.endGroup, [groupOptions]);\n      }\n\n      if (optionalContent) {\n        operatorList.addOp(_util.OPS.endMarkedContent, []);\n      }\n    });\n  }\n\n  _sendImgData(objId, imgData, cacheGlobally = false) {\n    const transfers = imgData ? [imgData.data.buffer] : null;\n\n    if (this.parsingType3Font || cacheGlobally) {\n      return this.handler.send(\"commonobj\", [objId, \"Image\", imgData], transfers);\n    }\n\n    return this.handler.send(\"obj\", [objId, this.pageIndex, \"Image\", imgData], transfers);\n  }\n\n  async buildPaintImageXObject({\n    resources,\n    image,\n    isInline = false,\n    operatorList,\n    cacheKey,\n    localImageCache,\n    localColorSpaceCache\n  }) {\n    var dict = image.dict;\n    const imageRef = dict.objId;\n    var w = dict.get(\"Width\", \"W\");\n    var h = dict.get(\"Height\", \"H\");\n\n    if (!(w && (0, _util.isNum)(w)) || !(h && (0, _util.isNum)(h))) {\n      (0, _util.warn)(\"Image dimensions are missing, or not numbers.\");\n      return undefined;\n    }\n\n    var maxImageSize = this.options.maxImageSize;\n\n    if (maxImageSize !== -1 && w * h > maxImageSize) {\n      (0, _util.warn)(\"Image exceeded maximum allowed size and was removed.\");\n      return undefined;\n    }\n\n    var imageMask = dict.get(\"ImageMask\", \"IM\") || false;\n    var imgData, args;\n\n    if (imageMask) {\n      var width = dict.get(\"Width\", \"W\");\n      var height = dict.get(\"Height\", \"H\");\n      var bitStrideLength = width + 7 >> 3;\n      var imgArray = image.getBytes(bitStrideLength * height, true);\n      var decode = dict.getArray(\"Decode\", \"D\");\n      imgData = _image.PDFImage.createMask({\n        imgArray,\n        width,\n        height,\n        imageIsFromDecodeStream: image instanceof _stream.DecodeStream,\n        inverseDecode: !!decode && decode[0] > 0\n      });\n      imgData.cached = !!cacheKey;\n      args = [imgData];\n      operatorList.addOp(_util.OPS.paintImageMaskXObject, args);\n\n      if (cacheKey) {\n        localImageCache.set(cacheKey, imageRef, {\n          fn: _util.OPS.paintImageMaskXObject,\n          args\n        });\n      }\n\n      return undefined;\n    }\n\n    var softMask = dict.get(\"SMask\", \"SM\") || false;\n    var mask = dict.get(\"Mask\") || false;\n    var SMALL_IMAGE_DIMENSIONS = 200;\n\n    if (isInline && !softMask && !mask && w + h < SMALL_IMAGE_DIMENSIONS) {\n      const imageObj = new _image.PDFImage({\n        xref: this.xref,\n        res: resources,\n        image,\n        isInline,\n        pdfFunctionFactory: this._pdfFunctionFactory,\n        localColorSpaceCache\n      });\n      imgData = imageObj.createImageData(true);\n      operatorList.addOp(_util.OPS.paintInlineImageXObject, [imgData]);\n      return undefined;\n    }\n\n    let objId = `img_${this.idFactory.createObjId()}`,\n        cacheGlobally = false;\n\n    if (this.parsingType3Font) {\n      objId = `${this.idFactory.getDocId()}_type3_${objId}`;\n    } else if (imageRef) {\n      cacheGlobally = this.globalImageCache.shouldCache(imageRef, this.pageIndex);\n\n      if (cacheGlobally) {\n        objId = `${this.idFactory.getDocId()}_${objId}`;\n      }\n    }\n\n    operatorList.addDependency(objId);\n    args = [objId, w, h];\n\n    _image.PDFImage.buildImage({\n      xref: this.xref,\n      res: resources,\n      image,\n      isInline,\n      pdfFunctionFactory: this._pdfFunctionFactory,\n      localColorSpaceCache\n    }).then(imageObj => {\n      imgData = imageObj.createImageData(false);\n      return this._sendImgData(objId, imgData, cacheGlobally);\n    }).catch(reason => {\n      (0, _util.warn)(`Unable to decode image \"${objId}\": \"${reason}\".`);\n      return this._sendImgData(objId, null, cacheGlobally);\n    });\n\n    operatorList.addOp(_util.OPS.paintImageXObject, args);\n\n    if (cacheKey) {\n      localImageCache.set(cacheKey, imageRef, {\n        fn: _util.OPS.paintImageXObject,\n        args\n      });\n\n      if (imageRef) {\n        (0, _util.assert)(!isInline, \"Cannot cache an inline image globally.\");\n        this.globalImageCache.addPageIndex(imageRef, this.pageIndex);\n\n        if (cacheGlobally) {\n          this.globalImageCache.setData(imageRef, {\n            objId,\n            fn: _util.OPS.paintImageXObject,\n            args\n          });\n        }\n      }\n    }\n\n    return undefined;\n  }\n\n  handleSMask(smask, resources, operatorList, task, stateManager, localColorSpaceCache) {\n    var smaskContent = smask.get(\"G\");\n    var smaskOptions = {\n      subtype: smask.get(\"S\").name,\n      backdrop: smask.get(\"BC\")\n    };\n    var transferObj = smask.get(\"TR\");\n\n    if ((0, _function.isPDFFunction)(transferObj)) {\n      const transferFn = this._pdfFunctionFactory.create(transferObj);\n\n      var transferMap = new Uint8Array(256);\n      var tmp = new Float32Array(1);\n\n      for (var i = 0; i < 256; i++) {\n        tmp[0] = i / 255;\n        transferFn(tmp, 0, tmp, 0);\n        transferMap[i] = tmp[0] * 255 | 0;\n      }\n\n      smaskOptions.transferMap = transferMap;\n    }\n\n    return this.buildFormXObject(resources, smaskContent, smaskOptions, operatorList, task, stateManager.state.clone(), localColorSpaceCache);\n  }\n\n  handleTransferFunction(tr) {\n    let transferArray;\n\n    if (Array.isArray(tr)) {\n      transferArray = tr;\n    } else if ((0, _function.isPDFFunction)(tr)) {\n      transferArray = [tr];\n    } else {\n      return null;\n    }\n\n    const transferMaps = [];\n    let numFns = 0,\n        numEffectfulFns = 0;\n\n    for (const entry of transferArray) {\n      const transferObj = this.xref.fetchIfRef(entry);\n      numFns++;\n\n      if ((0, _primitives.isName)(transferObj, \"Identity\")) {\n        transferMaps.push(null);\n        continue;\n      } else if (!(0, _function.isPDFFunction)(transferObj)) {\n        return null;\n      }\n\n      const transferFn = this._pdfFunctionFactory.create(transferObj);\n\n      const transferMap = new Uint8Array(256),\n            tmp = new Float32Array(1);\n\n      for (let j = 0; j < 256; j++) {\n        tmp[0] = j / 255;\n        transferFn(tmp, 0, tmp, 0);\n        transferMap[j] = tmp[0] * 255 | 0;\n      }\n\n      transferMaps.push(transferMap);\n      numEffectfulFns++;\n    }\n\n    if (!(numFns === 1 || numFns === 4)) {\n      return null;\n    }\n\n    if (numEffectfulFns === 0) {\n      return null;\n    }\n\n    return transferMaps;\n  }\n\n  handleTilingType(fn, color, resources, pattern, patternDict, operatorList, task, cacheKey, localTilingPatternCache) {\n    const tilingOpList = new _operator_list.OperatorList();\n\n    const patternResources = _primitives.Dict.merge({\n      xref: this.xref,\n      dictArray: [patternDict.get(\"Resources\"), resources]\n    });\n\n    return this.getOperatorList({\n      stream: pattern,\n      task,\n      resources: patternResources,\n      operatorList: tilingOpList\n    }).then(function () {\n      const operatorListIR = tilingOpList.getIR();\n      const tilingPatternIR = (0, _pattern.getTilingPatternIR)(operatorListIR, patternDict, color);\n      operatorList.addDependencies(tilingOpList.dependencies);\n      operatorList.addOp(fn, tilingPatternIR);\n\n      if (cacheKey) {\n        localTilingPatternCache.set(cacheKey, patternDict.objId, {\n          operatorListIR,\n          dict: patternDict\n        });\n      }\n    }).catch(reason => {\n      if (reason instanceof _util.AbortException) {\n        return;\n      }\n\n      if (this.options.ignoreErrors) {\n        this.handler.send(\"UnsupportedFeature\", {\n          featureId: _util.UNSUPPORTED_FEATURES.errorTilingPattern\n        });\n        (0, _util.warn)(`handleTilingType - ignoring pattern: \"${reason}\".`);\n        return;\n      }\n\n      throw reason;\n    });\n  }\n\n  handleSetFont(resources, fontArgs, fontRef, operatorList, task, state, fallbackFontDict = null) {\n    var fontName;\n\n    if (fontArgs) {\n      fontArgs = fontArgs.slice();\n      fontName = fontArgs[0].name;\n    }\n\n    return this.loadFont(fontName, fontRef, resources, fallbackFontDict).then(translated => {\n      if (!translated.font.isType3Font) {\n        return translated;\n      }\n\n      return translated.loadType3Data(this, resources, task).then(function () {\n        operatorList.addDependencies(translated.type3Dependencies);\n        return translated;\n      }).catch(reason => {\n        this.handler.send(\"UnsupportedFeature\", {\n          featureId: _util.UNSUPPORTED_FEATURES.errorFontLoadType3\n        });\n        return new TranslatedFont({\n          loadedName: \"g_font_error\",\n          font: new _fonts.ErrorFont(`Type3 font load error: ${reason}`),\n          dict: translated.font,\n          extraProperties: this.options.fontExtraProperties\n        });\n      });\n    }).then(translated => {\n      state.font = translated.font;\n      translated.send(this.handler);\n      return translated.loadedName;\n    });\n  }\n\n  handleText(chars, state) {\n    const font = state.font;\n    const glyphs = font.charsToGlyphs(chars);\n\n    if (font.data) {\n      const isAddToPathSet = !!(state.textRenderingMode & _util.TextRenderingMode.ADD_TO_PATH_FLAG);\n\n      if (isAddToPathSet || state.fillColorSpace.name === \"Pattern\" || font.disableFontFace || this.options.disableFontFace) {\n        PartialEvaluator.buildFontPaths(font, glyphs, this.handler);\n      }\n    }\n\n    return glyphs;\n  }\n\n  ensureStateFont(state) {\n    if (state.font) {\n      return;\n    }\n\n    const reason = new _util.FormatError(\"Missing setFont (Tf) operator before text rendering operator.\");\n\n    if (this.options.ignoreErrors) {\n      this.handler.send(\"UnsupportedFeature\", {\n        featureId: _util.UNSUPPORTED_FEATURES.errorFontState\n      });\n      (0, _util.warn)(`ensureStateFont: \"${reason}\".`);\n      return;\n    }\n\n    throw reason;\n  }\n\n  async setGState({\n    resources,\n    gState,\n    operatorList,\n    cacheKey,\n    task,\n    stateManager,\n    localGStateCache,\n    localColorSpaceCache\n  }) {\n    const gStateRef = gState.objId;\n    let isSimpleGState = true;\n    var gStateObj = [];\n    var gStateKeys = gState.getKeys();\n    var promise = Promise.resolve();\n\n    for (var i = 0, ii = gStateKeys.length; i < ii; i++) {\n      const key = gStateKeys[i];\n      const value = gState.get(key);\n\n      switch (key) {\n        case \"Type\":\n          break;\n\n        case \"LW\":\n        case \"LC\":\n        case \"LJ\":\n        case \"ML\":\n        case \"D\":\n        case \"RI\":\n        case \"FL\":\n        case \"CA\":\n        case \"ca\":\n          gStateObj.push([key, value]);\n          break;\n\n        case \"Font\":\n          isSimpleGState = false;\n          promise = promise.then(() => {\n            return this.handleSetFont(resources, null, value[0], operatorList, task, stateManager.state).then(function (loadedName) {\n              operatorList.addDependency(loadedName);\n              gStateObj.push([key, [loadedName, value[1]]]);\n            });\n          });\n          break;\n\n        case \"BM\":\n          gStateObj.push([key, normalizeBlendMode(value)]);\n          break;\n\n        case \"SMask\":\n          if ((0, _primitives.isName)(value, \"None\")) {\n            gStateObj.push([key, false]);\n            break;\n          }\n\n          if ((0, _primitives.isDict)(value)) {\n            isSimpleGState = false;\n            promise = promise.then(() => {\n              return this.handleSMask(value, resources, operatorList, task, stateManager, localColorSpaceCache);\n            });\n            gStateObj.push([key, true]);\n          } else {\n            (0, _util.warn)(\"Unsupported SMask type\");\n          }\n\n          break;\n\n        case \"TR\":\n          const transferMaps = this.handleTransferFunction(value);\n          gStateObj.push([key, transferMaps]);\n          break;\n\n        case \"OP\":\n        case \"op\":\n        case \"OPM\":\n        case \"BG\":\n        case \"BG2\":\n        case \"UCR\":\n        case \"UCR2\":\n        case \"TR2\":\n        case \"HT\":\n        case \"SM\":\n        case \"SA\":\n        case \"AIS\":\n        case \"TK\":\n          (0, _util.info)(\"graphic state operator \" + key);\n          break;\n\n        default:\n          (0, _util.info)(\"Unknown graphic state operator \" + key);\n          break;\n      }\n    }\n\n    return promise.then(function () {\n      if (gStateObj.length > 0) {\n        operatorList.addOp(_util.OPS.setGState, [gStateObj]);\n      }\n\n      if (isSimpleGState) {\n        localGStateCache.set(cacheKey, gStateRef, gStateObj);\n      }\n    });\n  }\n\n  loadFont(fontName, font, resources, fallbackFontDict = null) {\n    const errorFont = async () => {\n      return new TranslatedFont({\n        loadedName: \"g_font_error\",\n        font: new _fonts.ErrorFont(`Font \"${fontName}\" is not available.`),\n        dict: font,\n        extraProperties: this.options.fontExtraProperties\n      });\n    };\n\n    var fontRef,\n        xref = this.xref;\n\n    if (font) {\n      if (!(0, _primitives.isRef)(font)) {\n        throw new _util.FormatError('The \"font\" object should be a reference.');\n      }\n\n      fontRef = font;\n    } else {\n      var fontRes = resources.get(\"Font\");\n\n      if (fontRes) {\n        fontRef = fontRes.getRaw(fontName);\n      }\n    }\n\n    if (!fontRef) {\n      const partialMsg = `Font \"${fontName || font && font.toString()}\" is not available`;\n\n      if (!this.options.ignoreErrors && !this.parsingType3Font) {\n        (0, _util.warn)(`${partialMsg}.`);\n        return errorFont();\n      }\n\n      this.handler.send(\"UnsupportedFeature\", {\n        featureId: _util.UNSUPPORTED_FEATURES.errorFontMissing\n      });\n      (0, _util.warn)(`${partialMsg} -- attempting to fallback to a default font.`);\n\n      if (fallbackFontDict) {\n        fontRef = fallbackFontDict;\n      } else {\n        fontRef = PartialEvaluator.fallbackFontDict;\n      }\n    }\n\n    if (this.fontCache.has(fontRef)) {\n      return this.fontCache.get(fontRef);\n    }\n\n    font = xref.fetchIfRef(fontRef);\n\n    if (!(0, _primitives.isDict)(font)) {\n      return errorFont();\n    }\n\n    if (font.cacheKey && this.fontCache.has(font.cacheKey)) {\n      return this.fontCache.get(font.cacheKey);\n    }\n\n    var fontCapability = (0, _util.createPromiseCapability)();\n    let preEvaluatedFont;\n\n    try {\n      preEvaluatedFont = this.preEvaluateFont(font);\n    } catch (reason) {\n      (0, _util.warn)(`loadFont - ignoring preEvaluateFont errors: \"${reason}\".`);\n      return errorFont();\n    }\n\n    const {\n      descriptor,\n      hash\n    } = preEvaluatedFont;\n    var fontRefIsRef = (0, _primitives.isRef)(fontRef),\n        fontID;\n\n    if (fontRefIsRef) {\n      fontID = `f${fontRef.toString()}`;\n    }\n\n    if (hash && (0, _primitives.isDict)(descriptor)) {\n      if (!descriptor.fontAliases) {\n        descriptor.fontAliases = Object.create(null);\n      }\n\n      var fontAliases = descriptor.fontAliases;\n\n      if (fontAliases[hash]) {\n        var aliasFontRef = fontAliases[hash].aliasRef;\n\n        if (fontRefIsRef && aliasFontRef && this.fontCache.has(aliasFontRef)) {\n          this.fontCache.putAlias(fontRef, aliasFontRef);\n          return this.fontCache.get(fontRef);\n        }\n      } else {\n        fontAliases[hash] = {\n          fontID: this.idFactory.createFontId()\n        };\n      }\n\n      if (fontRefIsRef) {\n        fontAliases[hash].aliasRef = fontRef;\n      }\n\n      fontID = fontAliases[hash].fontID;\n    }\n\n    if (fontRefIsRef) {\n      this.fontCache.put(fontRef, fontCapability.promise);\n    } else {\n      if (!fontID) {\n        fontID = this.idFactory.createFontId();\n      }\n\n      font.cacheKey = `cacheKey_${fontID}`;\n      this.fontCache.put(font.cacheKey, fontCapability.promise);\n    }\n\n    (0, _util.assert)(fontID && fontID.startsWith(\"f\"), 'The \"fontID\" must be (correctly) defined.');\n    font.loadedName = `${this.idFactory.getDocId()}_${fontID}`;\n    this.translateFont(preEvaluatedFont).then(translatedFont => {\n      if (translatedFont.fontType !== undefined) {\n        var xrefFontStats = xref.stats.fontTypes;\n        xrefFontStats[translatedFont.fontType] = true;\n      }\n\n      fontCapability.resolve(new TranslatedFont({\n        loadedName: font.loadedName,\n        font: translatedFont,\n        dict: font,\n        extraProperties: this.options.fontExtraProperties\n      }));\n    }).catch(reason => {\n      this.handler.send(\"UnsupportedFeature\", {\n        featureId: _util.UNSUPPORTED_FEATURES.errorFontTranslate\n      });\n\n      try {\n        var fontFile3 = descriptor && descriptor.get(\"FontFile3\");\n        var subtype = fontFile3 && fontFile3.get(\"Subtype\");\n        var fontType = (0, _fonts.getFontType)(preEvaluatedFont.type, subtype && subtype.name);\n        var xrefFontStats = xref.stats.fontTypes;\n        xrefFontStats[fontType] = true;\n      } catch (ex) {}\n\n      fontCapability.resolve(new TranslatedFont({\n        loadedName: font.loadedName,\n        font: new _fonts.ErrorFont(reason instanceof Error ? reason.message : reason),\n        dict: font,\n        extraProperties: this.options.fontExtraProperties\n      }));\n    });\n    return fontCapability.promise;\n  }\n\n  buildPath(operatorList, fn, args, parsingText = false) {\n    var lastIndex = operatorList.length - 1;\n\n    if (!args) {\n      args = [];\n    }\n\n    if (lastIndex < 0 || operatorList.fnArray[lastIndex] !== _util.OPS.constructPath) {\n      if (parsingText) {\n        (0, _util.warn)(`Encountered path operator \"${fn}\" inside of a text object.`);\n        operatorList.addOp(_util.OPS.save, null);\n      }\n\n      operatorList.addOp(_util.OPS.constructPath, [[fn], args]);\n\n      if (parsingText) {\n        operatorList.addOp(_util.OPS.restore, null);\n      }\n    } else {\n      var opArgs = operatorList.argsArray[lastIndex];\n      opArgs[0].push(fn);\n      Array.prototype.push.apply(opArgs[1], args);\n    }\n  }\n\n  parseColorSpace({\n    cs,\n    resources,\n    localColorSpaceCache\n  }) {\n    return _colorspace.ColorSpace.parseAsync({\n      cs,\n      xref: this.xref,\n      resources,\n      pdfFunctionFactory: this._pdfFunctionFactory,\n      localColorSpaceCache\n    }).catch(reason => {\n      if (reason instanceof _util.AbortException) {\n        return null;\n      }\n\n      if (this.options.ignoreErrors) {\n        this.handler.send(\"UnsupportedFeature\", {\n          featureId: _util.UNSUPPORTED_FEATURES.errorColorSpace\n        });\n        (0, _util.warn)(`parseColorSpace - ignoring ColorSpace: \"${reason}\".`);\n        return null;\n      }\n\n      throw reason;\n    });\n  }\n\n  handleColorN(operatorList, fn, args, cs, patterns, resources, task, localColorSpaceCache, localTilingPatternCache) {\n    const patternName = args.pop();\n\n    if (patternName instanceof _primitives.Name) {\n      const name = patternName.name;\n      const localTilingPattern = localTilingPatternCache.getByName(name);\n\n      if (localTilingPattern) {\n        try {\n          const color = cs.base ? cs.base.getRgb(args, 0) : null;\n          const tilingPatternIR = (0, _pattern.getTilingPatternIR)(localTilingPattern.operatorListIR, localTilingPattern.dict, color);\n          operatorList.addOp(fn, tilingPatternIR);\n          return undefined;\n        } catch (ex) {\n          if (ex instanceof _core_utils.MissingDataException) {\n            throw ex;\n          }\n        }\n      }\n\n      let pattern = patterns.get(name);\n\n      if (pattern) {\n        var dict = (0, _primitives.isStream)(pattern) ? pattern.dict : pattern;\n        var typeNum = dict.get(\"PatternType\");\n\n        if (typeNum === PatternType.TILING) {\n          const color = cs.base ? cs.base.getRgb(args, 0) : null;\n          return this.handleTilingType(fn, color, resources, pattern, dict, operatorList, task, name, localTilingPatternCache);\n        } else if (typeNum === PatternType.SHADING) {\n          var shading = dict.get(\"Shading\");\n          var matrix = dict.getArray(\"Matrix\");\n          pattern = _pattern.Pattern.parseShading(shading, matrix, this.xref, resources, this.handler, this._pdfFunctionFactory, localColorSpaceCache);\n          operatorList.addOp(fn, pattern.getIR());\n          return undefined;\n        }\n\n        throw new _util.FormatError(`Unknown PatternType: ${typeNum}`);\n      }\n    }\n\n    throw new _util.FormatError(`Unknown PatternName: ${patternName}`);\n  }\n\n  async parseMarkedContentProps(contentProperties, resources) {\n    let optionalContent;\n\n    if ((0, _primitives.isName)(contentProperties)) {\n      const properties = resources.get(\"Properties\");\n      optionalContent = properties.get(contentProperties.name);\n    } else if ((0, _primitives.isDict)(contentProperties)) {\n      optionalContent = contentProperties;\n    } else {\n      throw new _util.FormatError(\"Optional content properties malformed.\");\n    }\n\n    const optionalContentType = optionalContent.get(\"Type\").name;\n\n    if (optionalContentType === \"OCG\") {\n      return {\n        type: optionalContentType,\n        id: optionalContent.objId\n      };\n    } else if (optionalContentType === \"OCMD\") {\n      const optionalContentGroups = optionalContent.get(\"OCGs\");\n\n      if (Array.isArray(optionalContentGroups) || (0, _primitives.isDict)(optionalContentGroups)) {\n        const groupIds = [];\n\n        if (Array.isArray(optionalContentGroups)) {\n          optionalContent.get(\"OCGs\").forEach(ocg => {\n            groupIds.push(ocg.toString());\n          });\n        } else {\n          groupIds.push(optionalContentGroups.objId);\n        }\n\n        let expression = null;\n\n        if (optionalContent.get(\"VE\")) {\n          expression = true;\n        }\n\n        return {\n          type: optionalContentType,\n          ids: groupIds,\n          policy: (0, _primitives.isName)(optionalContent.get(\"P\")) ? optionalContent.get(\"P\").name : null,\n          expression\n        };\n      } else if ((0, _primitives.isRef)(optionalContentGroups)) {\n        return {\n          type: optionalContentType,\n          id: optionalContentGroups.toString()\n        };\n      }\n    }\n\n    return null;\n  }\n\n  getOperatorList({\n    stream,\n    task,\n    resources,\n    operatorList,\n    initialState = null,\n    fallbackFontDict = null\n  }) {\n    resources = resources || _primitives.Dict.empty;\n    initialState = initialState || new EvalState();\n\n    if (!operatorList) {\n      throw new Error('getOperatorList: missing \"operatorList\" parameter');\n    }\n\n    var self = this;\n    var xref = this.xref;\n    let parsingText = false;\n    const localImageCache = new _image_utils.LocalImageCache();\n    const localColorSpaceCache = new _image_utils.LocalColorSpaceCache();\n    const localGStateCache = new _image_utils.LocalGStateCache();\n    const localTilingPatternCache = new _image_utils.LocalTilingPatternCache();\n\n    var xobjs = resources.get(\"XObject\") || _primitives.Dict.empty;\n\n    var patterns = resources.get(\"Pattern\") || _primitives.Dict.empty;\n\n    var stateManager = new StateManager(initialState);\n    var preprocessor = new EvaluatorPreprocessor(stream, xref, stateManager);\n    var timeSlotManager = new TimeSlotManager();\n\n    function closePendingRestoreOPS(argument) {\n      for (var i = 0, ii = preprocessor.savedStatesDepth; i < ii; i++) {\n        operatorList.addOp(_util.OPS.restore, []);\n      }\n    }\n\n    return new Promise(function promiseBody(resolve, reject) {\n      const next = function (promise) {\n        Promise.all([promise, operatorList.ready]).then(function () {\n          try {\n            promiseBody(resolve, reject);\n          } catch (ex) {\n            reject(ex);\n          }\n        }, reject);\n      };\n\n      task.ensureNotTerminated();\n      timeSlotManager.reset();\n      var stop,\n          operation = {},\n          i,\n          ii,\n          cs,\n          name;\n\n      while (!(stop = timeSlotManager.check())) {\n        operation.args = null;\n\n        if (!preprocessor.read(operation)) {\n          break;\n        }\n\n        var args = operation.args;\n        var fn = operation.fn;\n\n        switch (fn | 0) {\n          case _util.OPS.paintXObject:\n            name = args[0].name;\n\n            if (name) {\n              const localImage = localImageCache.getByName(name);\n\n              if (localImage) {\n                operatorList.addOp(localImage.fn, localImage.args);\n                args = null;\n                continue;\n              }\n            }\n\n            next(new Promise(function (resolveXObject, rejectXObject) {\n              if (!name) {\n                throw new _util.FormatError(\"XObject must be referred to by name.\");\n              }\n\n              let xobj = xobjs.getRaw(name);\n\n              if (xobj instanceof _primitives.Ref) {\n                const localImage = localImageCache.getByRef(xobj);\n\n                if (localImage) {\n                  operatorList.addOp(localImage.fn, localImage.args);\n                  resolveXObject();\n                  return;\n                }\n\n                const globalImage = self.globalImageCache.getData(xobj, self.pageIndex);\n\n                if (globalImage) {\n                  operatorList.addDependency(globalImage.objId);\n                  operatorList.addOp(globalImage.fn, globalImage.args);\n                  resolveXObject();\n                  return;\n                }\n\n                xobj = xref.fetch(xobj);\n              }\n\n              if (!(0, _primitives.isStream)(xobj)) {\n                throw new _util.FormatError(\"XObject should be a stream\");\n              }\n\n              const type = xobj.dict.get(\"Subtype\");\n\n              if (!(0, _primitives.isName)(type)) {\n                throw new _util.FormatError(\"XObject should have a Name subtype\");\n              }\n\n              if (type.name === \"Form\") {\n                stateManager.save();\n                self.buildFormXObject(resources, xobj, null, operatorList, task, stateManager.state.clone(), localColorSpaceCache).then(function () {\n                  stateManager.restore();\n                  resolveXObject();\n                }, rejectXObject);\n                return;\n              } else if (type.name === \"Image\") {\n                self.buildPaintImageXObject({\n                  resources,\n                  image: xobj,\n                  operatorList,\n                  cacheKey: name,\n                  localImageCache,\n                  localColorSpaceCache\n                }).then(resolveXObject, rejectXObject);\n                return;\n              } else if (type.name === \"PS\") {\n                (0, _util.info)(\"Ignored XObject subtype PS\");\n              } else {\n                throw new _util.FormatError(`Unhandled XObject subtype ${type.name}`);\n              }\n\n              resolveXObject();\n            }).catch(function (reason) {\n              if (reason instanceof _util.AbortException) {\n                return;\n              }\n\n              if (self.options.ignoreErrors) {\n                self.handler.send(\"UnsupportedFeature\", {\n                  featureId: _util.UNSUPPORTED_FEATURES.errorXObject\n                });\n                (0, _util.warn)(`getOperatorList - ignoring XObject: \"${reason}\".`);\n                return;\n              }\n\n              throw reason;\n            }));\n            return;\n\n          case _util.OPS.setFont:\n            var fontSize = args[1];\n            next(self.handleSetFont(resources, args, null, operatorList, task, stateManager.state, fallbackFontDict).then(function (loadedName) {\n              operatorList.addDependency(loadedName);\n              operatorList.addOp(_util.OPS.setFont, [loadedName, fontSize]);\n            }));\n            return;\n\n          case _util.OPS.beginText:\n            parsingText = true;\n            break;\n\n          case _util.OPS.endText:\n            parsingText = false;\n            break;\n\n          case _util.OPS.endInlineImage:\n            var cacheKey = args[0].cacheKey;\n\n            if (cacheKey) {\n              const localImage = localImageCache.getByName(cacheKey);\n\n              if (localImage) {\n                operatorList.addOp(localImage.fn, localImage.args);\n                args = null;\n                continue;\n              }\n            }\n\n            next(self.buildPaintImageXObject({\n              resources,\n              image: args[0],\n              isInline: true,\n              operatorList,\n              cacheKey,\n              localImageCache,\n              localColorSpaceCache\n            }));\n            return;\n\n          case _util.OPS.showText:\n            if (!stateManager.state.font) {\n              self.ensureStateFont(stateManager.state);\n              continue;\n            }\n\n            args[0] = self.handleText(args[0], stateManager.state);\n            break;\n\n          case _util.OPS.showSpacedText:\n            if (!stateManager.state.font) {\n              self.ensureStateFont(stateManager.state);\n              continue;\n            }\n\n            var arr = args[0];\n            var combinedGlyphs = [];\n            var arrLength = arr.length;\n            var state = stateManager.state;\n\n            for (i = 0; i < arrLength; ++i) {\n              var arrItem = arr[i];\n\n              if ((0, _util.isString)(arrItem)) {\n                Array.prototype.push.apply(combinedGlyphs, self.handleText(arrItem, state));\n              } else if ((0, _util.isNum)(arrItem)) {\n                combinedGlyphs.push(arrItem);\n              }\n            }\n\n            args[0] = combinedGlyphs;\n            fn = _util.OPS.showText;\n            break;\n\n          case _util.OPS.nextLineShowText:\n            if (!stateManager.state.font) {\n              self.ensureStateFont(stateManager.state);\n              continue;\n            }\n\n            operatorList.addOp(_util.OPS.nextLine);\n            args[0] = self.handleText(args[0], stateManager.state);\n            fn = _util.OPS.showText;\n            break;\n\n          case _util.OPS.nextLineSetSpacingShowText:\n            if (!stateManager.state.font) {\n              self.ensureStateFont(stateManager.state);\n              continue;\n            }\n\n            operatorList.addOp(_util.OPS.nextLine);\n            operatorList.addOp(_util.OPS.setWordSpacing, [args.shift()]);\n            operatorList.addOp(_util.OPS.setCharSpacing, [args.shift()]);\n            args[0] = self.handleText(args[0], stateManager.state);\n            fn = _util.OPS.showText;\n            break;\n\n          case _util.OPS.setTextRenderingMode:\n            stateManager.state.textRenderingMode = args[0];\n            break;\n\n          case _util.OPS.setFillColorSpace:\n            {\n              const cachedColorSpace = _colorspace.ColorSpace.getCached(args[0], xref, localColorSpaceCache);\n\n              if (cachedColorSpace) {\n                stateManager.state.fillColorSpace = cachedColorSpace;\n                continue;\n              }\n\n              next(self.parseColorSpace({\n                cs: args[0],\n                resources,\n                localColorSpaceCache\n              }).then(function (colorSpace) {\n                if (colorSpace) {\n                  stateManager.state.fillColorSpace = colorSpace;\n                }\n              }));\n              return;\n            }\n\n          case _util.OPS.setStrokeColorSpace:\n            {\n              const cachedColorSpace = _colorspace.ColorSpace.getCached(args[0], xref, localColorSpaceCache);\n\n              if (cachedColorSpace) {\n                stateManager.state.strokeColorSpace = cachedColorSpace;\n                continue;\n              }\n\n              next(self.parseColorSpace({\n                cs: args[0],\n                resources,\n                localColorSpaceCache\n              }).then(function (colorSpace) {\n                if (colorSpace) {\n                  stateManager.state.strokeColorSpace = colorSpace;\n                }\n              }));\n              return;\n            }\n\n          case _util.OPS.setFillColor:\n            cs = stateManager.state.fillColorSpace;\n            args = cs.getRgb(args, 0);\n            fn = _util.OPS.setFillRGBColor;\n            break;\n\n          case _util.OPS.setStrokeColor:\n            cs = stateManager.state.strokeColorSpace;\n            args = cs.getRgb(args, 0);\n            fn = _util.OPS.setStrokeRGBColor;\n            break;\n\n          case _util.OPS.setFillGray:\n            stateManager.state.fillColorSpace = _colorspace.ColorSpace.singletons.gray;\n            args = _colorspace.ColorSpace.singletons.gray.getRgb(args, 0);\n            fn = _util.OPS.setFillRGBColor;\n            break;\n\n          case _util.OPS.setStrokeGray:\n            stateManager.state.strokeColorSpace = _colorspace.ColorSpace.singletons.gray;\n            args = _colorspace.ColorSpace.singletons.gray.getRgb(args, 0);\n            fn = _util.OPS.setStrokeRGBColor;\n            break;\n\n          case _util.OPS.setFillCMYKColor:\n            stateManager.state.fillColorSpace = _colorspace.ColorSpace.singletons.cmyk;\n            args = _colorspace.ColorSpace.singletons.cmyk.getRgb(args, 0);\n            fn = _util.OPS.setFillRGBColor;\n            break;\n\n          case _util.OPS.setStrokeCMYKColor:\n            stateManager.state.strokeColorSpace = _colorspace.ColorSpace.singletons.cmyk;\n            args = _colorspace.ColorSpace.singletons.cmyk.getRgb(args, 0);\n            fn = _util.OPS.setStrokeRGBColor;\n            break;\n\n          case _util.OPS.setFillRGBColor:\n            stateManager.state.fillColorSpace = _colorspace.ColorSpace.singletons.rgb;\n            args = _colorspace.ColorSpace.singletons.rgb.getRgb(args, 0);\n            break;\n\n          case _util.OPS.setStrokeRGBColor:\n            stateManager.state.strokeColorSpace = _colorspace.ColorSpace.singletons.rgb;\n            args = _colorspace.ColorSpace.singletons.rgb.getRgb(args, 0);\n            break;\n\n          case _util.OPS.setFillColorN:\n            cs = stateManager.state.fillColorSpace;\n\n            if (cs.name === \"Pattern\") {\n              next(self.handleColorN(operatorList, _util.OPS.setFillColorN, args, cs, patterns, resources, task, localColorSpaceCache, localTilingPatternCache));\n              return;\n            }\n\n            args = cs.getRgb(args, 0);\n            fn = _util.OPS.setFillRGBColor;\n            break;\n\n          case _util.OPS.setStrokeColorN:\n            cs = stateManager.state.strokeColorSpace;\n\n            if (cs.name === \"Pattern\") {\n              next(self.handleColorN(operatorList, _util.OPS.setStrokeColorN, args, cs, patterns, resources, task, localColorSpaceCache, localTilingPatternCache));\n              return;\n            }\n\n            args = cs.getRgb(args, 0);\n            fn = _util.OPS.setStrokeRGBColor;\n            break;\n\n          case _util.OPS.shadingFill:\n            var shadingRes = resources.get(\"Shading\");\n\n            if (!shadingRes) {\n              throw new _util.FormatError(\"No shading resource found\");\n            }\n\n            var shading = shadingRes.get(args[0].name);\n\n            if (!shading) {\n              throw new _util.FormatError(\"No shading object found\");\n            }\n\n            var shadingFill = _pattern.Pattern.parseShading(shading, null, xref, resources, self.handler, self._pdfFunctionFactory, localColorSpaceCache);\n\n            var patternIR = shadingFill.getIR();\n            args = [patternIR];\n            fn = _util.OPS.shadingFill;\n            break;\n\n          case _util.OPS.setGState:\n            name = args[0].name;\n\n            if (name) {\n              const localGStateObj = localGStateCache.getByName(name);\n\n              if (localGStateObj) {\n                if (localGStateObj.length > 0) {\n                  operatorList.addOp(_util.OPS.setGState, [localGStateObj]);\n                }\n\n                args = null;\n                continue;\n              }\n            }\n\n            next(new Promise(function (resolveGState, rejectGState) {\n              if (!name) {\n                throw new _util.FormatError(\"GState must be referred to by name.\");\n              }\n\n              const extGState = resources.get(\"ExtGState\");\n\n              if (!(extGState instanceof _primitives.Dict)) {\n                throw new _util.FormatError(\"ExtGState should be a dictionary.\");\n              }\n\n              const gState = extGState.get(name);\n\n              if (!(gState instanceof _primitives.Dict)) {\n                throw new _util.FormatError(\"GState should be a dictionary.\");\n              }\n\n              self.setGState({\n                resources,\n                gState,\n                operatorList,\n                cacheKey: name,\n                task,\n                stateManager,\n                localGStateCache,\n                localColorSpaceCache\n              }).then(resolveGState, rejectGState);\n            }).catch(function (reason) {\n              if (reason instanceof _util.AbortException) {\n                return;\n              }\n\n              if (self.options.ignoreErrors) {\n                self.handler.send(\"UnsupportedFeature\", {\n                  featureId: _util.UNSUPPORTED_FEATURES.errorExtGState\n                });\n                (0, _util.warn)(`getOperatorList - ignoring ExtGState: \"${reason}\".`);\n                return;\n              }\n\n              throw reason;\n            }));\n            return;\n\n          case _util.OPS.moveTo:\n          case _util.OPS.lineTo:\n          case _util.OPS.curveTo:\n          case _util.OPS.curveTo2:\n          case _util.OPS.curveTo3:\n          case _util.OPS.closePath:\n          case _util.OPS.rectangle:\n            self.buildPath(operatorList, fn, args, parsingText);\n            continue;\n\n          case _util.OPS.markPoint:\n          case _util.OPS.markPointProps:\n          case _util.OPS.beginCompat:\n          case _util.OPS.endCompat:\n            continue;\n\n          case _util.OPS.beginMarkedContentProps:\n            if (!(0, _primitives.isName)(args[0])) {\n              (0, _util.warn)(`Expected name for beginMarkedContentProps arg0=${args[0]}`);\n              continue;\n            }\n\n            if (args[0].name === \"OC\") {\n              next(self.parseMarkedContentProps(args[1], resources).then(data => {\n                operatorList.addOp(_util.OPS.beginMarkedContentProps, [\"OC\", data]);\n              }).catch(reason => {\n                if (reason instanceof _util.AbortException) {\n                  return;\n                }\n\n                if (self.options.ignoreErrors) {\n                  self.handler.send(\"UnsupportedFeature\", {\n                    featureId: _util.UNSUPPORTED_FEATURES.errorMarkedContent\n                  });\n                  (0, _util.warn)(`getOperatorList - ignoring beginMarkedContentProps: \"${reason}\".`);\n                  return;\n                }\n\n                throw reason;\n              }));\n              return;\n            }\n\n            args = [args[0].name];\n            break;\n\n          case _util.OPS.beginMarkedContent:\n          case _util.OPS.endMarkedContent:\n          default:\n            if (args !== null) {\n              for (i = 0, ii = args.length; i < ii; i++) {\n                if (args[i] instanceof _primitives.Dict) {\n                  break;\n                }\n              }\n\n              if (i < ii) {\n                (0, _util.warn)(\"getOperatorList - ignoring operator: \" + fn);\n                continue;\n              }\n            }\n\n        }\n\n        operatorList.addOp(fn, args);\n      }\n\n      if (stop) {\n        next(deferred);\n        return;\n      }\n\n      closePendingRestoreOPS();\n      resolve();\n    }).catch(reason => {\n      if (reason instanceof _util.AbortException) {\n        return;\n      }\n\n      if (this.options.ignoreErrors) {\n        this.handler.send(\"UnsupportedFeature\", {\n          featureId: _util.UNSUPPORTED_FEATURES.errorOperatorList\n        });\n        (0, _util.warn)(`getOperatorList - ignoring errors during \"${task.name}\" ` + `task: \"${reason}\".`);\n        closePendingRestoreOPS();\n        return;\n      }\n\n      throw reason;\n    });\n  }\n\n  getTextContent({\n    stream,\n    task,\n    resources,\n    stateManager = null,\n    normalizeWhitespace = false,\n    combineTextItems = false,\n    sink,\n    seenStyles = Object.create(null)\n  }) {\n    resources = resources || _primitives.Dict.empty;\n    stateManager = stateManager || new StateManager(new TextState());\n    var WhitespaceRegexp = /\\s/g;\n    var textContent = {\n      items: [],\n      styles: Object.create(null)\n    };\n    var textContentItem = {\n      initialized: false,\n      str: [],\n      width: 0,\n      height: 0,\n      vertical: false,\n      lastAdvanceWidth: 0,\n      lastAdvanceHeight: 0,\n      textAdvanceScale: 0,\n      spaceWidth: 0,\n      fakeSpaceMin: Infinity,\n      fakeMultiSpaceMin: Infinity,\n      fakeMultiSpaceMax: -0,\n      textRunBreakAllowed: false,\n      transform: null,\n      fontName: null\n    };\n    var SPACE_FACTOR = 0.3;\n    var MULTI_SPACE_FACTOR = 1.5;\n    var MULTI_SPACE_FACTOR_MAX = 4;\n    var self = this;\n    var xref = this.xref;\n    var xobjs = null;\n    const emptyXObjectCache = new _image_utils.LocalImageCache();\n    const emptyGStateCache = new _image_utils.LocalGStateCache();\n    var preprocessor = new EvaluatorPreprocessor(stream, xref, stateManager);\n    var textState;\n\n    function ensureTextContentItem() {\n      if (textContentItem.initialized) {\n        return textContentItem;\n      }\n\n      var font = textState.font;\n\n      if (!(font.loadedName in seenStyles)) {\n        seenStyles[font.loadedName] = true;\n        textContent.styles[font.loadedName] = {\n          fontFamily: font.fallbackName,\n          ascent: font.ascent,\n          descent: font.descent,\n          vertical: font.vertical\n        };\n      }\n\n      textContentItem.fontName = font.loadedName;\n      var tsm = [textState.fontSize * textState.textHScale, 0, 0, textState.fontSize, 0, textState.textRise];\n\n      if (font.isType3Font && textState.fontSize <= 1 && !(0, _util.isArrayEqual)(textState.fontMatrix, _util.FONT_IDENTITY_MATRIX)) {\n        const glyphHeight = font.bbox[3] - font.bbox[1];\n\n        if (glyphHeight > 0) {\n          tsm[3] *= glyphHeight * textState.fontMatrix[3];\n        }\n      }\n\n      var trm = _util.Util.transform(textState.ctm, _util.Util.transform(textState.textMatrix, tsm));\n\n      textContentItem.transform = trm;\n\n      if (!font.vertical) {\n        textContentItem.width = 0;\n        textContentItem.height = Math.sqrt(trm[2] * trm[2] + trm[3] * trm[3]);\n        textContentItem.vertical = false;\n      } else {\n        textContentItem.width = Math.sqrt(trm[0] * trm[0] + trm[1] * trm[1]);\n        textContentItem.height = 0;\n        textContentItem.vertical = true;\n      }\n\n      var a = textState.textLineMatrix[0];\n      var b = textState.textLineMatrix[1];\n      var scaleLineX = Math.sqrt(a * a + b * b);\n      a = textState.ctm[0];\n      b = textState.ctm[1];\n      var scaleCtmX = Math.sqrt(a * a + b * b);\n      textContentItem.textAdvanceScale = scaleCtmX * scaleLineX;\n      textContentItem.lastAdvanceWidth = 0;\n      textContentItem.lastAdvanceHeight = 0;\n      var spaceWidth = font.spaceWidth / 1000 * textState.fontSize;\n\n      if (spaceWidth) {\n        textContentItem.spaceWidth = spaceWidth;\n        textContentItem.fakeSpaceMin = spaceWidth * SPACE_FACTOR;\n        textContentItem.fakeMultiSpaceMin = spaceWidth * MULTI_SPACE_FACTOR;\n        textContentItem.fakeMultiSpaceMax = spaceWidth * MULTI_SPACE_FACTOR_MAX;\n        textContentItem.textRunBreakAllowed = !font.isMonospace;\n      } else {\n        textContentItem.spaceWidth = 0;\n        textContentItem.fakeSpaceMin = Infinity;\n        textContentItem.fakeMultiSpaceMin = Infinity;\n        textContentItem.fakeMultiSpaceMax = 0;\n        textContentItem.textRunBreakAllowed = false;\n      }\n\n      textContentItem.initialized = true;\n      return textContentItem;\n    }\n\n    function replaceWhitespace(str) {\n      var i = 0,\n          ii = str.length,\n          code;\n\n      while (i < ii && (code = str.charCodeAt(i)) >= 0x20 && code <= 0x7f) {\n        i++;\n      }\n\n      return i < ii ? str.replace(WhitespaceRegexp, \" \") : str;\n    }\n\n    function runBidiTransform(textChunk) {\n      var str = textChunk.str.join(\"\");\n      var bidiResult = (0, _bidi.bidi)(str, -1, textChunk.vertical);\n      return {\n        str: normalizeWhitespace ? replaceWhitespace(bidiResult.str) : bidiResult.str,\n        dir: bidiResult.dir,\n        width: textChunk.width,\n        height: textChunk.height,\n        transform: textChunk.transform,\n        fontName: textChunk.fontName\n      };\n    }\n\n    function handleSetFont(fontName, fontRef) {\n      return self.loadFont(fontName, fontRef, resources).then(function (translated) {\n        textState.font = translated.font;\n        textState.fontMatrix = translated.font.fontMatrix || _util.FONT_IDENTITY_MATRIX;\n      });\n    }\n\n    function buildTextContentItem(chars) {\n      var font = textState.font;\n      var textChunk = ensureTextContentItem();\n      var width = 0;\n      var height = 0;\n      var glyphs = font.charsToGlyphs(chars);\n\n      for (var i = 0; i < glyphs.length; i++) {\n        var glyph = glyphs[i];\n        var glyphWidth = null;\n\n        if (font.vertical && glyph.vmetric) {\n          glyphWidth = glyph.vmetric[0];\n        } else {\n          glyphWidth = glyph.width;\n        }\n\n        var glyphUnicode = glyph.unicode;\n        var NormalizedUnicodes = (0, _unicode.getNormalizedUnicodes)();\n\n        if (NormalizedUnicodes[glyphUnicode] !== undefined) {\n          glyphUnicode = NormalizedUnicodes[glyphUnicode];\n        }\n\n        glyphUnicode = (0, _unicode.reverseIfRtl)(glyphUnicode);\n        var charSpacing = textState.charSpacing;\n\n        if (glyph.isSpace) {\n          var wordSpacing = textState.wordSpacing;\n          charSpacing += wordSpacing;\n\n          if (wordSpacing > 0) {\n            addFakeSpaces(wordSpacing, textChunk.str);\n          }\n        }\n\n        var tx = 0;\n        var ty = 0;\n\n        if (!font.vertical) {\n          var w0 = glyphWidth * textState.fontMatrix[0];\n          tx = (w0 * textState.fontSize + charSpacing) * textState.textHScale;\n          width += tx;\n        } else {\n          var w1 = glyphWidth * textState.fontMatrix[0];\n          ty = w1 * textState.fontSize + charSpacing;\n          height += ty;\n        }\n\n        textState.translateTextMatrix(tx, ty);\n        textChunk.str.push(glyphUnicode);\n      }\n\n      if (!font.vertical) {\n        textChunk.lastAdvanceWidth = width;\n        textChunk.width += width;\n      } else {\n        textChunk.lastAdvanceHeight = height;\n        textChunk.height += Math.abs(height);\n      }\n\n      return textChunk;\n    }\n\n    function addFakeSpaces(width, strBuf) {\n      if (width < textContentItem.fakeSpaceMin) {\n        return;\n      }\n\n      if (width < textContentItem.fakeMultiSpaceMin) {\n        strBuf.push(\" \");\n        return;\n      }\n\n      var fakeSpaces = Math.round(width / textContentItem.spaceWidth);\n\n      while (fakeSpaces-- > 0) {\n        strBuf.push(\" \");\n      }\n    }\n\n    function flushTextContentItem() {\n      if (!textContentItem.initialized) {\n        return;\n      }\n\n      if (!textContentItem.vertical) {\n        textContentItem.width *= textContentItem.textAdvanceScale;\n      } else {\n        textContentItem.height *= textContentItem.textAdvanceScale;\n      }\n\n      textContent.items.push(runBidiTransform(textContentItem));\n      textContentItem.initialized = false;\n      textContentItem.str.length = 0;\n    }\n\n    function enqueueChunk() {\n      const length = textContent.items.length;\n\n      if (length > 0) {\n        sink.enqueue(textContent, length);\n        textContent.items = [];\n        textContent.styles = Object.create(null);\n      }\n    }\n\n    var timeSlotManager = new TimeSlotManager();\n    return new Promise(function promiseBody(resolve, reject) {\n      const next = function (promise) {\n        enqueueChunk();\n        Promise.all([promise, sink.ready]).then(function () {\n          try {\n            promiseBody(resolve, reject);\n          } catch (ex) {\n            reject(ex);\n          }\n        }, reject);\n      };\n\n      task.ensureNotTerminated();\n      timeSlotManager.reset();\n      var stop,\n          operation = {},\n          args = [];\n\n      while (!(stop = timeSlotManager.check())) {\n        args.length = 0;\n        operation.args = args;\n\n        if (!preprocessor.read(operation)) {\n          break;\n        }\n\n        textState = stateManager.state;\n        var fn = operation.fn;\n        args = operation.args;\n        var advance, diff;\n\n        switch (fn | 0) {\n          case _util.OPS.setFont:\n            var fontNameArg = args[0].name,\n                fontSizeArg = args[1];\n\n            if (textState.font && fontNameArg === textState.fontName && fontSizeArg === textState.fontSize) {\n              break;\n            }\n\n            flushTextContentItem();\n            textState.fontName = fontNameArg;\n            textState.fontSize = fontSizeArg;\n            next(handleSetFont(fontNameArg, null));\n            return;\n\n          case _util.OPS.setTextRise:\n            flushTextContentItem();\n            textState.textRise = args[0];\n            break;\n\n          case _util.OPS.setHScale:\n            flushTextContentItem();\n            textState.textHScale = args[0] / 100;\n            break;\n\n          case _util.OPS.setLeading:\n            flushTextContentItem();\n            textState.leading = args[0];\n            break;\n\n          case _util.OPS.moveText:\n            var isSameTextLine = !textState.font ? false : (textState.font.vertical ? args[0] : args[1]) === 0;\n            advance = args[0] - args[1];\n\n            if (combineTextItems && isSameTextLine && textContentItem.initialized && advance > 0 && advance <= textContentItem.fakeMultiSpaceMax) {\n              textState.translateTextLineMatrix(args[0], args[1]);\n              textContentItem.width += args[0] - textContentItem.lastAdvanceWidth;\n              textContentItem.height += args[1] - textContentItem.lastAdvanceHeight;\n              diff = args[0] - textContentItem.lastAdvanceWidth - (args[1] - textContentItem.lastAdvanceHeight);\n              addFakeSpaces(diff, textContentItem.str);\n              break;\n            }\n\n            flushTextContentItem();\n            textState.translateTextLineMatrix(args[0], args[1]);\n            textState.textMatrix = textState.textLineMatrix.slice();\n            break;\n\n          case _util.OPS.setLeadingMoveText:\n            flushTextContentItem();\n            textState.leading = -args[1];\n            textState.translateTextLineMatrix(args[0], args[1]);\n            textState.textMatrix = textState.textLineMatrix.slice();\n            break;\n\n          case _util.OPS.nextLine:\n            flushTextContentItem();\n            textState.carriageReturn();\n            break;\n\n          case _util.OPS.setTextMatrix:\n            advance = textState.calcTextLineMatrixAdvance(args[0], args[1], args[2], args[3], args[4], args[5]);\n\n            if (combineTextItems && advance !== null && textContentItem.initialized && advance.value > 0 && advance.value <= textContentItem.fakeMultiSpaceMax) {\n              textState.translateTextLineMatrix(advance.width, advance.height);\n              textContentItem.width += advance.width - textContentItem.lastAdvanceWidth;\n              textContentItem.height += advance.height - textContentItem.lastAdvanceHeight;\n              diff = advance.width - textContentItem.lastAdvanceWidth - (advance.height - textContentItem.lastAdvanceHeight);\n              addFakeSpaces(diff, textContentItem.str);\n              break;\n            }\n\n            flushTextContentItem();\n            textState.setTextMatrix(args[0], args[1], args[2], args[3], args[4], args[5]);\n            textState.setTextLineMatrix(args[0], args[1], args[2], args[3], args[4], args[5]);\n            break;\n\n          case _util.OPS.setCharSpacing:\n            textState.charSpacing = args[0];\n            break;\n\n          case _util.OPS.setWordSpacing:\n            textState.wordSpacing = args[0];\n            break;\n\n          case _util.OPS.beginText:\n            flushTextContentItem();\n            textState.textMatrix = _util.IDENTITY_MATRIX.slice();\n            textState.textLineMatrix = _util.IDENTITY_MATRIX.slice();\n            break;\n\n          case _util.OPS.showSpacedText:\n            if (!stateManager.state.font) {\n              self.ensureStateFont(stateManager.state);\n              continue;\n            }\n\n            var items = args[0];\n            var offset;\n\n            for (var j = 0, jj = items.length; j < jj; j++) {\n              if (typeof items[j] === \"string\") {\n                buildTextContentItem(items[j]);\n              } else if ((0, _util.isNum)(items[j])) {\n                ensureTextContentItem();\n                advance = items[j] * textState.fontSize / 1000;\n                var breakTextRun = false;\n\n                if (textState.font.vertical) {\n                  offset = advance;\n                  textState.translateTextMatrix(0, offset);\n                  breakTextRun = textContentItem.textRunBreakAllowed && advance > textContentItem.fakeMultiSpaceMax;\n\n                  if (!breakTextRun) {\n                    textContentItem.height += offset;\n                  }\n                } else {\n                  advance = -advance;\n                  offset = advance * textState.textHScale;\n                  textState.translateTextMatrix(offset, 0);\n                  breakTextRun = textContentItem.textRunBreakAllowed && advance > textContentItem.fakeMultiSpaceMax;\n\n                  if (!breakTextRun) {\n                    textContentItem.width += offset;\n                  }\n                }\n\n                if (breakTextRun) {\n                  flushTextContentItem();\n                } else if (advance > 0) {\n                  addFakeSpaces(advance, textContentItem.str);\n                }\n              }\n            }\n\n            break;\n\n          case _util.OPS.showText:\n            if (!stateManager.state.font) {\n              self.ensureStateFont(stateManager.state);\n              continue;\n            }\n\n            buildTextContentItem(args[0]);\n            break;\n\n          case _util.OPS.nextLineShowText:\n            if (!stateManager.state.font) {\n              self.ensureStateFont(stateManager.state);\n              continue;\n            }\n\n            flushTextContentItem();\n            textState.carriageReturn();\n            buildTextContentItem(args[0]);\n            break;\n\n          case _util.OPS.nextLineSetSpacingShowText:\n            if (!stateManager.state.font) {\n              self.ensureStateFont(stateManager.state);\n              continue;\n            }\n\n            flushTextContentItem();\n            textState.wordSpacing = args[0];\n            textState.charSpacing = args[1];\n            textState.carriageReturn();\n            buildTextContentItem(args[2]);\n            break;\n\n          case _util.OPS.paintXObject:\n            flushTextContentItem();\n\n            if (!xobjs) {\n              xobjs = resources.get(\"XObject\") || _primitives.Dict.empty;\n            }\n\n            var name = args[0].name;\n\n            if (name && emptyXObjectCache.getByName(name)) {\n              break;\n            }\n\n            next(new Promise(function (resolveXObject, rejectXObject) {\n              if (!name) {\n                throw new _util.FormatError(\"XObject must be referred to by name.\");\n              }\n\n              let xobj = xobjs.getRaw(name);\n\n              if (xobj instanceof _primitives.Ref) {\n                if (emptyXObjectCache.getByRef(xobj)) {\n                  resolveXObject();\n                  return;\n                }\n\n                xobj = xref.fetch(xobj);\n              }\n\n              if (!(0, _primitives.isStream)(xobj)) {\n                throw new _util.FormatError(\"XObject should be a stream\");\n              }\n\n              const type = xobj.dict.get(\"Subtype\");\n\n              if (!(0, _primitives.isName)(type)) {\n                throw new _util.FormatError(\"XObject should have a Name subtype\");\n              }\n\n              if (type.name !== \"Form\") {\n                emptyXObjectCache.set(name, xobj.dict.objId, true);\n                resolveXObject();\n                return;\n              }\n\n              const currentState = stateManager.state.clone();\n              const xObjStateManager = new StateManager(currentState);\n              const matrix = xobj.dict.getArray(\"Matrix\");\n\n              if (Array.isArray(matrix) && matrix.length === 6) {\n                xObjStateManager.transform(matrix);\n              }\n\n              enqueueChunk();\n              const sinkWrapper = {\n                enqueueInvoked: false,\n\n                enqueue(chunk, size) {\n                  this.enqueueInvoked = true;\n                  sink.enqueue(chunk, size);\n                },\n\n                get desiredSize() {\n                  return sink.desiredSize;\n                },\n\n                get ready() {\n                  return sink.ready;\n                }\n\n              };\n              self.getTextContent({\n                stream: xobj,\n                task,\n                resources: xobj.dict.get(\"Resources\") || resources,\n                stateManager: xObjStateManager,\n                normalizeWhitespace,\n                combineTextItems,\n                sink: sinkWrapper,\n                seenStyles\n              }).then(function () {\n                if (!sinkWrapper.enqueueInvoked) {\n                  emptyXObjectCache.set(name, xobj.dict.objId, true);\n                }\n\n                resolveXObject();\n              }, rejectXObject);\n            }).catch(function (reason) {\n              if (reason instanceof _util.AbortException) {\n                return;\n              }\n\n              if (self.options.ignoreErrors) {\n                (0, _util.warn)(`getTextContent - ignoring XObject: \"${reason}\".`);\n                return;\n              }\n\n              throw reason;\n            }));\n            return;\n\n          case _util.OPS.setGState:\n            name = args[0].name;\n\n            if (name && emptyGStateCache.getByName(name)) {\n              break;\n            }\n\n            next(new Promise(function (resolveGState, rejectGState) {\n              if (!name) {\n                throw new _util.FormatError(\"GState must be referred to by name.\");\n              }\n\n              const extGState = resources.get(\"ExtGState\");\n\n              if (!(extGState instanceof _primitives.Dict)) {\n                throw new _util.FormatError(\"ExtGState should be a dictionary.\");\n              }\n\n              const gState = extGState.get(name);\n\n              if (!(gState instanceof _primitives.Dict)) {\n                throw new _util.FormatError(\"GState should be a dictionary.\");\n              }\n\n              const gStateFont = gState.get(\"Font\");\n\n              if (!gStateFont) {\n                emptyGStateCache.set(name, gState.objId, true);\n                resolveGState();\n                return;\n              }\n\n              flushTextContentItem();\n              textState.fontName = null;\n              textState.fontSize = gStateFont[1];\n              handleSetFont(null, gStateFont[0]).then(resolveGState, rejectGState);\n            }).catch(function (reason) {\n              if (reason instanceof _util.AbortException) {\n                return;\n              }\n\n              if (self.options.ignoreErrors) {\n                (0, _util.warn)(`getTextContent - ignoring ExtGState: \"${reason}\".`);\n                return;\n              }\n\n              throw reason;\n            }));\n            return;\n        }\n\n        if (textContent.items.length >= sink.desiredSize) {\n          stop = true;\n          break;\n        }\n      }\n\n      if (stop) {\n        next(deferred);\n        return;\n      }\n\n      flushTextContentItem();\n      enqueueChunk();\n      resolve();\n    }).catch(reason => {\n      if (reason instanceof _util.AbortException) {\n        return;\n      }\n\n      if (this.options.ignoreErrors) {\n        (0, _util.warn)(`getTextContent - ignoring errors during \"${task.name}\" ` + `task: \"${reason}\".`);\n        flushTextContentItem();\n        enqueueChunk();\n        return;\n      }\n\n      throw reason;\n    });\n  }\n\n  extractDataStructures(dict, baseDict, properties) {\n    const xref = this.xref;\n    let cidToGidBytes;\n    var toUnicode = dict.get(\"ToUnicode\") || baseDict.get(\"ToUnicode\");\n    var toUnicodePromise = toUnicode ? this.readToUnicode(toUnicode) : Promise.resolve(undefined);\n\n    if (properties.composite) {\n      var cidSystemInfo = dict.get(\"CIDSystemInfo\");\n\n      if ((0, _primitives.isDict)(cidSystemInfo)) {\n        properties.cidSystemInfo = {\n          registry: (0, _util.stringToPDFString)(cidSystemInfo.get(\"Registry\")),\n          ordering: (0, _util.stringToPDFString)(cidSystemInfo.get(\"Ordering\")),\n          supplement: cidSystemInfo.get(\"Supplement\")\n        };\n      }\n\n      var cidToGidMap = dict.get(\"CIDToGIDMap\");\n\n      if ((0, _primitives.isStream)(cidToGidMap)) {\n        cidToGidBytes = cidToGidMap.getBytes();\n      }\n    }\n\n    var differences = [];\n    var baseEncodingName = null;\n    var encoding;\n\n    if (dict.has(\"Encoding\")) {\n      encoding = dict.get(\"Encoding\");\n\n      if ((0, _primitives.isDict)(encoding)) {\n        baseEncodingName = encoding.get(\"BaseEncoding\");\n        baseEncodingName = (0, _primitives.isName)(baseEncodingName) ? baseEncodingName.name : null;\n\n        if (encoding.has(\"Differences\")) {\n          var diffEncoding = encoding.get(\"Differences\");\n          var index = 0;\n\n          for (var j = 0, jj = diffEncoding.length; j < jj; j++) {\n            var data = xref.fetchIfRef(diffEncoding[j]);\n\n            if ((0, _util.isNum)(data)) {\n              index = data;\n            } else if ((0, _primitives.isName)(data)) {\n              differences[index++] = data.name;\n            } else {\n              throw new _util.FormatError(`Invalid entry in 'Differences' array: ${data}`);\n            }\n          }\n        }\n      } else if ((0, _primitives.isName)(encoding)) {\n        baseEncodingName = encoding.name;\n      } else {\n        throw new _util.FormatError(\"Encoding is not a Name nor a Dict\");\n      }\n\n      if (baseEncodingName !== \"MacRomanEncoding\" && baseEncodingName !== \"MacExpertEncoding\" && baseEncodingName !== \"WinAnsiEncoding\") {\n        baseEncodingName = null;\n      }\n    }\n\n    if (baseEncodingName) {\n      properties.defaultEncoding = (0, _encodings.getEncoding)(baseEncodingName).slice();\n    } else {\n      var isSymbolicFont = !!(properties.flags & _fonts.FontFlags.Symbolic);\n      var isNonsymbolicFont = !!(properties.flags & _fonts.FontFlags.Nonsymbolic);\n      encoding = _encodings.StandardEncoding;\n\n      if (properties.type === \"TrueType\" && !isNonsymbolicFont) {\n        encoding = _encodings.WinAnsiEncoding;\n      }\n\n      if (isSymbolicFont) {\n        encoding = _encodings.MacRomanEncoding;\n\n        if (!properties.file) {\n          if (/Symbol/i.test(properties.name)) {\n            encoding = _encodings.SymbolSetEncoding;\n          } else if (/Dingbats|Wingdings/i.test(properties.name)) {\n            encoding = _encodings.ZapfDingbatsEncoding;\n          }\n        }\n      }\n\n      properties.defaultEncoding = encoding;\n    }\n\n    properties.differences = differences;\n    properties.baseEncodingName = baseEncodingName;\n    properties.hasEncoding = !!baseEncodingName || differences.length > 0;\n    properties.dict = dict;\n    return toUnicodePromise.then(readToUnicode => {\n      properties.toUnicode = readToUnicode;\n      return this.buildToUnicode(properties);\n    }).then(builtToUnicode => {\n      properties.toUnicode = builtToUnicode;\n\n      if (cidToGidBytes) {\n        properties.cidToGidMap = this.readCidToGidMap(cidToGidBytes, builtToUnicode);\n      }\n\n      return properties;\n    });\n  }\n\n  _buildSimpleFontToUnicode(properties, forceGlyphs = false) {\n    (0, _util.assert)(!properties.composite, \"Must be a simple font.\");\n    const toUnicode = [];\n    const encoding = properties.defaultEncoding.slice();\n    const baseEncodingName = properties.baseEncodingName;\n    const differences = properties.differences;\n\n    for (const charcode in differences) {\n      const glyphName = differences[charcode];\n\n      if (glyphName === \".notdef\") {\n        continue;\n      }\n\n      encoding[charcode] = glyphName;\n    }\n\n    const glyphsUnicodeMap = (0, _glyphlist.getGlyphsUnicode)();\n\n    for (const charcode in encoding) {\n      let glyphName = encoding[charcode];\n\n      if (glyphName === \"\") {\n        continue;\n      } else if (glyphsUnicodeMap[glyphName] === undefined) {\n        let code = 0;\n\n        switch (glyphName[0]) {\n          case \"G\":\n            if (glyphName.length === 3) {\n              code = parseInt(glyphName.substring(1), 16);\n            }\n\n            break;\n\n          case \"g\":\n            if (glyphName.length === 5) {\n              code = parseInt(glyphName.substring(1), 16);\n            }\n\n            break;\n\n          case \"C\":\n          case \"c\":\n            if (glyphName.length >= 3 && glyphName.length <= 4) {\n              const codeStr = glyphName.substring(1);\n\n              if (forceGlyphs) {\n                code = parseInt(codeStr, 16);\n                break;\n              }\n\n              code = +codeStr;\n\n              if (Number.isNaN(code) && Number.isInteger(parseInt(codeStr, 16))) {\n                return this._buildSimpleFontToUnicode(properties, true);\n              }\n            }\n\n            break;\n\n          default:\n            const unicode = (0, _unicode.getUnicodeForGlyph)(glyphName, glyphsUnicodeMap);\n\n            if (unicode !== -1) {\n              code = unicode;\n            }\n\n        }\n\n        if (code > 0 && code <= 0x10ffff && Number.isInteger(code)) {\n          if (baseEncodingName && code === +charcode) {\n            const baseEncoding = (0, _encodings.getEncoding)(baseEncodingName);\n\n            if (baseEncoding && (glyphName = baseEncoding[charcode])) {\n              toUnicode[charcode] = String.fromCharCode(glyphsUnicodeMap[glyphName]);\n              continue;\n            }\n          }\n\n          toUnicode[charcode] = String.fromCodePoint(code);\n        }\n\n        continue;\n      }\n\n      toUnicode[charcode] = String.fromCharCode(glyphsUnicodeMap[glyphName]);\n    }\n\n    return new _fonts.ToUnicodeMap(toUnicode);\n  }\n\n  buildToUnicode(properties) {\n    properties.hasIncludedToUnicodeMap = !!properties.toUnicode && properties.toUnicode.length > 0;\n\n    if (properties.hasIncludedToUnicodeMap) {\n      if (!properties.composite && properties.hasEncoding) {\n        properties.fallbackToUnicode = this._buildSimpleFontToUnicode(properties);\n      }\n\n      return Promise.resolve(properties.toUnicode);\n    }\n\n    if (!properties.composite) {\n      return Promise.resolve(this._buildSimpleFontToUnicode(properties));\n    }\n\n    if (properties.composite && (properties.cMap.builtInCMap && !(properties.cMap instanceof _cmap.IdentityCMap) || properties.cidSystemInfo.registry === \"Adobe\" && (properties.cidSystemInfo.ordering === \"GB1\" || properties.cidSystemInfo.ordering === \"CNS1\" || properties.cidSystemInfo.ordering === \"Japan1\" || properties.cidSystemInfo.ordering === \"Korea1\"))) {\n      const registry = properties.cidSystemInfo.registry;\n      const ordering = properties.cidSystemInfo.ordering;\n\n      const ucs2CMapName = _primitives.Name.get(registry + \"-\" + ordering + \"-UCS2\");\n\n      return _cmap.CMapFactory.create({\n        encoding: ucs2CMapName,\n        fetchBuiltInCMap: this._fetchBuiltInCMapBound,\n        useCMap: null\n      }).then(function (ucs2CMap) {\n        const cMap = properties.cMap;\n        const toUnicode = [];\n        cMap.forEach(function (charcode, cid) {\n          if (cid > 0xffff) {\n            throw new _util.FormatError(\"Max size of CID is 65,535\");\n          }\n\n          const ucs2 = ucs2CMap.lookup(cid);\n\n          if (ucs2) {\n            toUnicode[charcode] = String.fromCharCode((ucs2.charCodeAt(0) << 8) + ucs2.charCodeAt(1));\n          }\n        });\n        return new _fonts.ToUnicodeMap(toUnicode);\n      });\n    }\n\n    return Promise.resolve(new _fonts.IdentityToUnicodeMap(properties.firstChar, properties.lastChar));\n  }\n\n  readToUnicode(toUnicode) {\n    var cmapObj = toUnicode;\n\n    if ((0, _primitives.isName)(cmapObj)) {\n      return _cmap.CMapFactory.create({\n        encoding: cmapObj,\n        fetchBuiltInCMap: this._fetchBuiltInCMapBound,\n        useCMap: null\n      }).then(function (cmap) {\n        if (cmap instanceof _cmap.IdentityCMap) {\n          return new _fonts.IdentityToUnicodeMap(0, 0xffff);\n        }\n\n        return new _fonts.ToUnicodeMap(cmap.getMap());\n      });\n    } else if ((0, _primitives.isStream)(cmapObj)) {\n      return _cmap.CMapFactory.create({\n        encoding: cmapObj,\n        fetchBuiltInCMap: this._fetchBuiltInCMapBound,\n        useCMap: null\n      }).then(function (cmap) {\n        if (cmap instanceof _cmap.IdentityCMap) {\n          return new _fonts.IdentityToUnicodeMap(0, 0xffff);\n        }\n\n        var map = new Array(cmap.length);\n        cmap.forEach(function (charCode, token) {\n          var str = [];\n\n          for (var k = 0; k < token.length; k += 2) {\n            var w1 = token.charCodeAt(k) << 8 | token.charCodeAt(k + 1);\n\n            if ((w1 & 0xf800) !== 0xd800) {\n              str.push(w1);\n              continue;\n            }\n\n            k += 2;\n            var w2 = token.charCodeAt(k) << 8 | token.charCodeAt(k + 1);\n            str.push(((w1 & 0x3ff) << 10) + (w2 & 0x3ff) + 0x10000);\n          }\n\n          map[charCode] = String.fromCodePoint.apply(String, str);\n        });\n        return new _fonts.ToUnicodeMap(map);\n      }, reason => {\n        if (reason instanceof _util.AbortException) {\n          return null;\n        }\n\n        if (this.options.ignoreErrors) {\n          this.handler.send(\"UnsupportedFeature\", {\n            featureId: _util.UNSUPPORTED_FEATURES.errorFontToUnicode\n          });\n          (0, _util.warn)(`readToUnicode - ignoring ToUnicode data: \"${reason}\".`);\n          return null;\n        }\n\n        throw reason;\n      });\n    }\n\n    return Promise.resolve(null);\n  }\n\n  readCidToGidMap(glyphsData, toUnicode) {\n    var result = [];\n\n    for (var j = 0, jj = glyphsData.length; j < jj; j++) {\n      var glyphID = glyphsData[j++] << 8 | glyphsData[j];\n      const code = j >> 1;\n\n      if (glyphID === 0 && !toUnicode.has(code)) {\n        continue;\n      }\n\n      result[code] = glyphID;\n    }\n\n    return result;\n  }\n\n  extractWidths(dict, descriptor, properties) {\n    var xref = this.xref;\n    var glyphsWidths = [];\n    var defaultWidth = 0;\n    var glyphsVMetrics = [];\n    var defaultVMetrics;\n    var i, ii, j, jj, start, code, widths;\n\n    if (properties.composite) {\n      defaultWidth = dict.has(\"DW\") ? dict.get(\"DW\") : 1000;\n      widths = dict.get(\"W\");\n\n      if (widths) {\n        for (i = 0, ii = widths.length; i < ii; i++) {\n          start = xref.fetchIfRef(widths[i++]);\n          code = xref.fetchIfRef(widths[i]);\n\n          if (Array.isArray(code)) {\n            for (j = 0, jj = code.length; j < jj; j++) {\n              glyphsWidths[start++] = xref.fetchIfRef(code[j]);\n            }\n          } else {\n            var width = xref.fetchIfRef(widths[++i]);\n\n            for (j = start; j <= code; j++) {\n              glyphsWidths[j] = width;\n            }\n          }\n        }\n      }\n\n      if (properties.vertical) {\n        var vmetrics = dict.getArray(\"DW2\") || [880, -1000];\n        defaultVMetrics = [vmetrics[1], defaultWidth * 0.5, vmetrics[0]];\n        vmetrics = dict.get(\"W2\");\n\n        if (vmetrics) {\n          for (i = 0, ii = vmetrics.length; i < ii; i++) {\n            start = xref.fetchIfRef(vmetrics[i++]);\n            code = xref.fetchIfRef(vmetrics[i]);\n\n            if (Array.isArray(code)) {\n              for (j = 0, jj = code.length; j < jj; j++) {\n                glyphsVMetrics[start++] = [xref.fetchIfRef(code[j++]), xref.fetchIfRef(code[j++]), xref.fetchIfRef(code[j])];\n              }\n            } else {\n              var vmetric = [xref.fetchIfRef(vmetrics[++i]), xref.fetchIfRef(vmetrics[++i]), xref.fetchIfRef(vmetrics[++i])];\n\n              for (j = start; j <= code; j++) {\n                glyphsVMetrics[j] = vmetric;\n              }\n            }\n          }\n        }\n      }\n    } else {\n      var firstChar = properties.firstChar;\n      widths = dict.get(\"Widths\");\n\n      if (widths) {\n        j = firstChar;\n\n        for (i = 0, ii = widths.length; i < ii; i++) {\n          glyphsWidths[j++] = xref.fetchIfRef(widths[i]);\n        }\n\n        defaultWidth = parseFloat(descriptor.get(\"MissingWidth\")) || 0;\n      } else {\n        var baseFontName = dict.get(\"BaseFont\");\n\n        if ((0, _primitives.isName)(baseFontName)) {\n          var metrics = this.getBaseFontMetrics(baseFontName.name);\n          glyphsWidths = this.buildCharCodeToWidth(metrics.widths, properties);\n          defaultWidth = metrics.defaultWidth;\n        }\n      }\n    }\n\n    var isMonospace = true;\n    var firstWidth = defaultWidth;\n\n    for (var glyph in glyphsWidths) {\n      var glyphWidth = glyphsWidths[glyph];\n\n      if (!glyphWidth) {\n        continue;\n      }\n\n      if (!firstWidth) {\n        firstWidth = glyphWidth;\n        continue;\n      }\n\n      if (firstWidth !== glyphWidth) {\n        isMonospace = false;\n        break;\n      }\n    }\n\n    if (isMonospace) {\n      properties.flags |= _fonts.FontFlags.FixedPitch;\n    }\n\n    properties.defaultWidth = defaultWidth;\n    properties.widths = glyphsWidths;\n    properties.defaultVMetrics = defaultVMetrics;\n    properties.vmetrics = glyphsVMetrics;\n  }\n\n  isSerifFont(baseFontName) {\n    var fontNameWoStyle = baseFontName.split(\"-\")[0];\n    return fontNameWoStyle in (0, _standard_fonts.getSerifFonts)() || fontNameWoStyle.search(/serif/gi) !== -1;\n  }\n\n  getBaseFontMetrics(name) {\n    var defaultWidth = 0;\n    var widths = [];\n    var monospace = false;\n    var stdFontMap = (0, _standard_fonts.getStdFontMap)();\n    var lookupName = stdFontMap[name] || name;\n    var Metrics = (0, _metrics.getMetrics)();\n\n    if (!(lookupName in Metrics)) {\n      if (this.isSerifFont(name)) {\n        lookupName = \"Times-Roman\";\n      } else {\n        lookupName = \"Helvetica\";\n      }\n    }\n\n    var glyphWidths = Metrics[lookupName];\n\n    if ((0, _util.isNum)(glyphWidths)) {\n      defaultWidth = glyphWidths;\n      monospace = true;\n    } else {\n      widths = glyphWidths();\n    }\n\n    return {\n      defaultWidth,\n      monospace,\n      widths\n    };\n  }\n\n  buildCharCodeToWidth(widthsByGlyphName, properties) {\n    var widths = Object.create(null);\n    var differences = properties.differences;\n    var encoding = properties.defaultEncoding;\n\n    for (var charCode = 0; charCode < 256; charCode++) {\n      if (charCode in differences && widthsByGlyphName[differences[charCode]]) {\n        widths[charCode] = widthsByGlyphName[differences[charCode]];\n        continue;\n      }\n\n      if (charCode in encoding && widthsByGlyphName[encoding[charCode]]) {\n        widths[charCode] = widthsByGlyphName[encoding[charCode]];\n        continue;\n      }\n    }\n\n    return widths;\n  }\n\n  preEvaluateFont(dict) {\n    var baseDict = dict;\n    var type = dict.get(\"Subtype\");\n\n    if (!(0, _primitives.isName)(type)) {\n      throw new _util.FormatError(\"invalid font Subtype\");\n    }\n\n    var composite = false;\n    var uint8array;\n\n    if (type.name === \"Type0\") {\n      var df = dict.get(\"DescendantFonts\");\n\n      if (!df) {\n        throw new _util.FormatError(\"Descendant fonts are not specified\");\n      }\n\n      dict = Array.isArray(df) ? this.xref.fetchIfRef(df[0]) : df;\n\n      if (!(dict instanceof _primitives.Dict)) {\n        throw new _util.FormatError(\"Descendant font is not a dictionary.\");\n      }\n\n      type = dict.get(\"Subtype\");\n\n      if (!(0, _primitives.isName)(type)) {\n        throw new _util.FormatError(\"invalid font Subtype\");\n      }\n\n      composite = true;\n    }\n\n    var descriptor = dict.get(\"FontDescriptor\");\n\n    if (descriptor) {\n      var hash = new _murmurhash.MurmurHash3_64();\n      var encoding = baseDict.getRaw(\"Encoding\");\n\n      if ((0, _primitives.isName)(encoding)) {\n        hash.update(encoding.name);\n      } else if ((0, _primitives.isRef)(encoding)) {\n        hash.update(encoding.toString());\n      } else if ((0, _primitives.isDict)(encoding)) {\n        for (const entry of encoding.getRawValues()) {\n          if ((0, _primitives.isName)(entry)) {\n            hash.update(entry.name);\n          } else if ((0, _primitives.isRef)(entry)) {\n            hash.update(entry.toString());\n          } else if (Array.isArray(entry)) {\n            var diffLength = entry.length,\n                diffBuf = new Array(diffLength);\n\n            for (var j = 0; j < diffLength; j++) {\n              var diffEntry = entry[j];\n\n              if ((0, _primitives.isName)(diffEntry)) {\n                diffBuf[j] = diffEntry.name;\n              } else if ((0, _util.isNum)(diffEntry) || (0, _primitives.isRef)(diffEntry)) {\n                diffBuf[j] = diffEntry.toString();\n              }\n            }\n\n            hash.update(diffBuf.join());\n          }\n        }\n      }\n\n      const firstChar = dict.get(\"FirstChar\") || 0;\n      const lastChar = dict.get(\"LastChar\") || (composite ? 0xffff : 0xff);\n      hash.update(`${firstChar}-${lastChar}`);\n      var toUnicode = dict.get(\"ToUnicode\") || baseDict.get(\"ToUnicode\");\n\n      if ((0, _primitives.isStream)(toUnicode)) {\n        var stream = toUnicode.str || toUnicode;\n        uint8array = stream.buffer ? new Uint8Array(stream.buffer.buffer, 0, stream.bufferLength) : new Uint8Array(stream.bytes.buffer, stream.start, stream.end - stream.start);\n        hash.update(uint8array);\n      } else if ((0, _primitives.isName)(toUnicode)) {\n        hash.update(toUnicode.name);\n      }\n\n      var widths = dict.get(\"Widths\") || baseDict.get(\"Widths\");\n\n      if (widths) {\n        uint8array = new Uint8Array(new Uint32Array(widths).buffer);\n        hash.update(uint8array);\n      }\n    }\n\n    return {\n      descriptor,\n      dict,\n      baseDict,\n      composite,\n      type: type.name,\n      hash: hash ? hash.hexdigest() : \"\"\n    };\n  }\n\n  async translateFont(preEvaluatedFont) {\n    var baseDict = preEvaluatedFont.baseDict;\n    var dict = preEvaluatedFont.dict;\n    var composite = preEvaluatedFont.composite;\n    var descriptor = preEvaluatedFont.descriptor;\n    var type = preEvaluatedFont.type;\n    var maxCharIndex = composite ? 0xffff : 0xff;\n    var properties;\n    const firstChar = dict.get(\"FirstChar\") || 0;\n    const lastChar = dict.get(\"LastChar\") || maxCharIndex;\n\n    if (!descriptor) {\n      if (type === \"Type3\") {\n        descriptor = new _primitives.Dict(null);\n        descriptor.set(\"FontName\", _primitives.Name.get(type));\n        descriptor.set(\"FontBBox\", dict.getArray(\"FontBBox\") || [0, 0, 0, 0]);\n      } else {\n        var baseFontName = dict.get(\"BaseFont\");\n\n        if (!(0, _primitives.isName)(baseFontName)) {\n          throw new _util.FormatError(\"Base font is not specified\");\n        }\n\n        baseFontName = baseFontName.name.replace(/[,_]/g, \"-\");\n        var metrics = this.getBaseFontMetrics(baseFontName);\n        var fontNameWoStyle = baseFontName.split(\"-\")[0];\n        var flags = (this.isSerifFont(fontNameWoStyle) ? _fonts.FontFlags.Serif : 0) | (metrics.monospace ? _fonts.FontFlags.FixedPitch : 0) | ((0, _standard_fonts.getSymbolsFonts)()[fontNameWoStyle] ? _fonts.FontFlags.Symbolic : _fonts.FontFlags.Nonsymbolic);\n        properties = {\n          type,\n          name: baseFontName,\n          widths: metrics.widths,\n          defaultWidth: metrics.defaultWidth,\n          flags,\n          firstChar,\n          lastChar\n        };\n        const widths = dict.get(\"Widths\");\n        return this.extractDataStructures(dict, dict, properties).then(newProperties => {\n          if (widths) {\n            const glyphWidths = [];\n            let j = firstChar;\n\n            for (let i = 0, ii = widths.length; i < ii; i++) {\n              glyphWidths[j++] = this.xref.fetchIfRef(widths[i]);\n            }\n\n            newProperties.widths = glyphWidths;\n          } else {\n            newProperties.widths = this.buildCharCodeToWidth(metrics.widths, newProperties);\n          }\n\n          return new _fonts.Font(baseFontName, null, newProperties);\n        });\n      }\n    }\n\n    var fontName = descriptor.get(\"FontName\");\n    var baseFont = dict.get(\"BaseFont\");\n\n    if ((0, _util.isString)(fontName)) {\n      fontName = _primitives.Name.get(fontName);\n    }\n\n    if ((0, _util.isString)(baseFont)) {\n      baseFont = _primitives.Name.get(baseFont);\n    }\n\n    if (type !== \"Type3\") {\n      var fontNameStr = fontName && fontName.name;\n      var baseFontStr = baseFont && baseFont.name;\n\n      if (fontNameStr !== baseFontStr) {\n        (0, _util.info)(`The FontDescriptor's FontName is \"${fontNameStr}\" but ` + `should be the same as the Font's BaseFont \"${baseFontStr}\".`);\n\n        if (fontNameStr && baseFontStr && baseFontStr.startsWith(fontNameStr)) {\n          fontName = baseFont;\n        }\n      }\n    }\n\n    fontName = fontName || baseFont;\n\n    if (!(0, _primitives.isName)(fontName)) {\n      throw new _util.FormatError(\"invalid font name\");\n    }\n\n    var fontFile = descriptor.get(\"FontFile\", \"FontFile2\", \"FontFile3\");\n\n    if (fontFile) {\n      if (fontFile.dict) {\n        var subtype = fontFile.dict.get(\"Subtype\");\n\n        if (subtype) {\n          subtype = subtype.name;\n        }\n\n        var length1 = fontFile.dict.get(\"Length1\");\n        var length2 = fontFile.dict.get(\"Length2\");\n        var length3 = fontFile.dict.get(\"Length3\");\n      }\n    }\n\n    properties = {\n      type,\n      name: fontName.name,\n      subtype,\n      file: fontFile,\n      length1,\n      length2,\n      length3,\n      loadedName: baseDict.loadedName,\n      composite,\n      fixedPitch: false,\n      fontMatrix: dict.getArray(\"FontMatrix\") || _util.FONT_IDENTITY_MATRIX,\n      firstChar: firstChar || 0,\n      lastChar: lastChar || maxCharIndex,\n      bbox: descriptor.getArray(\"FontBBox\"),\n      ascent: descriptor.get(\"Ascent\"),\n      descent: descriptor.get(\"Descent\"),\n      xHeight: descriptor.get(\"XHeight\"),\n      capHeight: descriptor.get(\"CapHeight\"),\n      flags: descriptor.get(\"Flags\"),\n      italicAngle: descriptor.get(\"ItalicAngle\"),\n      isType3Font: false\n    };\n\n    if (composite) {\n      const cidEncoding = baseDict.get(\"Encoding\");\n\n      if ((0, _primitives.isName)(cidEncoding)) {\n        properties.cidEncoding = cidEncoding.name;\n      }\n\n      const cMap = await _cmap.CMapFactory.create({\n        encoding: cidEncoding,\n        fetchBuiltInCMap: this._fetchBuiltInCMapBound,\n        useCMap: null\n      });\n      properties.cMap = cMap;\n      properties.vertical = properties.cMap.vertical;\n    }\n\n    return this.extractDataStructures(dict, baseDict, properties).then(newProperties => {\n      this.extractWidths(dict, descriptor, newProperties);\n\n      if (type === \"Type3\") {\n        newProperties.isType3Font = true;\n      }\n\n      return new _fonts.Font(fontName.name, fontFile, newProperties);\n    });\n  }\n\n  static buildFontPaths(font, glyphs, handler) {\n    function buildPath(fontChar) {\n      if (font.renderer.hasBuiltPath(fontChar)) {\n        return;\n      }\n\n      handler.send(\"commonobj\", [`${font.loadedName}_path_${fontChar}`, \"FontPath\", font.renderer.getPathJs(fontChar)]);\n    }\n\n    for (const glyph of glyphs) {\n      buildPath(glyph.fontChar);\n      const accent = glyph.accent;\n\n      if (accent && accent.fontChar) {\n        buildPath(accent.fontChar);\n      }\n    }\n  }\n\n  static get fallbackFontDict() {\n    const dict = new _primitives.Dict();\n    dict.set(\"BaseFont\", _primitives.Name.get(\"PDFJS-FallbackFont\"));\n    dict.set(\"Type\", _primitives.Name.get(\"FallbackType\"));\n    dict.set(\"Subtype\", _primitives.Name.get(\"FallbackType\"));\n    dict.set(\"Encoding\", _primitives.Name.get(\"WinAnsiEncoding\"));\n    return (0, _util.shadow)(this, \"fallbackFontDict\", dict);\n  }\n\n}\n\nexports.PartialEvaluator = PartialEvaluator;\n\nclass TranslatedFont {\n  constructor({\n    loadedName,\n    font,\n    dict,\n    extraProperties = false\n  }) {\n    this.loadedName = loadedName;\n    this.font = font;\n    this.dict = dict;\n    this._extraProperties = extraProperties;\n    this.type3Loaded = null;\n    this.type3Dependencies = font.isType3Font ? new Set() : null;\n    this.sent = false;\n  }\n\n  send(handler) {\n    if (this.sent) {\n      return;\n    }\n\n    this.sent = true;\n    handler.send(\"commonobj\", [this.loadedName, \"Font\", this.font.exportData(this._extraProperties)]);\n  }\n\n  fallback(handler) {\n    if (!this.font.data) {\n      return;\n    }\n\n    this.font.disableFontFace = true;\n    const glyphs = this.font.glyphCacheValues;\n    PartialEvaluator.buildFontPaths(this.font, glyphs, handler);\n  }\n\n  loadType3Data(evaluator, resources, task) {\n    if (this.type3Loaded) {\n      return this.type3Loaded;\n    }\n\n    if (!this.font.isType3Font) {\n      throw new Error(\"Must be a Type3 font.\");\n    }\n\n    var type3Options = Object.create(evaluator.options);\n    type3Options.ignoreErrors = false;\n    var type3Evaluator = evaluator.clone(type3Options);\n    type3Evaluator.parsingType3Font = true;\n    const translatedFont = this.font,\n          type3Dependencies = this.type3Dependencies;\n    var loadCharProcsPromise = Promise.resolve();\n    var charProcs = this.dict.get(\"CharProcs\");\n    var fontResources = this.dict.get(\"Resources\") || resources;\n    var charProcOperatorList = Object.create(null);\n\n    for (const key of charProcs.getKeys()) {\n      loadCharProcsPromise = loadCharProcsPromise.then(() => {\n        var glyphStream = charProcs.get(key);\n        var operatorList = new _operator_list.OperatorList();\n        return type3Evaluator.getOperatorList({\n          stream: glyphStream,\n          task,\n          resources: fontResources,\n          operatorList\n        }).then(() => {\n          if (operatorList.fnArray[0] === _util.OPS.setCharWidthAndBounds) {\n            this._removeType3ColorOperators(operatorList);\n          }\n\n          charProcOperatorList[key] = operatorList.getIR();\n\n          for (const dependency of operatorList.dependencies) {\n            type3Dependencies.add(dependency);\n          }\n        }).catch(function (reason) {\n          (0, _util.warn)(`Type3 font resource \"${key}\" is not available.`);\n          const dummyOperatorList = new _operator_list.OperatorList();\n          charProcOperatorList[key] = dummyOperatorList.getIR();\n        });\n      });\n    }\n\n    this.type3Loaded = loadCharProcsPromise.then(function () {\n      translatedFont.charProcOperatorList = charProcOperatorList;\n    });\n    return this.type3Loaded;\n  }\n\n  _removeType3ColorOperators(operatorList) {\n    let i = 1,\n        ii = operatorList.length;\n\n    while (i < ii) {\n      switch (operatorList.fnArray[i]) {\n        case _util.OPS.setStrokeColorSpace:\n        case _util.OPS.setFillColorSpace:\n        case _util.OPS.setStrokeColor:\n        case _util.OPS.setStrokeColorN:\n        case _util.OPS.setFillColor:\n        case _util.OPS.setFillColorN:\n        case _util.OPS.setStrokeGray:\n        case _util.OPS.setFillGray:\n        case _util.OPS.setStrokeRGBColor:\n        case _util.OPS.setFillRGBColor:\n        case _util.OPS.setStrokeCMYKColor:\n        case _util.OPS.setFillCMYKColor:\n        case _util.OPS.shadingFill:\n        case _util.OPS.setRenderingIntent:\n          operatorList.fnArray.splice(i, 1);\n          operatorList.argsArray.splice(i, 1);\n          ii--;\n          continue;\n\n        case _util.OPS.setGState:\n          const [gStateObj] = operatorList.argsArray[i];\n          let j = 0,\n              jj = gStateObj.length;\n\n          while (j < jj) {\n            const [gStateKey] = gStateObj[j];\n\n            switch (gStateKey) {\n              case \"TR\":\n              case \"TR2\":\n              case \"HT\":\n              case \"BG\":\n              case \"BG2\":\n              case \"UCR\":\n              case \"UCR2\":\n                gStateObj.splice(j, 1);\n                jj--;\n                continue;\n            }\n\n            j++;\n          }\n\n          break;\n      }\n\n      i++;\n    }\n  }\n\n}\n\nclass StateManager {\n  constructor(initialState = new EvalState()) {\n    this.state = initialState;\n    this.stateStack = [];\n  }\n\n  save() {\n    var old = this.state;\n    this.stateStack.push(this.state);\n    this.state = old.clone();\n  }\n\n  restore() {\n    var prev = this.stateStack.pop();\n\n    if (prev) {\n      this.state = prev;\n    }\n  }\n\n  transform(args) {\n    this.state.ctm = _util.Util.transform(this.state.ctm, args);\n  }\n\n}\n\nclass TextState {\n  constructor() {\n    this.ctm = new Float32Array(_util.IDENTITY_MATRIX);\n    this.fontName = null;\n    this.fontSize = 0;\n    this.font = null;\n    this.fontMatrix = _util.FONT_IDENTITY_MATRIX;\n    this.textMatrix = _util.IDENTITY_MATRIX.slice();\n    this.textLineMatrix = _util.IDENTITY_MATRIX.slice();\n    this.charSpacing = 0;\n    this.wordSpacing = 0;\n    this.leading = 0;\n    this.textHScale = 1;\n    this.textRise = 0;\n  }\n\n  setTextMatrix(a, b, c, d, e, f) {\n    var m = this.textMatrix;\n    m[0] = a;\n    m[1] = b;\n    m[2] = c;\n    m[3] = d;\n    m[4] = e;\n    m[5] = f;\n  }\n\n  setTextLineMatrix(a, b, c, d, e, f) {\n    var m = this.textLineMatrix;\n    m[0] = a;\n    m[1] = b;\n    m[2] = c;\n    m[3] = d;\n    m[4] = e;\n    m[5] = f;\n  }\n\n  translateTextMatrix(x, y) {\n    var m = this.textMatrix;\n    m[4] = m[0] * x + m[2] * y + m[4];\n    m[5] = m[1] * x + m[3] * y + m[5];\n  }\n\n  translateTextLineMatrix(x, y) {\n    var m = this.textLineMatrix;\n    m[4] = m[0] * x + m[2] * y + m[4];\n    m[5] = m[1] * x + m[3] * y + m[5];\n  }\n\n  calcTextLineMatrixAdvance(a, b, c, d, e, f) {\n    var font = this.font;\n\n    if (!font) {\n      return null;\n    }\n\n    var m = this.textLineMatrix;\n\n    if (!(a === m[0] && b === m[1] && c === m[2] && d === m[3])) {\n      return null;\n    }\n\n    var txDiff = e - m[4],\n        tyDiff = f - m[5];\n\n    if (font.vertical && txDiff !== 0 || !font.vertical && tyDiff !== 0) {\n      return null;\n    }\n\n    var tx,\n        ty,\n        denominator = a * d - b * c;\n\n    if (font.vertical) {\n      tx = -tyDiff * c / denominator;\n      ty = tyDiff * a / denominator;\n    } else {\n      tx = txDiff * d / denominator;\n      ty = -txDiff * b / denominator;\n    }\n\n    return {\n      width: tx,\n      height: ty,\n      value: font.vertical ? ty : tx\n    };\n  }\n\n  calcRenderMatrix(ctm) {\n    var tsm = [this.fontSize * this.textHScale, 0, 0, this.fontSize, 0, this.textRise];\n    return _util.Util.transform(ctm, _util.Util.transform(this.textMatrix, tsm));\n  }\n\n  carriageReturn() {\n    this.translateTextLineMatrix(0, -this.leading);\n    this.textMatrix = this.textLineMatrix.slice();\n  }\n\n  clone() {\n    var clone = Object.create(this);\n    clone.textMatrix = this.textMatrix.slice();\n    clone.textLineMatrix = this.textLineMatrix.slice();\n    clone.fontMatrix = this.fontMatrix.slice();\n    return clone;\n  }\n\n}\n\nclass EvalState {\n  constructor() {\n    this.ctm = new Float32Array(_util.IDENTITY_MATRIX);\n    this.font = null;\n    this.textRenderingMode = _util.TextRenderingMode.FILL;\n    this.fillColorSpace = _colorspace.ColorSpace.singletons.gray;\n    this.strokeColorSpace = _colorspace.ColorSpace.singletons.gray;\n  }\n\n  clone() {\n    return Object.create(this);\n  }\n\n}\n\nclass EvaluatorPreprocessor {\n  static get opMap() {\n    const getOPMap = (0, _core_utils.getLookupTableFactory)(function (t) {\n      t.w = {\n        id: _util.OPS.setLineWidth,\n        numArgs: 1,\n        variableArgs: false\n      };\n      t.J = {\n        id: _util.OPS.setLineCap,\n        numArgs: 1,\n        variableArgs: false\n      };\n      t.j = {\n        id: _util.OPS.setLineJoin,\n        numArgs: 1,\n        variableArgs: false\n      };\n      t.M = {\n        id: _util.OPS.setMiterLimit,\n        numArgs: 1,\n        variableArgs: false\n      };\n      t.d = {\n        id: _util.OPS.setDash,\n        numArgs: 2,\n        variableArgs: false\n      };\n      t.ri = {\n        id: _util.OPS.setRenderingIntent,\n        numArgs: 1,\n        variableArgs: false\n      };\n      t.i = {\n        id: _util.OPS.setFlatness,\n        numArgs: 1,\n        variableArgs: false\n      };\n      t.gs = {\n        id: _util.OPS.setGState,\n        numArgs: 1,\n        variableArgs: false\n      };\n      t.q = {\n        id: _util.OPS.save,\n        numArgs: 0,\n        variableArgs: false\n      };\n      t.Q = {\n        id: _util.OPS.restore,\n        numArgs: 0,\n        variableArgs: false\n      };\n      t.cm = {\n        id: _util.OPS.transform,\n        numArgs: 6,\n        variableArgs: false\n      };\n      t.m = {\n        id: _util.OPS.moveTo,\n        numArgs: 2,\n        variableArgs: false\n      };\n      t.l = {\n        id: _util.OPS.lineTo,\n        numArgs: 2,\n        variableArgs: false\n      };\n      t.c = {\n        id: _util.OPS.curveTo,\n        numArgs: 6,\n        variableArgs: false\n      };\n      t.v = {\n        id: _util.OPS.curveTo2,\n        numArgs: 4,\n        variableArgs: false\n      };\n      t.y = {\n        id: _util.OPS.curveTo3,\n        numArgs: 4,\n        variableArgs: false\n      };\n      t.h = {\n        id: _util.OPS.closePath,\n        numArgs: 0,\n        variableArgs: false\n      };\n      t.re = {\n        id: _util.OPS.rectangle,\n        numArgs: 4,\n        variableArgs: false\n      };\n      t.S = {\n        id: _util.OPS.stroke,\n        numArgs: 0,\n        variableArgs: false\n      };\n      t.s = {\n        id: _util.OPS.closeStroke,\n        numArgs: 0,\n        variableArgs: false\n      };\n      t.f = {\n        id: _util.OPS.fill,\n        numArgs: 0,\n        variableArgs: false\n      };\n      t.F = {\n        id: _util.OPS.fill,\n        numArgs: 0,\n        variableArgs: false\n      };\n      t[\"f*\"] = {\n        id: _util.OPS.eoFill,\n        numArgs: 0,\n        variableArgs: false\n      };\n      t.B = {\n        id: _util.OPS.fillStroke,\n        numArgs: 0,\n        variableArgs: false\n      };\n      t[\"B*\"] = {\n        id: _util.OPS.eoFillStroke,\n        numArgs: 0,\n        variableArgs: false\n      };\n      t.b = {\n        id: _util.OPS.closeFillStroke,\n        numArgs: 0,\n        variableArgs: false\n      };\n      t[\"b*\"] = {\n        id: _util.OPS.closeEOFillStroke,\n        numArgs: 0,\n        variableArgs: false\n      };\n      t.n = {\n        id: _util.OPS.endPath,\n        numArgs: 0,\n        variableArgs: false\n      };\n      t.W = {\n        id: _util.OPS.clip,\n        numArgs: 0,\n        variableArgs: false\n      };\n      t[\"W*\"] = {\n        id: _util.OPS.eoClip,\n        numArgs: 0,\n        variableArgs: false\n      };\n      t.BT = {\n        id: _util.OPS.beginText,\n        numArgs: 0,\n        variableArgs: false\n      };\n      t.ET = {\n        id: _util.OPS.endText,\n        numArgs: 0,\n        variableArgs: false\n      };\n      t.Tc = {\n        id: _util.OPS.setCharSpacing,\n        numArgs: 1,\n        variableArgs: false\n      };\n      t.Tw = {\n        id: _util.OPS.setWordSpacing,\n        numArgs: 1,\n        variableArgs: false\n      };\n      t.Tz = {\n        id: _util.OPS.setHScale,\n        numArgs: 1,\n        variableArgs: false\n      };\n      t.TL = {\n        id: _util.OPS.setLeading,\n        numArgs: 1,\n        variableArgs: false\n      };\n      t.Tf = {\n        id: _util.OPS.setFont,\n        numArgs: 2,\n        variableArgs: false\n      };\n      t.Tr = {\n        id: _util.OPS.setTextRenderingMode,\n        numArgs: 1,\n        variableArgs: false\n      };\n      t.Ts = {\n        id: _util.OPS.setTextRise,\n        numArgs: 1,\n        variableArgs: false\n      };\n      t.Td = {\n        id: _util.OPS.moveText,\n        numArgs: 2,\n        variableArgs: false\n      };\n      t.TD = {\n        id: _util.OPS.setLeadingMoveText,\n        numArgs: 2,\n        variableArgs: false\n      };\n      t.Tm = {\n        id: _util.OPS.setTextMatrix,\n        numArgs: 6,\n        variableArgs: false\n      };\n      t[\"T*\"] = {\n        id: _util.OPS.nextLine,\n        numArgs: 0,\n        variableArgs: false\n      };\n      t.Tj = {\n        id: _util.OPS.showText,\n        numArgs: 1,\n        variableArgs: false\n      };\n      t.TJ = {\n        id: _util.OPS.showSpacedText,\n        numArgs: 1,\n        variableArgs: false\n      };\n      t[\"'\"] = {\n        id: _util.OPS.nextLineShowText,\n        numArgs: 1,\n        variableArgs: false\n      };\n      t['\"'] = {\n        id: _util.OPS.nextLineSetSpacingShowText,\n        numArgs: 3,\n        variableArgs: false\n      };\n      t.d0 = {\n        id: _util.OPS.setCharWidth,\n        numArgs: 2,\n        variableArgs: false\n      };\n      t.d1 = {\n        id: _util.OPS.setCharWidthAndBounds,\n        numArgs: 6,\n        variableArgs: false\n      };\n      t.CS = {\n        id: _util.OPS.setStrokeColorSpace,\n        numArgs: 1,\n        variableArgs: false\n      };\n      t.cs = {\n        id: _util.OPS.setFillColorSpace,\n        numArgs: 1,\n        variableArgs: false\n      };\n      t.SC = {\n        id: _util.OPS.setStrokeColor,\n        numArgs: 4,\n        variableArgs: true\n      };\n      t.SCN = {\n        id: _util.OPS.setStrokeColorN,\n        numArgs: 33,\n        variableArgs: true\n      };\n      t.sc = {\n        id: _util.OPS.setFillColor,\n        numArgs: 4,\n        variableArgs: true\n      };\n      t.scn = {\n        id: _util.OPS.setFillColorN,\n        numArgs: 33,\n        variableArgs: true\n      };\n      t.G = {\n        id: _util.OPS.setStrokeGray,\n        numArgs: 1,\n        variableArgs: false\n      };\n      t.g = {\n        id: _util.OPS.setFillGray,\n        numArgs: 1,\n        variableArgs: false\n      };\n      t.RG = {\n        id: _util.OPS.setStrokeRGBColor,\n        numArgs: 3,\n        variableArgs: false\n      };\n      t.rg = {\n        id: _util.OPS.setFillRGBColor,\n        numArgs: 3,\n        variableArgs: false\n      };\n      t.K = {\n        id: _util.OPS.setStrokeCMYKColor,\n        numArgs: 4,\n        variableArgs: false\n      };\n      t.k = {\n        id: _util.OPS.setFillCMYKColor,\n        numArgs: 4,\n        variableArgs: false\n      };\n      t.sh = {\n        id: _util.OPS.shadingFill,\n        numArgs: 1,\n        variableArgs: false\n      };\n      t.BI = {\n        id: _util.OPS.beginInlineImage,\n        numArgs: 0,\n        variableArgs: false\n      };\n      t.ID = {\n        id: _util.OPS.beginImageData,\n        numArgs: 0,\n        variableArgs: false\n      };\n      t.EI = {\n        id: _util.OPS.endInlineImage,\n        numArgs: 1,\n        variableArgs: false\n      };\n      t.Do = {\n        id: _util.OPS.paintXObject,\n        numArgs: 1,\n        variableArgs: false\n      };\n      t.MP = {\n        id: _util.OPS.markPoint,\n        numArgs: 1,\n        variableArgs: false\n      };\n      t.DP = {\n        id: _util.OPS.markPointProps,\n        numArgs: 2,\n        variableArgs: false\n      };\n      t.BMC = {\n        id: _util.OPS.beginMarkedContent,\n        numArgs: 1,\n        variableArgs: false\n      };\n      t.BDC = {\n        id: _util.OPS.beginMarkedContentProps,\n        numArgs: 2,\n        variableArgs: false\n      };\n      t.EMC = {\n        id: _util.OPS.endMarkedContent,\n        numArgs: 0,\n        variableArgs: false\n      };\n      t.BX = {\n        id: _util.OPS.beginCompat,\n        numArgs: 0,\n        variableArgs: false\n      };\n      t.EX = {\n        id: _util.OPS.endCompat,\n        numArgs: 0,\n        variableArgs: false\n      };\n      t.BM = null;\n      t.BD = null;\n      t.true = null;\n      t.fa = null;\n      t.fal = null;\n      t.fals = null;\n      t.false = null;\n      t.nu = null;\n      t.nul = null;\n      t.null = null;\n    });\n    return (0, _util.shadow)(this, \"opMap\", getOPMap());\n  }\n\n  static get MAX_INVALID_PATH_OPS() {\n    return (0, _util.shadow)(this, \"MAX_INVALID_PATH_OPS\", 20);\n  }\n\n  constructor(stream, xref, stateManager = new StateManager()) {\n    this.parser = new _parser.Parser({\n      lexer: new _parser.Lexer(stream, EvaluatorPreprocessor.opMap),\n      xref\n    });\n    this.stateManager = stateManager;\n    this.nonProcessedArgs = [];\n    this._numInvalidPathOPS = 0;\n  }\n\n  get savedStatesDepth() {\n    return this.stateManager.stateStack.length;\n  }\n\n  read(operation) {\n    var args = operation.args;\n\n    while (true) {\n      var obj = this.parser.getObj();\n\n      if (obj instanceof _primitives.Cmd) {\n        var cmd = obj.cmd;\n        var opSpec = EvaluatorPreprocessor.opMap[cmd];\n\n        if (!opSpec) {\n          (0, _util.warn)(`Unknown command \"${cmd}\".`);\n          continue;\n        }\n\n        var fn = opSpec.id;\n        var numArgs = opSpec.numArgs;\n        var argsLength = args !== null ? args.length : 0;\n\n        if (!opSpec.variableArgs) {\n          if (argsLength !== numArgs) {\n            var nonProcessedArgs = this.nonProcessedArgs;\n\n            while (argsLength > numArgs) {\n              nonProcessedArgs.push(args.shift());\n              argsLength--;\n            }\n\n            while (argsLength < numArgs && nonProcessedArgs.length !== 0) {\n              if (args === null) {\n                args = [];\n              }\n\n              args.unshift(nonProcessedArgs.pop());\n              argsLength++;\n            }\n          }\n\n          if (argsLength < numArgs) {\n            const partialMsg = `command ${cmd}: expected ${numArgs} args, ` + `but received ${argsLength} args.`;\n\n            if (fn >= _util.OPS.moveTo && fn <= _util.OPS.endPath && ++this._numInvalidPathOPS > EvaluatorPreprocessor.MAX_INVALID_PATH_OPS) {\n              throw new _util.FormatError(`Invalid ${partialMsg}`);\n            }\n\n            (0, _util.warn)(`Skipping ${partialMsg}`);\n\n            if (args !== null) {\n              args.length = 0;\n            }\n\n            continue;\n          }\n        } else if (argsLength > numArgs) {\n          (0, _util.info)(`Command ${cmd}: expected [0, ${numArgs}] args, ` + `but received ${argsLength} args.`);\n        }\n\n        this.preprocessCommand(fn, args);\n        operation.fn = fn;\n        operation.args = args;\n        return true;\n      }\n\n      if (obj === _primitives.EOF) {\n        return false;\n      }\n\n      if (obj !== null) {\n        if (args === null) {\n          args = [];\n        }\n\n        args.push(obj);\n\n        if (args.length > 33) {\n          throw new _util.FormatError(\"Too many arguments\");\n        }\n      }\n    }\n  }\n\n  preprocessCommand(fn, args) {\n    switch (fn | 0) {\n      case _util.OPS.save:\n        this.stateManager.save();\n        break;\n\n      case _util.OPS.restore:\n        this.stateManager.restore();\n        break;\n\n      case _util.OPS.transform:\n        this.stateManager.transform(args);\n        break;\n    }\n  }\n\n}\n\nexports.EvaluatorPreprocessor = EvaluatorPreprocessor;\n\n/***/ }),\n/* 28 */\n/***/ ((__unused_webpack_module, exports, __w_pdfjs_require__) => {\n\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.IdentityCMap = exports.CMapFactory = exports.CMap = void 0;\n\nvar _util = __w_pdfjs_require__(2);\n\nvar _primitives = __w_pdfjs_require__(5);\n\nvar _parser = __w_pdfjs_require__(11);\n\nvar _core_utils = __w_pdfjs_require__(8);\n\nvar _stream = __w_pdfjs_require__(12);\n\nvar BUILT_IN_CMAPS = [\"Adobe-GB1-UCS2\", \"Adobe-CNS1-UCS2\", \"Adobe-Japan1-UCS2\", \"Adobe-Korea1-UCS2\", \"78-EUC-H\", \"78-EUC-V\", \"78-H\", \"78-RKSJ-H\", \"78-RKSJ-V\", \"78-V\", \"78ms-RKSJ-H\", \"78ms-RKSJ-V\", \"83pv-RKSJ-H\", \"90ms-RKSJ-H\", \"90ms-RKSJ-V\", \"90msp-RKSJ-H\", \"90msp-RKSJ-V\", \"90pv-RKSJ-H\", \"90pv-RKSJ-V\", \"Add-H\", \"Add-RKSJ-H\", \"Add-RKSJ-V\", \"Add-V\", \"Adobe-CNS1-0\", \"Adobe-CNS1-1\", \"Adobe-CNS1-2\", \"Adobe-CNS1-3\", \"Adobe-CNS1-4\", \"Adobe-CNS1-5\", \"Adobe-CNS1-6\", \"Adobe-GB1-0\", \"Adobe-GB1-1\", \"Adobe-GB1-2\", \"Adobe-GB1-3\", \"Adobe-GB1-4\", \"Adobe-GB1-5\", \"Adobe-Japan1-0\", \"Adobe-Japan1-1\", \"Adobe-Japan1-2\", \"Adobe-Japan1-3\", \"Adobe-Japan1-4\", \"Adobe-Japan1-5\", \"Adobe-Japan1-6\", \"Adobe-Korea1-0\", \"Adobe-Korea1-1\", \"Adobe-Korea1-2\", \"B5-H\", \"B5-V\", \"B5pc-H\", \"B5pc-V\", \"CNS-EUC-H\", \"CNS-EUC-V\", \"CNS1-H\", \"CNS1-V\", \"CNS2-H\", \"CNS2-V\", \"ETHK-B5-H\", \"ETHK-B5-V\", \"ETen-B5-H\", \"ETen-B5-V\", \"ETenms-B5-H\", \"ETenms-B5-V\", \"EUC-H\", \"EUC-V\", \"Ext-H\", \"Ext-RKSJ-H\", \"Ext-RKSJ-V\", \"Ext-V\", \"GB-EUC-H\", \"GB-EUC-V\", \"GB-H\", \"GB-V\", \"GBK-EUC-H\", \"GBK-EUC-V\", \"GBK2K-H\", \"GBK2K-V\", \"GBKp-EUC-H\", \"GBKp-EUC-V\", \"GBT-EUC-H\", \"GBT-EUC-V\", \"GBT-H\", \"GBT-V\", \"GBTpc-EUC-H\", \"GBTpc-EUC-V\", \"GBpc-EUC-H\", \"GBpc-EUC-V\", \"H\", \"HKdla-B5-H\", \"HKdla-B5-V\", \"HKdlb-B5-H\", \"HKdlb-B5-V\", \"HKgccs-B5-H\", \"HKgccs-B5-V\", \"HKm314-B5-H\", \"HKm314-B5-V\", \"HKm471-B5-H\", \"HKm471-B5-V\", \"HKscs-B5-H\", \"HKscs-B5-V\", \"Hankaku\", \"Hiragana\", \"KSC-EUC-H\", \"KSC-EUC-V\", \"KSC-H\", \"KSC-Johab-H\", \"KSC-Johab-V\", \"KSC-V\", \"KSCms-UHC-H\", \"KSCms-UHC-HW-H\", \"KSCms-UHC-HW-V\", \"KSCms-UHC-V\", \"KSCpc-EUC-H\", \"KSCpc-EUC-V\", \"Katakana\", \"NWP-H\", \"NWP-V\", \"RKSJ-H\", \"RKSJ-V\", \"Roman\", \"UniCNS-UCS2-H\", \"UniCNS-UCS2-V\", \"UniCNS-UTF16-H\", \"UniCNS-UTF16-V\", \"UniCNS-UTF32-H\", \"UniCNS-UTF32-V\", \"UniCNS-UTF8-H\", \"UniCNS-UTF8-V\", \"UniGB-UCS2-H\", \"UniGB-UCS2-V\", \"UniGB-UTF16-H\", \"UniGB-UTF16-V\", \"UniGB-UTF32-H\", \"UniGB-UTF32-V\", \"UniGB-UTF8-H\", \"UniGB-UTF8-V\", \"UniJIS-UCS2-H\", \"UniJIS-UCS2-HW-H\", \"UniJIS-UCS2-HW-V\", \"UniJIS-UCS2-V\", \"UniJIS-UTF16-H\", \"UniJIS-UTF16-V\", \"UniJIS-UTF32-H\", \"UniJIS-UTF32-V\", \"UniJIS-UTF8-H\", \"UniJIS-UTF8-V\", \"UniJIS2004-UTF16-H\", \"UniJIS2004-UTF16-V\", \"UniJIS2004-UTF32-H\", \"UniJIS2004-UTF32-V\", \"UniJIS2004-UTF8-H\", \"UniJIS2004-UTF8-V\", \"UniJISPro-UCS2-HW-V\", \"UniJISPro-UCS2-V\", \"UniJISPro-UTF8-V\", \"UniJISX0213-UTF32-H\", \"UniJISX0213-UTF32-V\", \"UniJISX02132004-UTF32-H\", \"UniJISX02132004-UTF32-V\", \"UniKS-UCS2-H\", \"UniKS-UCS2-V\", \"UniKS-UTF16-H\", \"UniKS-UTF16-V\", \"UniKS-UTF32-H\", \"UniKS-UTF32-V\", \"UniKS-UTF8-H\", \"UniKS-UTF8-V\", \"V\", \"WP-Symbol\"];\nconst MAX_MAP_RANGE = 2 ** 24 - 1;\n\nclass CMap {\n  constructor(builtInCMap = false) {\n    this.codespaceRanges = [[], [], [], []];\n    this.numCodespaceRanges = 0;\n    this._map = [];\n    this.name = \"\";\n    this.vertical = false;\n    this.useCMap = null;\n    this.builtInCMap = builtInCMap;\n  }\n\n  addCodespaceRange(n, low, high) {\n    this.codespaceRanges[n - 1].push(low, high);\n    this.numCodespaceRanges++;\n  }\n\n  mapCidRange(low, high, dstLow) {\n    if (high - low > MAX_MAP_RANGE) {\n      throw new Error(\"mapCidRange - ignoring data above MAX_MAP_RANGE.\");\n    }\n\n    while (low <= high) {\n      this._map[low++] = dstLow++;\n    }\n  }\n\n  mapBfRange(low, high, dstLow) {\n    if (high - low > MAX_MAP_RANGE) {\n      throw new Error(\"mapBfRange - ignoring data above MAX_MAP_RANGE.\");\n    }\n\n    var lastByte = dstLow.length - 1;\n\n    while (low <= high) {\n      this._map[low++] = dstLow;\n      dstLow = dstLow.substring(0, lastByte) + String.fromCharCode(dstLow.charCodeAt(lastByte) + 1);\n    }\n  }\n\n  mapBfRangeToArray(low, high, array) {\n    if (high - low > MAX_MAP_RANGE) {\n      throw new Error(\"mapBfRangeToArray - ignoring data above MAX_MAP_RANGE.\");\n    }\n\n    const ii = array.length;\n    let i = 0;\n\n    while (low <= high && i < ii) {\n      this._map[low] = array[i++];\n      ++low;\n    }\n  }\n\n  mapOne(src, dst) {\n    this._map[src] = dst;\n  }\n\n  lookup(code) {\n    return this._map[code];\n  }\n\n  contains(code) {\n    return this._map[code] !== undefined;\n  }\n\n  forEach(callback) {\n    const map = this._map;\n    const length = map.length;\n\n    if (length <= 0x10000) {\n      for (let i = 0; i < length; i++) {\n        if (map[i] !== undefined) {\n          callback(i, map[i]);\n        }\n      }\n    } else {\n      for (const i in map) {\n        callback(i, map[i]);\n      }\n    }\n  }\n\n  charCodeOf(value) {\n    const map = this._map;\n\n    if (map.length <= 0x10000) {\n      return map.indexOf(value);\n    }\n\n    for (const charCode in map) {\n      if (map[charCode] === value) {\n        return charCode | 0;\n      }\n    }\n\n    return -1;\n  }\n\n  getMap() {\n    return this._map;\n  }\n\n  readCharCode(str, offset, out) {\n    let c = 0;\n    const codespaceRanges = this.codespaceRanges;\n\n    for (let n = 0, nn = codespaceRanges.length; n < nn; n++) {\n      c = (c << 8 | str.charCodeAt(offset + n)) >>> 0;\n      const codespaceRange = codespaceRanges[n];\n\n      for (let k = 0, kk = codespaceRange.length; k < kk;) {\n        const low = codespaceRange[k++];\n        const high = codespaceRange[k++];\n\n        if (c >= low && c <= high) {\n          out.charcode = c;\n          out.length = n + 1;\n          return;\n        }\n      }\n    }\n\n    out.charcode = 0;\n    out.length = 1;\n  }\n\n  getCharCodeLength(charCode) {\n    const codespaceRanges = this.codespaceRanges;\n\n    for (let n = 0, nn = codespaceRanges.length; n < nn; n++) {\n      const codespaceRange = codespaceRanges[n];\n\n      for (let k = 0, kk = codespaceRange.length; k < kk;) {\n        const low = codespaceRange[k++];\n        const high = codespaceRange[k++];\n\n        if (charCode >= low && charCode <= high) {\n          return n + 1;\n        }\n      }\n    }\n\n    return 1;\n  }\n\n  get length() {\n    return this._map.length;\n  }\n\n  get isIdentityCMap() {\n    if (!(this.name === \"Identity-H\" || this.name === \"Identity-V\")) {\n      return false;\n    }\n\n    if (this._map.length !== 0x10000) {\n      return false;\n    }\n\n    for (let i = 0; i < 0x10000; i++) {\n      if (this._map[i] !== i) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n}\n\nexports.CMap = CMap;\n\nclass IdentityCMap extends CMap {\n  constructor(vertical, n) {\n    super();\n    this.vertical = vertical;\n    this.addCodespaceRange(n, 0, 0xffff);\n  }\n\n  mapCidRange(low, high, dstLow) {\n    (0, _util.unreachable)(\"should not call mapCidRange\");\n  }\n\n  mapBfRange(low, high, dstLow) {\n    (0, _util.unreachable)(\"should not call mapBfRange\");\n  }\n\n  mapBfRangeToArray(low, high, array) {\n    (0, _util.unreachable)(\"should not call mapBfRangeToArray\");\n  }\n\n  mapOne(src, dst) {\n    (0, _util.unreachable)(\"should not call mapCidOne\");\n  }\n\n  lookup(code) {\n    return Number.isInteger(code) && code <= 0xffff ? code : undefined;\n  }\n\n  contains(code) {\n    return Number.isInteger(code) && code <= 0xffff;\n  }\n\n  forEach(callback) {\n    for (let i = 0; i <= 0xffff; i++) {\n      callback(i, i);\n    }\n  }\n\n  charCodeOf(value) {\n    return Number.isInteger(value) && value <= 0xffff ? value : -1;\n  }\n\n  getMap() {\n    const map = new Array(0x10000);\n\n    for (let i = 0; i <= 0xffff; i++) {\n      map[i] = i;\n    }\n\n    return map;\n  }\n\n  get length() {\n    return 0x10000;\n  }\n\n  get isIdentityCMap() {\n    (0, _util.unreachable)(\"should not access .isIdentityCMap\");\n  }\n\n}\n\nexports.IdentityCMap = IdentityCMap;\n\nvar BinaryCMapReader = function BinaryCMapReaderClosure() {\n  function hexToInt(a, size) {\n    var n = 0;\n\n    for (var i = 0; i <= size; i++) {\n      n = n << 8 | a[i];\n    }\n\n    return n >>> 0;\n  }\n\n  function hexToStr(a, size) {\n    if (size === 1) {\n      return String.fromCharCode(a[0], a[1]);\n    }\n\n    if (size === 3) {\n      return String.fromCharCode(a[0], a[1], a[2], a[3]);\n    }\n\n    return String.fromCharCode.apply(null, a.subarray(0, size + 1));\n  }\n\n  function addHex(a, b, size) {\n    var c = 0;\n\n    for (var i = size; i >= 0; i--) {\n      c += a[i] + b[i];\n      a[i] = c & 255;\n      c >>= 8;\n    }\n  }\n\n  function incHex(a, size) {\n    var c = 1;\n\n    for (var i = size; i >= 0 && c > 0; i--) {\n      c += a[i];\n      a[i] = c & 255;\n      c >>= 8;\n    }\n  }\n\n  var MAX_NUM_SIZE = 16;\n  var MAX_ENCODED_NUM_SIZE = 19;\n\n  function BinaryCMapStream(data) {\n    this.buffer = data;\n    this.pos = 0;\n    this.end = data.length;\n    this.tmpBuf = new Uint8Array(MAX_ENCODED_NUM_SIZE);\n  }\n\n  BinaryCMapStream.prototype = {\n    readByte() {\n      if (this.pos >= this.end) {\n        return -1;\n      }\n\n      return this.buffer[this.pos++];\n    },\n\n    readNumber() {\n      var n = 0;\n      var last;\n\n      do {\n        var b = this.readByte();\n\n        if (b < 0) {\n          throw new _util.FormatError(\"unexpected EOF in bcmap\");\n        }\n\n        last = !(b & 0x80);\n        n = n << 7 | b & 0x7f;\n      } while (!last);\n\n      return n;\n    },\n\n    readSigned() {\n      var n = this.readNumber();\n      return n & 1 ? ~(n >>> 1) : n >>> 1;\n    },\n\n    readHex(num, size) {\n      num.set(this.buffer.subarray(this.pos, this.pos + size + 1));\n      this.pos += size + 1;\n    },\n\n    readHexNumber(num, size) {\n      var last;\n      var stack = this.tmpBuf,\n          sp = 0;\n\n      do {\n        var b = this.readByte();\n\n        if (b < 0) {\n          throw new _util.FormatError(\"unexpected EOF in bcmap\");\n        }\n\n        last = !(b & 0x80);\n        stack[sp++] = b & 0x7f;\n      } while (!last);\n\n      var i = size,\n          buffer = 0,\n          bufferSize = 0;\n\n      while (i >= 0) {\n        while (bufferSize < 8 && stack.length > 0) {\n          buffer = stack[--sp] << bufferSize | buffer;\n          bufferSize += 7;\n        }\n\n        num[i] = buffer & 255;\n        i--;\n        buffer >>= 8;\n        bufferSize -= 8;\n      }\n    },\n\n    readHexSigned(num, size) {\n      this.readHexNumber(num, size);\n      var sign = num[size] & 1 ? 255 : 0;\n      var c = 0;\n\n      for (var i = 0; i <= size; i++) {\n        c = (c & 1) << 8 | num[i];\n        num[i] = c >> 1 ^ sign;\n      }\n    },\n\n    readString() {\n      var len = this.readNumber();\n      var s = \"\";\n\n      for (var i = 0; i < len; i++) {\n        s += String.fromCharCode(this.readNumber());\n      }\n\n      return s;\n    }\n\n  };\n\n  function processBinaryCMap(data, cMap, extend) {\n    return new Promise(function (resolve, reject) {\n      var stream = new BinaryCMapStream(data);\n      var header = stream.readByte();\n      cMap.vertical = !!(header & 1);\n      var useCMap = null;\n      var start = new Uint8Array(MAX_NUM_SIZE);\n      var end = new Uint8Array(MAX_NUM_SIZE);\n      var char = new Uint8Array(MAX_NUM_SIZE);\n      var charCode = new Uint8Array(MAX_NUM_SIZE);\n      var tmp = new Uint8Array(MAX_NUM_SIZE);\n      var code;\n      var b;\n\n      while ((b = stream.readByte()) >= 0) {\n        var type = b >> 5;\n\n        if (type === 7) {\n          switch (b & 0x1f) {\n            case 0:\n              stream.readString();\n              break;\n\n            case 1:\n              useCMap = stream.readString();\n              break;\n          }\n\n          continue;\n        }\n\n        var sequence = !!(b & 0x10);\n        var dataSize = b & 15;\n\n        if (dataSize + 1 > MAX_NUM_SIZE) {\n          throw new Error(\"processBinaryCMap: Invalid dataSize.\");\n        }\n\n        var ucs2DataSize = 1;\n        var subitemsCount = stream.readNumber();\n        var i;\n\n        switch (type) {\n          case 0:\n            stream.readHex(start, dataSize);\n            stream.readHexNumber(end, dataSize);\n            addHex(end, start, dataSize);\n            cMap.addCodespaceRange(dataSize + 1, hexToInt(start, dataSize), hexToInt(end, dataSize));\n\n            for (i = 1; i < subitemsCount; i++) {\n              incHex(end, dataSize);\n              stream.readHexNumber(start, dataSize);\n              addHex(start, end, dataSize);\n              stream.readHexNumber(end, dataSize);\n              addHex(end, start, dataSize);\n              cMap.addCodespaceRange(dataSize + 1, hexToInt(start, dataSize), hexToInt(end, dataSize));\n            }\n\n            break;\n\n          case 1:\n            stream.readHex(start, dataSize);\n            stream.readHexNumber(end, dataSize);\n            addHex(end, start, dataSize);\n            stream.readNumber();\n\n            for (i = 1; i < subitemsCount; i++) {\n              incHex(end, dataSize);\n              stream.readHexNumber(start, dataSize);\n              addHex(start, end, dataSize);\n              stream.readHexNumber(end, dataSize);\n              addHex(end, start, dataSize);\n              stream.readNumber();\n            }\n\n            break;\n\n          case 2:\n            stream.readHex(char, dataSize);\n            code = stream.readNumber();\n            cMap.mapOne(hexToInt(char, dataSize), code);\n\n            for (i = 1; i < subitemsCount; i++) {\n              incHex(char, dataSize);\n\n              if (!sequence) {\n                stream.readHexNumber(tmp, dataSize);\n                addHex(char, tmp, dataSize);\n              }\n\n              code = stream.readSigned() + (code + 1);\n              cMap.mapOne(hexToInt(char, dataSize), code);\n            }\n\n            break;\n\n          case 3:\n            stream.readHex(start, dataSize);\n            stream.readHexNumber(end, dataSize);\n            addHex(end, start, dataSize);\n            code = stream.readNumber();\n            cMap.mapCidRange(hexToInt(start, dataSize), hexToInt(end, dataSize), code);\n\n            for (i = 1; i < subitemsCount; i++) {\n              incHex(end, dataSize);\n\n              if (!sequence) {\n                stream.readHexNumber(start, dataSize);\n                addHex(start, end, dataSize);\n              } else {\n                start.set(end);\n              }\n\n              stream.readHexNumber(end, dataSize);\n              addHex(end, start, dataSize);\n              code = stream.readNumber();\n              cMap.mapCidRange(hexToInt(start, dataSize), hexToInt(end, dataSize), code);\n            }\n\n            break;\n\n          case 4:\n            stream.readHex(char, ucs2DataSize);\n            stream.readHex(charCode, dataSize);\n            cMap.mapOne(hexToInt(char, ucs2DataSize), hexToStr(charCode, dataSize));\n\n            for (i = 1; i < subitemsCount; i++) {\n              incHex(char, ucs2DataSize);\n\n              if (!sequence) {\n                stream.readHexNumber(tmp, ucs2DataSize);\n                addHex(char, tmp, ucs2DataSize);\n              }\n\n              incHex(charCode, dataSize);\n              stream.readHexSigned(tmp, dataSize);\n              addHex(charCode, tmp, dataSize);\n              cMap.mapOne(hexToInt(char, ucs2DataSize), hexToStr(charCode, dataSize));\n            }\n\n            break;\n\n          case 5:\n            stream.readHex(start, ucs2DataSize);\n            stream.readHexNumber(end, ucs2DataSize);\n            addHex(end, start, ucs2DataSize);\n            stream.readHex(charCode, dataSize);\n            cMap.mapBfRange(hexToInt(start, ucs2DataSize), hexToInt(end, ucs2DataSize), hexToStr(charCode, dataSize));\n\n            for (i = 1; i < subitemsCount; i++) {\n              incHex(end, ucs2DataSize);\n\n              if (!sequence) {\n                stream.readHexNumber(start, ucs2DataSize);\n                addHex(start, end, ucs2DataSize);\n              } else {\n                start.set(end);\n              }\n\n              stream.readHexNumber(end, ucs2DataSize);\n              addHex(end, start, ucs2DataSize);\n              stream.readHex(charCode, dataSize);\n              cMap.mapBfRange(hexToInt(start, ucs2DataSize), hexToInt(end, ucs2DataSize), hexToStr(charCode, dataSize));\n            }\n\n            break;\n\n          default:\n            reject(new Error(\"processBinaryCMap: Unknown type: \" + type));\n            return;\n        }\n      }\n\n      if (useCMap) {\n        resolve(extend(useCMap));\n        return;\n      }\n\n      resolve(cMap);\n    });\n  }\n\n  function BinaryCMapReader() {}\n\n  BinaryCMapReader.prototype = {\n    process: processBinaryCMap\n  };\n  return BinaryCMapReader;\n}();\n\nvar CMapFactory = function CMapFactoryClosure() {\n  function strToInt(str) {\n    var a = 0;\n\n    for (var i = 0; i < str.length; i++) {\n      a = a << 8 | str.charCodeAt(i);\n    }\n\n    return a >>> 0;\n  }\n\n  function expectString(obj) {\n    if (!(0, _util.isString)(obj)) {\n      throw new _util.FormatError(\"Malformed CMap: expected string.\");\n    }\n  }\n\n  function expectInt(obj) {\n    if (!Number.isInteger(obj)) {\n      throw new _util.FormatError(\"Malformed CMap: expected int.\");\n    }\n  }\n\n  function parseBfChar(cMap, lexer) {\n    while (true) {\n      var obj = lexer.getObj();\n\n      if ((0, _primitives.isEOF)(obj)) {\n        break;\n      }\n\n      if ((0, _primitives.isCmd)(obj, \"endbfchar\")) {\n        return;\n      }\n\n      expectString(obj);\n      var src = strToInt(obj);\n      obj = lexer.getObj();\n      expectString(obj);\n      var dst = obj;\n      cMap.mapOne(src, dst);\n    }\n  }\n\n  function parseBfRange(cMap, lexer) {\n    while (true) {\n      var obj = lexer.getObj();\n\n      if ((0, _primitives.isEOF)(obj)) {\n        break;\n      }\n\n      if ((0, _primitives.isCmd)(obj, \"endbfrange\")) {\n        return;\n      }\n\n      expectString(obj);\n      var low = strToInt(obj);\n      obj = lexer.getObj();\n      expectString(obj);\n      var high = strToInt(obj);\n      obj = lexer.getObj();\n\n      if (Number.isInteger(obj) || (0, _util.isString)(obj)) {\n        var dstLow = Number.isInteger(obj) ? String.fromCharCode(obj) : obj;\n        cMap.mapBfRange(low, high, dstLow);\n      } else if ((0, _primitives.isCmd)(obj, \"[\")) {\n        obj = lexer.getObj();\n        var array = [];\n\n        while (!(0, _primitives.isCmd)(obj, \"]\") && !(0, _primitives.isEOF)(obj)) {\n          array.push(obj);\n          obj = lexer.getObj();\n        }\n\n        cMap.mapBfRangeToArray(low, high, array);\n      } else {\n        break;\n      }\n    }\n\n    throw new _util.FormatError(\"Invalid bf range.\");\n  }\n\n  function parseCidChar(cMap, lexer) {\n    while (true) {\n      var obj = lexer.getObj();\n\n      if ((0, _primitives.isEOF)(obj)) {\n        break;\n      }\n\n      if ((0, _primitives.isCmd)(obj, \"endcidchar\")) {\n        return;\n      }\n\n      expectString(obj);\n      var src = strToInt(obj);\n      obj = lexer.getObj();\n      expectInt(obj);\n      var dst = obj;\n      cMap.mapOne(src, dst);\n    }\n  }\n\n  function parseCidRange(cMap, lexer) {\n    while (true) {\n      var obj = lexer.getObj();\n\n      if ((0, _primitives.isEOF)(obj)) {\n        break;\n      }\n\n      if ((0, _primitives.isCmd)(obj, \"endcidrange\")) {\n        return;\n      }\n\n      expectString(obj);\n      var low = strToInt(obj);\n      obj = lexer.getObj();\n      expectString(obj);\n      var high = strToInt(obj);\n      obj = lexer.getObj();\n      expectInt(obj);\n      var dstLow = obj;\n      cMap.mapCidRange(low, high, dstLow);\n    }\n  }\n\n  function parseCodespaceRange(cMap, lexer) {\n    while (true) {\n      var obj = lexer.getObj();\n\n      if ((0, _primitives.isEOF)(obj)) {\n        break;\n      }\n\n      if ((0, _primitives.isCmd)(obj, \"endcodespacerange\")) {\n        return;\n      }\n\n      if (!(0, _util.isString)(obj)) {\n        break;\n      }\n\n      var low = strToInt(obj);\n      obj = lexer.getObj();\n\n      if (!(0, _util.isString)(obj)) {\n        break;\n      }\n\n      var high = strToInt(obj);\n      cMap.addCodespaceRange(obj.length, low, high);\n    }\n\n    throw new _util.FormatError(\"Invalid codespace range.\");\n  }\n\n  function parseWMode(cMap, lexer) {\n    var obj = lexer.getObj();\n\n    if (Number.isInteger(obj)) {\n      cMap.vertical = !!obj;\n    }\n  }\n\n  function parseCMapName(cMap, lexer) {\n    var obj = lexer.getObj();\n\n    if ((0, _primitives.isName)(obj) && (0, _util.isString)(obj.name)) {\n      cMap.name = obj.name;\n    }\n  }\n\n  function parseCMap(cMap, lexer, fetchBuiltInCMap, useCMap) {\n    var previous;\n    var embeddedUseCMap;\n\n    objLoop: while (true) {\n      try {\n        var obj = lexer.getObj();\n\n        if ((0, _primitives.isEOF)(obj)) {\n          break;\n        } else if ((0, _primitives.isName)(obj)) {\n          if (obj.name === \"WMode\") {\n            parseWMode(cMap, lexer);\n          } else if (obj.name === \"CMapName\") {\n            parseCMapName(cMap, lexer);\n          }\n\n          previous = obj;\n        } else if ((0, _primitives.isCmd)(obj)) {\n          switch (obj.cmd) {\n            case \"endcmap\":\n              break objLoop;\n\n            case \"usecmap\":\n              if ((0, _primitives.isName)(previous)) {\n                embeddedUseCMap = previous.name;\n              }\n\n              break;\n\n            case \"begincodespacerange\":\n              parseCodespaceRange(cMap, lexer);\n              break;\n\n            case \"beginbfchar\":\n              parseBfChar(cMap, lexer);\n              break;\n\n            case \"begincidchar\":\n              parseCidChar(cMap, lexer);\n              break;\n\n            case \"beginbfrange\":\n              parseBfRange(cMap, lexer);\n              break;\n\n            case \"begincidrange\":\n              parseCidRange(cMap, lexer);\n              break;\n          }\n        }\n      } catch (ex) {\n        if (ex instanceof _core_utils.MissingDataException) {\n          throw ex;\n        }\n\n        (0, _util.warn)(\"Invalid cMap data: \" + ex);\n        continue;\n      }\n    }\n\n    if (!useCMap && embeddedUseCMap) {\n      useCMap = embeddedUseCMap;\n    }\n\n    if (useCMap) {\n      return extendCMap(cMap, fetchBuiltInCMap, useCMap);\n    }\n\n    return Promise.resolve(cMap);\n  }\n\n  function extendCMap(cMap, fetchBuiltInCMap, useCMap) {\n    return createBuiltInCMap(useCMap, fetchBuiltInCMap).then(function (newCMap) {\n      cMap.useCMap = newCMap;\n\n      if (cMap.numCodespaceRanges === 0) {\n        var useCodespaceRanges = cMap.useCMap.codespaceRanges;\n\n        for (var i = 0; i < useCodespaceRanges.length; i++) {\n          cMap.codespaceRanges[i] = useCodespaceRanges[i].slice();\n        }\n\n        cMap.numCodespaceRanges = cMap.useCMap.numCodespaceRanges;\n      }\n\n      cMap.useCMap.forEach(function (key, value) {\n        if (!cMap.contains(key)) {\n          cMap.mapOne(key, cMap.useCMap.lookup(key));\n        }\n      });\n      return cMap;\n    });\n  }\n\n  function createBuiltInCMap(name, fetchBuiltInCMap) {\n    if (name === \"Identity-H\") {\n      return Promise.resolve(new IdentityCMap(false, 2));\n    } else if (name === \"Identity-V\") {\n      return Promise.resolve(new IdentityCMap(true, 2));\n    }\n\n    if (!BUILT_IN_CMAPS.includes(name)) {\n      return Promise.reject(new Error(\"Unknown CMap name: \" + name));\n    }\n\n    if (!fetchBuiltInCMap) {\n      return Promise.reject(new Error(\"Built-in CMap parameters are not provided.\"));\n    }\n\n    return fetchBuiltInCMap(name).then(function (data) {\n      var cMapData = data.cMapData,\n          compressionType = data.compressionType;\n      var cMap = new CMap(true);\n\n      if (compressionType === _util.CMapCompressionType.BINARY) {\n        return new BinaryCMapReader().process(cMapData, cMap, function (useCMap) {\n          return extendCMap(cMap, fetchBuiltInCMap, useCMap);\n        });\n      }\n\n      if (compressionType === _util.CMapCompressionType.NONE) {\n        var lexer = new _parser.Lexer(new _stream.Stream(cMapData));\n        return parseCMap(cMap, lexer, fetchBuiltInCMap, null);\n      }\n\n      return Promise.reject(new Error(\"TODO: Only BINARY/NONE CMap compression is currently supported.\"));\n    });\n  }\n\n  return {\n    async create(params) {\n      var encoding = params.encoding;\n      var fetchBuiltInCMap = params.fetchBuiltInCMap;\n      var useCMap = params.useCMap;\n\n      if ((0, _primitives.isName)(encoding)) {\n        return createBuiltInCMap(encoding.name, fetchBuiltInCMap);\n      } else if ((0, _primitives.isStream)(encoding)) {\n        var cMap = new CMap();\n        var lexer = new _parser.Lexer(encoding);\n        return parseCMap(cMap, lexer, fetchBuiltInCMap, useCMap).then(function (parsedCMap) {\n          if (parsedCMap.isIdentityCMap) {\n            return createBuiltInCMap(parsedCMap.name, fetchBuiltInCMap);\n          }\n\n          return parsedCMap;\n        });\n      }\n\n      throw new Error(\"Encoding required.\");\n    }\n\n  };\n}();\n\nexports.CMapFactory = CMapFactory;\n\n/***/ }),\n/* 29 */\n/***/ ((__unused_webpack_module, exports, __w_pdfjs_require__) => {\n\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.getFontType = getFontType;\nexports.ToUnicodeMap = exports.SEAC_ANALYSIS_ENABLED = exports.IdentityToUnicodeMap = exports.FontFlags = exports.Font = exports.ErrorFont = void 0;\n\nvar _util = __w_pdfjs_require__(2);\n\nvar _cff_parser = __w_pdfjs_require__(30);\n\nvar _glyphlist = __w_pdfjs_require__(33);\n\nvar _encodings = __w_pdfjs_require__(32);\n\nvar _standard_fonts = __w_pdfjs_require__(34);\n\nvar _unicode = __w_pdfjs_require__(35);\n\nvar _core_utils = __w_pdfjs_require__(8);\n\nvar _font_renderer = __w_pdfjs_require__(36);\n\nvar _cmap = __w_pdfjs_require__(28);\n\nvar _stream = __w_pdfjs_require__(12);\n\nvar _type1_parser = __w_pdfjs_require__(37);\n\nconst PRIVATE_USE_AREAS = [[0xe000, 0xf8ff], [0x100000, 0x10fffd]];\nvar PDF_GLYPH_SPACE_UNITS = 1000;\nvar SEAC_ANALYSIS_ENABLED = true;\nexports.SEAC_ANALYSIS_ENABLED = SEAC_ANALYSIS_ENABLED;\nconst EXPORT_DATA_PROPERTIES = [\"ascent\", \"bbox\", \"black\", \"bold\", \"charProcOperatorList\", \"composite\", \"data\", \"defaultVMetrics\", \"defaultWidth\", \"descent\", \"fallbackName\", \"fontMatrix\", \"fontType\", \"isMonospace\", \"isSerifFont\", \"isType3Font\", \"italic\", \"loadedName\", \"mimetype\", \"missingFile\", \"name\", \"remeasure\", \"subtype\", \"type\", \"vertical\"];\nconst EXPORT_DATA_EXTRA_PROPERTIES = [\"cMap\", \"defaultEncoding\", \"differences\", \"isSymbolicFont\", \"seacMap\", \"toFontChar\", \"toUnicode\", \"vmetrics\", \"widths\"];\nvar FontFlags = {\n  FixedPitch: 1,\n  Serif: 2,\n  Symbolic: 4,\n  Script: 8,\n  Nonsymbolic: 32,\n  Italic: 64,\n  AllCap: 65536,\n  SmallCap: 131072,\n  ForceBold: 262144\n};\nexports.FontFlags = FontFlags;\nvar MacStandardGlyphOrdering = [\".notdef\", \".null\", \"nonmarkingreturn\", \"space\", \"exclam\", \"quotedbl\", \"numbersign\", \"dollar\", \"percent\", \"ampersand\", \"quotesingle\", \"parenleft\", \"parenright\", \"asterisk\", \"plus\", \"comma\", \"hyphen\", \"period\", \"slash\", \"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"colon\", \"semicolon\", \"less\", \"equal\", \"greater\", \"question\", \"at\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\", \"bracketleft\", \"backslash\", \"bracketright\", \"asciicircum\", \"underscore\", \"grave\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"braceleft\", \"bar\", \"braceright\", \"asciitilde\", \"Adieresis\", \"Aring\", \"Ccedilla\", \"Eacute\", \"Ntilde\", \"Odieresis\", \"Udieresis\", \"aacute\", \"agrave\", \"acircumflex\", \"adieresis\", \"atilde\", \"aring\", \"ccedilla\", \"eacute\", \"egrave\", \"ecircumflex\", \"edieresis\", \"iacute\", \"igrave\", \"icircumflex\", \"idieresis\", \"ntilde\", \"oacute\", \"ograve\", \"ocircumflex\", \"odieresis\", \"otilde\", \"uacute\", \"ugrave\", \"ucircumflex\", \"udieresis\", \"dagger\", \"degree\", \"cent\", \"sterling\", \"section\", \"bullet\", \"paragraph\", \"germandbls\", \"registered\", \"copyright\", \"trademark\", \"acute\", \"dieresis\", \"notequal\", \"AE\", \"Oslash\", \"infinity\", \"plusminus\", \"lessequal\", \"greaterequal\", \"yen\", \"mu\", \"partialdiff\", \"summation\", \"product\", \"pi\", \"integral\", \"ordfeminine\", \"ordmasculine\", \"Omega\", \"ae\", \"oslash\", \"questiondown\", \"exclamdown\", \"logicalnot\", \"radical\", \"florin\", \"approxequal\", \"Delta\", \"guillemotleft\", \"guillemotright\", \"ellipsis\", \"nonbreakingspace\", \"Agrave\", \"Atilde\", \"Otilde\", \"OE\", \"oe\", \"endash\", \"emdash\", \"quotedblleft\", \"quotedblright\", \"quoteleft\", \"quoteright\", \"divide\", \"lozenge\", \"ydieresis\", \"Ydieresis\", \"fraction\", \"currency\", \"guilsinglleft\", \"guilsinglright\", \"fi\", \"fl\", \"daggerdbl\", \"periodcentered\", \"quotesinglbase\", \"quotedblbase\", \"perthousand\", \"Acircumflex\", \"Ecircumflex\", \"Aacute\", \"Edieresis\", \"Egrave\", \"Iacute\", \"Icircumflex\", \"Idieresis\", \"Igrave\", \"Oacute\", \"Ocircumflex\", \"apple\", \"Ograve\", \"Uacute\", \"Ucircumflex\", \"Ugrave\", \"dotlessi\", \"circumflex\", \"tilde\", \"macron\", \"breve\", \"dotaccent\", \"ring\", \"cedilla\", \"hungarumlaut\", \"ogonek\", \"caron\", \"Lslash\", \"lslash\", \"Scaron\", \"scaron\", \"Zcaron\", \"zcaron\", \"brokenbar\", \"Eth\", \"eth\", \"Yacute\", \"yacute\", \"Thorn\", \"thorn\", \"minus\", \"multiply\", \"onesuperior\", \"twosuperior\", \"threesuperior\", \"onehalf\", \"onequarter\", \"threequarters\", \"franc\", \"Gbreve\", \"gbreve\", \"Idotaccent\", \"Scedilla\", \"scedilla\", \"Cacute\", \"cacute\", \"Ccaron\", \"ccaron\", \"dcroat\"];\n\nfunction adjustWidths(properties) {\n  if (!properties.fontMatrix) {\n    return;\n  }\n\n  if (properties.fontMatrix[0] === _util.FONT_IDENTITY_MATRIX[0]) {\n    return;\n  }\n\n  var scale = 0.001 / properties.fontMatrix[0];\n  var glyphsWidths = properties.widths;\n\n  for (var glyph in glyphsWidths) {\n    glyphsWidths[glyph] *= scale;\n  }\n\n  properties.defaultWidth *= scale;\n}\n\nfunction adjustToUnicode(properties, builtInEncoding) {\n  if (properties.hasIncludedToUnicodeMap) {\n    return;\n  }\n\n  if (properties.hasEncoding) {\n    return;\n  }\n\n  if (builtInEncoding === properties.defaultEncoding) {\n    return;\n  }\n\n  if (properties.toUnicode instanceof IdentityToUnicodeMap) {\n    return;\n  }\n\n  var toUnicode = [],\n      glyphsUnicodeMap = (0, _glyphlist.getGlyphsUnicode)();\n\n  for (var charCode in builtInEncoding) {\n    var glyphName = builtInEncoding[charCode];\n    var unicode = (0, _unicode.getUnicodeForGlyph)(glyphName, glyphsUnicodeMap);\n\n    if (unicode !== -1) {\n      toUnicode[charCode] = String.fromCharCode(unicode);\n    }\n  }\n\n  properties.toUnicode.amend(toUnicode);\n}\n\nfunction getFontType(type, subtype) {\n  switch (type) {\n    case \"Type1\":\n      return subtype === \"Type1C\" ? _util.FontType.TYPE1C : _util.FontType.TYPE1;\n\n    case \"CIDFontType0\":\n      return subtype === \"CIDFontType0C\" ? _util.FontType.CIDFONTTYPE0C : _util.FontType.CIDFONTTYPE0;\n\n    case \"OpenType\":\n      return _util.FontType.OPENTYPE;\n\n    case \"TrueType\":\n      return _util.FontType.TRUETYPE;\n\n    case \"CIDFontType2\":\n      return _util.FontType.CIDFONTTYPE2;\n\n    case \"MMType1\":\n      return _util.FontType.MMTYPE1;\n\n    case \"Type0\":\n      return _util.FontType.TYPE0;\n\n    default:\n      return _util.FontType.UNKNOWN;\n  }\n}\n\nfunction recoverGlyphName(name, glyphsUnicodeMap) {\n  if (glyphsUnicodeMap[name] !== undefined) {\n    return name;\n  }\n\n  var unicode = (0, _unicode.getUnicodeForGlyph)(name, glyphsUnicodeMap);\n\n  if (unicode !== -1) {\n    for (var key in glyphsUnicodeMap) {\n      if (glyphsUnicodeMap[key] === unicode) {\n        return key;\n      }\n    }\n  }\n\n  (0, _util.info)(\"Unable to recover a standard glyph name for: \" + name);\n  return name;\n}\n\nvar Glyph = function GlyphClosure() {\n  function Glyph(fontChar, unicode, accent, width, vmetric, operatorListId, isSpace, isInFont) {\n    this.fontChar = fontChar;\n    this.unicode = unicode;\n    this.accent = accent;\n    this.width = width;\n    this.vmetric = vmetric;\n    this.operatorListId = operatorListId;\n    this.isSpace = isSpace;\n    this.isInFont = isInFont;\n  }\n\n  Glyph.prototype.matchesForCache = function (fontChar, unicode, accent, width, vmetric, operatorListId, isSpace, isInFont) {\n    return this.fontChar === fontChar && this.unicode === unicode && this.accent === accent && this.width === width && this.vmetric === vmetric && this.operatorListId === operatorListId && this.isSpace === isSpace && this.isInFont === isInFont;\n  };\n\n  return Glyph;\n}();\n\nvar ToUnicodeMap = function ToUnicodeMapClosure() {\n  function ToUnicodeMap(cmap = []) {\n    this._map = cmap;\n  }\n\n  ToUnicodeMap.prototype = {\n    get length() {\n      return this._map.length;\n    },\n\n    forEach(callback) {\n      for (var charCode in this._map) {\n        callback(charCode, this._map[charCode].charCodeAt(0));\n      }\n    },\n\n    has(i) {\n      return this._map[i] !== undefined;\n    },\n\n    get(i) {\n      return this._map[i];\n    },\n\n    charCodeOf(value) {\n      const map = this._map;\n\n      if (map.length <= 0x10000) {\n        return map.indexOf(value);\n      }\n\n      for (const charCode in map) {\n        if (map[charCode] === value) {\n          return charCode | 0;\n        }\n      }\n\n      return -1;\n    },\n\n    amend(map) {\n      for (var charCode in map) {\n        this._map[charCode] = map[charCode];\n      }\n    }\n\n  };\n  return ToUnicodeMap;\n}();\n\nexports.ToUnicodeMap = ToUnicodeMap;\n\nvar IdentityToUnicodeMap = function IdentityToUnicodeMapClosure() {\n  function IdentityToUnicodeMap(firstChar, lastChar) {\n    this.firstChar = firstChar;\n    this.lastChar = lastChar;\n  }\n\n  IdentityToUnicodeMap.prototype = {\n    get length() {\n      return this.lastChar + 1 - this.firstChar;\n    },\n\n    forEach(callback) {\n      for (var i = this.firstChar, ii = this.lastChar; i <= ii; i++) {\n        callback(i, i);\n      }\n    },\n\n    has(i) {\n      return this.firstChar <= i && i <= this.lastChar;\n    },\n\n    get(i) {\n      if (this.firstChar <= i && i <= this.lastChar) {\n        return String.fromCharCode(i);\n      }\n\n      return undefined;\n    },\n\n    charCodeOf(v) {\n      return Number.isInteger(v) && v >= this.firstChar && v <= this.lastChar ? v : -1;\n    },\n\n    amend(map) {\n      (0, _util.unreachable)(\"Should not call amend()\");\n    }\n\n  };\n  return IdentityToUnicodeMap;\n}();\n\nexports.IdentityToUnicodeMap = IdentityToUnicodeMap;\n\nvar OpenTypeFileBuilder = function OpenTypeFileBuilderClosure() {\n  function writeInt16(dest, offset, num) {\n    dest[offset] = num >> 8 & 0xff;\n    dest[offset + 1] = num & 0xff;\n  }\n\n  function writeInt32(dest, offset, num) {\n    dest[offset] = num >> 24 & 0xff;\n    dest[offset + 1] = num >> 16 & 0xff;\n    dest[offset + 2] = num >> 8 & 0xff;\n    dest[offset + 3] = num & 0xff;\n  }\n\n  function writeData(dest, offset, data) {\n    var i, ii;\n\n    if (data instanceof Uint8Array) {\n      dest.set(data, offset);\n    } else if (typeof data === \"string\") {\n      for (i = 0, ii = data.length; i < ii; i++) {\n        dest[offset++] = data.charCodeAt(i) & 0xff;\n      }\n    } else {\n      for (i = 0, ii = data.length; i < ii; i++) {\n        dest[offset++] = data[i] & 0xff;\n      }\n    }\n  }\n\n  function OpenTypeFileBuilder(sfnt) {\n    this.sfnt = sfnt;\n    this.tables = Object.create(null);\n  }\n\n  OpenTypeFileBuilder.getSearchParams = function OpenTypeFileBuilder_getSearchParams(entriesCount, entrySize) {\n    var maxPower2 = 1,\n        log2 = 0;\n\n    while ((maxPower2 ^ entriesCount) > maxPower2) {\n      maxPower2 <<= 1;\n      log2++;\n    }\n\n    var searchRange = maxPower2 * entrySize;\n    return {\n      range: searchRange,\n      entry: log2,\n      rangeShift: entrySize * entriesCount - searchRange\n    };\n  };\n\n  var OTF_HEADER_SIZE = 12;\n  var OTF_TABLE_ENTRY_SIZE = 16;\n  OpenTypeFileBuilder.prototype = {\n    toArray: function OpenTypeFileBuilder_toArray() {\n      var sfnt = this.sfnt;\n      var tables = this.tables;\n      var tablesNames = Object.keys(tables);\n      tablesNames.sort();\n      var numTables = tablesNames.length;\n      var i, j, jj, table, tableName;\n      var offset = OTF_HEADER_SIZE + numTables * OTF_TABLE_ENTRY_SIZE;\n      var tableOffsets = [offset];\n\n      for (i = 0; i < numTables; i++) {\n        table = tables[tablesNames[i]];\n        var paddedLength = (table.length + 3 & ~3) >>> 0;\n        offset += paddedLength;\n        tableOffsets.push(offset);\n      }\n\n      var file = new Uint8Array(offset);\n\n      for (i = 0; i < numTables; i++) {\n        table = tables[tablesNames[i]];\n        writeData(file, tableOffsets[i], table);\n      }\n\n      if (sfnt === \"true\") {\n        sfnt = (0, _util.string32)(0x00010000);\n      }\n\n      file[0] = sfnt.charCodeAt(0) & 0xff;\n      file[1] = sfnt.charCodeAt(1) & 0xff;\n      file[2] = sfnt.charCodeAt(2) & 0xff;\n      file[3] = sfnt.charCodeAt(3) & 0xff;\n      writeInt16(file, 4, numTables);\n      var searchParams = OpenTypeFileBuilder.getSearchParams(numTables, 16);\n      writeInt16(file, 6, searchParams.range);\n      writeInt16(file, 8, searchParams.entry);\n      writeInt16(file, 10, searchParams.rangeShift);\n      offset = OTF_HEADER_SIZE;\n\n      for (i = 0; i < numTables; i++) {\n        tableName = tablesNames[i];\n        file[offset] = tableName.charCodeAt(0) & 0xff;\n        file[offset + 1] = tableName.charCodeAt(1) & 0xff;\n        file[offset + 2] = tableName.charCodeAt(2) & 0xff;\n        file[offset + 3] = tableName.charCodeAt(3) & 0xff;\n        var checksum = 0;\n\n        for (j = tableOffsets[i], jj = tableOffsets[i + 1]; j < jj; j += 4) {\n          var quad = (0, _core_utils.readUint32)(file, j);\n          checksum = checksum + quad >>> 0;\n        }\n\n        writeInt32(file, offset + 4, checksum);\n        writeInt32(file, offset + 8, tableOffsets[i]);\n        writeInt32(file, offset + 12, tables[tableName].length);\n        offset += OTF_TABLE_ENTRY_SIZE;\n      }\n\n      return file;\n    },\n    addTable: function OpenTypeFileBuilder_addTable(tag, data) {\n      if (tag in this.tables) {\n        throw new Error(\"Table \" + tag + \" already exists\");\n      }\n\n      this.tables[tag] = data;\n    }\n  };\n  return OpenTypeFileBuilder;\n}();\n\nvar Font = function FontClosure() {\n  function Font(name, file, properties) {\n    var charCode;\n    this.name = name;\n    this.loadedName = properties.loadedName;\n    this.isType3Font = properties.isType3Font;\n    this.missingFile = false;\n    this.glyphCache = Object.create(null);\n    this.isSerifFont = !!(properties.flags & FontFlags.Serif);\n    this.isSymbolicFont = !!(properties.flags & FontFlags.Symbolic);\n    this.isMonospace = !!(properties.flags & FontFlags.FixedPitch);\n    var type = properties.type;\n    var subtype = properties.subtype;\n    this.type = type;\n    this.subtype = subtype;\n    let fallbackName = \"sans-serif\";\n\n    if (this.isMonospace) {\n      fallbackName = \"monospace\";\n    } else if (this.isSerifFont) {\n      fallbackName = \"serif\";\n    }\n\n    this.fallbackName = fallbackName;\n    this.differences = properties.differences;\n    this.widths = properties.widths;\n    this.defaultWidth = properties.defaultWidth;\n    this.composite = properties.composite;\n    this.cMap = properties.cMap;\n    this.capHeight = properties.capHeight / PDF_GLYPH_SPACE_UNITS;\n    this.ascent = properties.ascent / PDF_GLYPH_SPACE_UNITS;\n    this.descent = properties.descent / PDF_GLYPH_SPACE_UNITS;\n    this.fontMatrix = properties.fontMatrix;\n    this.bbox = properties.bbox;\n    this.defaultEncoding = properties.defaultEncoding;\n    this.toUnicode = properties.toUnicode;\n    this.fallbackToUnicode = properties.fallbackToUnicode || new ToUnicodeMap();\n    this.toFontChar = [];\n\n    if (properties.type === \"Type3\") {\n      for (charCode = 0; charCode < 256; charCode++) {\n        this.toFontChar[charCode] = this.differences[charCode] || properties.defaultEncoding[charCode];\n      }\n\n      this.fontType = _util.FontType.TYPE3;\n      return;\n    }\n\n    this.cidEncoding = properties.cidEncoding;\n    this.vertical = !!properties.vertical;\n\n    if (this.vertical) {\n      this.vmetrics = properties.vmetrics;\n      this.defaultVMetrics = properties.defaultVMetrics;\n    }\n\n    if (!file || file.isEmpty) {\n      if (file) {\n        (0, _util.warn)('Font file is empty in \"' + name + '\" (' + this.loadedName + \")\");\n      }\n\n      this.fallbackToSystemFont(properties);\n      return;\n    }\n\n    [type, subtype] = getFontFileType(file, properties);\n\n    if (type !== this.type || subtype !== this.subtype) {\n      (0, _util.info)(\"Inconsistent font file Type/SubType, expected: \" + `${this.type}/${this.subtype} but found: ${type}/${subtype}.`);\n    }\n\n    try {\n      var data;\n\n      switch (type) {\n        case \"MMType1\":\n          (0, _util.info)(\"MMType1 font (\" + name + \"), falling back to Type1.\");\n\n        case \"Type1\":\n        case \"CIDFontType0\":\n          this.mimetype = \"font/opentype\";\n          var cff = subtype === \"Type1C\" || subtype === \"CIDFontType0C\" ? new CFFFont(file, properties) : new Type1Font(name, file, properties);\n          adjustWidths(properties);\n          data = this.convert(name, cff, properties);\n          break;\n\n        case \"OpenType\":\n        case \"TrueType\":\n        case \"CIDFontType2\":\n          this.mimetype = \"font/opentype\";\n          data = this.checkAndRepair(name, file, properties);\n\n          if (this.isOpenType) {\n            adjustWidths(properties);\n            type = \"OpenType\";\n          }\n\n          break;\n\n        default:\n          throw new _util.FormatError(`Font ${type} is not supported`);\n      }\n    } catch (e) {\n      (0, _util.warn)(e);\n      this.fallbackToSystemFont(properties);\n      return;\n    }\n\n    this.data = data;\n    this.fontType = getFontType(type, subtype);\n    this.fontMatrix = properties.fontMatrix;\n    this.widths = properties.widths;\n    this.defaultWidth = properties.defaultWidth;\n    this.toUnicode = properties.toUnicode;\n    this.seacMap = properties.seacMap;\n  }\n\n  function int16(b0, b1) {\n    return (b0 << 8) + b1;\n  }\n\n  function writeSignedInt16(bytes, index, value) {\n    bytes[index + 1] = value;\n    bytes[index] = value >>> 8;\n  }\n\n  function signedInt16(b0, b1) {\n    var value = (b0 << 8) + b1;\n    return value & 1 << 15 ? value - 0x10000 : value;\n  }\n\n  function int32(b0, b1, b2, b3) {\n    return (b0 << 24) + (b1 << 16) + (b2 << 8) + b3;\n  }\n\n  function string16(value) {\n    return String.fromCharCode(value >> 8 & 0xff, value & 0xff);\n  }\n\n  function safeString16(value) {\n    if (value > 0x7fff) {\n      value = 0x7fff;\n    } else if (value < -0x8000) {\n      value = -0x8000;\n    }\n\n    return String.fromCharCode(value >> 8 & 0xff, value & 0xff);\n  }\n\n  function isTrueTypeFile(file) {\n    var header = file.peekBytes(4);\n    return (0, _core_utils.readUint32)(header, 0) === 0x00010000 || (0, _util.bytesToString)(header) === \"true\";\n  }\n\n  function isTrueTypeCollectionFile(file) {\n    const header = file.peekBytes(4);\n    return (0, _util.bytesToString)(header) === \"ttcf\";\n  }\n\n  function isOpenTypeFile(file) {\n    var header = file.peekBytes(4);\n    return (0, _util.bytesToString)(header) === \"OTTO\";\n  }\n\n  function isType1File(file) {\n    var header = file.peekBytes(2);\n\n    if (header[0] === 0x25 && header[1] === 0x21) {\n      return true;\n    }\n\n    if (header[0] === 0x80 && header[1] === 0x01) {\n      return true;\n    }\n\n    return false;\n  }\n\n  function isCFFFile(file) {\n    const header = file.peekBytes(4);\n\n    if (header[0] >= 1 && header[3] >= 1 && header[3] <= 4) {\n      return true;\n    }\n\n    return false;\n  }\n\n  function getFontFileType(file, {\n    type,\n    subtype,\n    composite\n  }) {\n    let fileType, fileSubtype;\n\n    if (isTrueTypeFile(file) || isTrueTypeCollectionFile(file)) {\n      if (composite) {\n        fileType = \"CIDFontType2\";\n      } else {\n        fileType = \"TrueType\";\n      }\n    } else if (isOpenTypeFile(file)) {\n      if (composite) {\n        fileType = \"CIDFontType2\";\n      } else {\n        fileType = \"OpenType\";\n      }\n    } else if (isType1File(file)) {\n      if (composite) {\n        fileType = \"CIDFontType0\";\n      } else {\n        fileType = type === \"MMType1\" ? \"MMType1\" : \"Type1\";\n      }\n    } else if (isCFFFile(file)) {\n      if (composite) {\n        fileType = \"CIDFontType0\";\n        fileSubtype = \"CIDFontType0C\";\n      } else {\n        fileType = type === \"MMType1\" ? \"MMType1\" : \"Type1\";\n        fileSubtype = \"Type1C\";\n      }\n    } else {\n      (0, _util.warn)(\"getFontFileType: Unable to detect correct font file Type/Subtype.\");\n      fileType = type;\n      fileSubtype = subtype;\n    }\n\n    return [fileType, fileSubtype];\n  }\n\n  function buildToFontChar(encoding, glyphsUnicodeMap, differences) {\n    var toFontChar = [],\n        unicode;\n\n    for (var i = 0, ii = encoding.length; i < ii; i++) {\n      unicode = (0, _unicode.getUnicodeForGlyph)(encoding[i], glyphsUnicodeMap);\n\n      if (unicode !== -1) {\n        toFontChar[i] = unicode;\n      }\n    }\n\n    for (var charCode in differences) {\n      unicode = (0, _unicode.getUnicodeForGlyph)(differences[charCode], glyphsUnicodeMap);\n\n      if (unicode !== -1) {\n        toFontChar[+charCode] = unicode;\n      }\n    }\n\n    return toFontChar;\n  }\n\n  function adjustMapping(charCodeToGlyphId, hasGlyph, newGlyphZeroId) {\n    var newMap = Object.create(null);\n    var toFontChar = [];\n    var privateUseAreaIndex = 0;\n    var nextAvailableFontCharCode = PRIVATE_USE_AREAS[privateUseAreaIndex][0];\n    var privateUseOffetEnd = PRIVATE_USE_AREAS[privateUseAreaIndex][1];\n\n    for (var originalCharCode in charCodeToGlyphId) {\n      originalCharCode |= 0;\n      var glyphId = charCodeToGlyphId[originalCharCode];\n\n      if (!hasGlyph(glyphId)) {\n        continue;\n      }\n\n      if (nextAvailableFontCharCode > privateUseOffetEnd) {\n        privateUseAreaIndex++;\n\n        if (privateUseAreaIndex >= PRIVATE_USE_AREAS.length) {\n          (0, _util.warn)(\"Ran out of space in font private use area.\");\n          break;\n        }\n\n        nextAvailableFontCharCode = PRIVATE_USE_AREAS[privateUseAreaIndex][0];\n        privateUseOffetEnd = PRIVATE_USE_AREAS[privateUseAreaIndex][1];\n      }\n\n      var fontCharCode = nextAvailableFontCharCode++;\n\n      if (glyphId === 0) {\n        glyphId = newGlyphZeroId;\n      }\n\n      newMap[fontCharCode] = glyphId;\n      toFontChar[originalCharCode] = fontCharCode;\n    }\n\n    return {\n      toFontChar,\n      charCodeToGlyphId: newMap,\n      nextAvailableFontCharCode\n    };\n  }\n\n  function getRanges(glyphs, numGlyphs) {\n    var codes = [];\n\n    for (var charCode in glyphs) {\n      if (glyphs[charCode] >= numGlyphs) {\n        continue;\n      }\n\n      codes.push({\n        fontCharCode: charCode | 0,\n        glyphId: glyphs[charCode]\n      });\n    }\n\n    if (codes.length === 0) {\n      codes.push({\n        fontCharCode: 0,\n        glyphId: 0\n      });\n    }\n\n    codes.sort(function fontGetRangesSort(a, b) {\n      return a.fontCharCode - b.fontCharCode;\n    });\n    var ranges = [];\n    var length = codes.length;\n\n    for (var n = 0; n < length;) {\n      var start = codes[n].fontCharCode;\n      var codeIndices = [codes[n].glyphId];\n      ++n;\n      var end = start;\n\n      while (n < length && end + 1 === codes[n].fontCharCode) {\n        codeIndices.push(codes[n].glyphId);\n        ++end;\n        ++n;\n\n        if (end === 0xffff) {\n          break;\n        }\n      }\n\n      ranges.push([start, end, codeIndices]);\n    }\n\n    return ranges;\n  }\n\n  function createCmapTable(glyphs, numGlyphs) {\n    var ranges = getRanges(glyphs, numGlyphs);\n    var numTables = ranges[ranges.length - 1][1] > 0xffff ? 2 : 1;\n    var cmap = \"\\x00\\x00\" + string16(numTables) + \"\\x00\\x03\" + \"\\x00\\x01\" + (0, _util.string32)(4 + numTables * 8);\n    var i, ii, j, jj;\n\n    for (i = ranges.length - 1; i >= 0; --i) {\n      if (ranges[i][0] <= 0xffff) {\n        break;\n      }\n    }\n\n    var bmpLength = i + 1;\n\n    if (ranges[i][0] < 0xffff && ranges[i][1] === 0xffff) {\n      ranges[i][1] = 0xfffe;\n    }\n\n    var trailingRangesCount = ranges[i][1] < 0xffff ? 1 : 0;\n    var segCount = bmpLength + trailingRangesCount;\n    var searchParams = OpenTypeFileBuilder.getSearchParams(segCount, 2);\n    var startCount = \"\";\n    var endCount = \"\";\n    var idDeltas = \"\";\n    var idRangeOffsets = \"\";\n    var glyphsIds = \"\";\n    var bias = 0;\n    var range, start, end, codes;\n\n    for (i = 0, ii = bmpLength; i < ii; i++) {\n      range = ranges[i];\n      start = range[0];\n      end = range[1];\n      startCount += string16(start);\n      endCount += string16(end);\n      codes = range[2];\n      var contiguous = true;\n\n      for (j = 1, jj = codes.length; j < jj; ++j) {\n        if (codes[j] !== codes[j - 1] + 1) {\n          contiguous = false;\n          break;\n        }\n      }\n\n      if (!contiguous) {\n        var offset = (segCount - i) * 2 + bias * 2;\n        bias += end - start + 1;\n        idDeltas += string16(0);\n        idRangeOffsets += string16(offset);\n\n        for (j = 0, jj = codes.length; j < jj; ++j) {\n          glyphsIds += string16(codes[j]);\n        }\n      } else {\n        var startCode = codes[0];\n        idDeltas += string16(startCode - start & 0xffff);\n        idRangeOffsets += string16(0);\n      }\n    }\n\n    if (trailingRangesCount > 0) {\n      endCount += \"\\xFF\\xFF\";\n      startCount += \"\\xFF\\xFF\";\n      idDeltas += \"\\x00\\x01\";\n      idRangeOffsets += \"\\x00\\x00\";\n    }\n\n    var format314 = \"\\x00\\x00\" + string16(2 * segCount) + string16(searchParams.range) + string16(searchParams.entry) + string16(searchParams.rangeShift) + endCount + \"\\x00\\x00\" + startCount + idDeltas + idRangeOffsets + glyphsIds;\n    var format31012 = \"\";\n    var header31012 = \"\";\n\n    if (numTables > 1) {\n      cmap += \"\\x00\\x03\" + \"\\x00\\x0A\" + (0, _util.string32)(4 + numTables * 8 + 4 + format314.length);\n      format31012 = \"\";\n\n      for (i = 0, ii = ranges.length; i < ii; i++) {\n        range = ranges[i];\n        start = range[0];\n        codes = range[2];\n        var code = codes[0];\n\n        for (j = 1, jj = codes.length; j < jj; ++j) {\n          if (codes[j] !== codes[j - 1] + 1) {\n            end = range[0] + j - 1;\n            format31012 += (0, _util.string32)(start) + (0, _util.string32)(end) + (0, _util.string32)(code);\n            start = end + 1;\n            code = codes[j];\n          }\n        }\n\n        format31012 += (0, _util.string32)(start) + (0, _util.string32)(range[1]) + (0, _util.string32)(code);\n      }\n\n      header31012 = \"\\x00\\x0C\" + \"\\x00\\x00\" + (0, _util.string32)(format31012.length + 16) + \"\\x00\\x00\\x00\\x00\" + (0, _util.string32)(format31012.length / 12);\n    }\n\n    return cmap + \"\\x00\\x04\" + string16(format314.length + 4) + format314 + header31012 + format31012;\n  }\n\n  function validateOS2Table(os2, file) {\n    file.pos = (file.start || 0) + os2.offset;\n    var version = file.getUint16();\n    file.skip(60);\n    var selection = file.getUint16();\n\n    if (version < 4 && selection & 0x0300) {\n      return false;\n    }\n\n    var firstChar = file.getUint16();\n    var lastChar = file.getUint16();\n\n    if (firstChar > lastChar) {\n      return false;\n    }\n\n    file.skip(6);\n    var usWinAscent = file.getUint16();\n\n    if (usWinAscent === 0) {\n      return false;\n    }\n\n    os2.data[8] = os2.data[9] = 0;\n    return true;\n  }\n\n  function createOS2Table(properties, charstrings, override) {\n    override = override || {\n      unitsPerEm: 0,\n      yMax: 0,\n      yMin: 0,\n      ascent: 0,\n      descent: 0\n    };\n    var ulUnicodeRange1 = 0;\n    var ulUnicodeRange2 = 0;\n    var ulUnicodeRange3 = 0;\n    var ulUnicodeRange4 = 0;\n    var firstCharIndex = null;\n    var lastCharIndex = 0;\n\n    if (charstrings) {\n      for (var code in charstrings) {\n        code |= 0;\n\n        if (firstCharIndex > code || !firstCharIndex) {\n          firstCharIndex = code;\n        }\n\n        if (lastCharIndex < code) {\n          lastCharIndex = code;\n        }\n\n        var position = (0, _unicode.getUnicodeRangeFor)(code);\n\n        if (position < 32) {\n          ulUnicodeRange1 |= 1 << position;\n        } else if (position < 64) {\n          ulUnicodeRange2 |= 1 << position - 32;\n        } else if (position < 96) {\n          ulUnicodeRange3 |= 1 << position - 64;\n        } else if (position < 123) {\n          ulUnicodeRange4 |= 1 << position - 96;\n        } else {\n          throw new _util.FormatError(\"Unicode ranges Bits > 123 are reserved for internal usage\");\n        }\n      }\n\n      if (lastCharIndex > 0xffff) {\n        lastCharIndex = 0xffff;\n      }\n    } else {\n      firstCharIndex = 0;\n      lastCharIndex = 255;\n    }\n\n    var bbox = properties.bbox || [0, 0, 0, 0];\n    var unitsPerEm = override.unitsPerEm || 1 / (properties.fontMatrix || _util.FONT_IDENTITY_MATRIX)[0];\n    var scale = properties.ascentScaled ? 1.0 : unitsPerEm / PDF_GLYPH_SPACE_UNITS;\n    var typoAscent = override.ascent || Math.round(scale * (properties.ascent || bbox[3]));\n    var typoDescent = override.descent || Math.round(scale * (properties.descent || bbox[1]));\n\n    if (typoDescent > 0 && properties.descent > 0 && bbox[1] < 0) {\n      typoDescent = -typoDescent;\n    }\n\n    var winAscent = override.yMax || typoAscent;\n    var winDescent = -override.yMin || -typoDescent;\n    return \"\\x00\\x03\" + \"\\x02\\x24\" + \"\\x01\\xF4\" + \"\\x00\\x05\" + \"\\x00\\x00\" + \"\\x02\\x8A\" + \"\\x02\\xBB\" + \"\\x00\\x00\" + \"\\x00\\x8C\" + \"\\x02\\x8A\" + \"\\x02\\xBB\" + \"\\x00\\x00\" + \"\\x01\\xDF\" + \"\\x00\\x31\" + \"\\x01\\x02\" + \"\\x00\\x00\" + \"\\x00\\x00\\x06\" + String.fromCharCode(properties.fixedPitch ? 0x09 : 0x00) + \"\\x00\\x00\\x00\\x00\\x00\\x00\" + (0, _util.string32)(ulUnicodeRange1) + (0, _util.string32)(ulUnicodeRange2) + (0, _util.string32)(ulUnicodeRange3) + (0, _util.string32)(ulUnicodeRange4) + \"\\x2A\\x32\\x31\\x2A\" + string16(properties.italicAngle ? 1 : 0) + string16(firstCharIndex || properties.firstChar) + string16(lastCharIndex || properties.lastChar) + string16(typoAscent) + string16(typoDescent) + \"\\x00\\x64\" + string16(winAscent) + string16(winDescent) + \"\\x00\\x00\\x00\\x00\" + \"\\x00\\x00\\x00\\x00\" + string16(properties.xHeight) + string16(properties.capHeight) + string16(0) + string16(firstCharIndex || properties.firstChar) + \"\\x00\\x03\";\n  }\n\n  function createPostTable(properties) {\n    var angle = Math.floor(properties.italicAngle * 2 ** 16);\n    return \"\\x00\\x03\\x00\\x00\" + (0, _util.string32)(angle) + \"\\x00\\x00\" + \"\\x00\\x00\" + (0, _util.string32)(properties.fixedPitch) + \"\\x00\\x00\\x00\\x00\" + \"\\x00\\x00\\x00\\x00\" + \"\\x00\\x00\\x00\\x00\" + \"\\x00\\x00\\x00\\x00\";\n  }\n\n  function createNameTable(name, proto) {\n    if (!proto) {\n      proto = [[], []];\n    }\n\n    var strings = [proto[0][0] || \"Original licence\", proto[0][1] || name, proto[0][2] || \"Unknown\", proto[0][3] || \"uniqueID\", proto[0][4] || name, proto[0][5] || \"Version 0.11\", proto[0][6] || \"\", proto[0][7] || \"Unknown\", proto[0][8] || \"Unknown\", proto[0][9] || \"Unknown\"];\n    var stringsUnicode = [];\n    var i, ii, j, jj, str;\n\n    for (i = 0, ii = strings.length; i < ii; i++) {\n      str = proto[1][i] || strings[i];\n      var strBufUnicode = [];\n\n      for (j = 0, jj = str.length; j < jj; j++) {\n        strBufUnicode.push(string16(str.charCodeAt(j)));\n      }\n\n      stringsUnicode.push(strBufUnicode.join(\"\"));\n    }\n\n    var names = [strings, stringsUnicode];\n    var platforms = [\"\\x00\\x01\", \"\\x00\\x03\"];\n    var encodings = [\"\\x00\\x00\", \"\\x00\\x01\"];\n    var languages = [\"\\x00\\x00\", \"\\x04\\x09\"];\n    var namesRecordCount = strings.length * platforms.length;\n    var nameTable = \"\\x00\\x00\" + string16(namesRecordCount) + string16(namesRecordCount * 12 + 6);\n    var strOffset = 0;\n\n    for (i = 0, ii = platforms.length; i < ii; i++) {\n      var strs = names[i];\n\n      for (j = 0, jj = strs.length; j < jj; j++) {\n        str = strs[j];\n        var nameRecord = platforms[i] + encodings[i] + languages[i] + string16(j) + string16(str.length) + string16(strOffset);\n        nameTable += nameRecord;\n        strOffset += str.length;\n      }\n    }\n\n    nameTable += strings.join(\"\") + stringsUnicode.join(\"\");\n    return nameTable;\n  }\n\n  Font.prototype = {\n    name: null,\n    font: null,\n    mimetype: null,\n    disableFontFace: false,\n\n    get renderer() {\n      var renderer = _font_renderer.FontRendererFactory.create(this, SEAC_ANALYSIS_ENABLED);\n\n      return (0, _util.shadow)(this, \"renderer\", renderer);\n    },\n\n    exportData(extraProperties = false) {\n      const exportDataProperties = extraProperties ? [...EXPORT_DATA_PROPERTIES, ...EXPORT_DATA_EXTRA_PROPERTIES] : EXPORT_DATA_PROPERTIES;\n      const data = Object.create(null);\n      let property, value;\n\n      for (property of exportDataProperties) {\n        value = this[property];\n\n        if (value !== undefined) {\n          data[property] = value;\n        }\n      }\n\n      return data;\n    },\n\n    fallbackToSystemFont(properties) {\n      this.missingFile = true;\n      var name = this.name;\n      var type = this.type;\n      var subtype = this.subtype;\n      let fontName = name.replace(/[,_]/g, \"-\").replace(/\\s/g, \"\");\n      var stdFontMap = (0, _standard_fonts.getStdFontMap)(),\n          nonStdFontMap = (0, _standard_fonts.getNonStdFontMap)();\n      const isStandardFont = !!stdFontMap[fontName];\n      const isMappedToStandardFont = !!(nonStdFontMap[fontName] && stdFontMap[nonStdFontMap[fontName]]);\n      fontName = stdFontMap[fontName] || nonStdFontMap[fontName] || fontName;\n      this.bold = fontName.search(/bold/gi) !== -1;\n      this.italic = fontName.search(/oblique/gi) !== -1 || fontName.search(/italic/gi) !== -1;\n      this.black = name.search(/Black/g) !== -1;\n      const isNarrow = name.search(/Narrow/g) !== -1;\n      this.remeasure = (!isStandardFont || isNarrow) && Object.keys(this.widths).length > 0;\n\n      if ((isStandardFont || isMappedToStandardFont) && type === \"CIDFontType2\" && this.cidEncoding.startsWith(\"Identity-\")) {\n        const GlyphMapForStandardFonts = (0, _standard_fonts.getGlyphMapForStandardFonts)(),\n              cidToGidMap = properties.cidToGidMap;\n        const map = [];\n\n        for (const charCode in GlyphMapForStandardFonts) {\n          map[+charCode] = GlyphMapForStandardFonts[charCode];\n        }\n\n        if (/Arial-?Black/i.test(name)) {\n          var SupplementalGlyphMapForArialBlack = (0, _standard_fonts.getSupplementalGlyphMapForArialBlack)();\n\n          for (const charCode in SupplementalGlyphMapForArialBlack) {\n            map[+charCode] = SupplementalGlyphMapForArialBlack[charCode];\n          }\n        } else if (/Calibri/i.test(name)) {\n          const SupplementalGlyphMapForCalibri = (0, _standard_fonts.getSupplementalGlyphMapForCalibri)();\n\n          for (const charCode in SupplementalGlyphMapForCalibri) {\n            map[+charCode] = SupplementalGlyphMapForCalibri[charCode];\n          }\n        }\n\n        if (cidToGidMap) {\n          for (const charCode in map) {\n            const cid = map[charCode];\n\n            if (cidToGidMap[cid] !== undefined) {\n              map[+charCode] = cidToGidMap[cid];\n            }\n          }\n        }\n\n        var isIdentityUnicode = this.toUnicode instanceof IdentityToUnicodeMap;\n\n        if (!isIdentityUnicode) {\n          this.toUnicode.forEach(function (charCode, unicodeCharCode) {\n            map[+charCode] = unicodeCharCode;\n          });\n        }\n\n        this.toFontChar = map;\n        this.toUnicode = new ToUnicodeMap(map);\n      } else if (/Symbol/i.test(fontName)) {\n        this.toFontChar = buildToFontChar(_encodings.SymbolSetEncoding, (0, _glyphlist.getGlyphsUnicode)(), this.differences);\n      } else if (/Dingbats/i.test(fontName)) {\n        if (/Wingdings/i.test(name)) {\n          (0, _util.warn)(\"Non-embedded Wingdings font, falling back to ZapfDingbats.\");\n        }\n\n        this.toFontChar = buildToFontChar(_encodings.ZapfDingbatsEncoding, (0, _glyphlist.getDingbatsGlyphsUnicode)(), this.differences);\n      } else if (isStandardFont) {\n        this.toFontChar = buildToFontChar(this.defaultEncoding, (0, _glyphlist.getGlyphsUnicode)(), this.differences);\n      } else {\n        const glyphsUnicodeMap = (0, _glyphlist.getGlyphsUnicode)();\n        const map = [];\n        this.toUnicode.forEach((charCode, unicodeCharCode) => {\n          if (!this.composite) {\n            var glyphName = this.differences[charCode] || this.defaultEncoding[charCode];\n            const unicode = (0, _unicode.getUnicodeForGlyph)(glyphName, glyphsUnicodeMap);\n\n            if (unicode !== -1) {\n              unicodeCharCode = unicode;\n            }\n          }\n\n          map[+charCode] = unicodeCharCode;\n        });\n\n        if (this.composite && this.toUnicode instanceof IdentityToUnicodeMap) {\n          if (/Verdana/i.test(name)) {\n            const GlyphMapForStandardFonts = (0, _standard_fonts.getGlyphMapForStandardFonts)();\n\n            for (const charCode in GlyphMapForStandardFonts) {\n              map[+charCode] = GlyphMapForStandardFonts[charCode];\n            }\n          }\n        }\n\n        this.toFontChar = map;\n      }\n\n      this.loadedName = fontName.split(\"-\")[0];\n      this.fontType = getFontType(type, subtype);\n    },\n\n    checkAndRepair: function Font_checkAndRepair(name, font, properties) {\n      const VALID_TABLES = [\"OS/2\", \"cmap\", \"head\", \"hhea\", \"hmtx\", \"maxp\", \"name\", \"post\", \"loca\", \"glyf\", \"fpgm\", \"prep\", \"cvt \", \"CFF \"];\n\n      function readTables(file, numTables) {\n        const tables = Object.create(null);\n        tables[\"OS/2\"] = null;\n        tables.cmap = null;\n        tables.head = null;\n        tables.hhea = null;\n        tables.hmtx = null;\n        tables.maxp = null;\n        tables.name = null;\n        tables.post = null;\n\n        for (let i = 0; i < numTables; i++) {\n          const table = readTableEntry(file);\n\n          if (!VALID_TABLES.includes(table.tag)) {\n            continue;\n          }\n\n          if (table.length === 0) {\n            continue;\n          }\n\n          tables[table.tag] = table;\n        }\n\n        return tables;\n      }\n\n      function readTableEntry(file) {\n        var tag = (0, _util.bytesToString)(file.getBytes(4));\n        var checksum = file.getInt32() >>> 0;\n        var offset = file.getInt32() >>> 0;\n        var length = file.getInt32() >>> 0;\n        var previousPosition = file.pos;\n        file.pos = file.start ? file.start : 0;\n        file.skip(offset);\n        var data = file.getBytes(length);\n        file.pos = previousPosition;\n\n        if (tag === \"head\") {\n          data[8] = data[9] = data[10] = data[11] = 0;\n          data[17] |= 0x20;\n        }\n\n        return {\n          tag,\n          checksum,\n          length,\n          offset,\n          data\n        };\n      }\n\n      function readOpenTypeHeader(ttf) {\n        return {\n          version: (0, _util.bytesToString)(ttf.getBytes(4)),\n          numTables: ttf.getUint16(),\n          searchRange: ttf.getUint16(),\n          entrySelector: ttf.getUint16(),\n          rangeShift: ttf.getUint16()\n        };\n      }\n\n      function readTrueTypeCollectionHeader(ttc) {\n        const ttcTag = (0, _util.bytesToString)(ttc.getBytes(4));\n        (0, _util.assert)(ttcTag === \"ttcf\", \"Must be a TrueType Collection font.\");\n        const majorVersion = ttc.getUint16();\n        const minorVersion = ttc.getUint16();\n        const numFonts = ttc.getInt32() >>> 0;\n        const offsetTable = [];\n\n        for (let i = 0; i < numFonts; i++) {\n          offsetTable.push(ttc.getInt32() >>> 0);\n        }\n\n        const header = {\n          ttcTag,\n          majorVersion,\n          minorVersion,\n          numFonts,\n          offsetTable\n        };\n\n        switch (majorVersion) {\n          case 1:\n            return header;\n\n          case 2:\n            header.dsigTag = ttc.getInt32() >>> 0;\n            header.dsigLength = ttc.getInt32() >>> 0;\n            header.dsigOffset = ttc.getInt32() >>> 0;\n            return header;\n        }\n\n        throw new _util.FormatError(`Invalid TrueType Collection majorVersion: ${majorVersion}.`);\n      }\n\n      function readTrueTypeCollectionData(ttc, fontName) {\n        const {\n          numFonts,\n          offsetTable\n        } = readTrueTypeCollectionHeader(ttc);\n\n        for (let i = 0; i < numFonts; i++) {\n          ttc.pos = (ttc.start || 0) + offsetTable[i];\n          const potentialHeader = readOpenTypeHeader(ttc);\n          const potentialTables = readTables(ttc, potentialHeader.numTables);\n\n          if (!potentialTables.name) {\n            throw new _util.FormatError('TrueType Collection font must contain a \"name\" table.');\n          }\n\n          const nameTable = readNameTable(potentialTables.name);\n\n          for (let j = 0, jj = nameTable.length; j < jj; j++) {\n            for (let k = 0, kk = nameTable[j].length; k < kk; k++) {\n              const nameEntry = nameTable[j][k];\n\n              if (nameEntry && nameEntry.replace(/\\s/g, \"\") === fontName) {\n                return {\n                  header: potentialHeader,\n                  tables: potentialTables\n                };\n              }\n            }\n          }\n        }\n\n        throw new _util.FormatError(`TrueType Collection does not contain \"${fontName}\" font.`);\n      }\n\n      function readCmapTable(cmap, file, isSymbolicFont, hasEncoding) {\n        if (!cmap) {\n          (0, _util.warn)(\"No cmap table available.\");\n          return {\n            platformId: -1,\n            encodingId: -1,\n            mappings: [],\n            hasShortCmap: false\n          };\n        }\n\n        var segment;\n        var start = (file.start ? file.start : 0) + cmap.offset;\n        file.pos = start;\n        file.skip(2);\n        var numTables = file.getUint16();\n        var potentialTable;\n        var canBreak = false;\n\n        for (var i = 0; i < numTables; i++) {\n          var platformId = file.getUint16();\n          var encodingId = file.getUint16();\n          var offset = file.getInt32() >>> 0;\n          var useTable = false;\n\n          if (potentialTable && potentialTable.platformId === platformId && potentialTable.encodingId === encodingId) {\n            continue;\n          }\n\n          if (platformId === 0 && (encodingId === 0 || encodingId === 1 || encodingId === 3)) {\n            useTable = true;\n          } else if (platformId === 1 && encodingId === 0) {\n            useTable = true;\n          } else if (platformId === 3 && encodingId === 1 && (hasEncoding || !potentialTable)) {\n            useTable = true;\n\n            if (!isSymbolicFont) {\n              canBreak = true;\n            }\n          } else if (isSymbolicFont && platformId === 3 && encodingId === 0) {\n            useTable = true;\n            canBreak = true;\n          }\n\n          if (useTable) {\n            potentialTable = {\n              platformId,\n              encodingId,\n              offset\n            };\n          }\n\n          if (canBreak) {\n            break;\n          }\n        }\n\n        if (potentialTable) {\n          file.pos = start + potentialTable.offset;\n        }\n\n        if (!potentialTable || file.peekByte() === -1) {\n          (0, _util.warn)(\"Could not find a preferred cmap table.\");\n          return {\n            platformId: -1,\n            encodingId: -1,\n            mappings: [],\n            hasShortCmap: false\n          };\n        }\n\n        var format = file.getUint16();\n        file.skip(2 + 2);\n        var hasShortCmap = false;\n        var mappings = [];\n        var j, glyphId;\n\n        if (format === 0) {\n          for (j = 0; j < 256; j++) {\n            var index = file.getByte();\n\n            if (!index) {\n              continue;\n            }\n\n            mappings.push({\n              charCode: j,\n              glyphId: index\n            });\n          }\n\n          hasShortCmap = true;\n        } else if (format === 4) {\n          var segCount = file.getUint16() >> 1;\n          file.skip(6);\n          var segIndex,\n              segments = [];\n\n          for (segIndex = 0; segIndex < segCount; segIndex++) {\n            segments.push({\n              end: file.getUint16()\n            });\n          }\n\n          file.skip(2);\n\n          for (segIndex = 0; segIndex < segCount; segIndex++) {\n            segments[segIndex].start = file.getUint16();\n          }\n\n          for (segIndex = 0; segIndex < segCount; segIndex++) {\n            segments[segIndex].delta = file.getUint16();\n          }\n\n          var offsetsCount = 0;\n\n          for (segIndex = 0; segIndex < segCount; segIndex++) {\n            segment = segments[segIndex];\n            var rangeOffset = file.getUint16();\n\n            if (!rangeOffset) {\n              segment.offsetIndex = -1;\n              continue;\n            }\n\n            var offsetIndex = (rangeOffset >> 1) - (segCount - segIndex);\n            segment.offsetIndex = offsetIndex;\n            offsetsCount = Math.max(offsetsCount, offsetIndex + segment.end - segment.start + 1);\n          }\n\n          var offsets = [];\n\n          for (j = 0; j < offsetsCount; j++) {\n            offsets.push(file.getUint16());\n          }\n\n          for (segIndex = 0; segIndex < segCount; segIndex++) {\n            segment = segments[segIndex];\n            start = segment.start;\n            var end = segment.end;\n            var delta = segment.delta;\n            offsetIndex = segment.offsetIndex;\n\n            for (j = start; j <= end; j++) {\n              if (j === 0xffff) {\n                continue;\n              }\n\n              glyphId = offsetIndex < 0 ? j : offsets[offsetIndex + j - start];\n              glyphId = glyphId + delta & 0xffff;\n              mappings.push({\n                charCode: j,\n                glyphId\n              });\n            }\n          }\n        } else if (format === 6) {\n          var firstCode = file.getUint16();\n          var entryCount = file.getUint16();\n\n          for (j = 0; j < entryCount; j++) {\n            glyphId = file.getUint16();\n            var charCode = firstCode + j;\n            mappings.push({\n              charCode,\n              glyphId\n            });\n          }\n        } else {\n          (0, _util.warn)(\"cmap table has unsupported format: \" + format);\n          return {\n            platformId: -1,\n            encodingId: -1,\n            mappings: [],\n            hasShortCmap: false\n          };\n        }\n\n        mappings.sort(function (a, b) {\n          return a.charCode - b.charCode;\n        });\n\n        for (i = 1; i < mappings.length; i++) {\n          if (mappings[i - 1].charCode === mappings[i].charCode) {\n            mappings.splice(i, 1);\n            i--;\n          }\n        }\n\n        return {\n          platformId: potentialTable.platformId,\n          encodingId: potentialTable.encodingId,\n          mappings,\n          hasShortCmap\n        };\n      }\n\n      function sanitizeMetrics(file, header, metrics, numGlyphs, dupFirstEntry) {\n        if (!header) {\n          if (metrics) {\n            metrics.data = null;\n          }\n\n          return;\n        }\n\n        file.pos = (file.start ? file.start : 0) + header.offset;\n        file.pos += 4;\n        file.pos += 2;\n        file.pos += 2;\n        file.pos += 2;\n        file.pos += 2;\n        file.pos += 2;\n        file.pos += 2;\n        file.pos += 2;\n        file.pos += 2;\n        file.pos += 2;\n        file.pos += 2;\n        file.pos += 8;\n        file.pos += 2;\n        var numOfMetrics = file.getUint16();\n\n        if (numOfMetrics > numGlyphs) {\n          (0, _util.info)(\"The numOfMetrics (\" + numOfMetrics + \") should not be \" + \"greater than the numGlyphs (\" + numGlyphs + \")\");\n          numOfMetrics = numGlyphs;\n          header.data[34] = (numOfMetrics & 0xff00) >> 8;\n          header.data[35] = numOfMetrics & 0x00ff;\n        }\n\n        var numOfSidebearings = numGlyphs - numOfMetrics;\n        var numMissing = numOfSidebearings - (metrics.length - numOfMetrics * 4 >> 1);\n\n        if (numMissing > 0) {\n          var entries = new Uint8Array(metrics.length + numMissing * 2);\n          entries.set(metrics.data);\n\n          if (dupFirstEntry) {\n            entries[metrics.length] = metrics.data[2];\n            entries[metrics.length + 1] = metrics.data[3];\n          }\n\n          metrics.data = entries;\n        }\n      }\n\n      function sanitizeGlyph(source, sourceStart, sourceEnd, dest, destStart, hintsValid) {\n        var glyphProfile = {\n          length: 0,\n          sizeOfInstructions: 0\n        };\n\n        if (sourceEnd - sourceStart <= 12) {\n          return glyphProfile;\n        }\n\n        var glyf = source.subarray(sourceStart, sourceEnd);\n        var contoursCount = signedInt16(glyf[0], glyf[1]);\n\n        if (contoursCount < 0) {\n          contoursCount = -1;\n          writeSignedInt16(glyf, 0, contoursCount);\n          dest.set(glyf, destStart);\n          glyphProfile.length = glyf.length;\n          return glyphProfile;\n        }\n\n        var i,\n            j = 10,\n            flagsCount = 0;\n\n        for (i = 0; i < contoursCount; i++) {\n          var endPoint = glyf[j] << 8 | glyf[j + 1];\n          flagsCount = endPoint + 1;\n          j += 2;\n        }\n\n        var instructionsStart = j;\n        var instructionsLength = glyf[j] << 8 | glyf[j + 1];\n        glyphProfile.sizeOfInstructions = instructionsLength;\n        j += 2 + instructionsLength;\n        var instructionsEnd = j;\n        var coordinatesLength = 0;\n\n        for (i = 0; i < flagsCount; i++) {\n          var flag = glyf[j++];\n\n          if (flag & 0xc0) {\n            glyf[j - 1] = flag & 0x3f;\n          }\n\n          let xLength = 2;\n\n          if (flag & 2) {\n            xLength = 1;\n          } else if (flag & 16) {\n            xLength = 0;\n          }\n\n          let yLength = 2;\n\n          if (flag & 4) {\n            yLength = 1;\n          } else if (flag & 32) {\n            yLength = 0;\n          }\n\n          const xyLength = xLength + yLength;\n          coordinatesLength += xyLength;\n\n          if (flag & 8) {\n            var repeat = glyf[j++];\n            i += repeat;\n            coordinatesLength += repeat * xyLength;\n          }\n        }\n\n        if (coordinatesLength === 0) {\n          return glyphProfile;\n        }\n\n        var glyphDataLength = j + coordinatesLength;\n\n        if (glyphDataLength > glyf.length) {\n          return glyphProfile;\n        }\n\n        if (!hintsValid && instructionsLength > 0) {\n          dest.set(glyf.subarray(0, instructionsStart), destStart);\n          dest.set([0, 0], destStart + instructionsStart);\n          dest.set(glyf.subarray(instructionsEnd, glyphDataLength), destStart + instructionsStart + 2);\n          glyphDataLength -= instructionsLength;\n\n          if (glyf.length - glyphDataLength > 3) {\n            glyphDataLength = glyphDataLength + 3 & ~3;\n          }\n\n          glyphProfile.length = glyphDataLength;\n          return glyphProfile;\n        }\n\n        if (glyf.length - glyphDataLength > 3) {\n          glyphDataLength = glyphDataLength + 3 & ~3;\n          dest.set(glyf.subarray(0, glyphDataLength), destStart);\n          glyphProfile.length = glyphDataLength;\n          return glyphProfile;\n        }\n\n        dest.set(glyf, destStart);\n        glyphProfile.length = glyf.length;\n        return glyphProfile;\n      }\n\n      function sanitizeHead(head, numGlyphs, locaLength) {\n        var data = head.data;\n        var version = int32(data[0], data[1], data[2], data[3]);\n\n        if (version >> 16 !== 1) {\n          (0, _util.info)(\"Attempting to fix invalid version in head table: \" + version);\n          data[0] = 0;\n          data[1] = 1;\n          data[2] = 0;\n          data[3] = 0;\n        }\n\n        var indexToLocFormat = int16(data[50], data[51]);\n\n        if (indexToLocFormat < 0 || indexToLocFormat > 1) {\n          (0, _util.info)(\"Attempting to fix invalid indexToLocFormat in head table: \" + indexToLocFormat);\n          var numGlyphsPlusOne = numGlyphs + 1;\n\n          if (locaLength === numGlyphsPlusOne << 1) {\n            data[50] = 0;\n            data[51] = 0;\n          } else if (locaLength === numGlyphsPlusOne << 2) {\n            data[50] = 0;\n            data[51] = 1;\n          } else {\n            throw new _util.FormatError(\"Could not fix indexToLocFormat: \" + indexToLocFormat);\n          }\n        }\n      }\n\n      function sanitizeGlyphLocations(loca, glyf, numGlyphs, isGlyphLocationsLong, hintsValid, dupFirstEntry, maxSizeOfInstructions) {\n        var itemSize, itemDecode, itemEncode;\n\n        if (isGlyphLocationsLong) {\n          itemSize = 4;\n\n          itemDecode = function fontItemDecodeLong(data, offset) {\n            return data[offset] << 24 | data[offset + 1] << 16 | data[offset + 2] << 8 | data[offset + 3];\n          };\n\n          itemEncode = function fontItemEncodeLong(data, offset, value) {\n            data[offset] = value >>> 24 & 0xff;\n            data[offset + 1] = value >> 16 & 0xff;\n            data[offset + 2] = value >> 8 & 0xff;\n            data[offset + 3] = value & 0xff;\n          };\n        } else {\n          itemSize = 2;\n\n          itemDecode = function fontItemDecode(data, offset) {\n            return data[offset] << 9 | data[offset + 1] << 1;\n          };\n\n          itemEncode = function fontItemEncode(data, offset, value) {\n            data[offset] = value >> 9 & 0xff;\n            data[offset + 1] = value >> 1 & 0xff;\n          };\n        }\n\n        var numGlyphsOut = dupFirstEntry ? numGlyphs + 1 : numGlyphs;\n        var locaDataSize = itemSize * (1 + numGlyphsOut);\n        var locaData = new Uint8Array(locaDataSize);\n        locaData.set(loca.data.subarray(0, locaDataSize));\n        loca.data = locaData;\n        var oldGlyfData = glyf.data;\n        var oldGlyfDataLength = oldGlyfData.length;\n        var newGlyfData = new Uint8Array(oldGlyfDataLength);\n        var i, j;\n        const locaEntries = [];\n\n        for (i = 0, j = 0; i < numGlyphs + 1; i++, j += itemSize) {\n          let offset = itemDecode(locaData, j);\n\n          if (offset > oldGlyfDataLength) {\n            offset = oldGlyfDataLength;\n          }\n\n          locaEntries.push({\n            index: i,\n            offset,\n            endOffset: 0\n          });\n        }\n\n        locaEntries.sort((a, b) => {\n          return a.offset - b.offset;\n        });\n\n        for (i = 0; i < numGlyphs; i++) {\n          locaEntries[i].endOffset = locaEntries[i + 1].offset;\n        }\n\n        locaEntries.sort((a, b) => {\n          return a.index - b.index;\n        });\n        var missingGlyphs = Object.create(null);\n        var writeOffset = 0;\n        itemEncode(locaData, 0, writeOffset);\n\n        for (i = 0, j = itemSize; i < numGlyphs; i++, j += itemSize) {\n          var glyphProfile = sanitizeGlyph(oldGlyfData, locaEntries[i].offset, locaEntries[i].endOffset, newGlyfData, writeOffset, hintsValid);\n          var newLength = glyphProfile.length;\n\n          if (newLength === 0) {\n            missingGlyphs[i] = true;\n          }\n\n          if (glyphProfile.sizeOfInstructions > maxSizeOfInstructions) {\n            maxSizeOfInstructions = glyphProfile.sizeOfInstructions;\n          }\n\n          writeOffset += newLength;\n          itemEncode(locaData, j, writeOffset);\n        }\n\n        if (writeOffset === 0) {\n          var simpleGlyph = new Uint8Array([0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49, 0]);\n\n          for (i = 0, j = itemSize; i < numGlyphsOut; i++, j += itemSize) {\n            itemEncode(locaData, j, simpleGlyph.length);\n          }\n\n          glyf.data = simpleGlyph;\n        } else if (dupFirstEntry) {\n          var firstEntryLength = itemDecode(locaData, itemSize);\n\n          if (newGlyfData.length > firstEntryLength + writeOffset) {\n            glyf.data = newGlyfData.subarray(0, firstEntryLength + writeOffset);\n          } else {\n            glyf.data = new Uint8Array(firstEntryLength + writeOffset);\n            glyf.data.set(newGlyfData.subarray(0, writeOffset));\n          }\n\n          glyf.data.set(newGlyfData.subarray(0, firstEntryLength), writeOffset);\n          itemEncode(loca.data, locaData.length - itemSize, writeOffset + firstEntryLength);\n        } else {\n          glyf.data = newGlyfData.subarray(0, writeOffset);\n        }\n\n        return {\n          missingGlyphs,\n          maxSizeOfInstructions\n        };\n      }\n\n      function readPostScriptTable(post, propertiesObj, maxpNumGlyphs) {\n        var start = (font.start ? font.start : 0) + post.offset;\n        font.pos = start;\n        var length = post.length,\n            end = start + length;\n        var version = font.getInt32();\n        font.skip(28);\n        var glyphNames;\n        var valid = true;\n        var i;\n\n        switch (version) {\n          case 0x00010000:\n            glyphNames = MacStandardGlyphOrdering;\n            break;\n\n          case 0x00020000:\n            var numGlyphs = font.getUint16();\n\n            if (numGlyphs !== maxpNumGlyphs) {\n              valid = false;\n              break;\n            }\n\n            var glyphNameIndexes = [];\n\n            for (i = 0; i < numGlyphs; ++i) {\n              var index = font.getUint16();\n\n              if (index >= 32768) {\n                valid = false;\n                break;\n              }\n\n              glyphNameIndexes.push(index);\n            }\n\n            if (!valid) {\n              break;\n            }\n\n            var customNames = [];\n            var strBuf = [];\n\n            while (font.pos < end) {\n              var stringLength = font.getByte();\n              strBuf.length = stringLength;\n\n              for (i = 0; i < stringLength; ++i) {\n                strBuf[i] = String.fromCharCode(font.getByte());\n              }\n\n              customNames.push(strBuf.join(\"\"));\n            }\n\n            glyphNames = [];\n\n            for (i = 0; i < numGlyphs; ++i) {\n              var j = glyphNameIndexes[i];\n\n              if (j < 258) {\n                glyphNames.push(MacStandardGlyphOrdering[j]);\n                continue;\n              }\n\n              glyphNames.push(customNames[j - 258]);\n            }\n\n            break;\n\n          case 0x00030000:\n            break;\n\n          default:\n            (0, _util.warn)(\"Unknown/unsupported post table version \" + version);\n            valid = false;\n\n            if (propertiesObj.defaultEncoding) {\n              glyphNames = propertiesObj.defaultEncoding;\n            }\n\n            break;\n        }\n\n        propertiesObj.glyphNames = glyphNames;\n        return valid;\n      }\n\n      function readNameTable(nameTable) {\n        var start = (font.start ? font.start : 0) + nameTable.offset;\n        font.pos = start;\n        var names = [[], []];\n        var length = nameTable.length,\n            end = start + length;\n        var format = font.getUint16();\n        var FORMAT_0_HEADER_LENGTH = 6;\n\n        if (format !== 0 || length < FORMAT_0_HEADER_LENGTH) {\n          return names;\n        }\n\n        var numRecords = font.getUint16();\n        var stringsStart = font.getUint16();\n        var records = [];\n        var NAME_RECORD_LENGTH = 12;\n        var i, ii;\n\n        for (i = 0; i < numRecords && font.pos + NAME_RECORD_LENGTH <= end; i++) {\n          var r = {\n            platform: font.getUint16(),\n            encoding: font.getUint16(),\n            language: font.getUint16(),\n            name: font.getUint16(),\n            length: font.getUint16(),\n            offset: font.getUint16()\n          };\n\n          if (r.platform === 1 && r.encoding === 0 && r.language === 0 || r.platform === 3 && r.encoding === 1 && r.language === 0x409) {\n            records.push(r);\n          }\n        }\n\n        for (i = 0, ii = records.length; i < ii; i++) {\n          var record = records[i];\n\n          if (record.length <= 0) {\n            continue;\n          }\n\n          var pos = start + stringsStart + record.offset;\n\n          if (pos + record.length > end) {\n            continue;\n          }\n\n          font.pos = pos;\n          var nameIndex = record.name;\n\n          if (record.encoding) {\n            var str = \"\";\n\n            for (var j = 0, jj = record.length; j < jj; j += 2) {\n              str += String.fromCharCode(font.getUint16());\n            }\n\n            names[1][nameIndex] = str;\n          } else {\n            names[0][nameIndex] = (0, _util.bytesToString)(font.getBytes(record.length));\n          }\n        }\n\n        return names;\n      }\n\n      var TTOpsStackDeltas = [0, 0, 0, 0, 0, 0, 0, 0, -2, -2, -2, -2, 0, 0, -2, -5, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, -1, 0, -1, -1, -1, -1, 1, -1, -999, 0, 1, 0, -1, -2, 0, -1, -2, -1, -1, 0, -1, -1, 0, 0, -999, -999, -1, -1, -1, -1, -2, -999, -2, -2, -999, 0, -2, -2, 0, 0, -2, 0, -2, 0, 0, 0, -2, -1, -1, 1, 1, 0, 0, -1, -1, -1, -1, -1, -1, -1, 0, 0, -1, 0, -1, -1, 0, -999, -1, -1, -1, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2, -999, -999, -999, -999, -999, -1, -1, -2, -2, 0, 0, 0, 0, -1, -1, -999, -2, -2, 0, 0, -1, -2, -2, 0, 0, 0, -1, -1, -1, -2];\n\n      function sanitizeTTProgram(table, ttContext) {\n        var data = table.data;\n        var i = 0,\n            j,\n            n,\n            b,\n            funcId,\n            pc,\n            lastEndf = 0,\n            lastDeff = 0;\n        var stack = [];\n        var callstack = [];\n        var functionsCalled = [];\n        var tooComplexToFollowFunctions = ttContext.tooComplexToFollowFunctions;\n        var inFDEF = false,\n            ifLevel = 0,\n            inELSE = 0;\n\n        for (var ii = data.length; i < ii;) {\n          var op = data[i++];\n\n          if (op === 0x40) {\n            n = data[i++];\n\n            if (inFDEF || inELSE) {\n              i += n;\n            } else {\n              for (j = 0; j < n; j++) {\n                stack.push(data[i++]);\n              }\n            }\n          } else if (op === 0x41) {\n            n = data[i++];\n\n            if (inFDEF || inELSE) {\n              i += n * 2;\n            } else {\n              for (j = 0; j < n; j++) {\n                b = data[i++];\n                stack.push(b << 8 | data[i++]);\n              }\n            }\n          } else if ((op & 0xf8) === 0xb0) {\n            n = op - 0xb0 + 1;\n\n            if (inFDEF || inELSE) {\n              i += n;\n            } else {\n              for (j = 0; j < n; j++) {\n                stack.push(data[i++]);\n              }\n            }\n          } else if ((op & 0xf8) === 0xb8) {\n            n = op - 0xb8 + 1;\n\n            if (inFDEF || inELSE) {\n              i += n * 2;\n            } else {\n              for (j = 0; j < n; j++) {\n                b = data[i++];\n                stack.push(b << 8 | data[i++]);\n              }\n            }\n          } else if (op === 0x2b && !tooComplexToFollowFunctions) {\n            if (!inFDEF && !inELSE) {\n              funcId = stack[stack.length - 1];\n\n              if (isNaN(funcId)) {\n                (0, _util.info)(\"TT: CALL empty stack (or invalid entry).\");\n              } else {\n                ttContext.functionsUsed[funcId] = true;\n\n                if (funcId in ttContext.functionsStackDeltas) {\n                  const newStackLength = stack.length + ttContext.functionsStackDeltas[funcId];\n\n                  if (newStackLength < 0) {\n                    (0, _util.warn)(\"TT: CALL invalid functions stack delta.\");\n                    ttContext.hintsValid = false;\n                    return;\n                  }\n\n                  stack.length = newStackLength;\n                } else if (funcId in ttContext.functionsDefined && !functionsCalled.includes(funcId)) {\n                  callstack.push({\n                    data,\n                    i,\n                    stackTop: stack.length - 1\n                  });\n                  functionsCalled.push(funcId);\n                  pc = ttContext.functionsDefined[funcId];\n\n                  if (!pc) {\n                    (0, _util.warn)(\"TT: CALL non-existent function\");\n                    ttContext.hintsValid = false;\n                    return;\n                  }\n\n                  data = pc.data;\n                  i = pc.i;\n                }\n              }\n            }\n          } else if (op === 0x2c && !tooComplexToFollowFunctions) {\n            if (inFDEF || inELSE) {\n              (0, _util.warn)(\"TT: nested FDEFs not allowed\");\n              tooComplexToFollowFunctions = true;\n            }\n\n            inFDEF = true;\n            lastDeff = i;\n            funcId = stack.pop();\n            ttContext.functionsDefined[funcId] = {\n              data,\n              i\n            };\n          } else if (op === 0x2d) {\n            if (inFDEF) {\n              inFDEF = false;\n              lastEndf = i;\n            } else {\n              pc = callstack.pop();\n\n              if (!pc) {\n                (0, _util.warn)(\"TT: ENDF bad stack\");\n                ttContext.hintsValid = false;\n                return;\n              }\n\n              funcId = functionsCalled.pop();\n              data = pc.data;\n              i = pc.i;\n              ttContext.functionsStackDeltas[funcId] = stack.length - pc.stackTop;\n            }\n          } else if (op === 0x89) {\n            if (inFDEF || inELSE) {\n              (0, _util.warn)(\"TT: nested IDEFs not allowed\");\n              tooComplexToFollowFunctions = true;\n            }\n\n            inFDEF = true;\n            lastDeff = i;\n          } else if (op === 0x58) {\n            ++ifLevel;\n          } else if (op === 0x1b) {\n            inELSE = ifLevel;\n          } else if (op === 0x59) {\n            if (inELSE === ifLevel) {\n              inELSE = 0;\n            }\n\n            --ifLevel;\n          } else if (op === 0x1c) {\n            if (!inFDEF && !inELSE) {\n              var offset = stack[stack.length - 1];\n\n              if (offset > 0) {\n                i += offset - 1;\n              }\n            }\n          }\n\n          if (!inFDEF && !inELSE) {\n            let stackDelta = 0;\n\n            if (op <= 0x8e) {\n              stackDelta = TTOpsStackDeltas[op];\n            } else if (op >= 0xc0 && op <= 0xdf) {\n              stackDelta = -1;\n            } else if (op >= 0xe0) {\n              stackDelta = -2;\n            }\n\n            if (op >= 0x71 && op <= 0x75) {\n              n = stack.pop();\n\n              if (!isNaN(n)) {\n                stackDelta = -n * 2;\n              }\n            }\n\n            while (stackDelta < 0 && stack.length > 0) {\n              stack.pop();\n              stackDelta++;\n            }\n\n            while (stackDelta > 0) {\n              stack.push(NaN);\n              stackDelta--;\n            }\n          }\n        }\n\n        ttContext.tooComplexToFollowFunctions = tooComplexToFollowFunctions;\n        var content = [data];\n\n        if (i > data.length) {\n          content.push(new Uint8Array(i - data.length));\n        }\n\n        if (lastDeff > lastEndf) {\n          (0, _util.warn)(\"TT: complementing a missing function tail\");\n          content.push(new Uint8Array([0x22, 0x2d]));\n        }\n\n        foldTTTable(table, content);\n      }\n\n      function checkInvalidFunctions(ttContext, maxFunctionDefs) {\n        if (ttContext.tooComplexToFollowFunctions) {\n          return;\n        }\n\n        if (ttContext.functionsDefined.length > maxFunctionDefs) {\n          (0, _util.warn)(\"TT: more functions defined than expected\");\n          ttContext.hintsValid = false;\n          return;\n        }\n\n        for (var j = 0, jj = ttContext.functionsUsed.length; j < jj; j++) {\n          if (j > maxFunctionDefs) {\n            (0, _util.warn)(\"TT: invalid function id: \" + j);\n            ttContext.hintsValid = false;\n            return;\n          }\n\n          if (ttContext.functionsUsed[j] && !ttContext.functionsDefined[j]) {\n            (0, _util.warn)(\"TT: undefined function: \" + j);\n            ttContext.hintsValid = false;\n            return;\n          }\n        }\n      }\n\n      function foldTTTable(table, content) {\n        if (content.length > 1) {\n          var newLength = 0;\n          var j, jj;\n\n          for (j = 0, jj = content.length; j < jj; j++) {\n            newLength += content[j].length;\n          }\n\n          newLength = newLength + 3 & ~3;\n          var result = new Uint8Array(newLength);\n          var pos = 0;\n\n          for (j = 0, jj = content.length; j < jj; j++) {\n            result.set(content[j], pos);\n            pos += content[j].length;\n          }\n\n          table.data = result;\n          table.length = newLength;\n        }\n      }\n\n      function sanitizeTTPrograms(fpgm, prep, cvt, maxFunctionDefs) {\n        var ttContext = {\n          functionsDefined: [],\n          functionsUsed: [],\n          functionsStackDeltas: [],\n          tooComplexToFollowFunctions: false,\n          hintsValid: true\n        };\n\n        if (fpgm) {\n          sanitizeTTProgram(fpgm, ttContext);\n        }\n\n        if (prep) {\n          sanitizeTTProgram(prep, ttContext);\n        }\n\n        if (fpgm) {\n          checkInvalidFunctions(ttContext, maxFunctionDefs);\n        }\n\n        if (cvt && cvt.length & 1) {\n          var cvtData = new Uint8Array(cvt.length + 1);\n          cvtData.set(cvt.data);\n          cvt.data = cvtData;\n        }\n\n        return ttContext.hintsValid;\n      }\n\n      font = new _stream.Stream(new Uint8Array(font.getBytes()));\n      let header, tables;\n\n      if (isTrueTypeCollectionFile(font)) {\n        const ttcData = readTrueTypeCollectionData(font, this.name);\n        header = ttcData.header;\n        tables = ttcData.tables;\n      } else {\n        header = readOpenTypeHeader(font);\n        tables = readTables(font, header.numTables);\n      }\n\n      let cff, cffFile;\n      var isTrueType = !tables[\"CFF \"];\n\n      if (!isTrueType) {\n        const isComposite = properties.composite && ((properties.cidToGidMap || []).length > 0 || !(properties.cMap instanceof _cmap.IdentityCMap));\n\n        if (header.version === \"OTTO\" && !isComposite || !tables.head || !tables.hhea || !tables.maxp || !tables.post) {\n          cffFile = new _stream.Stream(tables[\"CFF \"].data);\n          cff = new CFFFont(cffFile, properties);\n          adjustWidths(properties);\n          return this.convert(name, cff, properties);\n        }\n\n        delete tables.glyf;\n        delete tables.loca;\n        delete tables.fpgm;\n        delete tables.prep;\n        delete tables[\"cvt \"];\n        this.isOpenType = true;\n      } else {\n        if (!tables.loca) {\n          throw new _util.FormatError('Required \"loca\" table is not found');\n        }\n\n        if (!tables.glyf) {\n          (0, _util.warn)('Required \"glyf\" table is not found -- trying to recover.');\n          tables.glyf = {\n            tag: \"glyf\",\n            data: new Uint8Array(0)\n          };\n        }\n\n        this.isOpenType = false;\n      }\n\n      if (!tables.maxp) {\n        throw new _util.FormatError('Required \"maxp\" table is not found');\n      }\n\n      font.pos = (font.start || 0) + tables.maxp.offset;\n      var version = font.getInt32();\n      const numGlyphs = font.getUint16();\n      let numGlyphsOut = numGlyphs + 1;\n      let dupFirstEntry = true;\n\n      if (numGlyphsOut > 0xffff) {\n        dupFirstEntry = false;\n        numGlyphsOut = numGlyphs;\n        (0, _util.warn)(\"Not enough space in glyfs to duplicate first glyph.\");\n      }\n\n      var maxFunctionDefs = 0;\n      var maxSizeOfInstructions = 0;\n\n      if (version >= 0x00010000 && tables.maxp.length >= 22) {\n        font.pos += 8;\n        var maxZones = font.getUint16();\n\n        if (maxZones > 2) {\n          tables.maxp.data[14] = 0;\n          tables.maxp.data[15] = 2;\n        }\n\n        font.pos += 4;\n        maxFunctionDefs = font.getUint16();\n        font.pos += 4;\n        maxSizeOfInstructions = font.getUint16();\n      }\n\n      tables.maxp.data[4] = numGlyphsOut >> 8;\n      tables.maxp.data[5] = numGlyphsOut & 255;\n      var hintsValid = sanitizeTTPrograms(tables.fpgm, tables.prep, tables[\"cvt \"], maxFunctionDefs);\n\n      if (!hintsValid) {\n        delete tables.fpgm;\n        delete tables.prep;\n        delete tables[\"cvt \"];\n      }\n\n      sanitizeMetrics(font, tables.hhea, tables.hmtx, numGlyphsOut, dupFirstEntry);\n\n      if (!tables.head) {\n        throw new _util.FormatError('Required \"head\" table is not found');\n      }\n\n      sanitizeHead(tables.head, numGlyphs, isTrueType ? tables.loca.length : 0);\n      var missingGlyphs = Object.create(null);\n\n      if (isTrueType) {\n        var isGlyphLocationsLong = int16(tables.head.data[50], tables.head.data[51]);\n        var glyphsInfo = sanitizeGlyphLocations(tables.loca, tables.glyf, numGlyphs, isGlyphLocationsLong, hintsValid, dupFirstEntry, maxSizeOfInstructions);\n        missingGlyphs = glyphsInfo.missingGlyphs;\n\n        if (version >= 0x00010000 && tables.maxp.length >= 22) {\n          tables.maxp.data[26] = glyphsInfo.maxSizeOfInstructions >> 8;\n          tables.maxp.data[27] = glyphsInfo.maxSizeOfInstructions & 255;\n        }\n      }\n\n      if (!tables.hhea) {\n        throw new _util.FormatError('Required \"hhea\" table is not found');\n      }\n\n      if (tables.hhea.data[10] === 0 && tables.hhea.data[11] === 0) {\n        tables.hhea.data[10] = 0xff;\n        tables.hhea.data[11] = 0xff;\n      }\n\n      var metricsOverride = {\n        unitsPerEm: int16(tables.head.data[18], tables.head.data[19]),\n        yMax: int16(tables.head.data[42], tables.head.data[43]),\n        yMin: signedInt16(tables.head.data[38], tables.head.data[39]),\n        ascent: int16(tables.hhea.data[4], tables.hhea.data[5]),\n        descent: signedInt16(tables.hhea.data[6], tables.hhea.data[7])\n      };\n      this.ascent = metricsOverride.ascent / metricsOverride.unitsPerEm;\n      this.descent = metricsOverride.descent / metricsOverride.unitsPerEm;\n\n      if (tables.post) {\n        readPostScriptTable(tables.post, properties, numGlyphs);\n      }\n\n      tables.post = {\n        tag: \"post\",\n        data: createPostTable(properties)\n      };\n      const charCodeToGlyphId = [];\n\n      function hasGlyph(glyphId) {\n        return !missingGlyphs[glyphId];\n      }\n\n      if (properties.composite) {\n        var cidToGidMap = properties.cidToGidMap || [];\n        var isCidToGidMapEmpty = cidToGidMap.length === 0;\n        properties.cMap.forEach(function (charCode, cid) {\n          if (cid > 0xffff) {\n            throw new _util.FormatError(\"Max size of CID is 65,535\");\n          }\n\n          var glyphId = -1;\n\n          if (isCidToGidMapEmpty) {\n            glyphId = cid;\n          } else if (cidToGidMap[cid] !== undefined) {\n            glyphId = cidToGidMap[cid];\n          }\n\n          if (glyphId >= 0 && glyphId < numGlyphs && hasGlyph(glyphId)) {\n            charCodeToGlyphId[charCode] = glyphId;\n          }\n        });\n      } else {\n        var cmapTable = readCmapTable(tables.cmap, font, this.isSymbolicFont, properties.hasEncoding);\n        var cmapPlatformId = cmapTable.platformId;\n        var cmapEncodingId = cmapTable.encodingId;\n        var cmapMappings = cmapTable.mappings;\n        var cmapMappingsLength = cmapMappings.length;\n        let baseEncoding = [];\n\n        if (properties.hasEncoding && (properties.baseEncodingName === \"MacRomanEncoding\" || properties.baseEncodingName === \"WinAnsiEncoding\")) {\n          baseEncoding = (0, _encodings.getEncoding)(properties.baseEncodingName);\n        }\n\n        if (properties.hasEncoding && !this.isSymbolicFont && (cmapPlatformId === 3 && cmapEncodingId === 1 || cmapPlatformId === 1 && cmapEncodingId === 0)) {\n          var glyphsUnicodeMap = (0, _glyphlist.getGlyphsUnicode)();\n\n          for (let charCode = 0; charCode < 256; charCode++) {\n            var glyphName, standardGlyphName;\n\n            if (this.differences && charCode in this.differences) {\n              glyphName = this.differences[charCode];\n            } else if (charCode in baseEncoding && baseEncoding[charCode] !== \"\") {\n              glyphName = baseEncoding[charCode];\n            } else {\n              glyphName = _encodings.StandardEncoding[charCode];\n            }\n\n            if (!glyphName) {\n              continue;\n            }\n\n            standardGlyphName = recoverGlyphName(glyphName, glyphsUnicodeMap);\n            var unicodeOrCharCode;\n\n            if (cmapPlatformId === 3 && cmapEncodingId === 1) {\n              unicodeOrCharCode = glyphsUnicodeMap[standardGlyphName];\n            } else if (cmapPlatformId === 1 && cmapEncodingId === 0) {\n              unicodeOrCharCode = _encodings.MacRomanEncoding.indexOf(standardGlyphName);\n            }\n\n            for (let i = 0; i < cmapMappingsLength; ++i) {\n              if (cmapMappings[i].charCode !== unicodeOrCharCode) {\n                continue;\n              }\n\n              charCodeToGlyphId[charCode] = cmapMappings[i].glyphId;\n              break;\n            }\n          }\n        } else if (cmapPlatformId === 0) {\n          for (let i = 0; i < cmapMappingsLength; ++i) {\n            charCodeToGlyphId[cmapMappings[i].charCode] = cmapMappings[i].glyphId;\n          }\n        } else {\n          for (let i = 0; i < cmapMappingsLength; ++i) {\n            let charCode = cmapMappings[i].charCode;\n\n            if (cmapPlatformId === 3 && charCode >= 0xf000 && charCode <= 0xf0ff) {\n              charCode &= 0xff;\n            }\n\n            charCodeToGlyphId[charCode] = cmapMappings[i].glyphId;\n          }\n        }\n\n        if (properties.glyphNames && baseEncoding.length) {\n          for (let i = 0; i < 256; ++i) {\n            if (charCodeToGlyphId[i] === undefined && baseEncoding[i]) {\n              glyphName = baseEncoding[i];\n              const glyphId = properties.glyphNames.indexOf(glyphName);\n\n              if (glyphId > 0 && hasGlyph(glyphId)) {\n                charCodeToGlyphId[i] = glyphId;\n              }\n            }\n          }\n        }\n      }\n\n      if (charCodeToGlyphId.length === 0) {\n        charCodeToGlyphId[0] = 0;\n      }\n\n      let glyphZeroId = numGlyphsOut - 1;\n\n      if (!dupFirstEntry) {\n        glyphZeroId = 0;\n      }\n\n      var newMapping = adjustMapping(charCodeToGlyphId, hasGlyph, glyphZeroId);\n      this.toFontChar = newMapping.toFontChar;\n      tables.cmap = {\n        tag: \"cmap\",\n        data: createCmapTable(newMapping.charCodeToGlyphId, numGlyphsOut)\n      };\n\n      if (!tables[\"OS/2\"] || !validateOS2Table(tables[\"OS/2\"], font)) {\n        tables[\"OS/2\"] = {\n          tag: \"OS/2\",\n          data: createOS2Table(properties, newMapping.charCodeToGlyphId, metricsOverride)\n        };\n      }\n\n      if (!isTrueType) {\n        try {\n          cffFile = new _stream.Stream(tables[\"CFF \"].data);\n          var parser = new _cff_parser.CFFParser(cffFile, properties, SEAC_ANALYSIS_ENABLED);\n          cff = parser.parse();\n          cff.duplicateFirstGlyph();\n          var compiler = new _cff_parser.CFFCompiler(cff);\n          tables[\"CFF \"].data = compiler.compile();\n        } catch (e) {\n          (0, _util.warn)(\"Failed to compile font \" + properties.loadedName);\n        }\n      }\n\n      if (!tables.name) {\n        tables.name = {\n          tag: \"name\",\n          data: createNameTable(this.name)\n        };\n      } else {\n        var namePrototype = readNameTable(tables.name);\n        tables.name.data = createNameTable(name, namePrototype);\n      }\n\n      var builder = new OpenTypeFileBuilder(header.version);\n\n      for (var tableTag in tables) {\n        builder.addTable(tableTag, tables[tableTag].data);\n      }\n\n      return builder.toArray();\n    },\n    convert: function Font_convert(fontName, font, properties) {\n      properties.fixedPitch = false;\n\n      if (properties.builtInEncoding) {\n        adjustToUnicode(properties, properties.builtInEncoding);\n      }\n\n      let glyphZeroId = 1;\n\n      if (font instanceof CFFFont) {\n        glyphZeroId = font.numGlyphs - 1;\n      }\n\n      var mapping = font.getGlyphMapping(properties);\n      var newMapping = adjustMapping(mapping, font.hasGlyphId.bind(font), glyphZeroId);\n      this.toFontChar = newMapping.toFontChar;\n      var numGlyphs = font.numGlyphs;\n\n      function getCharCodes(charCodeToGlyphId, glyphId) {\n        var charCodes = null;\n\n        for (var charCode in charCodeToGlyphId) {\n          if (glyphId === charCodeToGlyphId[charCode]) {\n            if (!charCodes) {\n              charCodes = [];\n            }\n\n            charCodes.push(charCode | 0);\n          }\n        }\n\n        return charCodes;\n      }\n\n      function createCharCode(charCodeToGlyphId, glyphId) {\n        for (var charCode in charCodeToGlyphId) {\n          if (glyphId === charCodeToGlyphId[charCode]) {\n            return charCode | 0;\n          }\n        }\n\n        newMapping.charCodeToGlyphId[newMapping.nextAvailableFontCharCode] = glyphId;\n        return newMapping.nextAvailableFontCharCode++;\n      }\n\n      var seacs = font.seacs;\n\n      if (SEAC_ANALYSIS_ENABLED && seacs && seacs.length) {\n        var matrix = properties.fontMatrix || _util.FONT_IDENTITY_MATRIX;\n        var charset = font.getCharset();\n        var seacMap = Object.create(null);\n\n        for (var glyphId in seacs) {\n          glyphId |= 0;\n          var seac = seacs[glyphId];\n          var baseGlyphName = _encodings.StandardEncoding[seac[2]];\n          var accentGlyphName = _encodings.StandardEncoding[seac[3]];\n          var baseGlyphId = charset.indexOf(baseGlyphName);\n          var accentGlyphId = charset.indexOf(accentGlyphName);\n\n          if (baseGlyphId < 0 || accentGlyphId < 0) {\n            continue;\n          }\n\n          var accentOffset = {\n            x: seac[0] * matrix[0] + seac[1] * matrix[2] + matrix[4],\n            y: seac[0] * matrix[1] + seac[1] * matrix[3] + matrix[5]\n          };\n          var charCodes = getCharCodes(mapping, glyphId);\n\n          if (!charCodes) {\n            continue;\n          }\n\n          for (let i = 0, ii = charCodes.length; i < ii; i++) {\n            var charCode = charCodes[i];\n            var charCodeToGlyphId = newMapping.charCodeToGlyphId;\n            var baseFontCharCode = createCharCode(charCodeToGlyphId, baseGlyphId);\n            var accentFontCharCode = createCharCode(charCodeToGlyphId, accentGlyphId);\n            seacMap[charCode] = {\n              baseFontCharCode,\n              accentFontCharCode,\n              accentOffset\n            };\n          }\n        }\n\n        properties.seacMap = seacMap;\n      }\n\n      var unitsPerEm = 1 / (properties.fontMatrix || _util.FONT_IDENTITY_MATRIX)[0];\n      var builder = new OpenTypeFileBuilder(\"\\x4F\\x54\\x54\\x4F\");\n      builder.addTable(\"CFF \", font.data);\n      builder.addTable(\"OS/2\", createOS2Table(properties, newMapping.charCodeToGlyphId));\n      builder.addTable(\"cmap\", createCmapTable(newMapping.charCodeToGlyphId, numGlyphs));\n      builder.addTable(\"head\", \"\\x00\\x01\\x00\\x00\" + \"\\x00\\x00\\x10\\x00\" + \"\\x00\\x00\\x00\\x00\" + \"\\x5F\\x0F\\x3C\\xF5\" + \"\\x00\\x00\" + safeString16(unitsPerEm) + \"\\x00\\x00\\x00\\x00\\x9e\\x0b\\x7e\\x27\" + \"\\x00\\x00\\x00\\x00\\x9e\\x0b\\x7e\\x27\" + \"\\x00\\x00\" + safeString16(properties.descent) + \"\\x0F\\xFF\" + safeString16(properties.ascent) + string16(properties.italicAngle ? 2 : 0) + \"\\x00\\x11\" + \"\\x00\\x00\" + \"\\x00\\x00\" + \"\\x00\\x00\");\n      builder.addTable(\"hhea\", \"\\x00\\x01\\x00\\x00\" + safeString16(properties.ascent) + safeString16(properties.descent) + \"\\x00\\x00\" + \"\\xFF\\xFF\" + \"\\x00\\x00\" + \"\\x00\\x00\" + \"\\x00\\x00\" + safeString16(properties.capHeight) + safeString16(Math.tan(properties.italicAngle) * properties.xHeight) + \"\\x00\\x00\" + \"\\x00\\x00\" + \"\\x00\\x00\" + \"\\x00\\x00\" + \"\\x00\\x00\" + \"\\x00\\x00\" + string16(numGlyphs));\n      builder.addTable(\"hmtx\", function fontFieldsHmtx() {\n        var charstrings = font.charstrings;\n        var cffWidths = font.cff ? font.cff.widths : null;\n        var hmtx = \"\\x00\\x00\\x00\\x00\";\n\n        for (let i = 1, ii = numGlyphs; i < ii; i++) {\n          var width = 0;\n\n          if (charstrings) {\n            var charstring = charstrings[i - 1];\n            width = \"width\" in charstring ? charstring.width : 0;\n          } else if (cffWidths) {\n            width = Math.ceil(cffWidths[i] || 0);\n          }\n\n          hmtx += string16(width) + string16(0);\n        }\n\n        return hmtx;\n      }());\n      builder.addTable(\"maxp\", \"\\x00\\x00\\x50\\x00\" + string16(numGlyphs));\n      builder.addTable(\"name\", createNameTable(fontName));\n      builder.addTable(\"post\", createPostTable(properties));\n      return builder.toArray();\n    },\n\n    get spaceWidth() {\n      var possibleSpaceReplacements = [\"space\", \"minus\", \"one\", \"i\", \"I\"];\n      var width;\n\n      for (var i = 0, ii = possibleSpaceReplacements.length; i < ii; i++) {\n        var glyphName = possibleSpaceReplacements[i];\n\n        if (glyphName in this.widths) {\n          width = this.widths[glyphName];\n          break;\n        }\n\n        var glyphsUnicodeMap = (0, _glyphlist.getGlyphsUnicode)();\n        var glyphUnicode = glyphsUnicodeMap[glyphName];\n        var charcode = 0;\n\n        if (this.composite && this.cMap.contains(glyphUnicode)) {\n          charcode = this.cMap.lookup(glyphUnicode);\n        }\n\n        if (!charcode && this.toUnicode) {\n          charcode = this.toUnicode.charCodeOf(glyphUnicode);\n        }\n\n        if (charcode <= 0) {\n          charcode = glyphUnicode;\n        }\n\n        width = this.widths[charcode];\n\n        if (width) {\n          break;\n        }\n      }\n\n      width = width || this.defaultWidth;\n      return (0, _util.shadow)(this, \"spaceWidth\", width);\n    },\n\n    _charToGlyph(charcode, isSpace = false) {\n      var fontCharCode, width, operatorListId;\n      var widthCode = charcode;\n\n      if (this.cMap && this.cMap.contains(charcode)) {\n        widthCode = this.cMap.lookup(charcode);\n      }\n\n      width = this.widths[widthCode];\n      width = (0, _util.isNum)(width) ? width : this.defaultWidth;\n      var vmetric = this.vmetrics && this.vmetrics[widthCode];\n      let unicode = this.toUnicode.get(charcode) || this.fallbackToUnicode.get(charcode) || charcode;\n\n      if (typeof unicode === \"number\") {\n        unicode = String.fromCharCode(unicode);\n      }\n\n      var isInFont = (charcode in this.toFontChar);\n      fontCharCode = this.toFontChar[charcode] || charcode;\n\n      if (this.missingFile) {\n        const glyphName = this.differences[charcode] || this.defaultEncoding[charcode];\n\n        if ((glyphName === \".notdef\" || glyphName === \"\") && this.type === \"Type1\") {\n          fontCharCode = 0x20;\n        }\n\n        fontCharCode = (0, _unicode.mapSpecialUnicodeValues)(fontCharCode);\n      }\n\n      if (this.isType3Font) {\n        operatorListId = fontCharCode;\n      }\n\n      var accent = null;\n\n      if (this.seacMap && this.seacMap[charcode]) {\n        isInFont = true;\n        var seac = this.seacMap[charcode];\n        fontCharCode = seac.baseFontCharCode;\n        accent = {\n          fontChar: String.fromCodePoint(seac.accentFontCharCode),\n          offset: seac.accentOffset\n        };\n      }\n\n      let fontChar = \"\";\n\n      if (typeof fontCharCode === \"number\") {\n        if (fontCharCode <= 0x10ffff) {\n          fontChar = String.fromCodePoint(fontCharCode);\n        } else {\n          (0, _util.warn)(`charToGlyph - invalid fontCharCode: ${fontCharCode}`);\n        }\n      }\n\n      var glyph = this.glyphCache[charcode];\n\n      if (!glyph || !glyph.matchesForCache(fontChar, unicode, accent, width, vmetric, operatorListId, isSpace, isInFont)) {\n        glyph = new Glyph(fontChar, unicode, accent, width, vmetric, operatorListId, isSpace, isInFont);\n        this.glyphCache[charcode] = glyph;\n      }\n\n      return glyph;\n    },\n\n    charsToGlyphs: function Font_charsToGlyphs(chars) {\n      var charsCache = this.charsCache;\n      var glyphs, glyph, charcode;\n\n      if (charsCache) {\n        glyphs = charsCache[chars];\n\n        if (glyphs) {\n          return glyphs;\n        }\n      }\n\n      if (!charsCache) {\n        charsCache = this.charsCache = Object.create(null);\n      }\n\n      glyphs = [];\n      var charsCacheKey = chars;\n      var i = 0,\n          ii;\n\n      if (this.cMap) {\n        var c = Object.create(null);\n\n        while (i < chars.length) {\n          this.cMap.readCharCode(chars, i, c);\n          charcode = c.charcode;\n          var length = c.length;\n          i += length;\n          var isSpace = length === 1 && chars.charCodeAt(i - 1) === 0x20;\n          glyph = this._charToGlyph(charcode, isSpace);\n          glyphs.push(glyph);\n        }\n      } else {\n        for (i = 0, ii = chars.length; i < ii; ++i) {\n          charcode = chars.charCodeAt(i);\n          glyph = this._charToGlyph(charcode, charcode === 0x20);\n          glyphs.push(glyph);\n        }\n      }\n\n      return charsCache[charsCacheKey] = glyphs;\n    },\n\n    getCharPositions(chars) {\n      const positions = [];\n\n      if (this.cMap) {\n        const c = Object.create(null);\n        let i = 0;\n\n        while (i < chars.length) {\n          this.cMap.readCharCode(chars, i, c);\n          const length = c.length;\n          positions.push([i, i + length]);\n          i += length;\n        }\n      } else {\n        for (let i = 0, ii = chars.length; i < ii; ++i) {\n          positions.push([i, i + 1]);\n        }\n      }\n\n      return positions;\n    },\n\n    get glyphCacheValues() {\n      return Object.values(this.glyphCache);\n    },\n\n    encodeString(str) {\n      const buffers = [];\n      const currentBuf = [];\n\n      const hasCurrentBufErrors = () => buffers.length % 2 === 1;\n\n      for (let i = 0, ii = str.length; i < ii; i++) {\n        const unicode = str.codePointAt(i);\n\n        if (unicode > 0xd7ff && (unicode < 0xe000 || unicode > 0xfffd)) {\n          i++;\n        }\n\n        if (this.toUnicode) {\n          const char = String.fromCodePoint(unicode);\n          const charCode = this.toUnicode.charCodeOf(char);\n\n          if (charCode !== -1) {\n            if (hasCurrentBufErrors()) {\n              buffers.push(currentBuf.join(\"\"));\n              currentBuf.length = 0;\n            }\n\n            const charCodeLength = this.cMap ? this.cMap.getCharCodeLength(charCode) : 1;\n\n            for (let j = charCodeLength - 1; j >= 0; j--) {\n              currentBuf.push(String.fromCharCode(charCode >> 8 * j & 0xff));\n            }\n\n            continue;\n          }\n        }\n\n        if (!hasCurrentBufErrors()) {\n          buffers.push(currentBuf.join(\"\"));\n          currentBuf.length = 0;\n        }\n\n        currentBuf.push(String.fromCodePoint(unicode));\n      }\n\n      buffers.push(currentBuf.join(\"\"));\n      return buffers;\n    }\n\n  };\n  return Font;\n}();\n\nexports.Font = Font;\n\nvar ErrorFont = function ErrorFontClosure() {\n  function ErrorFont(error) {\n    this.error = error;\n    this.loadedName = \"g_font_error\";\n    this.missingFile = true;\n  }\n\n  ErrorFont.prototype = {\n    charsToGlyphs: function ErrorFont_charsToGlyphs() {\n      return [];\n    },\n    encodeString: function ErrorFont_encodeString(chars) {\n      return [chars];\n    },\n\n    exportData(extraProperties = false) {\n      return {\n        error: this.error\n      };\n    }\n\n  };\n  return ErrorFont;\n}();\n\nexports.ErrorFont = ErrorFont;\n\nfunction type1FontGlyphMapping(properties, builtInEncoding, glyphNames) {\n  var charCodeToGlyphId = Object.create(null);\n  var glyphId, charCode, baseEncoding;\n  var isSymbolicFont = !!(properties.flags & FontFlags.Symbolic);\n\n  if (properties.baseEncodingName) {\n    baseEncoding = (0, _encodings.getEncoding)(properties.baseEncodingName);\n\n    for (charCode = 0; charCode < baseEncoding.length; charCode++) {\n      glyphId = glyphNames.indexOf(baseEncoding[charCode]);\n\n      if (glyphId >= 0) {\n        charCodeToGlyphId[charCode] = glyphId;\n      } else {\n        charCodeToGlyphId[charCode] = 0;\n      }\n    }\n  } else if (isSymbolicFont) {\n    for (charCode in builtInEncoding) {\n      charCodeToGlyphId[charCode] = builtInEncoding[charCode];\n    }\n  } else {\n    baseEncoding = _encodings.StandardEncoding;\n\n    for (charCode = 0; charCode < baseEncoding.length; charCode++) {\n      glyphId = glyphNames.indexOf(baseEncoding[charCode]);\n\n      if (glyphId >= 0) {\n        charCodeToGlyphId[charCode] = glyphId;\n      } else {\n        charCodeToGlyphId[charCode] = 0;\n      }\n    }\n  }\n\n  var differences = properties.differences,\n      glyphsUnicodeMap;\n\n  if (differences) {\n    for (charCode in differences) {\n      var glyphName = differences[charCode];\n      glyphId = glyphNames.indexOf(glyphName);\n\n      if (glyphId === -1) {\n        if (!glyphsUnicodeMap) {\n          glyphsUnicodeMap = (0, _glyphlist.getGlyphsUnicode)();\n        }\n\n        var standardGlyphName = recoverGlyphName(glyphName, glyphsUnicodeMap);\n\n        if (standardGlyphName !== glyphName) {\n          glyphId = glyphNames.indexOf(standardGlyphName);\n        }\n      }\n\n      if (glyphId >= 0) {\n        charCodeToGlyphId[charCode] = glyphId;\n      } else {\n        charCodeToGlyphId[charCode] = 0;\n      }\n    }\n  }\n\n  return charCodeToGlyphId;\n}\n\nvar Type1Font = function Type1FontClosure() {\n  function findBlock(streamBytes, signature, startIndex) {\n    var streamBytesLength = streamBytes.length;\n    var signatureLength = signature.length;\n    var scanLength = streamBytesLength - signatureLength;\n    var i = startIndex,\n        j,\n        found = false;\n\n    while (i < scanLength) {\n      j = 0;\n\n      while (j < signatureLength && streamBytes[i + j] === signature[j]) {\n        j++;\n      }\n\n      if (j >= signatureLength) {\n        i += j;\n\n        while (i < streamBytesLength && (0, _core_utils.isWhiteSpace)(streamBytes[i])) {\n          i++;\n        }\n\n        found = true;\n        break;\n      }\n\n      i++;\n    }\n\n    return {\n      found,\n      length: i\n    };\n  }\n\n  function getHeaderBlock(stream, suggestedLength) {\n    var EEXEC_SIGNATURE = [0x65, 0x65, 0x78, 0x65, 0x63];\n    var streamStartPos = stream.pos;\n    var headerBytes, headerBytesLength, block;\n\n    try {\n      headerBytes = stream.getBytes(suggestedLength);\n      headerBytesLength = headerBytes.length;\n    } catch (ex) {\n      if (ex instanceof _core_utils.MissingDataException) {\n        throw ex;\n      }\n    }\n\n    if (headerBytesLength === suggestedLength) {\n      block = findBlock(headerBytes, EEXEC_SIGNATURE, suggestedLength - 2 * EEXEC_SIGNATURE.length);\n\n      if (block.found && block.length === suggestedLength) {\n        return {\n          stream: new _stream.Stream(headerBytes),\n          length: suggestedLength\n        };\n      }\n    }\n\n    (0, _util.warn)('Invalid \"Length1\" property in Type1 font -- trying to recover.');\n    stream.pos = streamStartPos;\n    var SCAN_BLOCK_LENGTH = 2048;\n    var actualLength;\n\n    while (true) {\n      var scanBytes = stream.peekBytes(SCAN_BLOCK_LENGTH);\n      block = findBlock(scanBytes, EEXEC_SIGNATURE, 0);\n\n      if (block.length === 0) {\n        break;\n      }\n\n      stream.pos += block.length;\n\n      if (block.found) {\n        actualLength = stream.pos - streamStartPos;\n        break;\n      }\n    }\n\n    stream.pos = streamStartPos;\n\n    if (actualLength) {\n      return {\n        stream: new _stream.Stream(stream.getBytes(actualLength)),\n        length: actualLength\n      };\n    }\n\n    (0, _util.warn)('Unable to recover \"Length1\" property in Type1 font -- using as is.');\n    return {\n      stream: new _stream.Stream(stream.getBytes(suggestedLength)),\n      length: suggestedLength\n    };\n  }\n\n  function getEexecBlock(stream, suggestedLength) {\n    var eexecBytes = stream.getBytes();\n    return {\n      stream: new _stream.Stream(eexecBytes),\n      length: eexecBytes.length\n    };\n  }\n\n  function Type1Font(name, file, properties) {\n    var PFB_HEADER_SIZE = 6;\n    var headerBlockLength = properties.length1;\n    var eexecBlockLength = properties.length2;\n    var pfbHeader = file.peekBytes(PFB_HEADER_SIZE);\n    var pfbHeaderPresent = pfbHeader[0] === 0x80 && pfbHeader[1] === 0x01;\n\n    if (pfbHeaderPresent) {\n      file.skip(PFB_HEADER_SIZE);\n      headerBlockLength = pfbHeader[5] << 24 | pfbHeader[4] << 16 | pfbHeader[3] << 8 | pfbHeader[2];\n    }\n\n    var headerBlock = getHeaderBlock(file, headerBlockLength);\n    var headerBlockParser = new _type1_parser.Type1Parser(headerBlock.stream, false, SEAC_ANALYSIS_ENABLED);\n    headerBlockParser.extractFontHeader(properties);\n\n    if (pfbHeaderPresent) {\n      pfbHeader = file.getBytes(PFB_HEADER_SIZE);\n      eexecBlockLength = pfbHeader[5] << 24 | pfbHeader[4] << 16 | pfbHeader[3] << 8 | pfbHeader[2];\n    }\n\n    var eexecBlock = getEexecBlock(file, eexecBlockLength);\n    var eexecBlockParser = new _type1_parser.Type1Parser(eexecBlock.stream, true, SEAC_ANALYSIS_ENABLED);\n    var data = eexecBlockParser.extractFontProgram(properties);\n\n    for (const key in data.properties) {\n      properties[key] = data.properties[key];\n    }\n\n    var charstrings = data.charstrings;\n    var type2Charstrings = this.getType2Charstrings(charstrings);\n    var subrs = this.getType2Subrs(data.subrs);\n    this.charstrings = charstrings;\n    this.data = this.wrap(name, type2Charstrings, this.charstrings, subrs, properties);\n    this.seacs = this.getSeacs(data.charstrings);\n  }\n\n  Type1Font.prototype = {\n    get numGlyphs() {\n      return this.charstrings.length + 1;\n    },\n\n    getCharset: function Type1Font_getCharset() {\n      var charset = [\".notdef\"];\n      var charstrings = this.charstrings;\n\n      for (var glyphId = 0; glyphId < charstrings.length; glyphId++) {\n        charset.push(charstrings[glyphId].glyphName);\n      }\n\n      return charset;\n    },\n    getGlyphMapping: function Type1Font_getGlyphMapping(properties) {\n      var charstrings = this.charstrings;\n\n      if (properties.composite) {\n        const charCodeToGlyphId = Object.create(null);\n\n        for (let glyphId = 0, charstringsLen = charstrings.length; glyphId < charstringsLen; glyphId++) {\n          const charCode = properties.cMap.charCodeOf(glyphId);\n          charCodeToGlyphId[charCode] = glyphId + 1;\n        }\n\n        return charCodeToGlyphId;\n      }\n\n      var glyphNames = [\".notdef\"],\n          glyphId;\n\n      for (glyphId = 0; glyphId < charstrings.length; glyphId++) {\n        glyphNames.push(charstrings[glyphId].glyphName);\n      }\n\n      var encoding = properties.builtInEncoding;\n\n      if (encoding) {\n        var builtInEncoding = Object.create(null);\n\n        for (var charCode in encoding) {\n          glyphId = glyphNames.indexOf(encoding[charCode]);\n\n          if (glyphId >= 0) {\n            builtInEncoding[charCode] = glyphId;\n          }\n        }\n      }\n\n      return type1FontGlyphMapping(properties, builtInEncoding, glyphNames);\n    },\n    hasGlyphId: function Type1Font_hasGlyphID(id) {\n      if (id < 0 || id >= this.numGlyphs) {\n        return false;\n      }\n\n      if (id === 0) {\n        return true;\n      }\n\n      var glyph = this.charstrings[id - 1];\n      return glyph.charstring.length > 0;\n    },\n    getSeacs: function Type1Font_getSeacs(charstrings) {\n      var i, ii;\n      var seacMap = [];\n\n      for (i = 0, ii = charstrings.length; i < ii; i++) {\n        var charstring = charstrings[i];\n\n        if (charstring.seac) {\n          seacMap[i + 1] = charstring.seac;\n        }\n      }\n\n      return seacMap;\n    },\n    getType2Charstrings: function Type1Font_getType2Charstrings(type1Charstrings) {\n      var type2Charstrings = [];\n\n      for (var i = 0, ii = type1Charstrings.length; i < ii; i++) {\n        type2Charstrings.push(type1Charstrings[i].charstring);\n      }\n\n      return type2Charstrings;\n    },\n    getType2Subrs: function Type1Font_getType2Subrs(type1Subrs) {\n      var bias = 0;\n      var count = type1Subrs.length;\n\n      if (count < 1133) {\n        bias = 107;\n      } else if (count < 33769) {\n        bias = 1131;\n      } else {\n        bias = 32768;\n      }\n\n      var type2Subrs = [];\n      var i;\n\n      for (i = 0; i < bias; i++) {\n        type2Subrs.push([0x0b]);\n      }\n\n      for (i = 0; i < count; i++) {\n        type2Subrs.push(type1Subrs[i]);\n      }\n\n      return type2Subrs;\n    },\n    wrap: function Type1Font_wrap(name, glyphs, charstrings, subrs, properties) {\n      var cff = new _cff_parser.CFF();\n      cff.header = new _cff_parser.CFFHeader(1, 0, 4, 4);\n      cff.names = [name];\n      var topDict = new _cff_parser.CFFTopDict();\n      topDict.setByName(\"version\", 391);\n      topDict.setByName(\"Notice\", 392);\n      topDict.setByName(\"FullName\", 393);\n      topDict.setByName(\"FamilyName\", 394);\n      topDict.setByName(\"Weight\", 395);\n      topDict.setByName(\"Encoding\", null);\n      topDict.setByName(\"FontMatrix\", properties.fontMatrix);\n      topDict.setByName(\"FontBBox\", properties.bbox);\n      topDict.setByName(\"charset\", null);\n      topDict.setByName(\"CharStrings\", null);\n      topDict.setByName(\"Private\", null);\n      cff.topDict = topDict;\n      var strings = new _cff_parser.CFFStrings();\n      strings.add(\"Version 0.11\");\n      strings.add(\"See original notice\");\n      strings.add(name);\n      strings.add(name);\n      strings.add(\"Medium\");\n      cff.strings = strings;\n      cff.globalSubrIndex = new _cff_parser.CFFIndex();\n      var count = glyphs.length;\n      var charsetArray = [\".notdef\"];\n      var i, ii;\n\n      for (i = 0; i < count; i++) {\n        const glyphName = charstrings[i].glyphName;\n\n        const index = _cff_parser.CFFStandardStrings.indexOf(glyphName);\n\n        if (index === -1) {\n          strings.add(glyphName);\n        }\n\n        charsetArray.push(glyphName);\n      }\n\n      cff.charset = new _cff_parser.CFFCharset(false, 0, charsetArray);\n      var charStringsIndex = new _cff_parser.CFFIndex();\n      charStringsIndex.add([0x8b, 0x0e]);\n\n      for (i = 0; i < count; i++) {\n        charStringsIndex.add(glyphs[i]);\n      }\n\n      cff.charStrings = charStringsIndex;\n      var privateDict = new _cff_parser.CFFPrivateDict();\n      privateDict.setByName(\"Subrs\", null);\n      var fields = [\"BlueValues\", \"OtherBlues\", \"FamilyBlues\", \"FamilyOtherBlues\", \"StemSnapH\", \"StemSnapV\", \"BlueShift\", \"BlueFuzz\", \"BlueScale\", \"LanguageGroup\", \"ExpansionFactor\", \"ForceBold\", \"StdHW\", \"StdVW\"];\n\n      for (i = 0, ii = fields.length; i < ii; i++) {\n        var field = fields[i];\n\n        if (!(field in properties.privateData)) {\n          continue;\n        }\n\n        var value = properties.privateData[field];\n\n        if (Array.isArray(value)) {\n          for (var j = value.length - 1; j > 0; j--) {\n            value[j] -= value[j - 1];\n          }\n        }\n\n        privateDict.setByName(field, value);\n      }\n\n      cff.topDict.privateDict = privateDict;\n      var subrIndex = new _cff_parser.CFFIndex();\n\n      for (i = 0, ii = subrs.length; i < ii; i++) {\n        subrIndex.add(subrs[i]);\n      }\n\n      privateDict.subrsIndex = subrIndex;\n      var compiler = new _cff_parser.CFFCompiler(cff);\n      return compiler.compile();\n    }\n  };\n  return Type1Font;\n}();\n\nvar CFFFont = function CFFFontClosure() {\n  function CFFFont(file, properties) {\n    this.properties = properties;\n    var parser = new _cff_parser.CFFParser(file, properties, SEAC_ANALYSIS_ENABLED);\n    this.cff = parser.parse();\n    this.cff.duplicateFirstGlyph();\n    var compiler = new _cff_parser.CFFCompiler(this.cff);\n    this.seacs = this.cff.seacs;\n\n    try {\n      this.data = compiler.compile();\n    } catch (e) {\n      (0, _util.warn)(\"Failed to compile font \" + properties.loadedName);\n      this.data = file;\n    }\n  }\n\n  CFFFont.prototype = {\n    get numGlyphs() {\n      return this.cff.charStrings.count;\n    },\n\n    getCharset: function CFFFont_getCharset() {\n      return this.cff.charset.charset;\n    },\n    getGlyphMapping: function CFFFont_getGlyphMapping() {\n      var cff = this.cff;\n      var properties = this.properties;\n      var charsets = cff.charset.charset;\n      var charCodeToGlyphId;\n      var glyphId;\n\n      if (properties.composite) {\n        charCodeToGlyphId = Object.create(null);\n        let charCode;\n\n        if (cff.isCIDFont) {\n          for (glyphId = 0; glyphId < charsets.length; glyphId++) {\n            var cid = charsets[glyphId];\n            charCode = properties.cMap.charCodeOf(cid);\n            charCodeToGlyphId[charCode] = glyphId;\n          }\n        } else {\n          for (glyphId = 0; glyphId < cff.charStrings.count; glyphId++) {\n            charCode = properties.cMap.charCodeOf(glyphId);\n            charCodeToGlyphId[charCode] = glyphId;\n          }\n        }\n\n        return charCodeToGlyphId;\n      }\n\n      var encoding = cff.encoding ? cff.encoding.encoding : null;\n      charCodeToGlyphId = type1FontGlyphMapping(properties, encoding, charsets);\n      return charCodeToGlyphId;\n    },\n    hasGlyphId: function CFFFont_hasGlyphID(id) {\n      return this.cff.hasGlyphId(id);\n    }\n  };\n  return CFFFont;\n}();\n\n/***/ }),\n/* 30 */\n/***/ ((__unused_webpack_module, exports, __w_pdfjs_require__) => {\n\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.CFFTopDict = exports.CFFStrings = exports.CFFStandardStrings = exports.CFFPrivateDict = exports.CFFParser = exports.CFFIndex = exports.CFFHeader = exports.CFFFDSelect = exports.CFFCompiler = exports.CFFCharset = exports.CFF = void 0;\n\nvar _util = __w_pdfjs_require__(2);\n\nvar _charsets = __w_pdfjs_require__(31);\n\nvar _encodings = __w_pdfjs_require__(32);\n\nvar MAX_SUBR_NESTING = 10;\nvar CFFStandardStrings = [\".notdef\", \"space\", \"exclam\", \"quotedbl\", \"numbersign\", \"dollar\", \"percent\", \"ampersand\", \"quoteright\", \"parenleft\", \"parenright\", \"asterisk\", \"plus\", \"comma\", \"hyphen\", \"period\", \"slash\", \"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"colon\", \"semicolon\", \"less\", \"equal\", \"greater\", \"question\", \"at\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\", \"bracketleft\", \"backslash\", \"bracketright\", \"asciicircum\", \"underscore\", \"quoteleft\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"braceleft\", \"bar\", \"braceright\", \"asciitilde\", \"exclamdown\", \"cent\", \"sterling\", \"fraction\", \"yen\", \"florin\", \"section\", \"currency\", \"quotesingle\", \"quotedblleft\", \"guillemotleft\", \"guilsinglleft\", \"guilsinglright\", \"fi\", \"fl\", \"endash\", \"dagger\", \"daggerdbl\", \"periodcentered\", \"paragraph\", \"bullet\", \"quotesinglbase\", \"quotedblbase\", \"quotedblright\", \"guillemotright\", \"ellipsis\", \"perthousand\", \"questiondown\", \"grave\", \"acute\", \"circumflex\", \"tilde\", \"macron\", \"breve\", \"dotaccent\", \"dieresis\", \"ring\", \"cedilla\", \"hungarumlaut\", \"ogonek\", \"caron\", \"emdash\", \"AE\", \"ordfeminine\", \"Lslash\", \"Oslash\", \"OE\", \"ordmasculine\", \"ae\", \"dotlessi\", \"lslash\", \"oslash\", \"oe\", \"germandbls\", \"onesuperior\", \"logicalnot\", \"mu\", \"trademark\", \"Eth\", \"onehalf\", \"plusminus\", \"Thorn\", \"onequarter\", \"divide\", \"brokenbar\", \"degree\", \"thorn\", \"threequarters\", \"twosuperior\", \"registered\", \"minus\", \"eth\", \"multiply\", \"threesuperior\", \"copyright\", \"Aacute\", \"Acircumflex\", \"Adieresis\", \"Agrave\", \"Aring\", \"Atilde\", \"Ccedilla\", \"Eacute\", \"Ecircumflex\", \"Edieresis\", \"Egrave\", \"Iacute\", \"Icircumflex\", \"Idieresis\", \"Igrave\", \"Ntilde\", \"Oacute\", \"Ocircumflex\", \"Odieresis\", \"Ograve\", \"Otilde\", \"Scaron\", \"Uacute\", \"Ucircumflex\", \"Udieresis\", \"Ugrave\", \"Yacute\", \"Ydieresis\", \"Zcaron\", \"aacute\", \"acircumflex\", \"adieresis\", \"agrave\", \"aring\", \"atilde\", \"ccedilla\", \"eacute\", \"ecircumflex\", \"edieresis\", \"egrave\", \"iacute\", \"icircumflex\", \"idieresis\", \"igrave\", \"ntilde\", \"oacute\", \"ocircumflex\", \"odieresis\", \"ograve\", \"otilde\", \"scaron\", \"uacute\", \"ucircumflex\", \"udieresis\", \"ugrave\", \"yacute\", \"ydieresis\", \"zcaron\", \"exclamsmall\", \"Hungarumlautsmall\", \"dollaroldstyle\", \"dollarsuperior\", \"ampersandsmall\", \"Acutesmall\", \"parenleftsuperior\", \"parenrightsuperior\", \"twodotenleader\", \"onedotenleader\", \"zerooldstyle\", \"oneoldstyle\", \"twooldstyle\", \"threeoldstyle\", \"fouroldstyle\", \"fiveoldstyle\", \"sixoldstyle\", \"sevenoldstyle\", \"eightoldstyle\", \"nineoldstyle\", \"commasuperior\", \"threequartersemdash\", \"periodsuperior\", \"questionsmall\", \"asuperior\", \"bsuperior\", \"centsuperior\", \"dsuperior\", \"esuperior\", \"isuperior\", \"lsuperior\", \"msuperior\", \"nsuperior\", \"osuperior\", \"rsuperior\", \"ssuperior\", \"tsuperior\", \"ff\", \"ffi\", \"ffl\", \"parenleftinferior\", \"parenrightinferior\", \"Circumflexsmall\", \"hyphensuperior\", \"Gravesmall\", \"Asmall\", \"Bsmall\", \"Csmall\", \"Dsmall\", \"Esmall\", \"Fsmall\", \"Gsmall\", \"Hsmall\", \"Ismall\", \"Jsmall\", \"Ksmall\", \"Lsmall\", \"Msmall\", \"Nsmall\", \"Osmall\", \"Psmall\", \"Qsmall\", \"Rsmall\", \"Ssmall\", \"Tsmall\", \"Usmall\", \"Vsmall\", \"Wsmall\", \"Xsmall\", \"Ysmall\", \"Zsmall\", \"colonmonetary\", \"onefitted\", \"rupiah\", \"Tildesmall\", \"exclamdownsmall\", \"centoldstyle\", \"Lslashsmall\", \"Scaronsmall\", \"Zcaronsmall\", \"Dieresissmall\", \"Brevesmall\", \"Caronsmall\", \"Dotaccentsmall\", \"Macronsmall\", \"figuredash\", \"hypheninferior\", \"Ogoneksmall\", \"Ringsmall\", \"Cedillasmall\", \"questiondownsmall\", \"oneeighth\", \"threeeighths\", \"fiveeighths\", \"seveneighths\", \"onethird\", \"twothirds\", \"zerosuperior\", \"foursuperior\", \"fivesuperior\", \"sixsuperior\", \"sevensuperior\", \"eightsuperior\", \"ninesuperior\", \"zeroinferior\", \"oneinferior\", \"twoinferior\", \"threeinferior\", \"fourinferior\", \"fiveinferior\", \"sixinferior\", \"seveninferior\", \"eightinferior\", \"nineinferior\", \"centinferior\", \"dollarinferior\", \"periodinferior\", \"commainferior\", \"Agravesmall\", \"Aacutesmall\", \"Acircumflexsmall\", \"Atildesmall\", \"Adieresissmall\", \"Aringsmall\", \"AEsmall\", \"Ccedillasmall\", \"Egravesmall\", \"Eacutesmall\", \"Ecircumflexsmall\", \"Edieresissmall\", \"Igravesmall\", \"Iacutesmall\", \"Icircumflexsmall\", \"Idieresissmall\", \"Ethsmall\", \"Ntildesmall\", \"Ogravesmall\", \"Oacutesmall\", \"Ocircumflexsmall\", \"Otildesmall\", \"Odieresissmall\", \"OEsmall\", \"Oslashsmall\", \"Ugravesmall\", \"Uacutesmall\", \"Ucircumflexsmall\", \"Udieresissmall\", \"Yacutesmall\", \"Thornsmall\", \"Ydieresissmall\", \"001.000\", \"001.001\", \"001.002\", \"001.003\", \"Black\", \"Bold\", \"Book\", \"Light\", \"Medium\", \"Regular\", \"Roman\", \"Semibold\"];\nexports.CFFStandardStrings = CFFStandardStrings;\nconst NUM_STANDARD_CFF_STRINGS = 391;\n\nvar CFFParser = function CFFParserClosure() {\n  var CharstringValidationData = [null, {\n    id: \"hstem\",\n    min: 2,\n    stackClearing: true,\n    stem: true\n  }, null, {\n    id: \"vstem\",\n    min: 2,\n    stackClearing: true,\n    stem: true\n  }, {\n    id: \"vmoveto\",\n    min: 1,\n    stackClearing: true\n  }, {\n    id: \"rlineto\",\n    min: 2,\n    resetStack: true\n  }, {\n    id: \"hlineto\",\n    min: 1,\n    resetStack: true\n  }, {\n    id: \"vlineto\",\n    min: 1,\n    resetStack: true\n  }, {\n    id: \"rrcurveto\",\n    min: 6,\n    resetStack: true\n  }, null, {\n    id: \"callsubr\",\n    min: 1,\n    undefStack: true\n  }, {\n    id: \"return\",\n    min: 0,\n    undefStack: true\n  }, null, null, {\n    id: \"endchar\",\n    min: 0,\n    stackClearing: true\n  }, null, null, null, {\n    id: \"hstemhm\",\n    min: 2,\n    stackClearing: true,\n    stem: true\n  }, {\n    id: \"hintmask\",\n    min: 0,\n    stackClearing: true\n  }, {\n    id: \"cntrmask\",\n    min: 0,\n    stackClearing: true\n  }, {\n    id: \"rmoveto\",\n    min: 2,\n    stackClearing: true\n  }, {\n    id: \"hmoveto\",\n    min: 1,\n    stackClearing: true\n  }, {\n    id: \"vstemhm\",\n    min: 2,\n    stackClearing: true,\n    stem: true\n  }, {\n    id: \"rcurveline\",\n    min: 8,\n    resetStack: true\n  }, {\n    id: \"rlinecurve\",\n    min: 8,\n    resetStack: true\n  }, {\n    id: \"vvcurveto\",\n    min: 4,\n    resetStack: true\n  }, {\n    id: \"hhcurveto\",\n    min: 4,\n    resetStack: true\n  }, null, {\n    id: \"callgsubr\",\n    min: 1,\n    undefStack: true\n  }, {\n    id: \"vhcurveto\",\n    min: 4,\n    resetStack: true\n  }, {\n    id: \"hvcurveto\",\n    min: 4,\n    resetStack: true\n  }];\n  var CharstringValidationData12 = [null, null, null, {\n    id: \"and\",\n    min: 2,\n    stackDelta: -1\n  }, {\n    id: \"or\",\n    min: 2,\n    stackDelta: -1\n  }, {\n    id: \"not\",\n    min: 1,\n    stackDelta: 0\n  }, null, null, null, {\n    id: \"abs\",\n    min: 1,\n    stackDelta: 0\n  }, {\n    id: \"add\",\n    min: 2,\n    stackDelta: -1,\n    stackFn: function stack_div(stack, index) {\n      stack[index - 2] = stack[index - 2] + stack[index - 1];\n    }\n  }, {\n    id: \"sub\",\n    min: 2,\n    stackDelta: -1,\n    stackFn: function stack_div(stack, index) {\n      stack[index - 2] = stack[index - 2] - stack[index - 1];\n    }\n  }, {\n    id: \"div\",\n    min: 2,\n    stackDelta: -1,\n    stackFn: function stack_div(stack, index) {\n      stack[index - 2] = stack[index - 2] / stack[index - 1];\n    }\n  }, null, {\n    id: \"neg\",\n    min: 1,\n    stackDelta: 0,\n    stackFn: function stack_div(stack, index) {\n      stack[index - 1] = -stack[index - 1];\n    }\n  }, {\n    id: \"eq\",\n    min: 2,\n    stackDelta: -1\n  }, null, null, {\n    id: \"drop\",\n    min: 1,\n    stackDelta: -1\n  }, null, {\n    id: \"put\",\n    min: 2,\n    stackDelta: -2\n  }, {\n    id: \"get\",\n    min: 1,\n    stackDelta: 0\n  }, {\n    id: \"ifelse\",\n    min: 4,\n    stackDelta: -3\n  }, {\n    id: \"random\",\n    min: 0,\n    stackDelta: 1\n  }, {\n    id: \"mul\",\n    min: 2,\n    stackDelta: -1,\n    stackFn: function stack_div(stack, index) {\n      stack[index - 2] = stack[index - 2] * stack[index - 1];\n    }\n  }, null, {\n    id: \"sqrt\",\n    min: 1,\n    stackDelta: 0\n  }, {\n    id: \"dup\",\n    min: 1,\n    stackDelta: 1\n  }, {\n    id: \"exch\",\n    min: 2,\n    stackDelta: 0\n  }, {\n    id: \"index\",\n    min: 2,\n    stackDelta: 0\n  }, {\n    id: \"roll\",\n    min: 3,\n    stackDelta: -2\n  }, null, null, null, {\n    id: \"hflex\",\n    min: 7,\n    resetStack: true\n  }, {\n    id: \"flex\",\n    min: 13,\n    resetStack: true\n  }, {\n    id: \"hflex1\",\n    min: 9,\n    resetStack: true\n  }, {\n    id: \"flex1\",\n    min: 11,\n    resetStack: true\n  }];\n\n  class CFFParser {\n    constructor(file, properties, seacAnalysisEnabled) {\n      this.bytes = file.getBytes();\n      this.properties = properties;\n      this.seacAnalysisEnabled = !!seacAnalysisEnabled;\n    }\n\n    parse() {\n      var properties = this.properties;\n      var cff = new CFF();\n      this.cff = cff;\n      var header = this.parseHeader();\n      var nameIndex = this.parseIndex(header.endPos);\n      var topDictIndex = this.parseIndex(nameIndex.endPos);\n      var stringIndex = this.parseIndex(topDictIndex.endPos);\n      var globalSubrIndex = this.parseIndex(stringIndex.endPos);\n      var topDictParsed = this.parseDict(topDictIndex.obj.get(0));\n      var topDict = this.createDict(CFFTopDict, topDictParsed, cff.strings);\n      cff.header = header.obj;\n      cff.names = this.parseNameIndex(nameIndex.obj);\n      cff.strings = this.parseStringIndex(stringIndex.obj);\n      cff.topDict = topDict;\n      cff.globalSubrIndex = globalSubrIndex.obj;\n      this.parsePrivateDict(cff.topDict);\n      cff.isCIDFont = topDict.hasName(\"ROS\");\n      var charStringOffset = topDict.getByName(\"CharStrings\");\n      var charStringIndex = this.parseIndex(charStringOffset).obj;\n      var fontMatrix = topDict.getByName(\"FontMatrix\");\n\n      if (fontMatrix) {\n        properties.fontMatrix = fontMatrix;\n      }\n\n      var fontBBox = topDict.getByName(\"FontBBox\");\n\n      if (fontBBox) {\n        properties.ascent = Math.max(fontBBox[3], fontBBox[1]);\n        properties.descent = Math.min(fontBBox[1], fontBBox[3]);\n        properties.ascentScaled = true;\n      }\n\n      var charset, encoding;\n\n      if (cff.isCIDFont) {\n        var fdArrayIndex = this.parseIndex(topDict.getByName(\"FDArray\")).obj;\n\n        for (var i = 0, ii = fdArrayIndex.count; i < ii; ++i) {\n          var dictRaw = fdArrayIndex.get(i);\n          var fontDict = this.createDict(CFFTopDict, this.parseDict(dictRaw), cff.strings);\n          this.parsePrivateDict(fontDict);\n          cff.fdArray.push(fontDict);\n        }\n\n        encoding = null;\n        charset = this.parseCharsets(topDict.getByName(\"charset\"), charStringIndex.count, cff.strings, true);\n        cff.fdSelect = this.parseFDSelect(topDict.getByName(\"FDSelect\"), charStringIndex.count);\n      } else {\n        charset = this.parseCharsets(topDict.getByName(\"charset\"), charStringIndex.count, cff.strings, false);\n        encoding = this.parseEncoding(topDict.getByName(\"Encoding\"), properties, cff.strings, charset.charset);\n      }\n\n      cff.charset = charset;\n      cff.encoding = encoding;\n      var charStringsAndSeacs = this.parseCharStrings({\n        charStrings: charStringIndex,\n        localSubrIndex: topDict.privateDict.subrsIndex,\n        globalSubrIndex: globalSubrIndex.obj,\n        fdSelect: cff.fdSelect,\n        fdArray: cff.fdArray,\n        privateDict: topDict.privateDict\n      });\n      cff.charStrings = charStringsAndSeacs.charStrings;\n      cff.seacs = charStringsAndSeacs.seacs;\n      cff.widths = charStringsAndSeacs.widths;\n      return cff;\n    }\n\n    parseHeader() {\n      var bytes = this.bytes;\n      var bytesLength = bytes.length;\n      var offset = 0;\n\n      while (offset < bytesLength && bytes[offset] !== 1) {\n        ++offset;\n      }\n\n      if (offset >= bytesLength) {\n        throw new _util.FormatError(\"Invalid CFF header\");\n      }\n\n      if (offset !== 0) {\n        (0, _util.info)(\"cff data is shifted\");\n        bytes = bytes.subarray(offset);\n        this.bytes = bytes;\n      }\n\n      var major = bytes[0];\n      var minor = bytes[1];\n      var hdrSize = bytes[2];\n      var offSize = bytes[3];\n      var header = new CFFHeader(major, minor, hdrSize, offSize);\n      return {\n        obj: header,\n        endPos: hdrSize\n      };\n    }\n\n    parseDict(dict) {\n      var pos = 0;\n\n      function parseOperand() {\n        var value = dict[pos++];\n\n        if (value === 30) {\n          return parseFloatOperand();\n        } else if (value === 28) {\n          value = dict[pos++];\n          value = (value << 24 | dict[pos++] << 16) >> 16;\n          return value;\n        } else if (value === 29) {\n          value = dict[pos++];\n          value = value << 8 | dict[pos++];\n          value = value << 8 | dict[pos++];\n          value = value << 8 | dict[pos++];\n          return value;\n        } else if (value >= 32 && value <= 246) {\n          return value - 139;\n        } else if (value >= 247 && value <= 250) {\n          return (value - 247) * 256 + dict[pos++] + 108;\n        } else if (value >= 251 && value <= 254) {\n          return -((value - 251) * 256) - dict[pos++] - 108;\n        }\n\n        (0, _util.warn)('CFFParser_parseDict: \"' + value + '\" is a reserved command.');\n        return NaN;\n      }\n\n      function parseFloatOperand() {\n        var str = \"\";\n        var eof = 15;\n        const lookup = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \".\", \"E\", \"E-\", null, \"-\"];\n        var length = dict.length;\n\n        while (pos < length) {\n          var b = dict[pos++];\n          var b1 = b >> 4;\n          var b2 = b & 15;\n\n          if (b1 === eof) {\n            break;\n          }\n\n          str += lookup[b1];\n\n          if (b2 === eof) {\n            break;\n          }\n\n          str += lookup[b2];\n        }\n\n        return parseFloat(str);\n      }\n\n      var operands = [];\n      var entries = [];\n      pos = 0;\n      var end = dict.length;\n\n      while (pos < end) {\n        var b = dict[pos];\n\n        if (b <= 21) {\n          if (b === 12) {\n            b = b << 8 | dict[++pos];\n          }\n\n          entries.push([b, operands]);\n          operands = [];\n          ++pos;\n        } else {\n          operands.push(parseOperand());\n        }\n      }\n\n      return entries;\n    }\n\n    parseIndex(pos) {\n      var cffIndex = new CFFIndex();\n      var bytes = this.bytes;\n      var count = bytes[pos++] << 8 | bytes[pos++];\n      var offsets = [];\n      var end = pos;\n      var i, ii;\n\n      if (count !== 0) {\n        var offsetSize = bytes[pos++];\n        var startPos = pos + (count + 1) * offsetSize - 1;\n\n        for (i = 0, ii = count + 1; i < ii; ++i) {\n          var offset = 0;\n\n          for (var j = 0; j < offsetSize; ++j) {\n            offset <<= 8;\n            offset += bytes[pos++];\n          }\n\n          offsets.push(startPos + offset);\n        }\n\n        end = offsets[count];\n      }\n\n      for (i = 0, ii = offsets.length - 1; i < ii; ++i) {\n        var offsetStart = offsets[i];\n        var offsetEnd = offsets[i + 1];\n        cffIndex.add(bytes.subarray(offsetStart, offsetEnd));\n      }\n\n      return {\n        obj: cffIndex,\n        endPos: end\n      };\n    }\n\n    parseNameIndex(index) {\n      var names = [];\n\n      for (var i = 0, ii = index.count; i < ii; ++i) {\n        var name = index.get(i);\n        names.push((0, _util.bytesToString)(name));\n      }\n\n      return names;\n    }\n\n    parseStringIndex(index) {\n      var strings = new CFFStrings();\n\n      for (var i = 0, ii = index.count; i < ii; ++i) {\n        var data = index.get(i);\n        strings.add((0, _util.bytesToString)(data));\n      }\n\n      return strings;\n    }\n\n    createDict(Type, dict, strings) {\n      var cffDict = new Type(strings);\n\n      for (var i = 0, ii = dict.length; i < ii; ++i) {\n        var pair = dict[i];\n        var key = pair[0];\n        var value = pair[1];\n        cffDict.setByKey(key, value);\n      }\n\n      return cffDict;\n    }\n\n    parseCharString(state, data, localSubrIndex, globalSubrIndex) {\n      if (!data || state.callDepth > MAX_SUBR_NESTING) {\n        return false;\n      }\n\n      var stackSize = state.stackSize;\n      var stack = state.stack;\n      var length = data.length;\n\n      for (var j = 0; j < length;) {\n        var value = data[j++];\n        var validationCommand = null;\n\n        if (value === 12) {\n          var q = data[j++];\n\n          if (q === 0) {\n            data[j - 2] = 139;\n            data[j - 1] = 22;\n            stackSize = 0;\n          } else {\n            validationCommand = CharstringValidationData12[q];\n          }\n        } else if (value === 28) {\n          stack[stackSize] = (data[j] << 24 | data[j + 1] << 16) >> 16;\n          j += 2;\n          stackSize++;\n        } else if (value === 14) {\n          if (stackSize >= 4) {\n            stackSize -= 4;\n\n            if (this.seacAnalysisEnabled) {\n              state.seac = stack.slice(stackSize, stackSize + 4);\n              return false;\n            }\n          }\n\n          validationCommand = CharstringValidationData[value];\n        } else if (value >= 32 && value <= 246) {\n          stack[stackSize] = value - 139;\n          stackSize++;\n        } else if (value >= 247 && value <= 254) {\n          stack[stackSize] = value < 251 ? (value - 247 << 8) + data[j] + 108 : -(value - 251 << 8) - data[j] - 108;\n          j++;\n          stackSize++;\n        } else if (value === 255) {\n          stack[stackSize] = (data[j] << 24 | data[j + 1] << 16 | data[j + 2] << 8 | data[j + 3]) / 65536;\n          j += 4;\n          stackSize++;\n        } else if (value === 19 || value === 20) {\n          state.hints += stackSize >> 1;\n          j += state.hints + 7 >> 3;\n          stackSize %= 2;\n          validationCommand = CharstringValidationData[value];\n        } else if (value === 10 || value === 29) {\n          var subrsIndex;\n\n          if (value === 10) {\n            subrsIndex = localSubrIndex;\n          } else {\n            subrsIndex = globalSubrIndex;\n          }\n\n          if (!subrsIndex) {\n            validationCommand = CharstringValidationData[value];\n            (0, _util.warn)(\"Missing subrsIndex for \" + validationCommand.id);\n            return false;\n          }\n\n          var bias = 32768;\n\n          if (subrsIndex.count < 1240) {\n            bias = 107;\n          } else if (subrsIndex.count < 33900) {\n            bias = 1131;\n          }\n\n          var subrNumber = stack[--stackSize] + bias;\n\n          if (subrNumber < 0 || subrNumber >= subrsIndex.count || isNaN(subrNumber)) {\n            validationCommand = CharstringValidationData[value];\n            (0, _util.warn)(\"Out of bounds subrIndex for \" + validationCommand.id);\n            return false;\n          }\n\n          state.stackSize = stackSize;\n          state.callDepth++;\n          var valid = this.parseCharString(state, subrsIndex.get(subrNumber), localSubrIndex, globalSubrIndex);\n\n          if (!valid) {\n            return false;\n          }\n\n          state.callDepth--;\n          stackSize = state.stackSize;\n          continue;\n        } else if (value === 11) {\n          state.stackSize = stackSize;\n          return true;\n        } else {\n          validationCommand = CharstringValidationData[value];\n        }\n\n        if (validationCommand) {\n          if (validationCommand.stem) {\n            state.hints += stackSize >> 1;\n\n            if (value === 3 || value === 23) {\n              state.hasVStems = true;\n            } else if (state.hasVStems && (value === 1 || value === 18)) {\n              (0, _util.warn)(\"CFF stem hints are in wrong order\");\n              data[j - 1] = value === 1 ? 3 : 23;\n            }\n          }\n\n          if (\"min\" in validationCommand) {\n            if (!state.undefStack && stackSize < validationCommand.min) {\n              (0, _util.warn)(\"Not enough parameters for \" + validationCommand.id + \"; actual: \" + stackSize + \", expected: \" + validationCommand.min);\n              return false;\n            }\n          }\n\n          if (state.firstStackClearing && validationCommand.stackClearing) {\n            state.firstStackClearing = false;\n            stackSize -= validationCommand.min;\n\n            if (stackSize >= 2 && validationCommand.stem) {\n              stackSize %= 2;\n            } else if (stackSize > 1) {\n              (0, _util.warn)(\"Found too many parameters for stack-clearing command\");\n            }\n\n            if (stackSize > 0 && stack[stackSize - 1] >= 0) {\n              state.width = stack[stackSize - 1];\n            }\n          }\n\n          if (\"stackDelta\" in validationCommand) {\n            if (\"stackFn\" in validationCommand) {\n              validationCommand.stackFn(stack, stackSize);\n            }\n\n            stackSize += validationCommand.stackDelta;\n          } else if (validationCommand.stackClearing) {\n            stackSize = 0;\n          } else if (validationCommand.resetStack) {\n            stackSize = 0;\n            state.undefStack = false;\n          } else if (validationCommand.undefStack) {\n            stackSize = 0;\n            state.undefStack = true;\n            state.firstStackClearing = false;\n          }\n        }\n      }\n\n      state.stackSize = stackSize;\n      return true;\n    }\n\n    parseCharStrings({\n      charStrings,\n      localSubrIndex,\n      globalSubrIndex,\n      fdSelect,\n      fdArray,\n      privateDict\n    }) {\n      var seacs = [];\n      var widths = [];\n      var count = charStrings.count;\n\n      for (var i = 0; i < count; i++) {\n        var charstring = charStrings.get(i);\n        var state = {\n          callDepth: 0,\n          stackSize: 0,\n          stack: [],\n          undefStack: true,\n          hints: 0,\n          firstStackClearing: true,\n          seac: null,\n          width: null,\n          hasVStems: false\n        };\n        var valid = true;\n        var localSubrToUse = null;\n        var privateDictToUse = privateDict;\n\n        if (fdSelect && fdArray.length) {\n          var fdIndex = fdSelect.getFDIndex(i);\n\n          if (fdIndex === -1) {\n            (0, _util.warn)(\"Glyph index is not in fd select.\");\n            valid = false;\n          }\n\n          if (fdIndex >= fdArray.length) {\n            (0, _util.warn)(\"Invalid fd index for glyph index.\");\n            valid = false;\n          }\n\n          if (valid) {\n            privateDictToUse = fdArray[fdIndex].privateDict;\n            localSubrToUse = privateDictToUse.subrsIndex;\n          }\n        } else if (localSubrIndex) {\n          localSubrToUse = localSubrIndex;\n        }\n\n        if (valid) {\n          valid = this.parseCharString(state, charstring, localSubrToUse, globalSubrIndex);\n        }\n\n        if (state.width !== null) {\n          const nominalWidth = privateDictToUse.getByName(\"nominalWidthX\");\n          widths[i] = nominalWidth + state.width;\n        } else {\n          const defaultWidth = privateDictToUse.getByName(\"defaultWidthX\");\n          widths[i] = defaultWidth;\n        }\n\n        if (state.seac !== null) {\n          seacs[i] = state.seac;\n        }\n\n        if (!valid) {\n          charStrings.set(i, new Uint8Array([14]));\n        }\n      }\n\n      return {\n        charStrings,\n        seacs,\n        widths\n      };\n    }\n\n    emptyPrivateDictionary(parentDict) {\n      var privateDict = this.createDict(CFFPrivateDict, [], parentDict.strings);\n      parentDict.setByKey(18, [0, 0]);\n      parentDict.privateDict = privateDict;\n    }\n\n    parsePrivateDict(parentDict) {\n      if (!parentDict.hasName(\"Private\")) {\n        this.emptyPrivateDictionary(parentDict);\n        return;\n      }\n\n      var privateOffset = parentDict.getByName(\"Private\");\n\n      if (!Array.isArray(privateOffset) || privateOffset.length !== 2) {\n        parentDict.removeByName(\"Private\");\n        return;\n      }\n\n      var size = privateOffset[0];\n      var offset = privateOffset[1];\n\n      if (size === 0 || offset >= this.bytes.length) {\n        this.emptyPrivateDictionary(parentDict);\n        return;\n      }\n\n      var privateDictEnd = offset + size;\n      var dictData = this.bytes.subarray(offset, privateDictEnd);\n      var dict = this.parseDict(dictData);\n      var privateDict = this.createDict(CFFPrivateDict, dict, parentDict.strings);\n      parentDict.privateDict = privateDict;\n\n      if (!privateDict.getByName(\"Subrs\")) {\n        return;\n      }\n\n      var subrsOffset = privateDict.getByName(\"Subrs\");\n      var relativeOffset = offset + subrsOffset;\n\n      if (subrsOffset === 0 || relativeOffset >= this.bytes.length) {\n        this.emptyPrivateDictionary(parentDict);\n        return;\n      }\n\n      var subrsIndex = this.parseIndex(relativeOffset);\n      privateDict.subrsIndex = subrsIndex.obj;\n    }\n\n    parseCharsets(pos, length, strings, cid) {\n      if (pos === 0) {\n        return new CFFCharset(true, CFFCharsetPredefinedTypes.ISO_ADOBE, _charsets.ISOAdobeCharset);\n      } else if (pos === 1) {\n        return new CFFCharset(true, CFFCharsetPredefinedTypes.EXPERT, _charsets.ExpertCharset);\n      } else if (pos === 2) {\n        return new CFFCharset(true, CFFCharsetPredefinedTypes.EXPERT_SUBSET, _charsets.ExpertSubsetCharset);\n      }\n\n      var bytes = this.bytes;\n      var start = pos;\n      var format = bytes[pos++];\n      const charset = [cid ? 0 : \".notdef\"];\n      var id, count, i;\n      length -= 1;\n\n      switch (format) {\n        case 0:\n          for (i = 0; i < length; i++) {\n            id = bytes[pos++] << 8 | bytes[pos++];\n            charset.push(cid ? id : strings.get(id));\n          }\n\n          break;\n\n        case 1:\n          while (charset.length <= length) {\n            id = bytes[pos++] << 8 | bytes[pos++];\n            count = bytes[pos++];\n\n            for (i = 0; i <= count; i++) {\n              charset.push(cid ? id++ : strings.get(id++));\n            }\n          }\n\n          break;\n\n        case 2:\n          while (charset.length <= length) {\n            id = bytes[pos++] << 8 | bytes[pos++];\n            count = bytes[pos++] << 8 | bytes[pos++];\n\n            for (i = 0; i <= count; i++) {\n              charset.push(cid ? id++ : strings.get(id++));\n            }\n          }\n\n          break;\n\n        default:\n          throw new _util.FormatError(\"Unknown charset format\");\n      }\n\n      var end = pos;\n      var raw = bytes.subarray(start, end);\n      return new CFFCharset(false, format, charset, raw);\n    }\n\n    parseEncoding(pos, properties, strings, charset) {\n      var encoding = Object.create(null);\n      var bytes = this.bytes;\n      var predefined = false;\n      var format, i, ii;\n      var raw = null;\n\n      function readSupplement() {\n        var supplementsCount = bytes[pos++];\n\n        for (i = 0; i < supplementsCount; i++) {\n          var code = bytes[pos++];\n          var sid = (bytes[pos++] << 8) + (bytes[pos++] & 0xff);\n          encoding[code] = charset.indexOf(strings.get(sid));\n        }\n      }\n\n      if (pos === 0 || pos === 1) {\n        predefined = true;\n        format = pos;\n        var baseEncoding = pos ? _encodings.ExpertEncoding : _encodings.StandardEncoding;\n\n        for (i = 0, ii = charset.length; i < ii; i++) {\n          var index = baseEncoding.indexOf(charset[i]);\n\n          if (index !== -1) {\n            encoding[index] = i;\n          }\n        }\n      } else {\n        var dataStart = pos;\n        format = bytes[pos++];\n\n        switch (format & 0x7f) {\n          case 0:\n            var glyphsCount = bytes[pos++];\n\n            for (i = 1; i <= glyphsCount; i++) {\n              encoding[bytes[pos++]] = i;\n            }\n\n            break;\n\n          case 1:\n            var rangesCount = bytes[pos++];\n            var gid = 1;\n\n            for (i = 0; i < rangesCount; i++) {\n              var start = bytes[pos++];\n              var left = bytes[pos++];\n\n              for (var j = start; j <= start + left; j++) {\n                encoding[j] = gid++;\n              }\n            }\n\n            break;\n\n          default:\n            throw new _util.FormatError(`Unknown encoding format: ${format} in CFF`);\n        }\n\n        var dataEnd = pos;\n\n        if (format & 0x80) {\n          bytes[dataStart] &= 0x7f;\n          readSupplement();\n        }\n\n        raw = bytes.subarray(dataStart, dataEnd);\n      }\n\n      format = format & 0x7f;\n      return new CFFEncoding(predefined, format, encoding, raw);\n    }\n\n    parseFDSelect(pos, length) {\n      var bytes = this.bytes;\n      var format = bytes[pos++];\n      var fdSelect = [];\n      var i;\n\n      switch (format) {\n        case 0:\n          for (i = 0; i < length; ++i) {\n            var id = bytes[pos++];\n            fdSelect.push(id);\n          }\n\n          break;\n\n        case 3:\n          var rangesCount = bytes[pos++] << 8 | bytes[pos++];\n\n          for (i = 0; i < rangesCount; ++i) {\n            var first = bytes[pos++] << 8 | bytes[pos++];\n\n            if (i === 0 && first !== 0) {\n              (0, _util.warn)(\"parseFDSelect: The first range must have a first GID of 0\" + \" -- trying to recover.\");\n              first = 0;\n            }\n\n            var fdIndex = bytes[pos++];\n            var next = bytes[pos] << 8 | bytes[pos + 1];\n\n            for (var j = first; j < next; ++j) {\n              fdSelect.push(fdIndex);\n            }\n          }\n\n          pos += 2;\n          break;\n\n        default:\n          throw new _util.FormatError(`parseFDSelect: Unknown format \"${format}\".`);\n      }\n\n      if (fdSelect.length !== length) {\n        throw new _util.FormatError(\"parseFDSelect: Invalid font data.\");\n      }\n\n      return new CFFFDSelect(format, fdSelect);\n    }\n\n  }\n\n  return CFFParser;\n}();\n\nexports.CFFParser = CFFParser;\n\nclass CFF {\n  constructor() {\n    this.header = null;\n    this.names = [];\n    this.topDict = null;\n    this.strings = new CFFStrings();\n    this.globalSubrIndex = null;\n    this.encoding = null;\n    this.charset = null;\n    this.charStrings = null;\n    this.fdArray = [];\n    this.fdSelect = null;\n    this.isCIDFont = false;\n  }\n\n  duplicateFirstGlyph() {\n    if (this.charStrings.count >= 65535) {\n      (0, _util.warn)(\"Not enough space in charstrings to duplicate first glyph.\");\n      return;\n    }\n\n    var glyphZero = this.charStrings.get(0);\n    this.charStrings.add(glyphZero);\n\n    if (this.isCIDFont) {\n      this.fdSelect.fdSelect.push(this.fdSelect.fdSelect[0]);\n    }\n  }\n\n  hasGlyphId(id) {\n    if (id < 0 || id >= this.charStrings.count) {\n      return false;\n    }\n\n    var glyph = this.charStrings.get(id);\n    return glyph.length > 0;\n  }\n\n}\n\nexports.CFF = CFF;\n\nclass CFFHeader {\n  constructor(major, minor, hdrSize, offSize) {\n    this.major = major;\n    this.minor = minor;\n    this.hdrSize = hdrSize;\n    this.offSize = offSize;\n  }\n\n}\n\nexports.CFFHeader = CFFHeader;\n\nclass CFFStrings {\n  constructor() {\n    this.strings = [];\n  }\n\n  get(index) {\n    if (index >= 0 && index <= NUM_STANDARD_CFF_STRINGS - 1) {\n      return CFFStandardStrings[index];\n    }\n\n    if (index - NUM_STANDARD_CFF_STRINGS <= this.strings.length) {\n      return this.strings[index - NUM_STANDARD_CFF_STRINGS];\n    }\n\n    return CFFStandardStrings[0];\n  }\n\n  getSID(str) {\n    let index = CFFStandardStrings.indexOf(str);\n\n    if (index !== -1) {\n      return index;\n    }\n\n    index = this.strings.indexOf(str);\n\n    if (index !== -1) {\n      return index + NUM_STANDARD_CFF_STRINGS;\n    }\n\n    return -1;\n  }\n\n  add(value) {\n    this.strings.push(value);\n  }\n\n  get count() {\n    return this.strings.length;\n  }\n\n}\n\nexports.CFFStrings = CFFStrings;\n\nclass CFFIndex {\n  constructor() {\n    this.objects = [];\n    this.length = 0;\n  }\n\n  add(data) {\n    this.length += data.length;\n    this.objects.push(data);\n  }\n\n  set(index, data) {\n    this.length += data.length - this.objects[index].length;\n    this.objects[index] = data;\n  }\n\n  get(index) {\n    return this.objects[index];\n  }\n\n  get count() {\n    return this.objects.length;\n  }\n\n}\n\nexports.CFFIndex = CFFIndex;\n\nclass CFFDict {\n  constructor(tables, strings) {\n    this.keyToNameMap = tables.keyToNameMap;\n    this.nameToKeyMap = tables.nameToKeyMap;\n    this.defaults = tables.defaults;\n    this.types = tables.types;\n    this.opcodes = tables.opcodes;\n    this.order = tables.order;\n    this.strings = strings;\n    this.values = Object.create(null);\n  }\n\n  setByKey(key, value) {\n    if (!(key in this.keyToNameMap)) {\n      return false;\n    }\n\n    var valueLength = value.length;\n\n    if (valueLength === 0) {\n      return true;\n    }\n\n    for (var i = 0; i < valueLength; i++) {\n      if (isNaN(value[i])) {\n        (0, _util.warn)('Invalid CFFDict value: \"' + value + '\" for key \"' + key + '\".');\n        return true;\n      }\n    }\n\n    var type = this.types[key];\n\n    if (type === \"num\" || type === \"sid\" || type === \"offset\") {\n      value = value[0];\n    }\n\n    this.values[key] = value;\n    return true;\n  }\n\n  setByName(name, value) {\n    if (!(name in this.nameToKeyMap)) {\n      throw new _util.FormatError(`Invalid dictionary name \"${name}\"`);\n    }\n\n    this.values[this.nameToKeyMap[name]] = value;\n  }\n\n  hasName(name) {\n    return this.nameToKeyMap[name] in this.values;\n  }\n\n  getByName(name) {\n    if (!(name in this.nameToKeyMap)) {\n      throw new _util.FormatError(`Invalid dictionary name ${name}\"`);\n    }\n\n    var key = this.nameToKeyMap[name];\n\n    if (!(key in this.values)) {\n      return this.defaults[key];\n    }\n\n    return this.values[key];\n  }\n\n  removeByName(name) {\n    delete this.values[this.nameToKeyMap[name]];\n  }\n\n  static createTables(layout) {\n    var tables = {\n      keyToNameMap: {},\n      nameToKeyMap: {},\n      defaults: {},\n      types: {},\n      opcodes: {},\n      order: []\n    };\n\n    for (var i = 0, ii = layout.length; i < ii; ++i) {\n      var entry = layout[i];\n      var key = Array.isArray(entry[0]) ? (entry[0][0] << 8) + entry[0][1] : entry[0];\n      tables.keyToNameMap[key] = entry[1];\n      tables.nameToKeyMap[entry[1]] = key;\n      tables.types[key] = entry[2];\n      tables.defaults[key] = entry[3];\n      tables.opcodes[key] = Array.isArray(entry[0]) ? entry[0] : [entry[0]];\n      tables.order.push(key);\n    }\n\n    return tables;\n  }\n\n}\n\nvar CFFTopDict = function CFFTopDictClosure() {\n  var layout = [[[12, 30], \"ROS\", [\"sid\", \"sid\", \"num\"], null], [[12, 20], \"SyntheticBase\", \"num\", null], [0, \"version\", \"sid\", null], [1, \"Notice\", \"sid\", null], [[12, 0], \"Copyright\", \"sid\", null], [2, \"FullName\", \"sid\", null], [3, \"FamilyName\", \"sid\", null], [4, \"Weight\", \"sid\", null], [[12, 1], \"isFixedPitch\", \"num\", 0], [[12, 2], \"ItalicAngle\", \"num\", 0], [[12, 3], \"UnderlinePosition\", \"num\", -100], [[12, 4], \"UnderlineThickness\", \"num\", 50], [[12, 5], \"PaintType\", \"num\", 0], [[12, 6], \"CharstringType\", \"num\", 2], [[12, 7], \"FontMatrix\", [\"num\", \"num\", \"num\", \"num\", \"num\", \"num\"], [0.001, 0, 0, 0.001, 0, 0]], [13, \"UniqueID\", \"num\", null], [5, \"FontBBox\", [\"num\", \"num\", \"num\", \"num\"], [0, 0, 0, 0]], [[12, 8], \"StrokeWidth\", \"num\", 0], [14, \"XUID\", \"array\", null], [15, \"charset\", \"offset\", 0], [16, \"Encoding\", \"offset\", 0], [17, \"CharStrings\", \"offset\", 0], [18, \"Private\", [\"offset\", \"offset\"], null], [[12, 21], \"PostScript\", \"sid\", null], [[12, 22], \"BaseFontName\", \"sid\", null], [[12, 23], \"BaseFontBlend\", \"delta\", null], [[12, 31], \"CIDFontVersion\", \"num\", 0], [[12, 32], \"CIDFontRevision\", \"num\", 0], [[12, 33], \"CIDFontType\", \"num\", 0], [[12, 34], \"CIDCount\", \"num\", 8720], [[12, 35], \"UIDBase\", \"num\", null], [[12, 37], \"FDSelect\", \"offset\", null], [[12, 36], \"FDArray\", \"offset\", null], [[12, 38], \"FontName\", \"sid\", null]];\n  var tables = null;\n\n  class CFFTopDict extends CFFDict {\n    constructor(strings) {\n      if (tables === null) {\n        tables = CFFDict.createTables(layout);\n      }\n\n      super(tables, strings);\n      this.privateDict = null;\n    }\n\n  }\n\n  return CFFTopDict;\n}();\n\nexports.CFFTopDict = CFFTopDict;\n\nvar CFFPrivateDict = function CFFPrivateDictClosure() {\n  var layout = [[6, \"BlueValues\", \"delta\", null], [7, \"OtherBlues\", \"delta\", null], [8, \"FamilyBlues\", \"delta\", null], [9, \"FamilyOtherBlues\", \"delta\", null], [[12, 9], \"BlueScale\", \"num\", 0.039625], [[12, 10], \"BlueShift\", \"num\", 7], [[12, 11], \"BlueFuzz\", \"num\", 1], [10, \"StdHW\", \"num\", null], [11, \"StdVW\", \"num\", null], [[12, 12], \"StemSnapH\", \"delta\", null], [[12, 13], \"StemSnapV\", \"delta\", null], [[12, 14], \"ForceBold\", \"num\", 0], [[12, 17], \"LanguageGroup\", \"num\", 0], [[12, 18], \"ExpansionFactor\", \"num\", 0.06], [[12, 19], \"initialRandomSeed\", \"num\", 0], [20, \"defaultWidthX\", \"num\", 0], [21, \"nominalWidthX\", \"num\", 0], [19, \"Subrs\", \"offset\", null]];\n  var tables = null;\n\n  class CFFPrivateDict extends CFFDict {\n    constructor(strings) {\n      if (tables === null) {\n        tables = CFFDict.createTables(layout);\n      }\n\n      super(tables, strings);\n      this.subrsIndex = null;\n    }\n\n  }\n\n  return CFFPrivateDict;\n}();\n\nexports.CFFPrivateDict = CFFPrivateDict;\nvar CFFCharsetPredefinedTypes = {\n  ISO_ADOBE: 0,\n  EXPERT: 1,\n  EXPERT_SUBSET: 2\n};\n\nclass CFFCharset {\n  constructor(predefined, format, charset, raw) {\n    this.predefined = predefined;\n    this.format = format;\n    this.charset = charset;\n    this.raw = raw;\n  }\n\n}\n\nexports.CFFCharset = CFFCharset;\n\nclass CFFEncoding {\n  constructor(predefined, format, encoding, raw) {\n    this.predefined = predefined;\n    this.format = format;\n    this.encoding = encoding;\n    this.raw = raw;\n  }\n\n}\n\nclass CFFFDSelect {\n  constructor(format, fdSelect) {\n    this.format = format;\n    this.fdSelect = fdSelect;\n  }\n\n  getFDIndex(glyphIndex) {\n    if (glyphIndex < 0 || glyphIndex >= this.fdSelect.length) {\n      return -1;\n    }\n\n    return this.fdSelect[glyphIndex];\n  }\n\n}\n\nexports.CFFFDSelect = CFFFDSelect;\n\nclass CFFOffsetTracker {\n  constructor() {\n    this.offsets = Object.create(null);\n  }\n\n  isTracking(key) {\n    return key in this.offsets;\n  }\n\n  track(key, location) {\n    if (key in this.offsets) {\n      throw new _util.FormatError(`Already tracking location of ${key}`);\n    }\n\n    this.offsets[key] = location;\n  }\n\n  offset(value) {\n    for (var key in this.offsets) {\n      this.offsets[key] += value;\n    }\n  }\n\n  setEntryLocation(key, values, output) {\n    if (!(key in this.offsets)) {\n      throw new _util.FormatError(`Not tracking location of ${key}`);\n    }\n\n    var data = output.data;\n    var dataOffset = this.offsets[key];\n    var size = 5;\n\n    for (var i = 0, ii = values.length; i < ii; ++i) {\n      var offset0 = i * size + dataOffset;\n      var offset1 = offset0 + 1;\n      var offset2 = offset0 + 2;\n      var offset3 = offset0 + 3;\n      var offset4 = offset0 + 4;\n\n      if (data[offset0] !== 0x1d || data[offset1] !== 0 || data[offset2] !== 0 || data[offset3] !== 0 || data[offset4] !== 0) {\n        throw new _util.FormatError(\"writing to an offset that is not empty\");\n      }\n\n      var value = values[i];\n      data[offset0] = 0x1d;\n      data[offset1] = value >> 24 & 0xff;\n      data[offset2] = value >> 16 & 0xff;\n      data[offset3] = value >> 8 & 0xff;\n      data[offset4] = value & 0xff;\n    }\n  }\n\n}\n\nclass CFFCompiler {\n  constructor(cff) {\n    this.cff = cff;\n  }\n\n  compile() {\n    var cff = this.cff;\n    var output = {\n      data: [],\n      length: 0,\n      add: function CFFCompiler_add(data) {\n        this.data = this.data.concat(data);\n        this.length = this.data.length;\n      }\n    };\n    var header = this.compileHeader(cff.header);\n    output.add(header);\n    var nameIndex = this.compileNameIndex(cff.names);\n    output.add(nameIndex);\n\n    if (cff.isCIDFont) {\n      if (cff.topDict.hasName(\"FontMatrix\")) {\n        var base = cff.topDict.getByName(\"FontMatrix\");\n        cff.topDict.removeByName(\"FontMatrix\");\n\n        for (var i = 0, ii = cff.fdArray.length; i < ii; i++) {\n          var subDict = cff.fdArray[i];\n          var matrix = base.slice(0);\n\n          if (subDict.hasName(\"FontMatrix\")) {\n            matrix = _util.Util.transform(matrix, subDict.getByName(\"FontMatrix\"));\n          }\n\n          subDict.setByName(\"FontMatrix\", matrix);\n        }\n      }\n    }\n\n    const xuid = cff.topDict.getByName(\"XUID\");\n\n    if (xuid && xuid.length > 16) {\n      cff.topDict.removeByName(\"XUID\");\n    }\n\n    cff.topDict.setByName(\"charset\", 0);\n    var compiled = this.compileTopDicts([cff.topDict], output.length, cff.isCIDFont);\n    output.add(compiled.output);\n    var topDictTracker = compiled.trackers[0];\n    var stringIndex = this.compileStringIndex(cff.strings.strings);\n    output.add(stringIndex);\n    var globalSubrIndex = this.compileIndex(cff.globalSubrIndex);\n    output.add(globalSubrIndex);\n\n    if (cff.encoding && cff.topDict.hasName(\"Encoding\")) {\n      if (cff.encoding.predefined) {\n        topDictTracker.setEntryLocation(\"Encoding\", [cff.encoding.format], output);\n      } else {\n        var encoding = this.compileEncoding(cff.encoding);\n        topDictTracker.setEntryLocation(\"Encoding\", [output.length], output);\n        output.add(encoding);\n      }\n    }\n\n    var charset = this.compileCharset(cff.charset, cff.charStrings.count, cff.strings, cff.isCIDFont);\n    topDictTracker.setEntryLocation(\"charset\", [output.length], output);\n    output.add(charset);\n    var charStrings = this.compileCharStrings(cff.charStrings);\n    topDictTracker.setEntryLocation(\"CharStrings\", [output.length], output);\n    output.add(charStrings);\n\n    if (cff.isCIDFont) {\n      topDictTracker.setEntryLocation(\"FDSelect\", [output.length], output);\n      var fdSelect = this.compileFDSelect(cff.fdSelect);\n      output.add(fdSelect);\n      compiled = this.compileTopDicts(cff.fdArray, output.length, true);\n      topDictTracker.setEntryLocation(\"FDArray\", [output.length], output);\n      output.add(compiled.output);\n      var fontDictTrackers = compiled.trackers;\n      this.compilePrivateDicts(cff.fdArray, fontDictTrackers, output);\n    }\n\n    this.compilePrivateDicts([cff.topDict], [topDictTracker], output);\n    output.add([0]);\n    return output.data;\n  }\n\n  encodeNumber(value) {\n    if (Number.isInteger(value)) {\n      return this.encodeInteger(value);\n    }\n\n    return this.encodeFloat(value);\n  }\n\n  static get EncodeFloatRegExp() {\n    return (0, _util.shadow)(this, \"EncodeFloatRegExp\", /\\.(\\d*?)(?:9{5,20}|0{5,20})\\d{0,2}(?:e(.+)|$)/);\n  }\n\n  encodeFloat(num) {\n    var value = num.toString();\n    var m = CFFCompiler.EncodeFloatRegExp.exec(value);\n\n    if (m) {\n      var epsilon = parseFloat(\"1e\" + ((m[2] ? +m[2] : 0) + m[1].length));\n      value = (Math.round(num * epsilon) / epsilon).toString();\n    }\n\n    var nibbles = \"\";\n    var i, ii;\n\n    for (i = 0, ii = value.length; i < ii; ++i) {\n      var a = value[i];\n\n      if (a === \"e\") {\n        nibbles += value[++i] === \"-\" ? \"c\" : \"b\";\n      } else if (a === \".\") {\n        nibbles += \"a\";\n      } else if (a === \"-\") {\n        nibbles += \"e\";\n      } else {\n        nibbles += a;\n      }\n    }\n\n    nibbles += nibbles.length & 1 ? \"f\" : \"ff\";\n    var out = [30];\n\n    for (i = 0, ii = nibbles.length; i < ii; i += 2) {\n      out.push(parseInt(nibbles.substring(i, i + 2), 16));\n    }\n\n    return out;\n  }\n\n  encodeInteger(value) {\n    var code;\n\n    if (value >= -107 && value <= 107) {\n      code = [value + 139];\n    } else if (value >= 108 && value <= 1131) {\n      value = value - 108;\n      code = [(value >> 8) + 247, value & 0xff];\n    } else if (value >= -1131 && value <= -108) {\n      value = -value - 108;\n      code = [(value >> 8) + 251, value & 0xff];\n    } else if (value >= -32768 && value <= 32767) {\n      code = [0x1c, value >> 8 & 0xff, value & 0xff];\n    } else {\n      code = [0x1d, value >> 24 & 0xff, value >> 16 & 0xff, value >> 8 & 0xff, value & 0xff];\n    }\n\n    return code;\n  }\n\n  compileHeader(header) {\n    return [header.major, header.minor, header.hdrSize, header.offSize];\n  }\n\n  compileNameIndex(names) {\n    var nameIndex = new CFFIndex();\n\n    for (var i = 0, ii = names.length; i < ii; ++i) {\n      var name = names[i];\n      var length = Math.min(name.length, 127);\n      var sanitizedName = new Array(length);\n\n      for (var j = 0; j < length; j++) {\n        var char = name[j];\n\n        if (char < \"!\" || char > \"~\" || char === \"[\" || char === \"]\" || char === \"(\" || char === \")\" || char === \"{\" || char === \"}\" || char === \"<\" || char === \">\" || char === \"/\" || char === \"%\") {\n          char = \"_\";\n        }\n\n        sanitizedName[j] = char;\n      }\n\n      sanitizedName = sanitizedName.join(\"\");\n\n      if (sanitizedName === \"\") {\n        sanitizedName = \"Bad_Font_Name\";\n      }\n\n      nameIndex.add((0, _util.stringToBytes)(sanitizedName));\n    }\n\n    return this.compileIndex(nameIndex);\n  }\n\n  compileTopDicts(dicts, length, removeCidKeys) {\n    var fontDictTrackers = [];\n    var fdArrayIndex = new CFFIndex();\n\n    for (var i = 0, ii = dicts.length; i < ii; ++i) {\n      var fontDict = dicts[i];\n\n      if (removeCidKeys) {\n        fontDict.removeByName(\"CIDFontVersion\");\n        fontDict.removeByName(\"CIDFontRevision\");\n        fontDict.removeByName(\"CIDFontType\");\n        fontDict.removeByName(\"CIDCount\");\n        fontDict.removeByName(\"UIDBase\");\n      }\n\n      var fontDictTracker = new CFFOffsetTracker();\n      var fontDictData = this.compileDict(fontDict, fontDictTracker);\n      fontDictTrackers.push(fontDictTracker);\n      fdArrayIndex.add(fontDictData);\n      fontDictTracker.offset(length);\n    }\n\n    fdArrayIndex = this.compileIndex(fdArrayIndex, fontDictTrackers);\n    return {\n      trackers: fontDictTrackers,\n      output: fdArrayIndex\n    };\n  }\n\n  compilePrivateDicts(dicts, trackers, output) {\n    for (var i = 0, ii = dicts.length; i < ii; ++i) {\n      var fontDict = dicts[i];\n      var privateDict = fontDict.privateDict;\n\n      if (!privateDict || !fontDict.hasName(\"Private\")) {\n        throw new _util.FormatError(\"There must be a private dictionary.\");\n      }\n\n      var privateDictTracker = new CFFOffsetTracker();\n      var privateDictData = this.compileDict(privateDict, privateDictTracker);\n      var outputLength = output.length;\n      privateDictTracker.offset(outputLength);\n\n      if (!privateDictData.length) {\n        outputLength = 0;\n      }\n\n      trackers[i].setEntryLocation(\"Private\", [privateDictData.length, outputLength], output);\n      output.add(privateDictData);\n\n      if (privateDict.subrsIndex && privateDict.hasName(\"Subrs\")) {\n        var subrs = this.compileIndex(privateDict.subrsIndex);\n        privateDictTracker.setEntryLocation(\"Subrs\", [privateDictData.length], output);\n        output.add(subrs);\n      }\n    }\n  }\n\n  compileDict(dict, offsetTracker) {\n    var out = [];\n    var order = dict.order;\n\n    for (var i = 0; i < order.length; ++i) {\n      var key = order[i];\n\n      if (!(key in dict.values)) {\n        continue;\n      }\n\n      var values = dict.values[key];\n      var types = dict.types[key];\n\n      if (!Array.isArray(types)) {\n        types = [types];\n      }\n\n      if (!Array.isArray(values)) {\n        values = [values];\n      }\n\n      if (values.length === 0) {\n        continue;\n      }\n\n      for (var j = 0, jj = types.length; j < jj; ++j) {\n        var type = types[j];\n        var value = values[j];\n\n        switch (type) {\n          case \"num\":\n          case \"sid\":\n            out = out.concat(this.encodeNumber(value));\n            break;\n\n          case \"offset\":\n            var name = dict.keyToNameMap[key];\n\n            if (!offsetTracker.isTracking(name)) {\n              offsetTracker.track(name, out.length);\n            }\n\n            out = out.concat([0x1d, 0, 0, 0, 0]);\n            break;\n\n          case \"array\":\n          case \"delta\":\n            out = out.concat(this.encodeNumber(value));\n\n            for (var k = 1, kk = values.length; k < kk; ++k) {\n              out = out.concat(this.encodeNumber(values[k]));\n            }\n\n            break;\n\n          default:\n            throw new _util.FormatError(`Unknown data type of ${type}`);\n        }\n      }\n\n      out = out.concat(dict.opcodes[key]);\n    }\n\n    return out;\n  }\n\n  compileStringIndex(strings) {\n    var stringIndex = new CFFIndex();\n\n    for (var i = 0, ii = strings.length; i < ii; ++i) {\n      stringIndex.add((0, _util.stringToBytes)(strings[i]));\n    }\n\n    return this.compileIndex(stringIndex);\n  }\n\n  compileGlobalSubrIndex() {\n    var globalSubrIndex = this.cff.globalSubrIndex;\n    this.out.writeByteArray(this.compileIndex(globalSubrIndex));\n  }\n\n  compileCharStrings(charStrings) {\n    var charStringsIndex = new CFFIndex();\n\n    for (var i = 0; i < charStrings.count; i++) {\n      var glyph = charStrings.get(i);\n\n      if (glyph.length === 0) {\n        charStringsIndex.add(new Uint8Array([0x8b, 0x0e]));\n        continue;\n      }\n\n      charStringsIndex.add(glyph);\n    }\n\n    return this.compileIndex(charStringsIndex);\n  }\n\n  compileCharset(charset, numGlyphs, strings, isCIDFont) {\n    let out;\n    const numGlyphsLessNotDef = numGlyphs - 1;\n\n    if (isCIDFont) {\n      out = new Uint8Array([2, 0, 0, numGlyphsLessNotDef >> 8 & 0xff, numGlyphsLessNotDef & 0xff]);\n    } else {\n      const length = 1 + numGlyphsLessNotDef * 2;\n      out = new Uint8Array(length);\n      out[0] = 0;\n      let charsetIndex = 0;\n      const numCharsets = charset.charset.length;\n      let warned = false;\n\n      for (let i = 1; i < out.length; i += 2) {\n        let sid = 0;\n\n        if (charsetIndex < numCharsets) {\n          const name = charset.charset[charsetIndex++];\n          sid = strings.getSID(name);\n\n          if (sid === -1) {\n            sid = 0;\n\n            if (!warned) {\n              warned = true;\n              (0, _util.warn)(`Couldn't find ${name} in CFF strings`);\n            }\n          }\n        }\n\n        out[i] = sid >> 8 & 0xff;\n        out[i + 1] = sid & 0xff;\n      }\n    }\n\n    return this.compileTypedArray(out);\n  }\n\n  compileEncoding(encoding) {\n    return this.compileTypedArray(encoding.raw);\n  }\n\n  compileFDSelect(fdSelect) {\n    const format = fdSelect.format;\n    let out, i;\n\n    switch (format) {\n      case 0:\n        out = new Uint8Array(1 + fdSelect.fdSelect.length);\n        out[0] = format;\n\n        for (i = 0; i < fdSelect.fdSelect.length; i++) {\n          out[i + 1] = fdSelect.fdSelect[i];\n        }\n\n        break;\n\n      case 3:\n        const start = 0;\n        let lastFD = fdSelect.fdSelect[0];\n        const ranges = [format, 0, 0, start >> 8 & 0xff, start & 0xff, lastFD];\n\n        for (i = 1; i < fdSelect.fdSelect.length; i++) {\n          const currentFD = fdSelect.fdSelect[i];\n\n          if (currentFD !== lastFD) {\n            ranges.push(i >> 8 & 0xff, i & 0xff, currentFD);\n            lastFD = currentFD;\n          }\n        }\n\n        const numRanges = (ranges.length - 3) / 3;\n        ranges[1] = numRanges >> 8 & 0xff;\n        ranges[2] = numRanges & 0xff;\n        ranges.push(i >> 8 & 0xff, i & 0xff);\n        out = new Uint8Array(ranges);\n        break;\n    }\n\n    return this.compileTypedArray(out);\n  }\n\n  compileTypedArray(data) {\n    var out = [];\n\n    for (var i = 0, ii = data.length; i < ii; ++i) {\n      out[i] = data[i];\n    }\n\n    return out;\n  }\n\n  compileIndex(index, trackers = []) {\n    var objects = index.objects;\n    var count = objects.length;\n\n    if (count === 0) {\n      return [0, 0, 0];\n    }\n\n    var data = [count >> 8 & 0xff, count & 0xff];\n    var lastOffset = 1,\n        i;\n\n    for (i = 0; i < count; ++i) {\n      lastOffset += objects[i].length;\n    }\n\n    var offsetSize;\n\n    if (lastOffset < 0x100) {\n      offsetSize = 1;\n    } else if (lastOffset < 0x10000) {\n      offsetSize = 2;\n    } else if (lastOffset < 0x1000000) {\n      offsetSize = 3;\n    } else {\n      offsetSize = 4;\n    }\n\n    data.push(offsetSize);\n    var relativeOffset = 1;\n\n    for (i = 0; i < count + 1; i++) {\n      if (offsetSize === 1) {\n        data.push(relativeOffset & 0xff);\n      } else if (offsetSize === 2) {\n        data.push(relativeOffset >> 8 & 0xff, relativeOffset & 0xff);\n      } else if (offsetSize === 3) {\n        data.push(relativeOffset >> 16 & 0xff, relativeOffset >> 8 & 0xff, relativeOffset & 0xff);\n      } else {\n        data.push(relativeOffset >>> 24 & 0xff, relativeOffset >> 16 & 0xff, relativeOffset >> 8 & 0xff, relativeOffset & 0xff);\n      }\n\n      if (objects[i]) {\n        relativeOffset += objects[i].length;\n      }\n    }\n\n    for (i = 0; i < count; i++) {\n      if (trackers[i]) {\n        trackers[i].offset(data.length);\n      }\n\n      for (var j = 0, jj = objects[i].length; j < jj; j++) {\n        data.push(objects[i][j]);\n      }\n    }\n\n    return data;\n  }\n\n}\n\nexports.CFFCompiler = CFFCompiler;\n\n/***/ }),\n/* 31 */\n/***/ ((__unused_webpack_module, exports) => {\n\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.ISOAdobeCharset = exports.ExpertSubsetCharset = exports.ExpertCharset = void 0;\nconst ISOAdobeCharset = [\".notdef\", \"space\", \"exclam\", \"quotedbl\", \"numbersign\", \"dollar\", \"percent\", \"ampersand\", \"quoteright\", \"parenleft\", \"parenright\", \"asterisk\", \"plus\", \"comma\", \"hyphen\", \"period\", \"slash\", \"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"colon\", \"semicolon\", \"less\", \"equal\", \"greater\", \"question\", \"at\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\", \"bracketleft\", \"backslash\", \"bracketright\", \"asciicircum\", \"underscore\", \"quoteleft\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"braceleft\", \"bar\", \"braceright\", \"asciitilde\", \"exclamdown\", \"cent\", \"sterling\", \"fraction\", \"yen\", \"florin\", \"section\", \"currency\", \"quotesingle\", \"quotedblleft\", \"guillemotleft\", \"guilsinglleft\", \"guilsinglright\", \"fi\", \"fl\", \"endash\", \"dagger\", \"daggerdbl\", \"periodcentered\", \"paragraph\", \"bullet\", \"quotesinglbase\", \"quotedblbase\", \"quotedblright\", \"guillemotright\", \"ellipsis\", \"perthousand\", \"questiondown\", \"grave\", \"acute\", \"circumflex\", \"tilde\", \"macron\", \"breve\", \"dotaccent\", \"dieresis\", \"ring\", \"cedilla\", \"hungarumlaut\", \"ogonek\", \"caron\", \"emdash\", \"AE\", \"ordfeminine\", \"Lslash\", \"Oslash\", \"OE\", \"ordmasculine\", \"ae\", \"dotlessi\", \"lslash\", \"oslash\", \"oe\", \"germandbls\", \"onesuperior\", \"logicalnot\", \"mu\", \"trademark\", \"Eth\", \"onehalf\", \"plusminus\", \"Thorn\", \"onequarter\", \"divide\", \"brokenbar\", \"degree\", \"thorn\", \"threequarters\", \"twosuperior\", \"registered\", \"minus\", \"eth\", \"multiply\", \"threesuperior\", \"copyright\", \"Aacute\", \"Acircumflex\", \"Adieresis\", \"Agrave\", \"Aring\", \"Atilde\", \"Ccedilla\", \"Eacute\", \"Ecircumflex\", \"Edieresis\", \"Egrave\", \"Iacute\", \"Icircumflex\", \"Idieresis\", \"Igrave\", \"Ntilde\", \"Oacute\", \"Ocircumflex\", \"Odieresis\", \"Ograve\", \"Otilde\", \"Scaron\", \"Uacute\", \"Ucircumflex\", \"Udieresis\", \"Ugrave\", \"Yacute\", \"Ydieresis\", \"Zcaron\", \"aacute\", \"acircumflex\", \"adieresis\", \"agrave\", \"aring\", \"atilde\", \"ccedilla\", \"eacute\", \"ecircumflex\", \"edieresis\", \"egrave\", \"iacute\", \"icircumflex\", \"idieresis\", \"igrave\", \"ntilde\", \"oacute\", \"ocircumflex\", \"odieresis\", \"ograve\", \"otilde\", \"scaron\", \"uacute\", \"ucircumflex\", \"udieresis\", \"ugrave\", \"yacute\", \"ydieresis\", \"zcaron\"];\nexports.ISOAdobeCharset = ISOAdobeCharset;\nconst ExpertCharset = [\".notdef\", \"space\", \"exclamsmall\", \"Hungarumlautsmall\", \"dollaroldstyle\", \"dollarsuperior\", \"ampersandsmall\", \"Acutesmall\", \"parenleftsuperior\", \"parenrightsuperior\", \"twodotenleader\", \"onedotenleader\", \"comma\", \"hyphen\", \"period\", \"fraction\", \"zerooldstyle\", \"oneoldstyle\", \"twooldstyle\", \"threeoldstyle\", \"fouroldstyle\", \"fiveoldstyle\", \"sixoldstyle\", \"sevenoldstyle\", \"eightoldstyle\", \"nineoldstyle\", \"colon\", \"semicolon\", \"commasuperior\", \"threequartersemdash\", \"periodsuperior\", \"questionsmall\", \"asuperior\", \"bsuperior\", \"centsuperior\", \"dsuperior\", \"esuperior\", \"isuperior\", \"lsuperior\", \"msuperior\", \"nsuperior\", \"osuperior\", \"rsuperior\", \"ssuperior\", \"tsuperior\", \"ff\", \"fi\", \"fl\", \"ffi\", \"ffl\", \"parenleftinferior\", \"parenrightinferior\", \"Circumflexsmall\", \"hyphensuperior\", \"Gravesmall\", \"Asmall\", \"Bsmall\", \"Csmall\", \"Dsmall\", \"Esmall\", \"Fsmall\", \"Gsmall\", \"Hsmall\", \"Ismall\", \"Jsmall\", \"Ksmall\", \"Lsmall\", \"Msmall\", \"Nsmall\", \"Osmall\", \"Psmall\", \"Qsmall\", \"Rsmall\", \"Ssmall\", \"Tsmall\", \"Usmall\", \"Vsmall\", \"Wsmall\", \"Xsmall\", \"Ysmall\", \"Zsmall\", \"colonmonetary\", \"onefitted\", \"rupiah\", \"Tildesmall\", \"exclamdownsmall\", \"centoldstyle\", \"Lslashsmall\", \"Scaronsmall\", \"Zcaronsmall\", \"Dieresissmall\", \"Brevesmall\", \"Caronsmall\", \"Dotaccentsmall\", \"Macronsmall\", \"figuredash\", \"hypheninferior\", \"Ogoneksmall\", \"Ringsmall\", \"Cedillasmall\", \"onequarter\", \"onehalf\", \"threequarters\", \"questiondownsmall\", \"oneeighth\", \"threeeighths\", \"fiveeighths\", \"seveneighths\", \"onethird\", \"twothirds\", \"zerosuperior\", \"onesuperior\", \"twosuperior\", \"threesuperior\", \"foursuperior\", \"fivesuperior\", \"sixsuperior\", \"sevensuperior\", \"eightsuperior\", \"ninesuperior\", \"zeroinferior\", \"oneinferior\", \"twoinferior\", \"threeinferior\", \"fourinferior\", \"fiveinferior\", \"sixinferior\", \"seveninferior\", \"eightinferior\", \"nineinferior\", \"centinferior\", \"dollarinferior\", \"periodinferior\", \"commainferior\", \"Agravesmall\", \"Aacutesmall\", \"Acircumflexsmall\", \"Atildesmall\", \"Adieresissmall\", \"Aringsmall\", \"AEsmall\", \"Ccedillasmall\", \"Egravesmall\", \"Eacutesmall\", \"Ecircumflexsmall\", \"Edieresissmall\", \"Igravesmall\", \"Iacutesmall\", \"Icircumflexsmall\", \"Idieresissmall\", \"Ethsmall\", \"Ntildesmall\", \"Ogravesmall\", \"Oacutesmall\", \"Ocircumflexsmall\", \"Otildesmall\", \"Odieresissmall\", \"OEsmall\", \"Oslashsmall\", \"Ugravesmall\", \"Uacutesmall\", \"Ucircumflexsmall\", \"Udieresissmall\", \"Yacutesmall\", \"Thornsmall\", \"Ydieresissmall\"];\nexports.ExpertCharset = ExpertCharset;\nconst ExpertSubsetCharset = [\".notdef\", \"space\", \"dollaroldstyle\", \"dollarsuperior\", \"parenleftsuperior\", \"parenrightsuperior\", \"twodotenleader\", \"onedotenleader\", \"comma\", \"hyphen\", \"period\", \"fraction\", \"zerooldstyle\", \"oneoldstyle\", \"twooldstyle\", \"threeoldstyle\", \"fouroldstyle\", \"fiveoldstyle\", \"sixoldstyle\", \"sevenoldstyle\", \"eightoldstyle\", \"nineoldstyle\", \"colon\", \"semicolon\", \"commasuperior\", \"threequartersemdash\", \"periodsuperior\", \"asuperior\", \"bsuperior\", \"centsuperior\", \"dsuperior\", \"esuperior\", \"isuperior\", \"lsuperior\", \"msuperior\", \"nsuperior\", \"osuperior\", \"rsuperior\", \"ssuperior\", \"tsuperior\", \"ff\", \"fi\", \"fl\", \"ffi\", \"ffl\", \"parenleftinferior\", \"parenrightinferior\", \"hyphensuperior\", \"colonmonetary\", \"onefitted\", \"rupiah\", \"centoldstyle\", \"figuredash\", \"hypheninferior\", \"onequarter\", \"onehalf\", \"threequarters\", \"oneeighth\", \"threeeighths\", \"fiveeighths\", \"seveneighths\", \"onethird\", \"twothirds\", \"zerosuperior\", \"onesuperior\", \"twosuperior\", \"threesuperior\", \"foursuperior\", \"fivesuperior\", \"sixsuperior\", \"sevensuperior\", \"eightsuperior\", \"ninesuperior\", \"zeroinferior\", \"oneinferior\", \"twoinferior\", \"threeinferior\", \"fourinferior\", \"fiveinferior\", \"sixinferior\", \"seveninferior\", \"eightinferior\", \"nineinferior\", \"centinferior\", \"dollarinferior\", \"periodinferior\", \"commainferior\"];\nexports.ExpertSubsetCharset = ExpertSubsetCharset;\n\n/***/ }),\n/* 32 */\n/***/ ((__unused_webpack_module, exports) => {\n\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.getEncoding = getEncoding;\nexports.ZapfDingbatsEncoding = exports.WinAnsiEncoding = exports.SymbolSetEncoding = exports.StandardEncoding = exports.MacRomanEncoding = exports.ExpertEncoding = void 0;\nconst ExpertEncoding = [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"space\", \"exclamsmall\", \"Hungarumlautsmall\", \"\", \"dollaroldstyle\", \"dollarsuperior\", \"ampersandsmall\", \"Acutesmall\", \"parenleftsuperior\", \"parenrightsuperior\", \"twodotenleader\", \"onedotenleader\", \"comma\", \"hyphen\", \"period\", \"fraction\", \"zerooldstyle\", \"oneoldstyle\", \"twooldstyle\", \"threeoldstyle\", \"fouroldstyle\", \"fiveoldstyle\", \"sixoldstyle\", \"sevenoldstyle\", \"eightoldstyle\", \"nineoldstyle\", \"colon\", \"semicolon\", \"commasuperior\", \"threequartersemdash\", \"periodsuperior\", \"questionsmall\", \"\", \"asuperior\", \"bsuperior\", \"centsuperior\", \"dsuperior\", \"esuperior\", \"\", \"\", \"\", \"isuperior\", \"\", \"\", \"lsuperior\", \"msuperior\", \"nsuperior\", \"osuperior\", \"\", \"\", \"rsuperior\", \"ssuperior\", \"tsuperior\", \"\", \"ff\", \"fi\", \"fl\", \"ffi\", \"ffl\", \"parenleftinferior\", \"\", \"parenrightinferior\", \"Circumflexsmall\", \"hyphensuperior\", \"Gravesmall\", \"Asmall\", \"Bsmall\", \"Csmall\", \"Dsmall\", \"Esmall\", \"Fsmall\", \"Gsmall\", \"Hsmall\", \"Ismall\", \"Jsmall\", \"Ksmall\", \"Lsmall\", \"Msmall\", \"Nsmall\", \"Osmall\", \"Psmall\", \"Qsmall\", \"Rsmall\", \"Ssmall\", \"Tsmall\", \"Usmall\", \"Vsmall\", \"Wsmall\", \"Xsmall\", \"Ysmall\", \"Zsmall\", \"colonmonetary\", \"onefitted\", \"rupiah\", \"Tildesmall\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"exclamdownsmall\", \"centoldstyle\", \"Lslashsmall\", \"\", \"\", \"Scaronsmall\", \"Zcaronsmall\", \"Dieresissmall\", \"Brevesmall\", \"Caronsmall\", \"\", \"Dotaccentsmall\", \"\", \"\", \"Macronsmall\", \"\", \"\", \"figuredash\", \"hypheninferior\", \"\", \"\", \"Ogoneksmall\", \"Ringsmall\", \"Cedillasmall\", \"\", \"\", \"\", \"onequarter\", \"onehalf\", \"threequarters\", \"questiondownsmall\", \"oneeighth\", \"threeeighths\", \"fiveeighths\", \"seveneighths\", \"onethird\", \"twothirds\", \"\", \"\", \"zerosuperior\", \"onesuperior\", \"twosuperior\", \"threesuperior\", \"foursuperior\", \"fivesuperior\", \"sixsuperior\", \"sevensuperior\", \"eightsuperior\", \"ninesuperior\", \"zeroinferior\", \"oneinferior\", \"twoinferior\", \"threeinferior\", \"fourinferior\", \"fiveinferior\", \"sixinferior\", \"seveninferior\", \"eightinferior\", \"nineinferior\", \"centinferior\", \"dollarinferior\", \"periodinferior\", \"commainferior\", \"Agravesmall\", \"Aacutesmall\", \"Acircumflexsmall\", \"Atildesmall\", \"Adieresissmall\", \"Aringsmall\", \"AEsmall\", \"Ccedillasmall\", \"Egravesmall\", \"Eacutesmall\", \"Ecircumflexsmall\", \"Edieresissmall\", \"Igravesmall\", \"Iacutesmall\", \"Icircumflexsmall\", \"Idieresissmall\", \"Ethsmall\", \"Ntildesmall\", \"Ogravesmall\", \"Oacutesmall\", \"Ocircumflexsmall\", \"Otildesmall\", \"Odieresissmall\", \"OEsmall\", \"Oslashsmall\", \"Ugravesmall\", \"Uacutesmall\", \"Ucircumflexsmall\", \"Udieresissmall\", \"Yacutesmall\", \"Thornsmall\", \"Ydieresissmall\"];\nexports.ExpertEncoding = ExpertEncoding;\nconst MacExpertEncoding = [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"space\", \"exclamsmall\", \"Hungarumlautsmall\", \"centoldstyle\", \"dollaroldstyle\", \"dollarsuperior\", \"ampersandsmall\", \"Acutesmall\", \"parenleftsuperior\", \"parenrightsuperior\", \"twodotenleader\", \"onedotenleader\", \"comma\", \"hyphen\", \"period\", \"fraction\", \"zerooldstyle\", \"oneoldstyle\", \"twooldstyle\", \"threeoldstyle\", \"fouroldstyle\", \"fiveoldstyle\", \"sixoldstyle\", \"sevenoldstyle\", \"eightoldstyle\", \"nineoldstyle\", \"colon\", \"semicolon\", \"\", \"threequartersemdash\", \"\", \"questionsmall\", \"\", \"\", \"\", \"\", \"Ethsmall\", \"\", \"\", \"onequarter\", \"onehalf\", \"threequarters\", \"oneeighth\", \"threeeighths\", \"fiveeighths\", \"seveneighths\", \"onethird\", \"twothirds\", \"\", \"\", \"\", \"\", \"\", \"\", \"ff\", \"fi\", \"fl\", \"ffi\", \"ffl\", \"parenleftinferior\", \"\", \"parenrightinferior\", \"Circumflexsmall\", \"hypheninferior\", \"Gravesmall\", \"Asmall\", \"Bsmall\", \"Csmall\", \"Dsmall\", \"Esmall\", \"Fsmall\", \"Gsmall\", \"Hsmall\", \"Ismall\", \"Jsmall\", \"Ksmall\", \"Lsmall\", \"Msmall\", \"Nsmall\", \"Osmall\", \"Psmall\", \"Qsmall\", \"Rsmall\", \"Ssmall\", \"Tsmall\", \"Usmall\", \"Vsmall\", \"Wsmall\", \"Xsmall\", \"Ysmall\", \"Zsmall\", \"colonmonetary\", \"onefitted\", \"rupiah\", \"Tildesmall\", \"\", \"\", \"asuperior\", \"centsuperior\", \"\", \"\", \"\", \"\", \"Aacutesmall\", \"Agravesmall\", \"Acircumflexsmall\", \"Adieresissmall\", \"Atildesmall\", \"Aringsmall\", \"Ccedillasmall\", \"Eacutesmall\", \"Egravesmall\", \"Ecircumflexsmall\", \"Edieresissmall\", \"Iacutesmall\", \"Igravesmall\", \"Icircumflexsmall\", \"Idieresissmall\", \"Ntildesmall\", \"Oacutesmall\", \"Ogravesmall\", \"Ocircumflexsmall\", \"Odieresissmall\", \"Otildesmall\", \"Uacutesmall\", \"Ugravesmall\", \"Ucircumflexsmall\", \"Udieresissmall\", \"\", \"eightsuperior\", \"fourinferior\", \"threeinferior\", \"sixinferior\", \"eightinferior\", \"seveninferior\", \"Scaronsmall\", \"\", \"centinferior\", \"twoinferior\", \"\", \"Dieresissmall\", \"\", \"Caronsmall\", \"osuperior\", \"fiveinferior\", \"\", \"commainferior\", \"periodinferior\", \"Yacutesmall\", \"\", \"dollarinferior\", \"\", \"\", \"Thornsmall\", \"\", \"nineinferior\", \"zeroinferior\", \"Zcaronsmall\", \"AEsmall\", \"Oslashsmall\", \"questiondownsmall\", \"oneinferior\", \"Lslashsmall\", \"\", \"\", \"\", \"\", \"\", \"\", \"Cedillasmall\", \"\", \"\", \"\", \"\", \"\", \"OEsmall\", \"figuredash\", \"hyphensuperior\", \"\", \"\", \"\", \"\", \"exclamdownsmall\", \"\", \"Ydieresissmall\", \"\", \"onesuperior\", \"twosuperior\", \"threesuperior\", \"foursuperior\", \"fivesuperior\", \"sixsuperior\", \"sevensuperior\", \"ninesuperior\", \"zerosuperior\", \"\", \"esuperior\", \"rsuperior\", \"tsuperior\", \"\", \"\", \"isuperior\", \"ssuperior\", \"dsuperior\", \"\", \"\", \"\", \"\", \"\", \"lsuperior\", \"Ogoneksmall\", \"Brevesmall\", \"Macronsmall\", \"bsuperior\", \"nsuperior\", \"msuperior\", \"commasuperior\", \"periodsuperior\", \"Dotaccentsmall\", \"Ringsmall\", \"\", \"\", \"\", \"\"];\nconst MacRomanEncoding = [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"space\", \"exclam\", \"quotedbl\", \"numbersign\", \"dollar\", \"percent\", \"ampersand\", \"quotesingle\", \"parenleft\", \"parenright\", \"asterisk\", \"plus\", \"comma\", \"hyphen\", \"period\", \"slash\", \"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"colon\", \"semicolon\", \"less\", \"equal\", \"greater\", \"question\", \"at\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\", \"bracketleft\", \"backslash\", \"bracketright\", \"asciicircum\", \"underscore\", \"grave\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"braceleft\", \"bar\", \"braceright\", \"asciitilde\", \"\", \"Adieresis\", \"Aring\", \"Ccedilla\", \"Eacute\", \"Ntilde\", \"Odieresis\", \"Udieresis\", \"aacute\", \"agrave\", \"acircumflex\", \"adieresis\", \"atilde\", \"aring\", \"ccedilla\", \"eacute\", \"egrave\", \"ecircumflex\", \"edieresis\", \"iacute\", \"igrave\", \"icircumflex\", \"idieresis\", \"ntilde\", \"oacute\", \"ograve\", \"ocircumflex\", \"odieresis\", \"otilde\", \"uacute\", \"ugrave\", \"ucircumflex\", \"udieresis\", \"dagger\", \"degree\", \"cent\", \"sterling\", \"section\", \"bullet\", \"paragraph\", \"germandbls\", \"registered\", \"copyright\", \"trademark\", \"acute\", \"dieresis\", \"notequal\", \"AE\", \"Oslash\", \"infinity\", \"plusminus\", \"lessequal\", \"greaterequal\", \"yen\", \"mu\", \"partialdiff\", \"summation\", \"product\", \"pi\", \"integral\", \"ordfeminine\", \"ordmasculine\", \"Omega\", \"ae\", \"oslash\", \"questiondown\", \"exclamdown\", \"logicalnot\", \"radical\", \"florin\", \"approxequal\", \"Delta\", \"guillemotleft\", \"guillemotright\", \"ellipsis\", \"space\", \"Agrave\", \"Atilde\", \"Otilde\", \"OE\", \"oe\", \"endash\", \"emdash\", \"quotedblleft\", \"quotedblright\", \"quoteleft\", \"quoteright\", \"divide\", \"lozenge\", \"ydieresis\", \"Ydieresis\", \"fraction\", \"currency\", \"guilsinglleft\", \"guilsinglright\", \"fi\", \"fl\", \"daggerdbl\", \"periodcentered\", \"quotesinglbase\", \"quotedblbase\", \"perthousand\", \"Acircumflex\", \"Ecircumflex\", \"Aacute\", \"Edieresis\", \"Egrave\", \"Iacute\", \"Icircumflex\", \"Idieresis\", \"Igrave\", \"Oacute\", \"Ocircumflex\", \"apple\", \"Ograve\", \"Uacute\", \"Ucircumflex\", \"Ugrave\", \"dotlessi\", \"circumflex\", \"tilde\", \"macron\", \"breve\", \"dotaccent\", \"ring\", \"cedilla\", \"hungarumlaut\", \"ogonek\", \"caron\"];\nexports.MacRomanEncoding = MacRomanEncoding;\nconst StandardEncoding = [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"space\", \"exclam\", \"quotedbl\", \"numbersign\", \"dollar\", \"percent\", \"ampersand\", \"quoteright\", \"parenleft\", \"parenright\", \"asterisk\", \"plus\", \"comma\", \"hyphen\", \"period\", \"slash\", \"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"colon\", \"semicolon\", \"less\", \"equal\", \"greater\", \"question\", \"at\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\", \"bracketleft\", \"backslash\", \"bracketright\", \"asciicircum\", \"underscore\", \"quoteleft\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"braceleft\", \"bar\", \"braceright\", \"asciitilde\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"exclamdown\", \"cent\", \"sterling\", \"fraction\", \"yen\", \"florin\", \"section\", \"currency\", \"quotesingle\", \"quotedblleft\", \"guillemotleft\", \"guilsinglleft\", \"guilsinglright\", \"fi\", \"fl\", \"\", \"endash\", \"dagger\", \"daggerdbl\", \"periodcentered\", \"\", \"paragraph\", \"bullet\", \"quotesinglbase\", \"quotedblbase\", \"quotedblright\", \"guillemotright\", \"ellipsis\", \"perthousand\", \"\", \"questiondown\", \"\", \"grave\", \"acute\", \"circumflex\", \"tilde\", \"macron\", \"breve\", \"dotaccent\", \"dieresis\", \"\", \"ring\", \"cedilla\", \"\", \"hungarumlaut\", \"ogonek\", \"caron\", \"emdash\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"AE\", \"\", \"ordfeminine\", \"\", \"\", \"\", \"\", \"Lslash\", \"Oslash\", \"OE\", \"ordmasculine\", \"\", \"\", \"\", \"\", \"\", \"ae\", \"\", \"\", \"\", \"dotlessi\", \"\", \"\", \"lslash\", \"oslash\", \"oe\", \"germandbls\", \"\", \"\", \"\", \"\"];\nexports.StandardEncoding = StandardEncoding;\nconst WinAnsiEncoding = [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"space\", \"exclam\", \"quotedbl\", \"numbersign\", \"dollar\", \"percent\", \"ampersand\", \"quotesingle\", \"parenleft\", \"parenright\", \"asterisk\", \"plus\", \"comma\", \"hyphen\", \"period\", \"slash\", \"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"colon\", \"semicolon\", \"less\", \"equal\", \"greater\", \"question\", \"at\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\", \"bracketleft\", \"backslash\", \"bracketright\", \"asciicircum\", \"underscore\", \"grave\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"braceleft\", \"bar\", \"braceright\", \"asciitilde\", \"bullet\", \"Euro\", \"bullet\", \"quotesinglbase\", \"florin\", \"quotedblbase\", \"ellipsis\", \"dagger\", \"daggerdbl\", \"circumflex\", \"perthousand\", \"Scaron\", \"guilsinglleft\", \"OE\", \"bullet\", \"Zcaron\", \"bullet\", \"bullet\", \"quoteleft\", \"quoteright\", \"quotedblleft\", \"quotedblright\", \"bullet\", \"endash\", \"emdash\", \"tilde\", \"trademark\", \"scaron\", \"guilsinglright\", \"oe\", \"bullet\", \"zcaron\", \"Ydieresis\", \"space\", \"exclamdown\", \"cent\", \"sterling\", \"currency\", \"yen\", \"brokenbar\", \"section\", \"dieresis\", \"copyright\", \"ordfeminine\", \"guillemotleft\", \"logicalnot\", \"hyphen\", \"registered\", \"macron\", \"degree\", \"plusminus\", \"twosuperior\", \"threesuperior\", \"acute\", \"mu\", \"paragraph\", \"periodcentered\", \"cedilla\", \"onesuperior\", \"ordmasculine\", \"guillemotright\", \"onequarter\", \"onehalf\", \"threequarters\", \"questiondown\", \"Agrave\", \"Aacute\", \"Acircumflex\", \"Atilde\", \"Adieresis\", \"Aring\", \"AE\", \"Ccedilla\", \"Egrave\", \"Eacute\", \"Ecircumflex\", \"Edieresis\", \"Igrave\", \"Iacute\", \"Icircumflex\", \"Idieresis\", \"Eth\", \"Ntilde\", \"Ograve\", \"Oacute\", \"Ocircumflex\", \"Otilde\", \"Odieresis\", \"multiply\", \"Oslash\", \"Ugrave\", \"Uacute\", \"Ucircumflex\", \"Udieresis\", \"Yacute\", \"Thorn\", \"germandbls\", \"agrave\", \"aacute\", \"acircumflex\", \"atilde\", \"adieresis\", \"aring\", \"ae\", \"ccedilla\", \"egrave\", \"eacute\", \"ecircumflex\", \"edieresis\", \"igrave\", \"iacute\", \"icircumflex\", \"idieresis\", \"eth\", \"ntilde\", \"ograve\", \"oacute\", \"ocircumflex\", \"otilde\", \"odieresis\", \"divide\", \"oslash\", \"ugrave\", \"uacute\", \"ucircumflex\", \"udieresis\", \"yacute\", \"thorn\", \"ydieresis\"];\nexports.WinAnsiEncoding = WinAnsiEncoding;\nconst SymbolSetEncoding = [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"space\", \"exclam\", \"universal\", \"numbersign\", \"existential\", \"percent\", \"ampersand\", \"suchthat\", \"parenleft\", \"parenright\", \"asteriskmath\", \"plus\", \"comma\", \"minus\", \"period\", \"slash\", \"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"colon\", \"semicolon\", \"less\", \"equal\", \"greater\", \"question\", \"congruent\", \"Alpha\", \"Beta\", \"Chi\", \"Delta\", \"Epsilon\", \"Phi\", \"Gamma\", \"Eta\", \"Iota\", \"theta1\", \"Kappa\", \"Lambda\", \"Mu\", \"Nu\", \"Omicron\", \"Pi\", \"Theta\", \"Rho\", \"Sigma\", \"Tau\", \"Upsilon\", \"sigma1\", \"Omega\", \"Xi\", \"Psi\", \"Zeta\", \"bracketleft\", \"therefore\", \"bracketright\", \"perpendicular\", \"underscore\", \"radicalex\", \"alpha\", \"beta\", \"chi\", \"delta\", \"epsilon\", \"phi\", \"gamma\", \"eta\", \"iota\", \"phi1\", \"kappa\", \"lambda\", \"mu\", \"nu\", \"omicron\", \"pi\", \"theta\", \"rho\", \"sigma\", \"tau\", \"upsilon\", \"omega1\", \"omega\", \"xi\", \"psi\", \"zeta\", \"braceleft\", \"bar\", \"braceright\", \"similar\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"Euro\", \"Upsilon1\", \"minute\", \"lessequal\", \"fraction\", \"infinity\", \"florin\", \"club\", \"diamond\", \"heart\", \"spade\", \"arrowboth\", \"arrowleft\", \"arrowup\", \"arrowright\", \"arrowdown\", \"degree\", \"plusminus\", \"second\", \"greaterequal\", \"multiply\", \"proportional\", \"partialdiff\", \"bullet\", \"divide\", \"notequal\", \"equivalence\", \"approxequal\", \"ellipsis\", \"arrowvertex\", \"arrowhorizex\", \"carriagereturn\", \"aleph\", \"Ifraktur\", \"Rfraktur\", \"weierstrass\", \"circlemultiply\", \"circleplus\", \"emptyset\", \"intersection\", \"union\", \"propersuperset\", \"reflexsuperset\", \"notsubset\", \"propersubset\", \"reflexsubset\", \"element\", \"notelement\", \"angle\", \"gradient\", \"registerserif\", \"copyrightserif\", \"trademarkserif\", \"product\", \"radical\", \"dotmath\", \"logicalnot\", \"logicaland\", \"logicalor\", \"arrowdblboth\", \"arrowdblleft\", \"arrowdblup\", \"arrowdblright\", \"arrowdbldown\", \"lozenge\", \"angleleft\", \"registersans\", \"copyrightsans\", \"trademarksans\", \"summation\", \"parenlefttp\", \"parenleftex\", \"parenleftbt\", \"bracketlefttp\", \"bracketleftex\", \"bracketleftbt\", \"bracelefttp\", \"braceleftmid\", \"braceleftbt\", \"braceex\", \"\", \"angleright\", \"integral\", \"integraltp\", \"integralex\", \"integralbt\", \"parenrighttp\", \"parenrightex\", \"parenrightbt\", \"bracketrighttp\", \"bracketrightex\", \"bracketrightbt\", \"bracerighttp\", \"bracerightmid\", \"bracerightbt\", \"\"];\nexports.SymbolSetEncoding = SymbolSetEncoding;\nconst ZapfDingbatsEncoding = [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"space\", \"a1\", \"a2\", \"a202\", \"a3\", \"a4\", \"a5\", \"a119\", \"a118\", \"a117\", \"a11\", \"a12\", \"a13\", \"a14\", \"a15\", \"a16\", \"a105\", \"a17\", \"a18\", \"a19\", \"a20\", \"a21\", \"a22\", \"a23\", \"a24\", \"a25\", \"a26\", \"a27\", \"a28\", \"a6\", \"a7\", \"a8\", \"a9\", \"a10\", \"a29\", \"a30\", \"a31\", \"a32\", \"a33\", \"a34\", \"a35\", \"a36\", \"a37\", \"a38\", \"a39\", \"a40\", \"a41\", \"a42\", \"a43\", \"a44\", \"a45\", \"a46\", \"a47\", \"a48\", \"a49\", \"a50\", \"a51\", \"a52\", \"a53\", \"a54\", \"a55\", \"a56\", \"a57\", \"a58\", \"a59\", \"a60\", \"a61\", \"a62\", \"a63\", \"a64\", \"a65\", \"a66\", \"a67\", \"a68\", \"a69\", \"a70\", \"a71\", \"a72\", \"a73\", \"a74\", \"a203\", \"a75\", \"a204\", \"a76\", \"a77\", \"a78\", \"a79\", \"a81\", \"a82\", \"a83\", \"a84\", \"a97\", \"a98\", \"a99\", \"a100\", \"\", \"a89\", \"a90\", \"a93\", \"a94\", \"a91\", \"a92\", \"a205\", \"a85\", \"a206\", \"a86\", \"a87\", \"a88\", \"a95\", \"a96\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"a101\", \"a102\", \"a103\", \"a104\", \"a106\", \"a107\", \"a108\", \"a112\", \"a111\", \"a110\", \"a109\", \"a120\", \"a121\", \"a122\", \"a123\", \"a124\", \"a125\", \"a126\", \"a127\", \"a128\", \"a129\", \"a130\", \"a131\", \"a132\", \"a133\", \"a134\", \"a135\", \"a136\", \"a137\", \"a138\", \"a139\", \"a140\", \"a141\", \"a142\", \"a143\", \"a144\", \"a145\", \"a146\", \"a147\", \"a148\", \"a149\", \"a150\", \"a151\", \"a152\", \"a153\", \"a154\", \"a155\", \"a156\", \"a157\", \"a158\", \"a159\", \"a160\", \"a161\", \"a163\", \"a164\", \"a196\", \"a165\", \"a192\", \"a166\", \"a167\", \"a168\", \"a169\", \"a170\", \"a171\", \"a172\", \"a173\", \"a162\", \"a174\", \"a175\", \"a176\", \"a177\", \"a178\", \"a179\", \"a193\", \"a180\", \"a199\", \"a181\", \"a200\", \"a182\", \"\", \"a201\", \"a183\", \"a184\", \"a197\", \"a185\", \"a194\", \"a198\", \"a186\", \"a195\", \"a187\", \"a188\", \"a189\", \"a190\", \"a191\", \"\"];\nexports.ZapfDingbatsEncoding = ZapfDingbatsEncoding;\n\nfunction getEncoding(encodingName) {\n  switch (encodingName) {\n    case \"WinAnsiEncoding\":\n      return WinAnsiEncoding;\n\n    case \"StandardEncoding\":\n      return StandardEncoding;\n\n    case \"MacRomanEncoding\":\n      return MacRomanEncoding;\n\n    case \"SymbolSetEncoding\":\n      return SymbolSetEncoding;\n\n    case \"ZapfDingbatsEncoding\":\n      return ZapfDingbatsEncoding;\n\n    case \"ExpertEncoding\":\n      return ExpertEncoding;\n\n    case \"MacExpertEncoding\":\n      return MacExpertEncoding;\n\n    default:\n      return null;\n  }\n}\n\n/***/ }),\n/* 33 */\n/***/ ((__unused_webpack_module, __webpack_exports__, __w_pdfjs_require__) => {\n\n__w_pdfjs_require__.r(__webpack_exports__);\n/* harmony export */ __w_pdfjs_require__.d(__webpack_exports__, {\n/* harmony export */   \"getDingbatsGlyphsUnicode\": () => /* binding */ getDingbatsGlyphsUnicode,\n/* harmony export */   \"getGlyphsUnicode\": () => /* binding */ getGlyphsUnicode\n/* harmony export */ });\n/* harmony import */ var _core_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __w_pdfjs_require__(8);\n\nvar getGlyphsUnicode = (0,_core_utils_js__WEBPACK_IMPORTED_MODULE_0__.getArrayLookupTableFactory)(function () {\n return [\n  \"A\",\n  0x0041,\n  \"AE\",\n  0x00c6,\n  \"AEacute\",\n  0x01fc,\n  \"AEmacron\",\n  0x01e2,\n  \"AEsmall\",\n  0xf7e6,\n  \"Aacute\",\n  0x00c1,\n  \"Aacutesmall\",\n  0xf7e1,\n  \"Abreve\",\n  0x0102,\n  \"Abreveacute\",\n  0x1eae,\n  \"Abrevecyrillic\",\n  0x04d0,\n  \"Abrevedotbelow\",\n  0x1eb6,\n  \"Abrevegrave\",\n  0x1eb0,\n  \"Abrevehookabove\",\n  0x1eb2,\n  \"Abrevetilde\",\n  0x1eb4,\n  \"Acaron\",\n  0x01cd,\n  \"Acircle\",\n  0x24b6,\n  \"Acircumflex\",\n  0x00c2,\n  \"Acircumflexacute\",\n  0x1ea4,\n  \"Acircumflexdotbelow\",\n  0x1eac,\n  \"Acircumflexgrave\",\n  0x1ea6,\n  \"Acircumflexhookabove\",\n  0x1ea8,\n  \"Acircumflexsmall\",\n  0xf7e2,\n  \"Acircumflextilde\",\n  0x1eaa,\n  \"Acute\",\n  0xf6c9,\n  \"Acutesmall\",\n  0xf7b4,\n  \"Acyrillic\",\n  0x0410,\n  \"Adblgrave\",\n  0x0200,\n  \"Adieresis\",\n  0x00c4,\n  \"Adieresiscyrillic\",\n  0x04d2,\n  \"Adieresismacron\",\n  0x01de,\n  \"Adieresissmall\",\n  0xf7e4,\n  \"Adotbelow\",\n  0x1ea0,\n  \"Adotmacron\",\n  0x01e0,\n  \"Agrave\",\n  0x00c0,\n  \"Agravesmall\",\n  0xf7e0,\n  \"Ahookabove\",\n  0x1ea2,\n  \"Aiecyrillic\",\n  0x04d4,\n  \"Ainvertedbreve\",\n  0x0202,\n  \"Alpha\",\n  0x0391,\n  \"Alphatonos\",\n  0x0386,\n  \"Amacron\",\n  0x0100,\n  \"Amonospace\",\n  0xff21,\n  \"Aogonek\",\n  0x0104,\n  \"Aring\",\n  0x00c5,\n  \"Aringacute\",\n  0x01fa,\n  \"Aringbelow\",\n  0x1e00,\n  \"Aringsmall\",\n  0xf7e5,\n  \"Asmall\",\n  0xf761,\n  \"Atilde\",\n  0x00c3,\n  \"Atildesmall\",\n  0xf7e3,\n  \"Aybarmenian\",\n  0x0531,\n  \"B\",\n  0x0042,\n  \"Bcircle\",\n  0x24b7,\n  \"Bdotaccent\",\n  0x1e02,\n  \"Bdotbelow\",\n  0x1e04,\n  \"Becyrillic\",\n  0x0411,\n  \"Benarmenian\",\n  0x0532,\n  \"Beta\",\n  0x0392,\n  \"Bhook\",\n  0x0181,\n  \"Blinebelow\",\n  0x1e06,\n  \"Bmonospace\",\n  0xff22,\n  \"Brevesmall\",\n  0xf6f4,\n  \"Bsmall\",\n  0xf762,\n  \"Btopbar\",\n  0x0182,\n  \"C\",\n  0x0043,\n  \"Caarmenian\",\n  0x053e,\n  \"Cacute\",\n  0x0106,\n  \"Caron\",\n  0xf6ca,\n  \"Caronsmall\",\n  0xf6f5,\n  \"Ccaron\",\n  0x010c,\n  \"Ccedilla\",\n  0x00c7,\n  \"Ccedillaacute\",\n  0x1e08,\n  \"Ccedillasmall\",\n  0xf7e7,\n  \"Ccircle\",\n  0x24b8,\n  \"Ccircumflex\",\n  0x0108,\n  \"Cdot\",\n  0x010a,\n  \"Cdotaccent\",\n  0x010a,\n  \"Cedillasmall\",\n  0xf7b8,\n  \"Chaarmenian\",\n  0x0549,\n  \"Cheabkhasiancyrillic\",\n  0x04bc,\n  \"Checyrillic\",\n  0x0427,\n  \"Chedescenderabkhasiancyrillic\",\n  0x04be,\n  \"Chedescendercyrillic\",\n  0x04b6,\n  \"Chedieresiscyrillic\",\n  0x04f4,\n  \"Cheharmenian\",\n  0x0543,\n  \"Chekhakassiancyrillic\",\n  0x04cb,\n  \"Cheverticalstrokecyrillic\",\n  0x04b8,\n  \"Chi\",\n  0x03a7,\n  \"Chook\",\n  0x0187,\n  \"Circumflexsmall\",\n  0xf6f6,\n  \"Cmonospace\",\n  0xff23,\n  \"Coarmenian\",\n  0x0551,\n  \"Csmall\",\n  0xf763,\n  \"D\",\n  0x0044,\n  \"DZ\",\n  0x01f1,\n  \"DZcaron\",\n  0x01c4,\n  \"Daarmenian\",\n  0x0534,\n  \"Dafrican\",\n  0x0189,\n  \"Dcaron\",\n  0x010e,\n  \"Dcedilla\",\n  0x1e10,\n  \"Dcircle\",\n  0x24b9,\n  \"Dcircumflexbelow\",\n  0x1e12,\n  \"Dcroat\",\n  0x0110,\n  \"Ddotaccent\",\n  0x1e0a,\n  \"Ddotbelow\",\n  0x1e0c,\n  \"Decyrillic\",\n  0x0414,\n  \"Deicoptic\",\n  0x03ee,\n  \"Delta\",\n  0x2206,\n  \"Deltagreek\",\n  0x0394,\n  \"Dhook\",\n  0x018a,\n  \"Dieresis\",\n  0xf6cb,\n  \"DieresisAcute\",\n  0xf6cc,\n  \"DieresisGrave\",\n  0xf6cd,\n  \"Dieresissmall\",\n  0xf7a8,\n  \"Digammagreek\",\n  0x03dc,\n  \"Djecyrillic\",\n  0x0402,\n  \"Dlinebelow\",\n  0x1e0e,\n  \"Dmonospace\",\n  0xff24,\n  \"Dotaccentsmall\",\n  0xf6f7,\n  \"Dslash\",\n  0x0110,\n  \"Dsmall\",\n  0xf764,\n  \"Dtopbar\",\n  0x018b,\n  \"Dz\",\n  0x01f2,\n  \"Dzcaron\",\n  0x01c5,\n  \"Dzeabkhasiancyrillic\",\n  0x04e0,\n  \"Dzecyrillic\",\n  0x0405,\n  \"Dzhecyrillic\",\n  0x040f,\n  \"E\",\n  0x0045,\n  \"Eacute\",\n  0x00c9,\n  \"Eacutesmall\",\n  0xf7e9,\n  \"Ebreve\",\n  0x0114,\n  \"Ecaron\",\n  0x011a,\n  \"Ecedillabreve\",\n  0x1e1c,\n  \"Echarmenian\",\n  0x0535,\n  \"Ecircle\",\n  0x24ba,\n  \"Ecircumflex\",\n  0x00ca,\n  \"Ecircumflexacute\",\n  0x1ebe,\n  \"Ecircumflexbelow\",\n  0x1e18,\n  \"Ecircumflexdotbelow\",\n  0x1ec6,\n  \"Ecircumflexgrave\",\n  0x1ec0,\n  \"Ecircumflexhookabove\",\n  0x1ec2,\n  \"Ecircumflexsmall\",\n  0xf7ea,\n  \"Ecircumflextilde\",\n  0x1ec4,\n  \"Ecyrillic\",\n  0x0404,\n  \"Edblgrave\",\n  0x0204,\n  \"Edieresis\",\n  0x00cb,\n  \"Edieresissmall\",\n  0xf7eb,\n  \"Edot\",\n  0x0116,\n  \"Edotaccent\",\n  0x0116,\n  \"Edotbelow\",\n  0x1eb8,\n  \"Efcyrillic\",\n  0x0424,\n  \"Egrave\",\n  0x00c8,\n  \"Egravesmall\",\n  0xf7e8,\n  \"Eharmenian\",\n  0x0537,\n  \"Ehookabove\",\n  0x1eba,\n  \"Eightroman\",\n  0x2167,\n  \"Einvertedbreve\",\n  0x0206,\n  \"Eiotifiedcyrillic\",\n  0x0464,\n  \"Elcyrillic\",\n  0x041b,\n  \"Elevenroman\",\n  0x216a,\n  \"Emacron\",\n  0x0112,\n  \"Emacronacute\",\n  0x1e16,\n  \"Emacrongrave\",\n  0x1e14,\n  \"Emcyrillic\",\n  0x041c,\n  \"Emonospace\",\n  0xff25,\n  \"Encyrillic\",\n  0x041d,\n  \"Endescendercyrillic\",\n  0x04a2,\n  \"Eng\",\n  0x014a,\n  \"Enghecyrillic\",\n  0x04a4,\n  \"Enhookcyrillic\",\n  0x04c7,\n  \"Eogonek\",\n  0x0118,\n  \"Eopen\",\n  0x0190,\n  \"Epsilon\",\n  0x0395,\n  \"Epsilontonos\",\n  0x0388,\n  \"Ercyrillic\",\n  0x0420,\n  \"Ereversed\",\n  0x018e,\n  \"Ereversedcyrillic\",\n  0x042d,\n  \"Escyrillic\",\n  0x0421,\n  \"Esdescendercyrillic\",\n  0x04aa,\n  \"Esh\",\n  0x01a9,\n  \"Esmall\",\n  0xf765,\n  \"Eta\",\n  0x0397,\n  \"Etarmenian\",\n  0x0538,\n  \"Etatonos\",\n  0x0389,\n  \"Eth\",\n  0x00d0,\n  \"Ethsmall\",\n  0xf7f0,\n  \"Etilde\",\n  0x1ebc,\n  \"Etildebelow\",\n  0x1e1a,\n  \"Euro\",\n  0x20ac,\n  \"Ezh\",\n  0x01b7,\n  \"Ezhcaron\",\n  0x01ee,\n  \"Ezhreversed\",\n  0x01b8,\n  \"F\",\n  0x0046,\n  \"Fcircle\",\n  0x24bb,\n  \"Fdotaccent\",\n  0x1e1e,\n  \"Feharmenian\",\n  0x0556,\n  \"Feicoptic\",\n  0x03e4,\n  \"Fhook\",\n  0x0191,\n  \"Fitacyrillic\",\n  0x0472,\n  \"Fiveroman\",\n  0x2164,\n  \"Fmonospace\",\n  0xff26,\n  \"Fourroman\",\n  0x2163,\n  \"Fsmall\",\n  0xf766,\n  \"G\",\n  0x0047,\n  \"GBsquare\",\n  0x3387,\n  \"Gacute\",\n  0x01f4,\n  \"Gamma\",\n  0x0393,\n  \"Gammaafrican\",\n  0x0194,\n  \"Gangiacoptic\",\n  0x03ea,\n  \"Gbreve\",\n  0x011e,\n  \"Gcaron\",\n  0x01e6,\n  \"Gcedilla\",\n  0x0122,\n  \"Gcircle\",\n  0x24bc,\n  \"Gcircumflex\",\n  0x011c,\n  \"Gcommaaccent\",\n  0x0122,\n  \"Gdot\",\n  0x0120,\n  \"Gdotaccent\",\n  0x0120,\n  \"Gecyrillic\",\n  0x0413,\n  \"Ghadarmenian\",\n  0x0542,\n  \"Ghemiddlehookcyrillic\",\n  0x0494,\n  \"Ghestrokecyrillic\",\n  0x0492,\n  \"Gheupturncyrillic\",\n  0x0490,\n  \"Ghook\",\n  0x0193,\n  \"Gimarmenian\",\n  0x0533,\n  \"Gjecyrillic\",\n  0x0403,\n  \"Gmacron\",\n  0x1e20,\n  \"Gmonospace\",\n  0xff27,\n  \"Grave\",\n  0xf6ce,\n  \"Gravesmall\",\n  0xf760,\n  \"Gsmall\",\n  0xf767,\n  \"Gsmallhook\",\n  0x029b,\n  \"Gstroke\",\n  0x01e4,\n  \"H\",\n  0x0048,\n  \"H18533\",\n  0x25cf,\n  \"H18543\",\n  0x25aa,\n  \"H18551\",\n  0x25ab,\n  \"H22073\",\n  0x25a1,\n  \"HPsquare\",\n  0x33cb,\n  \"Haabkhasiancyrillic\",\n  0x04a8,\n  \"Hadescendercyrillic\",\n  0x04b2,\n  \"Hardsigncyrillic\",\n  0x042a,\n  \"Hbar\",\n  0x0126,\n  \"Hbrevebelow\",\n  0x1e2a,\n  \"Hcedilla\",\n  0x1e28,\n  \"Hcircle\",\n  0x24bd,\n  \"Hcircumflex\",\n  0x0124,\n  \"Hdieresis\",\n  0x1e26,\n  \"Hdotaccent\",\n  0x1e22,\n  \"Hdotbelow\",\n  0x1e24,\n  \"Hmonospace\",\n  0xff28,\n  \"Hoarmenian\",\n  0x0540,\n  \"Horicoptic\",\n  0x03e8,\n  \"Hsmall\",\n  0xf768,\n  \"Hungarumlaut\",\n  0xf6cf,\n  \"Hungarumlautsmall\",\n  0xf6f8,\n  \"Hzsquare\",\n  0x3390,\n  \"I\",\n  0x0049,\n  \"IAcyrillic\",\n  0x042f,\n  \"IJ\",\n  0x0132,\n  \"IUcyrillic\",\n  0x042e,\n  \"Iacute\",\n  0x00cd,\n  \"Iacutesmall\",\n  0xf7ed,\n  \"Ibreve\",\n  0x012c,\n  \"Icaron\",\n  0x01cf,\n  \"Icircle\",\n  0x24be,\n  \"Icircumflex\",\n  0x00ce,\n  \"Icircumflexsmall\",\n  0xf7ee,\n  \"Icyrillic\",\n  0x0406,\n  \"Idblgrave\",\n  0x0208,\n  \"Idieresis\",\n  0x00cf,\n  \"Idieresisacute\",\n  0x1e2e,\n  \"Idieresiscyrillic\",\n  0x04e4,\n  \"Idieresissmall\",\n  0xf7ef,\n  \"Idot\",\n  0x0130,\n  \"Idotaccent\",\n  0x0130,\n  \"Idotbelow\",\n  0x1eca,\n  \"Iebrevecyrillic\",\n  0x04d6,\n  \"Iecyrillic\",\n  0x0415,\n  \"Ifraktur\",\n  0x2111,\n  \"Igrave\",\n  0x00cc,\n  \"Igravesmall\",\n  0xf7ec,\n  \"Ihookabove\",\n  0x1ec8,\n  \"Iicyrillic\",\n  0x0418,\n  \"Iinvertedbreve\",\n  0x020a,\n  \"Iishortcyrillic\",\n  0x0419,\n  \"Imacron\",\n  0x012a,\n  \"Imacroncyrillic\",\n  0x04e2,\n  \"Imonospace\",\n  0xff29,\n  \"Iniarmenian\",\n  0x053b,\n  \"Iocyrillic\",\n  0x0401,\n  \"Iogonek\",\n  0x012e,\n  \"Iota\",\n  0x0399,\n  \"Iotaafrican\",\n  0x0196,\n  \"Iotadieresis\",\n  0x03aa,\n  \"Iotatonos\",\n  0x038a,\n  \"Ismall\",\n  0xf769,\n  \"Istroke\",\n  0x0197,\n  \"Itilde\",\n  0x0128,\n  \"Itildebelow\",\n  0x1e2c,\n  \"Izhitsacyrillic\",\n  0x0474,\n  \"Izhitsadblgravecyrillic\",\n  0x0476,\n  \"J\",\n  0x004a,\n  \"Jaarmenian\",\n  0x0541,\n  \"Jcircle\",\n  0x24bf,\n  \"Jcircumflex\",\n  0x0134,\n  \"Jecyrillic\",\n  0x0408,\n  \"Jheharmenian\",\n  0x054b,\n  \"Jmonospace\",\n  0xff2a,\n  \"Jsmall\",\n  0xf76a,\n  \"K\",\n  0x004b,\n  \"KBsquare\",\n  0x3385,\n  \"KKsquare\",\n  0x33cd,\n  \"Kabashkircyrillic\",\n  0x04a0,\n  \"Kacute\",\n  0x1e30,\n  \"Kacyrillic\",\n  0x041a,\n  \"Kadescendercyrillic\",\n  0x049a,\n  \"Kahookcyrillic\",\n  0x04c3,\n  \"Kappa\",\n  0x039a,\n  \"Kastrokecyrillic\",\n  0x049e,\n  \"Kaverticalstrokecyrillic\",\n  0x049c,\n  \"Kcaron\",\n  0x01e8,\n  \"Kcedilla\",\n  0x0136,\n  \"Kcircle\",\n  0x24c0,\n  \"Kcommaaccent\",\n  0x0136,\n  \"Kdotbelow\",\n  0x1e32,\n  \"Keharmenian\",\n  0x0554,\n  \"Kenarmenian\",\n  0x053f,\n  \"Khacyrillic\",\n  0x0425,\n  \"Kheicoptic\",\n  0x03e6,\n  \"Khook\",\n  0x0198,\n  \"Kjecyrillic\",\n  0x040c,\n  \"Klinebelow\",\n  0x1e34,\n  \"Kmonospace\",\n  0xff2b,\n  \"Koppacyrillic\",\n  0x0480,\n  \"Koppagreek\",\n  0x03de,\n  \"Ksicyrillic\",\n  0x046e,\n  \"Ksmall\",\n  0xf76b,\n  \"L\",\n  0x004c,\n  \"LJ\",\n  0x01c7,\n  \"LL\",\n  0xf6bf,\n  \"Lacute\",\n  0x0139,\n  \"Lambda\",\n  0x039b,\n  \"Lcaron\",\n  0x013d,\n  \"Lcedilla\",\n  0x013b,\n  \"Lcircle\",\n  0x24c1,\n  \"Lcircumflexbelow\",\n  0x1e3c,\n  \"Lcommaaccent\",\n  0x013b,\n  \"Ldot\",\n  0x013f,\n  \"Ldotaccent\",\n  0x013f,\n  \"Ldotbelow\",\n  0x1e36,\n  \"Ldotbelowmacron\",\n  0x1e38,\n  \"Liwnarmenian\",\n  0x053c,\n  \"Lj\",\n  0x01c8,\n  \"Ljecyrillic\",\n  0x0409,\n  \"Llinebelow\",\n  0x1e3a,\n  \"Lmonospace\",\n  0xff2c,\n  \"Lslash\",\n  0x0141,\n  \"Lslashsmall\",\n  0xf6f9,\n  \"Lsmall\",\n  0xf76c,\n  \"M\",\n  0x004d,\n  \"MBsquare\",\n  0x3386,\n  \"Macron\",\n  0xf6d0,\n  \"Macronsmall\",\n  0xf7af,\n  \"Macute\",\n  0x1e3e,\n  \"Mcircle\",\n  0x24c2,\n  \"Mdotaccent\",\n  0x1e40,\n  \"Mdotbelow\",\n  0x1e42,\n  \"Menarmenian\",\n  0x0544,\n  \"Mmonospace\",\n  0xff2d,\n  \"Msmall\",\n  0xf76d,\n  \"Mturned\",\n  0x019c,\n  \"Mu\",\n  0x039c,\n  \"N\",\n  0x004e,\n  \"NJ\",\n  0x01ca,\n  \"Nacute\",\n  0x0143,\n  \"Ncaron\",\n  0x0147,\n  \"Ncedilla\",\n  0x0145,\n  \"Ncircle\",\n  0x24c3,\n  \"Ncircumflexbelow\",\n  0x1e4a,\n  \"Ncommaaccent\",\n  0x0145,\n  \"Ndotaccent\",\n  0x1e44,\n  \"Ndotbelow\",\n  0x1e46,\n  \"Nhookleft\",\n  0x019d,\n  \"Nineroman\",\n  0x2168,\n  \"Nj\",\n  0x01cb,\n  \"Njecyrillic\",\n  0x040a,\n  \"Nlinebelow\",\n  0x1e48,\n  \"Nmonospace\",\n  0xff2e,\n  \"Nowarmenian\",\n  0x0546,\n  \"Nsmall\",\n  0xf76e,\n  \"Ntilde\",\n  0x00d1,\n  \"Ntildesmall\",\n  0xf7f1,\n  \"Nu\",\n  0x039d,\n  \"O\",\n  0x004f,\n  \"OE\",\n  0x0152,\n  \"OEsmall\",\n  0xf6fa,\n  \"Oacute\",\n  0x00d3,\n  \"Oacutesmall\",\n  0xf7f3,\n  \"Obarredcyrillic\",\n  0x04e8,\n  \"Obarreddieresiscyrillic\",\n  0x04ea,\n  \"Obreve\",\n  0x014e,\n  \"Ocaron\",\n  0x01d1,\n  \"Ocenteredtilde\",\n  0x019f,\n  \"Ocircle\",\n  0x24c4,\n  \"Ocircumflex\",\n  0x00d4,\n  \"Ocircumflexacute\",\n  0x1ed0,\n  \"Ocircumflexdotbelow\",\n  0x1ed8,\n  \"Ocircumflexgrave\",\n  0x1ed2,\n  \"Ocircumflexhookabove\",\n  0x1ed4,\n  \"Ocircumflexsmall\",\n  0xf7f4,\n  \"Ocircumflextilde\",\n  0x1ed6,\n  \"Ocyrillic\",\n  0x041e,\n  \"Odblacute\",\n  0x0150,\n  \"Odblgrave\",\n  0x020c,\n  \"Odieresis\",\n  0x00d6,\n  \"Odieresiscyrillic\",\n  0x04e6,\n  \"Odieresissmall\",\n  0xf7f6,\n  \"Odotbelow\",\n  0x1ecc,\n  \"Ogoneksmall\",\n  0xf6fb,\n  \"Ograve\",\n  0x00d2,\n  \"Ogravesmall\",\n  0xf7f2,\n  \"Oharmenian\",\n  0x0555,\n  \"Ohm\",\n  0x2126,\n  \"Ohookabove\",\n  0x1ece,\n  \"Ohorn\",\n  0x01a0,\n  \"Ohornacute\",\n  0x1eda,\n  \"Ohorndotbelow\",\n  0x1ee2,\n  \"Ohorngrave\",\n  0x1edc,\n  \"Ohornhookabove\",\n  0x1ede,\n  \"Ohorntilde\",\n  0x1ee0,\n  \"Ohungarumlaut\",\n  0x0150,\n  \"Oi\",\n  0x01a2,\n  \"Oinvertedbreve\",\n  0x020e,\n  \"Omacron\",\n  0x014c,\n  \"Omacronacute\",\n  0x1e52,\n  \"Omacrongrave\",\n  0x1e50,\n  \"Omega\",\n  0x2126,\n  \"Omegacyrillic\",\n  0x0460,\n  \"Omegagreek\",\n  0x03a9,\n  \"Omegaroundcyrillic\",\n  0x047a,\n  \"Omegatitlocyrillic\",\n  0x047c,\n  \"Omegatonos\",\n  0x038f,\n  \"Omicron\",\n  0x039f,\n  \"Omicrontonos\",\n  0x038c,\n  \"Omonospace\",\n  0xff2f,\n  \"Oneroman\",\n  0x2160,\n  \"Oogonek\",\n  0x01ea,\n  \"Oogonekmacron\",\n  0x01ec,\n  \"Oopen\",\n  0x0186,\n  \"Oslash\",\n  0x00d8,\n  \"Oslashacute\",\n  0x01fe,\n  \"Oslashsmall\",\n  0xf7f8,\n  \"Osmall\",\n  0xf76f,\n  \"Ostrokeacute\",\n  0x01fe,\n  \"Otcyrillic\",\n  0x047e,\n  \"Otilde\",\n  0x00d5,\n  \"Otildeacute\",\n  0x1e4c,\n  \"Otildedieresis\",\n  0x1e4e,\n  \"Otildesmall\",\n  0xf7f5,\n  \"P\",\n  0x0050,\n  \"Pacute\",\n  0x1e54,\n  \"Pcircle\",\n  0x24c5,\n  \"Pdotaccent\",\n  0x1e56,\n  \"Pecyrillic\",\n  0x041f,\n  \"Peharmenian\",\n  0x054a,\n  \"Pemiddlehookcyrillic\",\n  0x04a6,\n  \"Phi\",\n  0x03a6,\n  \"Phook\",\n  0x01a4,\n  \"Pi\",\n  0x03a0,\n  \"Piwrarmenian\",\n  0x0553,\n  \"Pmonospace\",\n  0xff30,\n  \"Psi\",\n  0x03a8,\n  \"Psicyrillic\",\n  0x0470,\n  \"Psmall\",\n  0xf770,\n  \"Q\",\n  0x0051,\n  \"Qcircle\",\n  0x24c6,\n  \"Qmonospace\",\n  0xff31,\n  \"Qsmall\",\n  0xf771,\n  \"R\",\n  0x0052,\n  \"Raarmenian\",\n  0x054c,\n  \"Racute\",\n  0x0154,\n  \"Rcaron\",\n  0x0158,\n  \"Rcedilla\",\n  0x0156,\n  \"Rcircle\",\n  0x24c7,\n  \"Rcommaaccent\",\n  0x0156,\n  \"Rdblgrave\",\n  0x0210,\n  \"Rdotaccent\",\n  0x1e58,\n  \"Rdotbelow\",\n  0x1e5a,\n  \"Rdotbelowmacron\",\n  0x1e5c,\n  \"Reharmenian\",\n  0x0550,\n  \"Rfraktur\",\n  0x211c,\n  \"Rho\",\n  0x03a1,\n  \"Ringsmall\",\n  0xf6fc,\n  \"Rinvertedbreve\",\n  0x0212,\n  \"Rlinebelow\",\n  0x1e5e,\n  \"Rmonospace\",\n  0xff32,\n  \"Rsmall\",\n  0xf772,\n  \"Rsmallinverted\",\n  0x0281,\n  \"Rsmallinvertedsuperior\",\n  0x02b6,\n  \"S\",\n  0x0053,\n  \"SF010000\",\n  0x250c,\n  \"SF020000\",\n  0x2514,\n  \"SF030000\",\n  0x2510,\n  \"SF040000\",\n  0x2518,\n  \"SF050000\",\n  0x253c,\n  \"SF060000\",\n  0x252c,\n  \"SF070000\",\n  0x2534,\n  \"SF080000\",\n  0x251c,\n  \"SF090000\",\n  0x2524,\n  \"SF100000\",\n  0x2500,\n  \"SF110000\",\n  0x2502,\n  \"SF190000\",\n  0x2561,\n  \"SF200000\",\n  0x2562,\n  \"SF210000\",\n  0x2556,\n  \"SF220000\",\n  0x2555,\n  \"SF230000\",\n  0x2563,\n  \"SF240000\",\n  0x2551,\n  \"SF250000\",\n  0x2557,\n  \"SF260000\",\n  0x255d,\n  \"SF270000\",\n  0x255c,\n  \"SF280000\",\n  0x255b,\n  \"SF360000\",\n  0x255e,\n  \"SF370000\",\n  0x255f,\n  \"SF380000\",\n  0x255a,\n  \"SF390000\",\n  0x2554,\n  \"SF400000\",\n  0x2569,\n  \"SF410000\",\n  0x2566,\n  \"SF420000\",\n  0x2560,\n  \"SF430000\",\n  0x2550,\n  \"SF440000\",\n  0x256c,\n  \"SF450000\",\n  0x2567,\n  \"SF460000\",\n  0x2568,\n  \"SF470000\",\n  0x2564,\n  \"SF480000\",\n  0x2565,\n  \"SF490000\",\n  0x2559,\n  \"SF500000\",\n  0x2558,\n  \"SF510000\",\n  0x2552,\n  \"SF520000\",\n  0x2553,\n  \"SF530000\",\n  0x256b,\n  \"SF540000\",\n  0x256a,\n  \"Sacute\",\n  0x015a,\n  \"Sacutedotaccent\",\n  0x1e64,\n  \"Sampigreek\",\n  0x03e0,\n  \"Scaron\",\n  0x0160,\n  \"Scarondotaccent\",\n  0x1e66,\n  \"Scaronsmall\",\n  0xf6fd,\n  \"Scedilla\",\n  0x015e,\n  \"Schwa\",\n  0x018f,\n  \"Schwacyrillic\",\n  0x04d8,\n  \"Schwadieresiscyrillic\",\n  0x04da,\n  \"Scircle\",\n  0x24c8,\n  \"Scircumflex\",\n  0x015c,\n  \"Scommaaccent\",\n  0x0218,\n  \"Sdotaccent\",\n  0x1e60,\n  \"Sdotbelow\",\n  0x1e62,\n  \"Sdotbelowdotaccent\",\n  0x1e68,\n  \"Seharmenian\",\n  0x054d,\n  \"Sevenroman\",\n  0x2166,\n  \"Shaarmenian\",\n  0x0547,\n  \"Shacyrillic\",\n  0x0428,\n  \"Shchacyrillic\",\n  0x0429,\n  \"Sheicoptic\",\n  0x03e2,\n  \"Shhacyrillic\",\n  0x04ba,\n  \"Shimacoptic\",\n  0x03ec,\n  \"Sigma\",\n  0x03a3,\n  \"Sixroman\",\n  0x2165,\n  \"Smonospace\",\n  0xff33,\n  \"Softsigncyrillic\",\n  0x042c,\n  \"Ssmall\",\n  0xf773,\n  \"Stigmagreek\",\n  0x03da,\n  \"T\",\n  0x0054,\n  \"Tau\",\n  0x03a4,\n  \"Tbar\",\n  0x0166,\n  \"Tcaron\",\n  0x0164,\n  \"Tcedilla\",\n  0x0162,\n  \"Tcircle\",\n  0x24c9,\n  \"Tcircumflexbelow\",\n  0x1e70,\n  \"Tcommaaccent\",\n  0x0162,\n  \"Tdotaccent\",\n  0x1e6a,\n  \"Tdotbelow\",\n  0x1e6c,\n  \"Tecyrillic\",\n  0x0422,\n  \"Tedescendercyrillic\",\n  0x04ac,\n  \"Tenroman\",\n  0x2169,\n  \"Tetsecyrillic\",\n  0x04b4,\n  \"Theta\",\n  0x0398,\n  \"Thook\",\n  0x01ac,\n  \"Thorn\",\n  0x00de,\n  \"Thornsmall\",\n  0xf7fe,\n  \"Threeroman\",\n  0x2162,\n  \"Tildesmall\",\n  0xf6fe,\n  \"Tiwnarmenian\",\n  0x054f,\n  \"Tlinebelow\",\n  0x1e6e,\n  \"Tmonospace\",\n  0xff34,\n  \"Toarmenian\",\n  0x0539,\n  \"Tonefive\",\n  0x01bc,\n  \"Tonesix\",\n  0x0184,\n  \"Tonetwo\",\n  0x01a7,\n  \"Tretroflexhook\",\n  0x01ae,\n  \"Tsecyrillic\",\n  0x0426,\n  \"Tshecyrillic\",\n  0x040b,\n  \"Tsmall\",\n  0xf774,\n  \"Twelveroman\",\n  0x216b,\n  \"Tworoman\",\n  0x2161,\n  \"U\",\n  0x0055,\n  \"Uacute\",\n  0x00da,\n  \"Uacutesmall\",\n  0xf7fa,\n  \"Ubreve\",\n  0x016c,\n  \"Ucaron\",\n  0x01d3,\n  \"Ucircle\",\n  0x24ca,\n  \"Ucircumflex\",\n  0x00db,\n  \"Ucircumflexbelow\",\n  0x1e76,\n  \"Ucircumflexsmall\",\n  0xf7fb,\n  \"Ucyrillic\",\n  0x0423,\n  \"Udblacute\",\n  0x0170,\n  \"Udblgrave\",\n  0x0214,\n  \"Udieresis\",\n  0x00dc,\n  \"Udieresisacute\",\n  0x01d7,\n  \"Udieresisbelow\",\n  0x1e72,\n  \"Udieresiscaron\",\n  0x01d9,\n  \"Udieresiscyrillic\",\n  0x04f0,\n  \"Udieresisgrave\",\n  0x01db,\n  \"Udieresismacron\",\n  0x01d5,\n  \"Udieresissmall\",\n  0xf7fc,\n  \"Udotbelow\",\n  0x1ee4,\n  \"Ugrave\",\n  0x00d9,\n  \"Ugravesmall\",\n  0xf7f9,\n  \"Uhookabove\",\n  0x1ee6,\n  \"Uhorn\",\n  0x01af,\n  \"Uhornacute\",\n  0x1ee8,\n  \"Uhorndotbelow\",\n  0x1ef0,\n  \"Uhorngrave\",\n  0x1eea,\n  \"Uhornhookabove\",\n  0x1eec,\n  \"Uhorntilde\",\n  0x1eee,\n  \"Uhungarumlaut\",\n  0x0170,\n  \"Uhungarumlautcyrillic\",\n  0x04f2,\n  \"Uinvertedbreve\",\n  0x0216,\n  \"Ukcyrillic\",\n  0x0478,\n  \"Umacron\",\n  0x016a,\n  \"Umacroncyrillic\",\n  0x04ee,\n  \"Umacrondieresis\",\n  0x1e7a,\n  \"Umonospace\",\n  0xff35,\n  \"Uogonek\",\n  0x0172,\n  \"Upsilon\",\n  0x03a5,\n  \"Upsilon1\",\n  0x03d2,\n  \"Upsilonacutehooksymbolgreek\",\n  0x03d3,\n  \"Upsilonafrican\",\n  0x01b1,\n  \"Upsilondieresis\",\n  0x03ab,\n  \"Upsilondieresishooksymbolgreek\",\n  0x03d4,\n  \"Upsilonhooksymbol\",\n  0x03d2,\n  \"Upsilontonos\",\n  0x038e,\n  \"Uring\",\n  0x016e,\n  \"Ushortcyrillic\",\n  0x040e,\n  \"Usmall\",\n  0xf775,\n  \"Ustraightcyrillic\",\n  0x04ae,\n  \"Ustraightstrokecyrillic\",\n  0x04b0,\n  \"Utilde\",\n  0x0168,\n  \"Utildeacute\",\n  0x1e78,\n  \"Utildebelow\",\n  0x1e74,\n  \"V\",\n  0x0056,\n  \"Vcircle\",\n  0x24cb,\n  \"Vdotbelow\",\n  0x1e7e,\n  \"Vecyrillic\",\n  0x0412,\n  \"Vewarmenian\",\n  0x054e,\n  \"Vhook\",\n  0x01b2,\n  \"Vmonospace\",\n  0xff36,\n  \"Voarmenian\",\n  0x0548,\n  \"Vsmall\",\n  0xf776,\n  \"Vtilde\",\n  0x1e7c,\n  \"W\",\n  0x0057,\n  \"Wacute\",\n  0x1e82,\n  \"Wcircle\",\n  0x24cc,\n  \"Wcircumflex\",\n  0x0174,\n  \"Wdieresis\",\n  0x1e84,\n  \"Wdotaccent\",\n  0x1e86,\n  \"Wdotbelow\",\n  0x1e88,\n  \"Wgrave\",\n  0x1e80,\n  \"Wmonospace\",\n  0xff37,\n  \"Wsmall\",\n  0xf777,\n  \"X\",\n  0x0058,\n  \"Xcircle\",\n  0x24cd,\n  \"Xdieresis\",\n  0x1e8c,\n  \"Xdotaccent\",\n  0x1e8a,\n  \"Xeharmenian\",\n  0x053d,\n  \"Xi\",\n  0x039e,\n  \"Xmonospace\",\n  0xff38,\n  \"Xsmall\",\n  0xf778,\n  \"Y\",\n  0x0059,\n  \"Yacute\",\n  0x00dd,\n  \"Yacutesmall\",\n  0xf7fd,\n  \"Yatcyrillic\",\n  0x0462,\n  \"Ycircle\",\n  0x24ce,\n  \"Ycircumflex\",\n  0x0176,\n  \"Ydieresis\",\n  0x0178,\n  \"Ydieresissmall\",\n  0xf7ff,\n  \"Ydotaccent\",\n  0x1e8e,\n  \"Ydotbelow\",\n  0x1ef4,\n  \"Yericyrillic\",\n  0x042b,\n  \"Yerudieresiscyrillic\",\n  0x04f8,\n  \"Ygrave\",\n  0x1ef2,\n  \"Yhook\",\n  0x01b3,\n  \"Yhookabove\",\n  0x1ef6,\n  \"Yiarmenian\",\n  0x0545,\n  \"Yicyrillic\",\n  0x0407,\n  \"Yiwnarmenian\",\n  0x0552,\n  \"Ymonospace\",\n  0xff39,\n  \"Ysmall\",\n  0xf779,\n  \"Ytilde\",\n  0x1ef8,\n  \"Yusbigcyrillic\",\n  0x046a,\n  \"Yusbigiotifiedcyrillic\",\n  0x046c,\n  \"Yuslittlecyrillic\",\n  0x0466,\n  \"Yuslittleiotifiedcyrillic\",\n  0x0468,\n  \"Z\",\n  0x005a,\n  \"Zaarmenian\",\n  0x0536,\n  \"Zacute\",\n  0x0179,\n  \"Zcaron\",\n  0x017d,\n  \"Zcaronsmall\",\n  0xf6ff,\n  \"Zcircle\",\n  0x24cf,\n  \"Zcircumflex\",\n  0x1e90,\n  \"Zdot\",\n  0x017b,\n  \"Zdotaccent\",\n  0x017b,\n  \"Zdotbelow\",\n  0x1e92,\n  \"Zecyrillic\",\n  0x0417,\n  \"Zedescendercyrillic\",\n  0x0498,\n  \"Zedieresiscyrillic\",\n  0x04de,\n  \"Zeta\",\n  0x0396,\n  \"Zhearmenian\",\n  0x053a,\n  \"Zhebrevecyrillic\",\n  0x04c1,\n  \"Zhecyrillic\",\n  0x0416,\n  \"Zhedescendercyrillic\",\n  0x0496,\n  \"Zhedieresiscyrillic\",\n  0x04dc,\n  \"Zlinebelow\",\n  0x1e94,\n  \"Zmonospace\",\n  0xff3a,\n  \"Zsmall\",\n  0xf77a,\n  \"Zstroke\",\n  0x01b5,\n  \"a\",\n  0x0061,\n  \"aabengali\",\n  0x0986,\n  \"aacute\",\n  0x00e1,\n  \"aadeva\",\n  0x0906,\n  \"aagujarati\",\n  0x0a86,\n  \"aagurmukhi\",\n  0x0a06,\n  \"aamatragurmukhi\",\n  0x0a3e,\n  \"aarusquare\",\n  0x3303,\n  \"aavowelsignbengali\",\n  0x09be,\n  \"aavowelsigndeva\",\n  0x093e,\n  \"aavowelsigngujarati\",\n  0x0abe,\n  \"abbreviationmarkarmenian\",\n  0x055f,\n  \"abbreviationsigndeva\",\n  0x0970,\n  \"abengali\",\n  0x0985,\n  \"abopomofo\",\n  0x311a,\n  \"abreve\",\n  0x0103,\n  \"abreveacute\",\n  0x1eaf,\n  \"abrevecyrillic\",\n  0x04d1,\n  \"abrevedotbelow\",\n  0x1eb7,\n  \"abrevegrave\",\n  0x1eb1,\n  \"abrevehookabove\",\n  0x1eb3,\n  \"abrevetilde\",\n  0x1eb5,\n  \"acaron\",\n  0x01ce,\n  \"acircle\",\n  0x24d0,\n  \"acircumflex\",\n  0x00e2,\n  \"acircumflexacute\",\n  0x1ea5,\n  \"acircumflexdotbelow\",\n  0x1ead,\n  \"acircumflexgrave\",\n  0x1ea7,\n  \"acircumflexhookabove\",\n  0x1ea9,\n  \"acircumflextilde\",\n  0x1eab,\n  \"acute\",\n  0x00b4,\n  \"acutebelowcmb\",\n  0x0317,\n  \"acutecmb\",\n  0x0301,\n  \"acutecomb\",\n  0x0301,\n  \"acutedeva\",\n  0x0954,\n  \"acutelowmod\",\n  0x02cf,\n  \"acutetonecmb\",\n  0x0341,\n  \"acyrillic\",\n  0x0430,\n  \"adblgrave\",\n  0x0201,\n  \"addakgurmukhi\",\n  0x0a71,\n  \"adeva\",\n  0x0905,\n  \"adieresis\",\n  0x00e4,\n  \"adieresiscyrillic\",\n  0x04d3,\n  \"adieresismacron\",\n  0x01df,\n  \"adotbelow\",\n  0x1ea1,\n  \"adotmacron\",\n  0x01e1,\n  \"ae\",\n  0x00e6,\n  \"aeacute\",\n  0x01fd,\n  \"aekorean\",\n  0x3150,\n  \"aemacron\",\n  0x01e3,\n  \"afii00208\",\n  0x2015,\n  \"afii08941\",\n  0x20a4,\n  \"afii10017\",\n  0x0410,\n  \"afii10018\",\n  0x0411,\n  \"afii10019\",\n  0x0412,\n  \"afii10020\",\n  0x0413,\n  \"afii10021\",\n  0x0414,\n  \"afii10022\",\n  0x0415,\n  \"afii10023\",\n  0x0401,\n  \"afii10024\",\n  0x0416,\n  \"afii10025\",\n  0x0417,\n  \"afii10026\",\n  0x0418,\n  \"afii10027\",\n  0x0419,\n  \"afii10028\",\n  0x041a,\n  \"afii10029\",\n  0x041b,\n  \"afii10030\",\n  0x041c,\n  \"afii10031\",\n  0x041d,\n  \"afii10032\",\n  0x041e,\n  \"afii10033\",\n  0x041f,\n  \"afii10034\",\n  0x0420,\n  \"afii10035\",\n  0x0421,\n  \"afii10036\",\n  0x0422,\n  \"afii10037\",\n  0x0423,\n  \"afii10038\",\n  0x0424,\n  \"afii10039\",\n  0x0425,\n  \"afii10040\",\n  0x0426,\n  \"afii10041\",\n  0x0427,\n  \"afii10042\",\n  0x0428,\n  \"afii10043\",\n  0x0429,\n  \"afii10044\",\n  0x042a,\n  \"afii10045\",\n  0x042b,\n  \"afii10046\",\n  0x042c,\n  \"afii10047\",\n  0x042d,\n  \"afii10048\",\n  0x042e,\n  \"afii10049\",\n  0x042f,\n  \"afii10050\",\n  0x0490,\n  \"afii10051\",\n  0x0402,\n  \"afii10052\",\n  0x0403,\n  \"afii10053\",\n  0x0404,\n  \"afii10054\",\n  0x0405,\n  \"afii10055\",\n  0x0406,\n  \"afii10056\",\n  0x0407,\n  \"afii10057\",\n  0x0408,\n  \"afii10058\",\n  0x0409,\n  \"afii10059\",\n  0x040a,\n  \"afii10060\",\n  0x040b,\n  \"afii10061\",\n  0x040c,\n  \"afii10062\",\n  0x040e,\n  \"afii10063\",\n  0xf6c4,\n  \"afii10064\",\n  0xf6c5,\n  \"afii10065\",\n  0x0430,\n  \"afii10066\",\n  0x0431,\n  \"afii10067\",\n  0x0432,\n  \"afii10068\",\n  0x0433,\n  \"afii10069\",\n  0x0434,\n  \"afii10070\",\n  0x0435,\n  \"afii10071\",\n  0x0451,\n  \"afii10072\",\n  0x0436,\n  \"afii10073\",\n  0x0437,\n  \"afii10074\",\n  0x0438,\n  \"afii10075\",\n  0x0439,\n  \"afii10076\",\n  0x043a,\n  \"afii10077\",\n  0x043b,\n  \"afii10078\",\n  0x043c,\n  \"afii10079\",\n  0x043d,\n  \"afii10080\",\n  0x043e,\n  \"afii10081\",\n  0x043f,\n  \"afii10082\",\n  0x0440,\n  \"afii10083\",\n  0x0441,\n  \"afii10084\",\n  0x0442,\n  \"afii10085\",\n  0x0443,\n  \"afii10086\",\n  0x0444,\n  \"afii10087\",\n  0x0445,\n  \"afii10088\",\n  0x0446,\n  \"afii10089\",\n  0x0447,\n  \"afii10090\",\n  0x0448,\n  \"afii10091\",\n  0x0449,\n  \"afii10092\",\n  0x044a,\n  \"afii10093\",\n  0x044b,\n  \"afii10094\",\n  0x044c,\n  \"afii10095\",\n  0x044d,\n  \"afii10096\",\n  0x044e,\n  \"afii10097\",\n  0x044f,\n  \"afii10098\",\n  0x0491,\n  \"afii10099\",\n  0x0452,\n  \"afii10100\",\n  0x0453,\n  \"afii10101\",\n  0x0454,\n  \"afii10102\",\n  0x0455,\n  \"afii10103\",\n  0x0456,\n  \"afii10104\",\n  0x0457,\n  \"afii10105\",\n  0x0458,\n  \"afii10106\",\n  0x0459,\n  \"afii10107\",\n  0x045a,\n  \"afii10108\",\n  0x045b,\n  \"afii10109\",\n  0x045c,\n  \"afii10110\",\n  0x045e,\n  \"afii10145\",\n  0x040f,\n  \"afii10146\",\n  0x0462,\n  \"afii10147\",\n  0x0472,\n  \"afii10148\",\n  0x0474,\n  \"afii10192\",\n  0xf6c6,\n  \"afii10193\",\n  0x045f,\n  \"afii10194\",\n  0x0463,\n  \"afii10195\",\n  0x0473,\n  \"afii10196\",\n  0x0475,\n  \"afii10831\",\n  0xf6c7,\n  \"afii10832\",\n  0xf6c8,\n  \"afii10846\",\n  0x04d9,\n  \"afii299\",\n  0x200e,\n  \"afii300\",\n  0x200f,\n  \"afii301\",\n  0x200d,\n  \"afii57381\",\n  0x066a,\n  \"afii57388\",\n  0x060c,\n  \"afii57392\",\n  0x0660,\n  \"afii57393\",\n  0x0661,\n  \"afii57394\",\n  0x0662,\n  \"afii57395\",\n  0x0663,\n  \"afii57396\",\n  0x0664,\n  \"afii57397\",\n  0x0665,\n  \"afii57398\",\n  0x0666,\n  \"afii57399\",\n  0x0667,\n  \"afii57400\",\n  0x0668,\n  \"afii57401\",\n  0x0669,\n  \"afii57403\",\n  0x061b,\n  \"afii57407\",\n  0x061f,\n  \"afii57409\",\n  0x0621,\n  \"afii57410\",\n  0x0622,\n  \"afii57411\",\n  0x0623,\n  \"afii57412\",\n  0x0624,\n  \"afii57413\",\n  0x0625,\n  \"afii57414\",\n  0x0626,\n  \"afii57415\",\n  0x0627,\n  \"afii57416\",\n  0x0628,\n  \"afii57417\",\n  0x0629,\n  \"afii57418\",\n  0x062a,\n  \"afii57419\",\n  0x062b,\n  \"afii57420\",\n  0x062c,\n  \"afii57421\",\n  0x062d,\n  \"afii57422\",\n  0x062e,\n  \"afii57423\",\n  0x062f,\n  \"afii57424\",\n  0x0630,\n  \"afii57425\",\n  0x0631,\n  \"afii57426\",\n  0x0632,\n  \"afii57427\",\n  0x0633,\n  \"afii57428\",\n  0x0634,\n  \"afii57429\",\n  0x0635,\n  \"afii57430\",\n  0x0636,\n  \"afii57431\",\n  0x0637,\n  \"afii57432\",\n  0x0638,\n  \"afii57433\",\n  0x0639,\n  \"afii57434\",\n  0x063a,\n  \"afii57440\",\n  0x0640,\n  \"afii57441\",\n  0x0641,\n  \"afii57442\",\n  0x0642,\n  \"afii57443\",\n  0x0643,\n  \"afii57444\",\n  0x0644,\n  \"afii57445\",\n  0x0645,\n  \"afii57446\",\n  0x0646,\n  \"afii57448\",\n  0x0648,\n  \"afii57449\",\n  0x0649,\n  \"afii57450\",\n  0x064a,\n  \"afii57451\",\n  0x064b,\n  \"afii57452\",\n  0x064c,\n  \"afii57453\",\n  0x064d,\n  \"afii57454\",\n  0x064e,\n  \"afii57455\",\n  0x064f,\n  \"afii57456\",\n  0x0650,\n  \"afii57457\",\n  0x0651,\n  \"afii57458\",\n  0x0652,\n  \"afii57470\",\n  0x0647,\n  \"afii57505\",\n  0x06a4,\n  \"afii57506\",\n  0x067e,\n  \"afii57507\",\n  0x0686,\n  \"afii57508\",\n  0x0698,\n  \"afii57509\",\n  0x06af,\n  \"afii57511\",\n  0x0679,\n  \"afii57512\",\n  0x0688,\n  \"afii57513\",\n  0x0691,\n  \"afii57514\",\n  0x06ba,\n  \"afii57519\",\n  0x06d2,\n  \"afii57534\",\n  0x06d5,\n  \"afii57636\",\n  0x20aa,\n  \"afii57645\",\n  0x05be,\n  \"afii57658\",\n  0x05c3,\n  \"afii57664\",\n  0x05d0,\n  \"afii57665\",\n  0x05d1,\n  \"afii57666\",\n  0x05d2,\n  \"afii57667\",\n  0x05d3,\n  \"afii57668\",\n  0x05d4,\n  \"afii57669\",\n  0x05d5,\n  \"afii57670\",\n  0x05d6,\n  \"afii57671\",\n  0x05d7,\n  \"afii57672\",\n  0x05d8,\n  \"afii57673\",\n  0x05d9,\n  \"afii57674\",\n  0x05da,\n  \"afii57675\",\n  0x05db,\n  \"afii57676\",\n  0x05dc,\n  \"afii57677\",\n  0x05dd,\n  \"afii57678\",\n  0x05de,\n  \"afii57679\",\n  0x05df,\n  \"afii57680\",\n  0x05e0,\n  \"afii57681\",\n  0x05e1,\n  \"afii57682\",\n  0x05e2,\n  \"afii57683\",\n  0x05e3,\n  \"afii57684\",\n  0x05e4,\n  \"afii57685\",\n  0x05e5,\n  \"afii57686\",\n  0x05e6,\n  \"afii57687\",\n  0x05e7,\n  \"afii57688\",\n  0x05e8,\n  \"afii57689\",\n  0x05e9,\n  \"afii57690\",\n  0x05ea,\n  \"afii57694\",\n  0xfb2a,\n  \"afii57695\",\n  0xfb2b,\n  \"afii57700\",\n  0xfb4b,\n  \"afii57705\",\n  0xfb1f,\n  \"afii57716\",\n  0x05f0,\n  \"afii57717\",\n  0x05f1,\n  \"afii57718\",\n  0x05f2,\n  \"afii57723\",\n  0xfb35,\n  \"afii57793\",\n  0x05b4,\n  \"afii57794\",\n  0x05b5,\n  \"afii57795\",\n  0x05b6,\n  \"afii57796\",\n  0x05bb,\n  \"afii57797\",\n  0x05b8,\n  \"afii57798\",\n  0x05b7,\n  \"afii57799\",\n  0x05b0,\n  \"afii57800\",\n  0x05b2,\n  \"afii57801\",\n  0x05b1,\n  \"afii57802\",\n  0x05b3,\n  \"afii57803\",\n  0x05c2,\n  \"afii57804\",\n  0x05c1,\n  \"afii57806\",\n  0x05b9,\n  \"afii57807\",\n  0x05bc,\n  \"afii57839\",\n  0x05bd,\n  \"afii57841\",\n  0x05bf,\n  \"afii57842\",\n  0x05c0,\n  \"afii57929\",\n  0x02bc,\n  \"afii61248\",\n  0x2105,\n  \"afii61289\",\n  0x2113,\n  \"afii61352\",\n  0x2116,\n  \"afii61573\",\n  0x202c,\n  \"afii61574\",\n  0x202d,\n  \"afii61575\",\n  0x202e,\n  \"afii61664\",\n  0x200c,\n  \"afii63167\",\n  0x066d,\n  \"afii64937\",\n  0x02bd,\n  \"agrave\",\n  0x00e0,\n  \"agujarati\",\n  0x0a85,\n  \"agurmukhi\",\n  0x0a05,\n  \"ahiragana\",\n  0x3042,\n  \"ahookabove\",\n  0x1ea3,\n  \"aibengali\",\n  0x0990,\n  \"aibopomofo\",\n  0x311e,\n  \"aideva\",\n  0x0910,\n  \"aiecyrillic\",\n  0x04d5,\n  \"aigujarati\",\n  0x0a90,\n  \"aigurmukhi\",\n  0x0a10,\n  \"aimatragurmukhi\",\n  0x0a48,\n  \"ainarabic\",\n  0x0639,\n  \"ainfinalarabic\",\n  0xfeca,\n  \"aininitialarabic\",\n  0xfecb,\n  \"ainmedialarabic\",\n  0xfecc,\n  \"ainvertedbreve\",\n  0x0203,\n  \"aivowelsignbengali\",\n  0x09c8,\n  \"aivowelsigndeva\",\n  0x0948,\n  \"aivowelsigngujarati\",\n  0x0ac8,\n  \"akatakana\",\n  0x30a2,\n  \"akatakanahalfwidth\",\n  0xff71,\n  \"akorean\",\n  0x314f,\n  \"alef\",\n  0x05d0,\n  \"alefarabic\",\n  0x0627,\n  \"alefdageshhebrew\",\n  0xfb30,\n  \"aleffinalarabic\",\n  0xfe8e,\n  \"alefhamzaabovearabic\",\n  0x0623,\n  \"alefhamzaabovefinalarabic\",\n  0xfe84,\n  \"alefhamzabelowarabic\",\n  0x0625,\n  \"alefhamzabelowfinalarabic\",\n  0xfe88,\n  \"alefhebrew\",\n  0x05d0,\n  \"aleflamedhebrew\",\n  0xfb4f,\n  \"alefmaddaabovearabic\",\n  0x0622,\n  \"alefmaddaabovefinalarabic\",\n  0xfe82,\n  \"alefmaksuraarabic\",\n  0x0649,\n  \"alefmaksurafinalarabic\",\n  0xfef0,\n  \"alefmaksurainitialarabic\",\n  0xfef3,\n  \"alefmaksuramedialarabic\",\n  0xfef4,\n  \"alefpatahhebrew\",\n  0xfb2e,\n  \"alefqamatshebrew\",\n  0xfb2f,\n  \"aleph\",\n  0x2135,\n  \"allequal\",\n  0x224c,\n  \"alpha\",\n  0x03b1,\n  \"alphatonos\",\n  0x03ac,\n  \"amacron\",\n  0x0101,\n  \"amonospace\",\n  0xff41,\n  \"ampersand\",\n  0x0026,\n  \"ampersandmonospace\",\n  0xff06,\n  \"ampersandsmall\",\n  0xf726,\n  \"amsquare\",\n  0x33c2,\n  \"anbopomofo\",\n  0x3122,\n  \"angbopomofo\",\n  0x3124,\n  \"angbracketleft\",\n  0x3008,\n  \"angbracketright\",\n  0x3009,\n  \"angkhankhuthai\",\n  0x0e5a,\n  \"angle\",\n  0x2220,\n  \"anglebracketleft\",\n  0x3008,\n  \"anglebracketleftvertical\",\n  0xfe3f,\n  \"anglebracketright\",\n  0x3009,\n  \"anglebracketrightvertical\",\n  0xfe40,\n  \"angleleft\",\n  0x2329,\n  \"angleright\",\n  0x232a,\n  \"angstrom\",\n  0x212b,\n  \"anoteleia\",\n  0x0387,\n  \"anudattadeva\",\n  0x0952,\n  \"anusvarabengali\",\n  0x0982,\n  \"anusvaradeva\",\n  0x0902,\n  \"anusvaragujarati\",\n  0x0a82,\n  \"aogonek\",\n  0x0105,\n  \"apaatosquare\",\n  0x3300,\n  \"aparen\",\n  0x249c,\n  \"apostrophearmenian\",\n  0x055a,\n  \"apostrophemod\",\n  0x02bc,\n  \"apple\",\n  0xf8ff,\n  \"approaches\",\n  0x2250,\n  \"approxequal\",\n  0x2248,\n  \"approxequalorimage\",\n  0x2252,\n  \"approximatelyequal\",\n  0x2245,\n  \"araeaekorean\",\n  0x318e,\n  \"araeakorean\",\n  0x318d,\n  \"arc\",\n  0x2312,\n  \"arighthalfring\",\n  0x1e9a,\n  \"aring\",\n  0x00e5,\n  \"aringacute\",\n  0x01fb,\n  \"aringbelow\",\n  0x1e01,\n  \"arrowboth\",\n  0x2194,\n  \"arrowdashdown\",\n  0x21e3,\n  \"arrowdashleft\",\n  0x21e0,\n  \"arrowdashright\",\n  0x21e2,\n  \"arrowdashup\",\n  0x21e1,\n  \"arrowdblboth\",\n  0x21d4,\n  \"arrowdbldown\",\n  0x21d3,\n  \"arrowdblleft\",\n  0x21d0,\n  \"arrowdblright\",\n  0x21d2,\n  \"arrowdblup\",\n  0x21d1,\n  \"arrowdown\",\n  0x2193,\n  \"arrowdownleft\",\n  0x2199,\n  \"arrowdownright\",\n  0x2198,\n  \"arrowdownwhite\",\n  0x21e9,\n  \"arrowheaddownmod\",\n  0x02c5,\n  \"arrowheadleftmod\",\n  0x02c2,\n  \"arrowheadrightmod\",\n  0x02c3,\n  \"arrowheadupmod\",\n  0x02c4,\n  \"arrowhorizex\",\n  0xf8e7,\n  \"arrowleft\",\n  0x2190,\n  \"arrowleftdbl\",\n  0x21d0,\n  \"arrowleftdblstroke\",\n  0x21cd,\n  \"arrowleftoverright\",\n  0x21c6,\n  \"arrowleftwhite\",\n  0x21e6,\n  \"arrowright\",\n  0x2192,\n  \"arrowrightdblstroke\",\n  0x21cf,\n  \"arrowrightheavy\",\n  0x279e,\n  \"arrowrightoverleft\",\n  0x21c4,\n  \"arrowrightwhite\",\n  0x21e8,\n  \"arrowtableft\",\n  0x21e4,\n  \"arrowtabright\",\n  0x21e5,\n  \"arrowup\",\n  0x2191,\n  \"arrowupdn\",\n  0x2195,\n  \"arrowupdnbse\",\n  0x21a8,\n  \"arrowupdownbase\",\n  0x21a8,\n  \"arrowupleft\",\n  0x2196,\n  \"arrowupleftofdown\",\n  0x21c5,\n  \"arrowupright\",\n  0x2197,\n  \"arrowupwhite\",\n  0x21e7,\n  \"arrowvertex\",\n  0xf8e6,\n  \"asciicircum\",\n  0x005e,\n  \"asciicircummonospace\",\n  0xff3e,\n  \"asciitilde\",\n  0x007e,\n  \"asciitildemonospace\",\n  0xff5e,\n  \"ascript\",\n  0x0251,\n  \"ascriptturned\",\n  0x0252,\n  \"asmallhiragana\",\n  0x3041,\n  \"asmallkatakana\",\n  0x30a1,\n  \"asmallkatakanahalfwidth\",\n  0xff67,\n  \"asterisk\",\n  0x002a,\n  \"asteriskaltonearabic\",\n  0x066d,\n  \"asteriskarabic\",\n  0x066d,\n  \"asteriskmath\",\n  0x2217,\n  \"asteriskmonospace\",\n  0xff0a,\n  \"asterisksmall\",\n  0xfe61,\n  \"asterism\",\n  0x2042,\n  \"asuperior\",\n  0xf6e9,\n  \"asymptoticallyequal\",\n  0x2243,\n  \"at\",\n  0x0040,\n  \"atilde\",\n  0x00e3,\n  \"atmonospace\",\n  0xff20,\n  \"atsmall\",\n  0xfe6b,\n  \"aturned\",\n  0x0250,\n  \"aubengali\",\n  0x0994,\n  \"aubopomofo\",\n  0x3120,\n  \"audeva\",\n  0x0914,\n  \"augujarati\",\n  0x0a94,\n  \"augurmukhi\",\n  0x0a14,\n  \"aulengthmarkbengali\",\n  0x09d7,\n  \"aumatragurmukhi\",\n  0x0a4c,\n  \"auvowelsignbengali\",\n  0x09cc,\n  \"auvowelsigndeva\",\n  0x094c,\n  \"auvowelsigngujarati\",\n  0x0acc,\n  \"avagrahadeva\",\n  0x093d,\n  \"aybarmenian\",\n  0x0561,\n  \"ayin\",\n  0x05e2,\n  \"ayinaltonehebrew\",\n  0xfb20,\n  \"ayinhebrew\",\n  0x05e2,\n  \"b\",\n  0x0062,\n  \"babengali\",\n  0x09ac,\n  \"backslash\",\n  0x005c,\n  \"backslashmonospace\",\n  0xff3c,\n  \"badeva\",\n  0x092c,\n  \"bagujarati\",\n  0x0aac,\n  \"bagurmukhi\",\n  0x0a2c,\n  \"bahiragana\",\n  0x3070,\n  \"bahtthai\",\n  0x0e3f,\n  \"bakatakana\",\n  0x30d0,\n  \"bar\",\n  0x007c,\n  \"barmonospace\",\n  0xff5c,\n  \"bbopomofo\",\n  0x3105,\n  \"bcircle\",\n  0x24d1,\n  \"bdotaccent\",\n  0x1e03,\n  \"bdotbelow\",\n  0x1e05,\n  \"beamedsixteenthnotes\",\n  0x266c,\n  \"because\",\n  0x2235,\n  \"becyrillic\",\n  0x0431,\n  \"beharabic\",\n  0x0628,\n  \"behfinalarabic\",\n  0xfe90,\n  \"behinitialarabic\",\n  0xfe91,\n  \"behiragana\",\n  0x3079,\n  \"behmedialarabic\",\n  0xfe92,\n  \"behmeeminitialarabic\",\n  0xfc9f,\n  \"behmeemisolatedarabic\",\n  0xfc08,\n  \"behnoonfinalarabic\",\n  0xfc6d,\n  \"bekatakana\",\n  0x30d9,\n  \"benarmenian\",\n  0x0562,\n  \"bet\",\n  0x05d1,\n  \"beta\",\n  0x03b2,\n  \"betasymbolgreek\",\n  0x03d0,\n  \"betdagesh\",\n  0xfb31,\n  \"betdageshhebrew\",\n  0xfb31,\n  \"bethebrew\",\n  0x05d1,\n  \"betrafehebrew\",\n  0xfb4c,\n  \"bhabengali\",\n  0x09ad,\n  \"bhadeva\",\n  0x092d,\n  \"bhagujarati\",\n  0x0aad,\n  \"bhagurmukhi\",\n  0x0a2d,\n  \"bhook\",\n  0x0253,\n  \"bihiragana\",\n  0x3073,\n  \"bikatakana\",\n  0x30d3,\n  \"bilabialclick\",\n  0x0298,\n  \"bindigurmukhi\",\n  0x0a02,\n  \"birusquare\",\n  0x3331,\n  \"blackcircle\",\n  0x25cf,\n  \"blackdiamond\",\n  0x25c6,\n  \"blackdownpointingtriangle\",\n  0x25bc,\n  \"blackleftpointingpointer\",\n  0x25c4,\n  \"blackleftpointingtriangle\",\n  0x25c0,\n  \"blacklenticularbracketleft\",\n  0x3010,\n  \"blacklenticularbracketleftvertical\",\n  0xfe3b,\n  \"blacklenticularbracketright\",\n  0x3011,\n  \"blacklenticularbracketrightvertical\",\n  0xfe3c,\n  \"blacklowerlefttriangle\",\n  0x25e3,\n  \"blacklowerrighttriangle\",\n  0x25e2,\n  \"blackrectangle\",\n  0x25ac,\n  \"blackrightpointingpointer\",\n  0x25ba,\n  \"blackrightpointingtriangle\",\n  0x25b6,\n  \"blacksmallsquare\",\n  0x25aa,\n  \"blacksmilingface\",\n  0x263b,\n  \"blacksquare\",\n  0x25a0,\n  \"blackstar\",\n  0x2605,\n  \"blackupperlefttriangle\",\n  0x25e4,\n  \"blackupperrighttriangle\",\n  0x25e5,\n  \"blackuppointingsmalltriangle\",\n  0x25b4,\n  \"blackuppointingtriangle\",\n  0x25b2,\n  \"blank\",\n  0x2423,\n  \"blinebelow\",\n  0x1e07,\n  \"block\",\n  0x2588,\n  \"bmonospace\",\n  0xff42,\n  \"bobaimaithai\",\n  0x0e1a,\n  \"bohiragana\",\n  0x307c,\n  \"bokatakana\",\n  0x30dc,\n  \"bparen\",\n  0x249d,\n  \"bqsquare\",\n  0x33c3,\n  \"braceex\",\n  0xf8f4,\n  \"braceleft\",\n  0x007b,\n  \"braceleftbt\",\n  0xf8f3,\n  \"braceleftmid\",\n  0xf8f2,\n  \"braceleftmonospace\",\n  0xff5b,\n  \"braceleftsmall\",\n  0xfe5b,\n  \"bracelefttp\",\n  0xf8f1,\n  \"braceleftvertical\",\n  0xfe37,\n  \"braceright\",\n  0x007d,\n  \"bracerightbt\",\n  0xf8fe,\n  \"bracerightmid\",\n  0xf8fd,\n  \"bracerightmonospace\",\n  0xff5d,\n  \"bracerightsmall\",\n  0xfe5c,\n  \"bracerighttp\",\n  0xf8fc,\n  \"bracerightvertical\",\n  0xfe38,\n  \"bracketleft\",\n  0x005b,\n  \"bracketleftbt\",\n  0xf8f0,\n  \"bracketleftex\",\n  0xf8ef,\n  \"bracketleftmonospace\",\n  0xff3b,\n  \"bracketlefttp\",\n  0xf8ee,\n  \"bracketright\",\n  0x005d,\n  \"bracketrightbt\",\n  0xf8fb,\n  \"bracketrightex\",\n  0xf8fa,\n  \"bracketrightmonospace\",\n  0xff3d,\n  \"bracketrighttp\",\n  0xf8f9,\n  \"breve\",\n  0x02d8,\n  \"brevebelowcmb\",\n  0x032e,\n  \"brevecmb\",\n  0x0306,\n  \"breveinvertedbelowcmb\",\n  0x032f,\n  \"breveinvertedcmb\",\n  0x0311,\n  \"breveinverteddoublecmb\",\n  0x0361,\n  \"bridgebelowcmb\",\n  0x032a,\n  \"bridgeinvertedbelowcmb\",\n  0x033a,\n  \"brokenbar\",\n  0x00a6,\n  \"bstroke\",\n  0x0180,\n  \"bsuperior\",\n  0xf6ea,\n  \"btopbar\",\n  0x0183,\n  \"buhiragana\",\n  0x3076,\n  \"bukatakana\",\n  0x30d6,\n  \"bullet\",\n  0x2022,\n  \"bulletinverse\",\n  0x25d8,\n  \"bulletoperator\",\n  0x2219,\n  \"bullseye\",\n  0x25ce,\n  \"c\",\n  0x0063,\n  \"caarmenian\",\n  0x056e,\n  \"cabengali\",\n  0x099a,\n  \"cacute\",\n  0x0107,\n  \"cadeva\",\n  0x091a,\n  \"cagujarati\",\n  0x0a9a,\n  \"cagurmukhi\",\n  0x0a1a,\n  \"calsquare\",\n  0x3388,\n  \"candrabindubengali\",\n  0x0981,\n  \"candrabinducmb\",\n  0x0310,\n  \"candrabindudeva\",\n  0x0901,\n  \"candrabindugujarati\",\n  0x0a81,\n  \"capslock\",\n  0x21ea,\n  \"careof\",\n  0x2105,\n  \"caron\",\n  0x02c7,\n  \"caronbelowcmb\",\n  0x032c,\n  \"caroncmb\",\n  0x030c,\n  \"carriagereturn\",\n  0x21b5,\n  \"cbopomofo\",\n  0x3118,\n  \"ccaron\",\n  0x010d,\n  \"ccedilla\",\n  0x00e7,\n  \"ccedillaacute\",\n  0x1e09,\n  \"ccircle\",\n  0x24d2,\n  \"ccircumflex\",\n  0x0109,\n  \"ccurl\",\n  0x0255,\n  \"cdot\",\n  0x010b,\n  \"cdotaccent\",\n  0x010b,\n  \"cdsquare\",\n  0x33c5,\n  \"cedilla\",\n  0x00b8,\n  \"cedillacmb\",\n  0x0327,\n  \"cent\",\n  0x00a2,\n  \"centigrade\",\n  0x2103,\n  \"centinferior\",\n  0xf6df,\n  \"centmonospace\",\n  0xffe0,\n  \"centoldstyle\",\n  0xf7a2,\n  \"centsuperior\",\n  0xf6e0,\n  \"chaarmenian\",\n  0x0579,\n  \"chabengali\",\n  0x099b,\n  \"chadeva\",\n  0x091b,\n  \"chagujarati\",\n  0x0a9b,\n  \"chagurmukhi\",\n  0x0a1b,\n  \"chbopomofo\",\n  0x3114,\n  \"cheabkhasiancyrillic\",\n  0x04bd,\n  \"checkmark\",\n  0x2713,\n  \"checyrillic\",\n  0x0447,\n  \"chedescenderabkhasiancyrillic\",\n  0x04bf,\n  \"chedescendercyrillic\",\n  0x04b7,\n  \"chedieresiscyrillic\",\n  0x04f5,\n  \"cheharmenian\",\n  0x0573,\n  \"chekhakassiancyrillic\",\n  0x04cc,\n  \"cheverticalstrokecyrillic\",\n  0x04b9,\n  \"chi\",\n  0x03c7,\n  \"chieuchacirclekorean\",\n  0x3277,\n  \"chieuchaparenkorean\",\n  0x3217,\n  \"chieuchcirclekorean\",\n  0x3269,\n  \"chieuchkorean\",\n  0x314a,\n  \"chieuchparenkorean\",\n  0x3209,\n  \"chochangthai\",\n  0x0e0a,\n  \"chochanthai\",\n  0x0e08,\n  \"chochingthai\",\n  0x0e09,\n  \"chochoethai\",\n  0x0e0c,\n  \"chook\",\n  0x0188,\n  \"cieucacirclekorean\",\n  0x3276,\n  \"cieucaparenkorean\",\n  0x3216,\n  \"cieuccirclekorean\",\n  0x3268,\n  \"cieuckorean\",\n  0x3148,\n  \"cieucparenkorean\",\n  0x3208,\n  \"cieucuparenkorean\",\n  0x321c,\n  \"circle\",\n  0x25cb,\n  \"circlecopyrt\",\n  0x00a9,\n  \"circlemultiply\",\n  0x2297,\n  \"circleot\",\n  0x2299,\n  \"circleplus\",\n  0x2295,\n  \"circlepostalmark\",\n  0x3036,\n  \"circlewithlefthalfblack\",\n  0x25d0,\n  \"circlewithrighthalfblack\",\n  0x25d1,\n  \"circumflex\",\n  0x02c6,\n  \"circumflexbelowcmb\",\n  0x032d,\n  \"circumflexcmb\",\n  0x0302,\n  \"clear\",\n  0x2327,\n  \"clickalveolar\",\n  0x01c2,\n  \"clickdental\",\n  0x01c0,\n  \"clicklateral\",\n  0x01c1,\n  \"clickretroflex\",\n  0x01c3,\n  \"club\",\n  0x2663,\n  \"clubsuitblack\",\n  0x2663,\n  \"clubsuitwhite\",\n  0x2667,\n  \"cmcubedsquare\",\n  0x33a4,\n  \"cmonospace\",\n  0xff43,\n  \"cmsquaredsquare\",\n  0x33a0,\n  \"coarmenian\",\n  0x0581,\n  \"colon\",\n  0x003a,\n  \"colonmonetary\",\n  0x20a1,\n  \"colonmonospace\",\n  0xff1a,\n  \"colonsign\",\n  0x20a1,\n  \"colonsmall\",\n  0xfe55,\n  \"colontriangularhalfmod\",\n  0x02d1,\n  \"colontriangularmod\",\n  0x02d0,\n  \"comma\",\n  0x002c,\n  \"commaabovecmb\",\n  0x0313,\n  \"commaaboverightcmb\",\n  0x0315,\n  \"commaaccent\",\n  0xf6c3,\n  \"commaarabic\",\n  0x060c,\n  \"commaarmenian\",\n  0x055d,\n  \"commainferior\",\n  0xf6e1,\n  \"commamonospace\",\n  0xff0c,\n  \"commareversedabovecmb\",\n  0x0314,\n  \"commareversedmod\",\n  0x02bd,\n  \"commasmall\",\n  0xfe50,\n  \"commasuperior\",\n  0xf6e2,\n  \"commaturnedabovecmb\",\n  0x0312,\n  \"commaturnedmod\",\n  0x02bb,\n  \"compass\",\n  0x263c,\n  \"congruent\",\n  0x2245,\n  \"contourintegral\",\n  0x222e,\n  \"control\",\n  0x2303,\n  \"controlACK\",\n  0x0006,\n  \"controlBEL\",\n  0x0007,\n  \"controlBS\",\n  0x0008,\n  \"controlCAN\",\n  0x0018,\n  \"controlCR\",\n  0x000d,\n  \"controlDC1\",\n  0x0011,\n  \"controlDC2\",\n  0x0012,\n  \"controlDC3\",\n  0x0013,\n  \"controlDC4\",\n  0x0014,\n  \"controlDEL\",\n  0x007f,\n  \"controlDLE\",\n  0x0010,\n  \"controlEM\",\n  0x0019,\n  \"controlENQ\",\n  0x0005,\n  \"controlEOT\",\n  0x0004,\n  \"controlESC\",\n  0x001b,\n  \"controlETB\",\n  0x0017,\n  \"controlETX\",\n  0x0003,\n  \"controlFF\",\n  0x000c,\n  \"controlFS\",\n  0x001c,\n  \"controlGS\",\n  0x001d,\n  \"controlHT\",\n  0x0009,\n  \"controlLF\",\n  0x000a,\n  \"controlNAK\",\n  0x0015,\n  \"controlNULL\",\n  0x0000,\n  \"controlRS\",\n  0x001e,\n  \"controlSI\",\n  0x000f,\n  \"controlSO\",\n  0x000e,\n  \"controlSOT\",\n  0x0002,\n  \"controlSTX\",\n  0x0001,\n  \"controlSUB\",\n  0x001a,\n  \"controlSYN\",\n  0x0016,\n  \"controlUS\",\n  0x001f,\n  \"controlVT\",\n  0x000b,\n  \"copyright\",\n  0x00a9,\n  \"copyrightsans\",\n  0xf8e9,\n  \"copyrightserif\",\n  0xf6d9,\n  \"cornerbracketleft\",\n  0x300c,\n  \"cornerbracketlefthalfwidth\",\n  0xff62,\n  \"cornerbracketleftvertical\",\n  0xfe41,\n  \"cornerbracketright\",\n  0x300d,\n  \"cornerbracketrighthalfwidth\",\n  0xff63,\n  \"cornerbracketrightvertical\",\n  0xfe42,\n  \"corporationsquare\",\n  0x337f,\n  \"cosquare\",\n  0x33c7,\n  \"coverkgsquare\",\n  0x33c6,\n  \"cparen\",\n  0x249e,\n  \"cruzeiro\",\n  0x20a2,\n  \"cstretched\",\n  0x0297,\n  \"curlyand\",\n  0x22cf,\n  \"curlyor\",\n  0x22ce,\n  \"currency\",\n  0x00a4,\n  \"cyrBreve\",\n  0xf6d1,\n  \"cyrFlex\",\n  0xf6d2,\n  \"cyrbreve\",\n  0xf6d4,\n  \"cyrflex\",\n  0xf6d5,\n  \"d\",\n  0x0064,\n  \"daarmenian\",\n  0x0564,\n  \"dabengali\",\n  0x09a6,\n  \"dadarabic\",\n  0x0636,\n  \"dadeva\",\n  0x0926,\n  \"dadfinalarabic\",\n  0xfebe,\n  \"dadinitialarabic\",\n  0xfebf,\n  \"dadmedialarabic\",\n  0xfec0,\n  \"dagesh\",\n  0x05bc,\n  \"dageshhebrew\",\n  0x05bc,\n  \"dagger\",\n  0x2020,\n  \"daggerdbl\",\n  0x2021,\n  \"dagujarati\",\n  0x0aa6,\n  \"dagurmukhi\",\n  0x0a26,\n  \"dahiragana\",\n  0x3060,\n  \"dakatakana\",\n  0x30c0,\n  \"dalarabic\",\n  0x062f,\n  \"dalet\",\n  0x05d3,\n  \"daletdagesh\",\n  0xfb33,\n  \"daletdageshhebrew\",\n  0xfb33,\n  \"dalethebrew\",\n  0x05d3,\n  \"dalfinalarabic\",\n  0xfeaa,\n  \"dammaarabic\",\n  0x064f,\n  \"dammalowarabic\",\n  0x064f,\n  \"dammatanaltonearabic\",\n  0x064c,\n  \"dammatanarabic\",\n  0x064c,\n  \"danda\",\n  0x0964,\n  \"dargahebrew\",\n  0x05a7,\n  \"dargalefthebrew\",\n  0x05a7,\n  \"dasiapneumatacyrilliccmb\",\n  0x0485,\n  \"dblGrave\",\n  0xf6d3,\n  \"dblanglebracketleft\",\n  0x300a,\n  \"dblanglebracketleftvertical\",\n  0xfe3d,\n  \"dblanglebracketright\",\n  0x300b,\n  \"dblanglebracketrightvertical\",\n  0xfe3e,\n  \"dblarchinvertedbelowcmb\",\n  0x032b,\n  \"dblarrowleft\",\n  0x21d4,\n  \"dblarrowright\",\n  0x21d2,\n  \"dbldanda\",\n  0x0965,\n  \"dblgrave\",\n  0xf6d6,\n  \"dblgravecmb\",\n  0x030f,\n  \"dblintegral\",\n  0x222c,\n  \"dbllowline\",\n  0x2017,\n  \"dbllowlinecmb\",\n  0x0333,\n  \"dbloverlinecmb\",\n  0x033f,\n  \"dblprimemod\",\n  0x02ba,\n  \"dblverticalbar\",\n  0x2016,\n  \"dblverticallineabovecmb\",\n  0x030e,\n  \"dbopomofo\",\n  0x3109,\n  \"dbsquare\",\n  0x33c8,\n  \"dcaron\",\n  0x010f,\n  \"dcedilla\",\n  0x1e11,\n  \"dcircle\",\n  0x24d3,\n  \"dcircumflexbelow\",\n  0x1e13,\n  \"dcroat\",\n  0x0111,\n  \"ddabengali\",\n  0x09a1,\n  \"ddadeva\",\n  0x0921,\n  \"ddagujarati\",\n  0x0aa1,\n  \"ddagurmukhi\",\n  0x0a21,\n  \"ddalarabic\",\n  0x0688,\n  \"ddalfinalarabic\",\n  0xfb89,\n  \"dddhadeva\",\n  0x095c,\n  \"ddhabengali\",\n  0x09a2,\n  \"ddhadeva\",\n  0x0922,\n  \"ddhagujarati\",\n  0x0aa2,\n  \"ddhagurmukhi\",\n  0x0a22,\n  \"ddotaccent\",\n  0x1e0b,\n  \"ddotbelow\",\n  0x1e0d,\n  \"decimalseparatorarabic\",\n  0x066b,\n  \"decimalseparatorpersian\",\n  0x066b,\n  \"decyrillic\",\n  0x0434,\n  \"degree\",\n  0x00b0,\n  \"dehihebrew\",\n  0x05ad,\n  \"dehiragana\",\n  0x3067,\n  \"deicoptic\",\n  0x03ef,\n  \"dekatakana\",\n  0x30c7,\n  \"deleteleft\",\n  0x232b,\n  \"deleteright\",\n  0x2326,\n  \"delta\",\n  0x03b4,\n  \"deltaturned\",\n  0x018d,\n  \"denominatorminusonenumeratorbengali\",\n  0x09f8,\n  \"dezh\",\n  0x02a4,\n  \"dhabengali\",\n  0x09a7,\n  \"dhadeva\",\n  0x0927,\n  \"dhagujarati\",\n  0x0aa7,\n  \"dhagurmukhi\",\n  0x0a27,\n  \"dhook\",\n  0x0257,\n  \"dialytikatonos\",\n  0x0385,\n  \"dialytikatonoscmb\",\n  0x0344,\n  \"diamond\",\n  0x2666,\n  \"diamondsuitwhite\",\n  0x2662,\n  \"dieresis\",\n  0x00a8,\n  \"dieresisacute\",\n  0xf6d7,\n  \"dieresisbelowcmb\",\n  0x0324,\n  \"dieresiscmb\",\n  0x0308,\n  \"dieresisgrave\",\n  0xf6d8,\n  \"dieresistonos\",\n  0x0385,\n  \"dihiragana\",\n  0x3062,\n  \"dikatakana\",\n  0x30c2,\n  \"dittomark\",\n  0x3003,\n  \"divide\",\n  0x00f7,\n  \"divides\",\n  0x2223,\n  \"divisionslash\",\n  0x2215,\n  \"djecyrillic\",\n  0x0452,\n  \"dkshade\",\n  0x2593,\n  \"dlinebelow\",\n  0x1e0f,\n  \"dlsquare\",\n  0x3397,\n  \"dmacron\",\n  0x0111,\n  \"dmonospace\",\n  0xff44,\n  \"dnblock\",\n  0x2584,\n  \"dochadathai\",\n  0x0e0e,\n  \"dodekthai\",\n  0x0e14,\n  \"dohiragana\",\n  0x3069,\n  \"dokatakana\",\n  0x30c9,\n  \"dollar\",\n  0x0024,\n  \"dollarinferior\",\n  0xf6e3,\n  \"dollarmonospace\",\n  0xff04,\n  \"dollaroldstyle\",\n  0xf724,\n  \"dollarsmall\",\n  0xfe69,\n  \"dollarsuperior\",\n  0xf6e4,\n  \"dong\",\n  0x20ab,\n  \"dorusquare\",\n  0x3326,\n  \"dotaccent\",\n  0x02d9,\n  \"dotaccentcmb\",\n  0x0307,\n  \"dotbelowcmb\",\n  0x0323,\n  \"dotbelowcomb\",\n  0x0323,\n  \"dotkatakana\",\n  0x30fb,\n  \"dotlessi\",\n  0x0131,\n  \"dotlessj\",\n  0xf6be,\n  \"dotlessjstrokehook\",\n  0x0284,\n  \"dotmath\",\n  0x22c5,\n  \"dottedcircle\",\n  0x25cc,\n  \"doubleyodpatah\",\n  0xfb1f,\n  \"doubleyodpatahhebrew\",\n  0xfb1f,\n  \"downtackbelowcmb\",\n  0x031e,\n  \"downtackmod\",\n  0x02d5,\n  \"dparen\",\n  0x249f,\n  \"dsuperior\",\n  0xf6eb,\n  \"dtail\",\n  0x0256,\n  \"dtopbar\",\n  0x018c,\n  \"duhiragana\",\n  0x3065,\n  \"dukatakana\",\n  0x30c5,\n  \"dz\",\n  0x01f3,\n  \"dzaltone\",\n  0x02a3,\n  \"dzcaron\",\n  0x01c6,\n  \"dzcurl\",\n  0x02a5,\n  \"dzeabkhasiancyrillic\",\n  0x04e1,\n  \"dzecyrillic\",\n  0x0455,\n  \"dzhecyrillic\",\n  0x045f,\n  \"e\",\n  0x0065,\n  \"eacute\",\n  0x00e9,\n  \"earth\",\n  0x2641,\n  \"ebengali\",\n  0x098f,\n  \"ebopomofo\",\n  0x311c,\n  \"ebreve\",\n  0x0115,\n  \"ecandradeva\",\n  0x090d,\n  \"ecandragujarati\",\n  0x0a8d,\n  \"ecandravowelsigndeva\",\n  0x0945,\n  \"ecandravowelsigngujarati\",\n  0x0ac5,\n  \"ecaron\",\n  0x011b,\n  \"ecedillabreve\",\n  0x1e1d,\n  \"echarmenian\",\n  0x0565,\n  \"echyiwnarmenian\",\n  0x0587,\n  \"ecircle\",\n  0x24d4,\n  \"ecircumflex\",\n  0x00ea,\n  \"ecircumflexacute\",\n  0x1ebf,\n  \"ecircumflexbelow\",\n  0x1e19,\n  \"ecircumflexdotbelow\",\n  0x1ec7,\n  \"ecircumflexgrave\",\n  0x1ec1,\n  \"ecircumflexhookabove\",\n  0x1ec3,\n  \"ecircumflextilde\",\n  0x1ec5,\n  \"ecyrillic\",\n  0x0454,\n  \"edblgrave\",\n  0x0205,\n  \"edeva\",\n  0x090f,\n  \"edieresis\",\n  0x00eb,\n  \"edot\",\n  0x0117,\n  \"edotaccent\",\n  0x0117,\n  \"edotbelow\",\n  0x1eb9,\n  \"eegurmukhi\",\n  0x0a0f,\n  \"eematragurmukhi\",\n  0x0a47,\n  \"efcyrillic\",\n  0x0444,\n  \"egrave\",\n  0x00e8,\n  \"egujarati\",\n  0x0a8f,\n  \"eharmenian\",\n  0x0567,\n  \"ehbopomofo\",\n  0x311d,\n  \"ehiragana\",\n  0x3048,\n  \"ehookabove\",\n  0x1ebb,\n  \"eibopomofo\",\n  0x311f,\n  \"eight\",\n  0x0038,\n  \"eightarabic\",\n  0x0668,\n  \"eightbengali\",\n  0x09ee,\n  \"eightcircle\",\n  0x2467,\n  \"eightcircleinversesansserif\",\n  0x2791,\n  \"eightdeva\",\n  0x096e,\n  \"eighteencircle\",\n  0x2471,\n  \"eighteenparen\",\n  0x2485,\n  \"eighteenperiod\",\n  0x2499,\n  \"eightgujarati\",\n  0x0aee,\n  \"eightgurmukhi\",\n  0x0a6e,\n  \"eighthackarabic\",\n  0x0668,\n  \"eighthangzhou\",\n  0x3028,\n  \"eighthnotebeamed\",\n  0x266b,\n  \"eightideographicparen\",\n  0x3227,\n  \"eightinferior\",\n  0x2088,\n  \"eightmonospace\",\n  0xff18,\n  \"eightoldstyle\",\n  0xf738,\n  \"eightparen\",\n  0x247b,\n  \"eightperiod\",\n  0x248f,\n  \"eightpersian\",\n  0x06f8,\n  \"eightroman\",\n  0x2177,\n  \"eightsuperior\",\n  0x2078,\n  \"eightthai\",\n  0x0e58,\n  \"einvertedbreve\",\n  0x0207,\n  \"eiotifiedcyrillic\",\n  0x0465,\n  \"ekatakana\",\n  0x30a8,\n  \"ekatakanahalfwidth\",\n  0xff74,\n  \"ekonkargurmukhi\",\n  0x0a74,\n  \"ekorean\",\n  0x3154,\n  \"elcyrillic\",\n  0x043b,\n  \"element\",\n  0x2208,\n  \"elevencircle\",\n  0x246a,\n  \"elevenparen\",\n  0x247e,\n  \"elevenperiod\",\n  0x2492,\n  \"elevenroman\",\n  0x217a,\n  \"ellipsis\",\n  0x2026,\n  \"ellipsisvertical\",\n  0x22ee,\n  \"emacron\",\n  0x0113,\n  \"emacronacute\",\n  0x1e17,\n  \"emacrongrave\",\n  0x1e15,\n  \"emcyrillic\",\n  0x043c,\n  \"emdash\",\n  0x2014,\n  \"emdashvertical\",\n  0xfe31,\n  \"emonospace\",\n  0xff45,\n  \"emphasismarkarmenian\",\n  0x055b,\n  \"emptyset\",\n  0x2205,\n  \"enbopomofo\",\n  0x3123,\n  \"encyrillic\",\n  0x043d,\n  \"endash\",\n  0x2013,\n  \"endashvertical\",\n  0xfe32,\n  \"endescendercyrillic\",\n  0x04a3,\n  \"eng\",\n  0x014b,\n  \"engbopomofo\",\n  0x3125,\n  \"enghecyrillic\",\n  0x04a5,\n  \"enhookcyrillic\",\n  0x04c8,\n  \"enspace\",\n  0x2002,\n  \"eogonek\",\n  0x0119,\n  \"eokorean\",\n  0x3153,\n  \"eopen\",\n  0x025b,\n  \"eopenclosed\",\n  0x029a,\n  \"eopenreversed\",\n  0x025c,\n  \"eopenreversedclosed\",\n  0x025e,\n  \"eopenreversedhook\",\n  0x025d,\n  \"eparen\",\n  0x24a0,\n  \"epsilon\",\n  0x03b5,\n  \"epsilontonos\",\n  0x03ad,\n  \"equal\",\n  0x003d,\n  \"equalmonospace\",\n  0xff1d,\n  \"equalsmall\",\n  0xfe66,\n  \"equalsuperior\",\n  0x207c,\n  \"equivalence\",\n  0x2261,\n  \"erbopomofo\",\n  0x3126,\n  \"ercyrillic\",\n  0x0440,\n  \"ereversed\",\n  0x0258,\n  \"ereversedcyrillic\",\n  0x044d,\n  \"escyrillic\",\n  0x0441,\n  \"esdescendercyrillic\",\n  0x04ab,\n  \"esh\",\n  0x0283,\n  \"eshcurl\",\n  0x0286,\n  \"eshortdeva\",\n  0x090e,\n  \"eshortvowelsigndeva\",\n  0x0946,\n  \"eshreversedloop\",\n  0x01aa,\n  \"eshsquatreversed\",\n  0x0285,\n  \"esmallhiragana\",\n  0x3047,\n  \"esmallkatakana\",\n  0x30a7,\n  \"esmallkatakanahalfwidth\",\n  0xff6a,\n  \"estimated\",\n  0x212e,\n  \"esuperior\",\n  0xf6ec,\n  \"eta\",\n  0x03b7,\n  \"etarmenian\",\n  0x0568,\n  \"etatonos\",\n  0x03ae,\n  \"eth\",\n  0x00f0,\n  \"etilde\",\n  0x1ebd,\n  \"etildebelow\",\n  0x1e1b,\n  \"etnahtafoukhhebrew\",\n  0x0591,\n  \"etnahtafoukhlefthebrew\",\n  0x0591,\n  \"etnahtahebrew\",\n  0x0591,\n  \"etnahtalefthebrew\",\n  0x0591,\n  \"eturned\",\n  0x01dd,\n  \"eukorean\",\n  0x3161,\n  \"euro\",\n  0x20ac,\n  \"evowelsignbengali\",\n  0x09c7,\n  \"evowelsigndeva\",\n  0x0947,\n  \"evowelsigngujarati\",\n  0x0ac7,\n  \"exclam\",\n  0x0021,\n  \"exclamarmenian\",\n  0x055c,\n  \"exclamdbl\",\n  0x203c,\n  \"exclamdown\",\n  0x00a1,\n  \"exclamdownsmall\",\n  0xf7a1,\n  \"exclammonospace\",\n  0xff01,\n  \"exclamsmall\",\n  0xf721,\n  \"existential\",\n  0x2203,\n  \"ezh\",\n  0x0292,\n  \"ezhcaron\",\n  0x01ef,\n  \"ezhcurl\",\n  0x0293,\n  \"ezhreversed\",\n  0x01b9,\n  \"ezhtail\",\n  0x01ba,\n  \"f\",\n  0x0066,\n  \"fadeva\",\n  0x095e,\n  \"fagurmukhi\",\n  0x0a5e,\n  \"fahrenheit\",\n  0x2109,\n  \"fathaarabic\",\n  0x064e,\n  \"fathalowarabic\",\n  0x064e,\n  \"fathatanarabic\",\n  0x064b,\n  \"fbopomofo\",\n  0x3108,\n  \"fcircle\",\n  0x24d5,\n  \"fdotaccent\",\n  0x1e1f,\n  \"feharabic\",\n  0x0641,\n  \"feharmenian\",\n  0x0586,\n  \"fehfinalarabic\",\n  0xfed2,\n  \"fehinitialarabic\",\n  0xfed3,\n  \"fehmedialarabic\",\n  0xfed4,\n  \"feicoptic\",\n  0x03e5,\n  \"female\",\n  0x2640,\n  \"ff\",\n  0xfb00,\n  \"f_f\",\n  0xfb00,\n  \"ffi\",\n  0xfb03,\n  \"ffl\",\n  0xfb04,\n  \"fi\",\n  0xfb01,\n  \"fifteencircle\",\n  0x246e,\n  \"fifteenparen\",\n  0x2482,\n  \"fifteenperiod\",\n  0x2496,\n  \"figuredash\",\n  0x2012,\n  \"filledbox\",\n  0x25a0,\n  \"filledrect\",\n  0x25ac,\n  \"finalkaf\",\n  0x05da,\n  \"finalkafdagesh\",\n  0xfb3a,\n  \"finalkafdageshhebrew\",\n  0xfb3a,\n  \"finalkafhebrew\",\n  0x05da,\n  \"finalmem\",\n  0x05dd,\n  \"finalmemhebrew\",\n  0x05dd,\n  \"finalnun\",\n  0x05df,\n  \"finalnunhebrew\",\n  0x05df,\n  \"finalpe\",\n  0x05e3,\n  \"finalpehebrew\",\n  0x05e3,\n  \"finaltsadi\",\n  0x05e5,\n  \"finaltsadihebrew\",\n  0x05e5,\n  \"firsttonechinese\",\n  0x02c9,\n  \"fisheye\",\n  0x25c9,\n  \"fitacyrillic\",\n  0x0473,\n  \"five\",\n  0x0035,\n  \"fivearabic\",\n  0x0665,\n  \"fivebengali\",\n  0x09eb,\n  \"fivecircle\",\n  0x2464,\n  \"fivecircleinversesansserif\",\n  0x278e,\n  \"fivedeva\",\n  0x096b,\n  \"fiveeighths\",\n  0x215d,\n  \"fivegujarati\",\n  0x0aeb,\n  \"fivegurmukhi\",\n  0x0a6b,\n  \"fivehackarabic\",\n  0x0665,\n  \"fivehangzhou\",\n  0x3025,\n  \"fiveideographicparen\",\n  0x3224,\n  \"fiveinferior\",\n  0x2085,\n  \"fivemonospace\",\n  0xff15,\n  \"fiveoldstyle\",\n  0xf735,\n  \"fiveparen\",\n  0x2478,\n  \"fiveperiod\",\n  0x248c,\n  \"fivepersian\",\n  0x06f5,\n  \"fiveroman\",\n  0x2174,\n  \"fivesuperior\",\n  0x2075,\n  \"fivethai\",\n  0x0e55,\n  \"fl\",\n  0xfb02,\n  \"florin\",\n  0x0192,\n  \"fmonospace\",\n  0xff46,\n  \"fmsquare\",\n  0x3399,\n  \"fofanthai\",\n  0x0e1f,\n  \"fofathai\",\n  0x0e1d,\n  \"fongmanthai\",\n  0x0e4f,\n  \"forall\",\n  0x2200,\n  \"four\",\n  0x0034,\n  \"fourarabic\",\n  0x0664,\n  \"fourbengali\",\n  0x09ea,\n  \"fourcircle\",\n  0x2463,\n  \"fourcircleinversesansserif\",\n  0x278d,\n  \"fourdeva\",\n  0x096a,\n  \"fourgujarati\",\n  0x0aea,\n  \"fourgurmukhi\",\n  0x0a6a,\n  \"fourhackarabic\",\n  0x0664,\n  \"fourhangzhou\",\n  0x3024,\n  \"fourideographicparen\",\n  0x3223,\n  \"fourinferior\",\n  0x2084,\n  \"fourmonospace\",\n  0xff14,\n  \"fournumeratorbengali\",\n  0x09f7,\n  \"fouroldstyle\",\n  0xf734,\n  \"fourparen\",\n  0x2477,\n  \"fourperiod\",\n  0x248b,\n  \"fourpersian\",\n  0x06f4,\n  \"fourroman\",\n  0x2173,\n  \"foursuperior\",\n  0x2074,\n  \"fourteencircle\",\n  0x246d,\n  \"fourteenparen\",\n  0x2481,\n  \"fourteenperiod\",\n  0x2495,\n  \"fourthai\",\n  0x0e54,\n  \"fourthtonechinese\",\n  0x02cb,\n  \"fparen\",\n  0x24a1,\n  \"fraction\",\n  0x2044,\n  \"franc\",\n  0x20a3,\n  \"g\",\n  0x0067,\n  \"gabengali\",\n  0x0997,\n  \"gacute\",\n  0x01f5,\n  \"gadeva\",\n  0x0917,\n  \"gafarabic\",\n  0x06af,\n  \"gaffinalarabic\",\n  0xfb93,\n  \"gafinitialarabic\",\n  0xfb94,\n  \"gafmedialarabic\",\n  0xfb95,\n  \"gagujarati\",\n  0x0a97,\n  \"gagurmukhi\",\n  0x0a17,\n  \"gahiragana\",\n  0x304c,\n  \"gakatakana\",\n  0x30ac,\n  \"gamma\",\n  0x03b3,\n  \"gammalatinsmall\",\n  0x0263,\n  \"gammasuperior\",\n  0x02e0,\n  \"gangiacoptic\",\n  0x03eb,\n  \"gbopomofo\",\n  0x310d,\n  \"gbreve\",\n  0x011f,\n  \"gcaron\",\n  0x01e7,\n  \"gcedilla\",\n  0x0123,\n  \"gcircle\",\n  0x24d6,\n  \"gcircumflex\",\n  0x011d,\n  \"gcommaaccent\",\n  0x0123,\n  \"gdot\",\n  0x0121,\n  \"gdotaccent\",\n  0x0121,\n  \"gecyrillic\",\n  0x0433,\n  \"gehiragana\",\n  0x3052,\n  \"gekatakana\",\n  0x30b2,\n  \"geometricallyequal\",\n  0x2251,\n  \"gereshaccenthebrew\",\n  0x059c,\n  \"gereshhebrew\",\n  0x05f3,\n  \"gereshmuqdamhebrew\",\n  0x059d,\n  \"germandbls\",\n  0x00df,\n  \"gershayimaccenthebrew\",\n  0x059e,\n  \"gershayimhebrew\",\n  0x05f4,\n  \"getamark\",\n  0x3013,\n  \"ghabengali\",\n  0x0998,\n  \"ghadarmenian\",\n  0x0572,\n  \"ghadeva\",\n  0x0918,\n  \"ghagujarati\",\n  0x0a98,\n  \"ghagurmukhi\",\n  0x0a18,\n  \"ghainarabic\",\n  0x063a,\n  \"ghainfinalarabic\",\n  0xfece,\n  \"ghaininitialarabic\",\n  0xfecf,\n  \"ghainmedialarabic\",\n  0xfed0,\n  \"ghemiddlehookcyrillic\",\n  0x0495,\n  \"ghestrokecyrillic\",\n  0x0493,\n  \"gheupturncyrillic\",\n  0x0491,\n  \"ghhadeva\",\n  0x095a,\n  \"ghhagurmukhi\",\n  0x0a5a,\n  \"ghook\",\n  0x0260,\n  \"ghzsquare\",\n  0x3393,\n  \"gihiragana\",\n  0x304e,\n  \"gikatakana\",\n  0x30ae,\n  \"gimarmenian\",\n  0x0563,\n  \"gimel\",\n  0x05d2,\n  \"gimeldagesh\",\n  0xfb32,\n  \"gimeldageshhebrew\",\n  0xfb32,\n  \"gimelhebrew\",\n  0x05d2,\n  \"gjecyrillic\",\n  0x0453,\n  \"glottalinvertedstroke\",\n  0x01be,\n  \"glottalstop\",\n  0x0294,\n  \"glottalstopinverted\",\n  0x0296,\n  \"glottalstopmod\",\n  0x02c0,\n  \"glottalstopreversed\",\n  0x0295,\n  \"glottalstopreversedmod\",\n  0x02c1,\n  \"glottalstopreversedsuperior\",\n  0x02e4,\n  \"glottalstopstroke\",\n  0x02a1,\n  \"glottalstopstrokereversed\",\n  0x02a2,\n  \"gmacron\",\n  0x1e21,\n  \"gmonospace\",\n  0xff47,\n  \"gohiragana\",\n  0x3054,\n  \"gokatakana\",\n  0x30b4,\n  \"gparen\",\n  0x24a2,\n  \"gpasquare\",\n  0x33ac,\n  \"gradient\",\n  0x2207,\n  \"grave\",\n  0x0060,\n  \"gravebelowcmb\",\n  0x0316,\n  \"gravecmb\",\n  0x0300,\n  \"gravecomb\",\n  0x0300,\n  \"gravedeva\",\n  0x0953,\n  \"gravelowmod\",\n  0x02ce,\n  \"gravemonospace\",\n  0xff40,\n  \"gravetonecmb\",\n  0x0340,\n  \"greater\",\n  0x003e,\n  \"greaterequal\",\n  0x2265,\n  \"greaterequalorless\",\n  0x22db,\n  \"greatermonospace\",\n  0xff1e,\n  \"greaterorequivalent\",\n  0x2273,\n  \"greaterorless\",\n  0x2277,\n  \"greateroverequal\",\n  0x2267,\n  \"greatersmall\",\n  0xfe65,\n  \"gscript\",\n  0x0261,\n  \"gstroke\",\n  0x01e5,\n  \"guhiragana\",\n  0x3050,\n  \"guillemotleft\",\n  0x00ab,\n  \"guillemotright\",\n  0x00bb,\n  \"guilsinglleft\",\n  0x2039,\n  \"guilsinglright\",\n  0x203a,\n  \"gukatakana\",\n  0x30b0,\n  \"guramusquare\",\n  0x3318,\n  \"gysquare\",\n  0x33c9,\n  \"h\",\n  0x0068,\n  \"haabkhasiancyrillic\",\n  0x04a9,\n  \"haaltonearabic\",\n  0x06c1,\n  \"habengali\",\n  0x09b9,\n  \"hadescendercyrillic\",\n  0x04b3,\n  \"hadeva\",\n  0x0939,\n  \"hagujarati\",\n  0x0ab9,\n  \"hagurmukhi\",\n  0x0a39,\n  \"haharabic\",\n  0x062d,\n  \"hahfinalarabic\",\n  0xfea2,\n  \"hahinitialarabic\",\n  0xfea3,\n  \"hahiragana\",\n  0x306f,\n  \"hahmedialarabic\",\n  0xfea4,\n  \"haitusquare\",\n  0x332a,\n  \"hakatakana\",\n  0x30cf,\n  \"hakatakanahalfwidth\",\n  0xff8a,\n  \"halantgurmukhi\",\n  0x0a4d,\n  \"hamzaarabic\",\n  0x0621,\n  \"hamzalowarabic\",\n  0x0621,\n  \"hangulfiller\",\n  0x3164,\n  \"hardsigncyrillic\",\n  0x044a,\n  \"harpoonleftbarbup\",\n  0x21bc,\n  \"harpoonrightbarbup\",\n  0x21c0,\n  \"hasquare\",\n  0x33ca,\n  \"hatafpatah\",\n  0x05b2,\n  \"hatafpatah16\",\n  0x05b2,\n  \"hatafpatah23\",\n  0x05b2,\n  \"hatafpatah2f\",\n  0x05b2,\n  \"hatafpatahhebrew\",\n  0x05b2,\n  \"hatafpatahnarrowhebrew\",\n  0x05b2,\n  \"hatafpatahquarterhebrew\",\n  0x05b2,\n  \"hatafpatahwidehebrew\",\n  0x05b2,\n  \"hatafqamats\",\n  0x05b3,\n  \"hatafqamats1b\",\n  0x05b3,\n  \"hatafqamats28\",\n  0x05b3,\n  \"hatafqamats34\",\n  0x05b3,\n  \"hatafqamatshebrew\",\n  0x05b3,\n  \"hatafqamatsnarrowhebrew\",\n  0x05b3,\n  \"hatafqamatsquarterhebrew\",\n  0x05b3,\n  \"hatafqamatswidehebrew\",\n  0x05b3,\n  \"hatafsegol\",\n  0x05b1,\n  \"hatafsegol17\",\n  0x05b1,\n  \"hatafsegol24\",\n  0x05b1,\n  \"hatafsegol30\",\n  0x05b1,\n  \"hatafsegolhebrew\",\n  0x05b1,\n  \"hatafsegolnarrowhebrew\",\n  0x05b1,\n  \"hatafsegolquarterhebrew\",\n  0x05b1,\n  \"hatafsegolwidehebrew\",\n  0x05b1,\n  \"hbar\",\n  0x0127,\n  \"hbopomofo\",\n  0x310f,\n  \"hbrevebelow\",\n  0x1e2b,\n  \"hcedilla\",\n  0x1e29,\n  \"hcircle\",\n  0x24d7,\n  \"hcircumflex\",\n  0x0125,\n  \"hdieresis\",\n  0x1e27,\n  \"hdotaccent\",\n  0x1e23,\n  \"hdotbelow\",\n  0x1e25,\n  \"he\",\n  0x05d4,\n  \"heart\",\n  0x2665,\n  \"heartsuitblack\",\n  0x2665,\n  \"heartsuitwhite\",\n  0x2661,\n  \"hedagesh\",\n  0xfb34,\n  \"hedageshhebrew\",\n  0xfb34,\n  \"hehaltonearabic\",\n  0x06c1,\n  \"heharabic\",\n  0x0647,\n  \"hehebrew\",\n  0x05d4,\n  \"hehfinalaltonearabic\",\n  0xfba7,\n  \"hehfinalalttwoarabic\",\n  0xfeea,\n  \"hehfinalarabic\",\n  0xfeea,\n  \"hehhamzaabovefinalarabic\",\n  0xfba5,\n  \"hehhamzaaboveisolatedarabic\",\n  0xfba4,\n  \"hehinitialaltonearabic\",\n  0xfba8,\n  \"hehinitialarabic\",\n  0xfeeb,\n  \"hehiragana\",\n  0x3078,\n  \"hehmedialaltonearabic\",\n  0xfba9,\n  \"hehmedialarabic\",\n  0xfeec,\n  \"heiseierasquare\",\n  0x337b,\n  \"hekatakana\",\n  0x30d8,\n  \"hekatakanahalfwidth\",\n  0xff8d,\n  \"hekutaarusquare\",\n  0x3336,\n  \"henghook\",\n  0x0267,\n  \"herutusquare\",\n  0x3339,\n  \"het\",\n  0x05d7,\n  \"hethebrew\",\n  0x05d7,\n  \"hhook\",\n  0x0266,\n  \"hhooksuperior\",\n  0x02b1,\n  \"hieuhacirclekorean\",\n  0x327b,\n  \"hieuhaparenkorean\",\n  0x321b,\n  \"hieuhcirclekorean\",\n  0x326d,\n  \"hieuhkorean\",\n  0x314e,\n  \"hieuhparenkorean\",\n  0x320d,\n  \"hihiragana\",\n  0x3072,\n  \"hikatakana\",\n  0x30d2,\n  \"hikatakanahalfwidth\",\n  0xff8b,\n  \"hiriq\",\n  0x05b4,\n  \"hiriq14\",\n  0x05b4,\n  \"hiriq21\",\n  0x05b4,\n  \"hiriq2d\",\n  0x05b4,\n  \"hiriqhebrew\",\n  0x05b4,\n  \"hiriqnarrowhebrew\",\n  0x05b4,\n  \"hiriqquarterhebrew\",\n  0x05b4,\n  \"hiriqwidehebrew\",\n  0x05b4,\n  \"hlinebelow\",\n  0x1e96,\n  \"hmonospace\",\n  0xff48,\n  \"hoarmenian\",\n  0x0570,\n  \"hohipthai\",\n  0x0e2b,\n  \"hohiragana\",\n  0x307b,\n  \"hokatakana\",\n  0x30db,\n  \"hokatakanahalfwidth\",\n  0xff8e,\n  \"holam\",\n  0x05b9,\n  \"holam19\",\n  0x05b9,\n  \"holam26\",\n  0x05b9,\n  \"holam32\",\n  0x05b9,\n  \"holamhebrew\",\n  0x05b9,\n  \"holamnarrowhebrew\",\n  0x05b9,\n  \"holamquarterhebrew\",\n  0x05b9,\n  \"holamwidehebrew\",\n  0x05b9,\n  \"honokhukthai\",\n  0x0e2e,\n  \"hookabovecomb\",\n  0x0309,\n  \"hookcmb\",\n  0x0309,\n  \"hookpalatalizedbelowcmb\",\n  0x0321,\n  \"hookretroflexbelowcmb\",\n  0x0322,\n  \"hoonsquare\",\n  0x3342,\n  \"horicoptic\",\n  0x03e9,\n  \"horizontalbar\",\n  0x2015,\n  \"horncmb\",\n  0x031b,\n  \"hotsprings\",\n  0x2668,\n  \"house\",\n  0x2302,\n  \"hparen\",\n  0x24a3,\n  \"hsuperior\",\n  0x02b0,\n  \"hturned\",\n  0x0265,\n  \"huhiragana\",\n  0x3075,\n  \"huiitosquare\",\n  0x3333,\n  \"hukatakana\",\n  0x30d5,\n  \"hukatakanahalfwidth\",\n  0xff8c,\n  \"hungarumlaut\",\n  0x02dd,\n  \"hungarumlautcmb\",\n  0x030b,\n  \"hv\",\n  0x0195,\n  \"hyphen\",\n  0x002d,\n  \"hypheninferior\",\n  0xf6e5,\n  \"hyphenmonospace\",\n  0xff0d,\n  \"hyphensmall\",\n  0xfe63,\n  \"hyphensuperior\",\n  0xf6e6,\n  \"hyphentwo\",\n  0x2010,\n  \"i\",\n  0x0069,\n  \"iacute\",\n  0x00ed,\n  \"iacyrillic\",\n  0x044f,\n  \"ibengali\",\n  0x0987,\n  \"ibopomofo\",\n  0x3127,\n  \"ibreve\",\n  0x012d,\n  \"icaron\",\n  0x01d0,\n  \"icircle\",\n  0x24d8,\n  \"icircumflex\",\n  0x00ee,\n  \"icyrillic\",\n  0x0456,\n  \"idblgrave\",\n  0x0209,\n  \"ideographearthcircle\",\n  0x328f,\n  \"ideographfirecircle\",\n  0x328b,\n  \"ideographicallianceparen\",\n  0x323f,\n  \"ideographiccallparen\",\n  0x323a,\n  \"ideographiccentrecircle\",\n  0x32a5,\n  \"ideographicclose\",\n  0x3006,\n  \"ideographiccomma\",\n  0x3001,\n  \"ideographiccommaleft\",\n  0xff64,\n  \"ideographiccongratulationparen\",\n  0x3237,\n  \"ideographiccorrectcircle\",\n  0x32a3,\n  \"ideographicearthparen\",\n  0x322f,\n  \"ideographicenterpriseparen\",\n  0x323d,\n  \"ideographicexcellentcircle\",\n  0x329d,\n  \"ideographicfestivalparen\",\n  0x3240,\n  \"ideographicfinancialcircle\",\n  0x3296,\n  \"ideographicfinancialparen\",\n  0x3236,\n  \"ideographicfireparen\",\n  0x322b,\n  \"ideographichaveparen\",\n  0x3232,\n  \"ideographichighcircle\",\n  0x32a4,\n  \"ideographiciterationmark\",\n  0x3005,\n  \"ideographiclaborcircle\",\n  0x3298,\n  \"ideographiclaborparen\",\n  0x3238,\n  \"ideographicleftcircle\",\n  0x32a7,\n  \"ideographiclowcircle\",\n  0x32a6,\n  \"ideographicmedicinecircle\",\n  0x32a9,\n  \"ideographicmetalparen\",\n  0x322e,\n  \"ideographicmoonparen\",\n  0x322a,\n  \"ideographicnameparen\",\n  0x3234,\n  \"ideographicperiod\",\n  0x3002,\n  \"ideographicprintcircle\",\n  0x329e,\n  \"ideographicreachparen\",\n  0x3243,\n  \"ideographicrepresentparen\",\n  0x3239,\n  \"ideographicresourceparen\",\n  0x323e,\n  \"ideographicrightcircle\",\n  0x32a8,\n  \"ideographicsecretcircle\",\n  0x3299,\n  \"ideographicselfparen\",\n  0x3242,\n  \"ideographicsocietyparen\",\n  0x3233,\n  \"ideographicspace\",\n  0x3000,\n  \"ideographicspecialparen\",\n  0x3235,\n  \"ideographicstockparen\",\n  0x3231,\n  \"ideographicstudyparen\",\n  0x323b,\n  \"ideographicsunparen\",\n  0x3230,\n  \"ideographicsuperviseparen\",\n  0x323c,\n  \"ideographicwaterparen\",\n  0x322c,\n  \"ideographicwoodparen\",\n  0x322d,\n  \"ideographiczero\",\n  0x3007,\n  \"ideographmetalcircle\",\n  0x328e,\n  \"ideographmooncircle\",\n  0x328a,\n  \"ideographnamecircle\",\n  0x3294,\n  \"ideographsuncircle\",\n  0x3290,\n  \"ideographwatercircle\",\n  0x328c,\n  \"ideographwoodcircle\",\n  0x328d,\n  \"ideva\",\n  0x0907,\n  \"idieresis\",\n  0x00ef,\n  \"idieresisacute\",\n  0x1e2f,\n  \"idieresiscyrillic\",\n  0x04e5,\n  \"idotbelow\",\n  0x1ecb,\n  \"iebrevecyrillic\",\n  0x04d7,\n  \"iecyrillic\",\n  0x0435,\n  \"ieungacirclekorean\",\n  0x3275,\n  \"ieungaparenkorean\",\n  0x3215,\n  \"ieungcirclekorean\",\n  0x3267,\n  \"ieungkorean\",\n  0x3147,\n  \"ieungparenkorean\",\n  0x3207,\n  \"igrave\",\n  0x00ec,\n  \"igujarati\",\n  0x0a87,\n  \"igurmukhi\",\n  0x0a07,\n  \"ihiragana\",\n  0x3044,\n  \"ihookabove\",\n  0x1ec9,\n  \"iibengali\",\n  0x0988,\n  \"iicyrillic\",\n  0x0438,\n  \"iideva\",\n  0x0908,\n  \"iigujarati\",\n  0x0a88,\n  \"iigurmukhi\",\n  0x0a08,\n  \"iimatragurmukhi\",\n  0x0a40,\n  \"iinvertedbreve\",\n  0x020b,\n  \"iishortcyrillic\",\n  0x0439,\n  \"iivowelsignbengali\",\n  0x09c0,\n  \"iivowelsigndeva\",\n  0x0940,\n  \"iivowelsigngujarati\",\n  0x0ac0,\n  \"ij\",\n  0x0133,\n  \"ikatakana\",\n  0x30a4,\n  \"ikatakanahalfwidth\",\n  0xff72,\n  \"ikorean\",\n  0x3163,\n  \"ilde\",\n  0x02dc,\n  \"iluyhebrew\",\n  0x05ac,\n  \"imacron\",\n  0x012b,\n  \"imacroncyrillic\",\n  0x04e3,\n  \"imageorapproximatelyequal\",\n  0x2253,\n  \"imatragurmukhi\",\n  0x0a3f,\n  \"imonospace\",\n  0xff49,\n  \"increment\",\n  0x2206,\n  \"infinity\",\n  0x221e,\n  \"iniarmenian\",\n  0x056b,\n  \"integral\",\n  0x222b,\n  \"integralbottom\",\n  0x2321,\n  \"integralbt\",\n  0x2321,\n  \"integralex\",\n  0xf8f5,\n  \"integraltop\",\n  0x2320,\n  \"integraltp\",\n  0x2320,\n  \"intersection\",\n  0x2229,\n  \"intisquare\",\n  0x3305,\n  \"invbullet\",\n  0x25d8,\n  \"invcircle\",\n  0x25d9,\n  \"invsmileface\",\n  0x263b,\n  \"iocyrillic\",\n  0x0451,\n  \"iogonek\",\n  0x012f,\n  \"iota\",\n  0x03b9,\n  \"iotadieresis\",\n  0x03ca,\n  \"iotadieresistonos\",\n  0x0390,\n  \"iotalatin\",\n  0x0269,\n  \"iotatonos\",\n  0x03af,\n  \"iparen\",\n  0x24a4,\n  \"irigurmukhi\",\n  0x0a72,\n  \"ismallhiragana\",\n  0x3043,\n  \"ismallkatakana\",\n  0x30a3,\n  \"ismallkatakanahalfwidth\",\n  0xff68,\n  \"issharbengali\",\n  0x09fa,\n  \"istroke\",\n  0x0268,\n  \"isuperior\",\n  0xf6ed,\n  \"iterationhiragana\",\n  0x309d,\n  \"iterationkatakana\",\n  0x30fd,\n  \"itilde\",\n  0x0129,\n  \"itildebelow\",\n  0x1e2d,\n  \"iubopomofo\",\n  0x3129,\n  \"iucyrillic\",\n  0x044e,\n  \"ivowelsignbengali\",\n  0x09bf,\n  \"ivowelsigndeva\",\n  0x093f,\n  \"ivowelsigngujarati\",\n  0x0abf,\n  \"izhitsacyrillic\",\n  0x0475,\n  \"izhitsadblgravecyrillic\",\n  0x0477,\n  \"j\",\n  0x006a,\n  \"jaarmenian\",\n  0x0571,\n  \"jabengali\",\n  0x099c,\n  \"jadeva\",\n  0x091c,\n  \"jagujarati\",\n  0x0a9c,\n  \"jagurmukhi\",\n  0x0a1c,\n  \"jbopomofo\",\n  0x3110,\n  \"jcaron\",\n  0x01f0,\n  \"jcircle\",\n  0x24d9,\n  \"jcircumflex\",\n  0x0135,\n  \"jcrossedtail\",\n  0x029d,\n  \"jdotlessstroke\",\n  0x025f,\n  \"jecyrillic\",\n  0x0458,\n  \"jeemarabic\",\n  0x062c,\n  \"jeemfinalarabic\",\n  0xfe9e,\n  \"jeeminitialarabic\",\n  0xfe9f,\n  \"jeemmedialarabic\",\n  0xfea0,\n  \"jeharabic\",\n  0x0698,\n  \"jehfinalarabic\",\n  0xfb8b,\n  \"jhabengali\",\n  0x099d,\n  \"jhadeva\",\n  0x091d,\n  \"jhagujarati\",\n  0x0a9d,\n  \"jhagurmukhi\",\n  0x0a1d,\n  \"jheharmenian\",\n  0x057b,\n  \"jis\",\n  0x3004,\n  \"jmonospace\",\n  0xff4a,\n  \"jparen\",\n  0x24a5,\n  \"jsuperior\",\n  0x02b2,\n  \"k\",\n  0x006b,\n  \"kabashkircyrillic\",\n  0x04a1,\n  \"kabengali\",\n  0x0995,\n  \"kacute\",\n  0x1e31,\n  \"kacyrillic\",\n  0x043a,\n  \"kadescendercyrillic\",\n  0x049b,\n  \"kadeva\",\n  0x0915,\n  \"kaf\",\n  0x05db,\n  \"kafarabic\",\n  0x0643,\n  \"kafdagesh\",\n  0xfb3b,\n  \"kafdageshhebrew\",\n  0xfb3b,\n  \"kaffinalarabic\",\n  0xfeda,\n  \"kafhebrew\",\n  0x05db,\n  \"kafinitialarabic\",\n  0xfedb,\n  \"kafmedialarabic\",\n  0xfedc,\n  \"kafrafehebrew\",\n  0xfb4d,\n  \"kagujarati\",\n  0x0a95,\n  \"kagurmukhi\",\n  0x0a15,\n  \"kahiragana\",\n  0x304b,\n  \"kahookcyrillic\",\n  0x04c4,\n  \"kakatakana\",\n  0x30ab,\n  \"kakatakanahalfwidth\",\n  0xff76,\n  \"kappa\",\n  0x03ba,\n  \"kappasymbolgreek\",\n  0x03f0,\n  \"kapyeounmieumkorean\",\n  0x3171,\n  \"kapyeounphieuphkorean\",\n  0x3184,\n  \"kapyeounpieupkorean\",\n  0x3178,\n  \"kapyeounssangpieupkorean\",\n  0x3179,\n  \"karoriisquare\",\n  0x330d,\n  \"kashidaautoarabic\",\n  0x0640,\n  \"kashidaautonosidebearingarabic\",\n  0x0640,\n  \"kasmallkatakana\",\n  0x30f5,\n  \"kasquare\",\n  0x3384,\n  \"kasraarabic\",\n  0x0650,\n  \"kasratanarabic\",\n  0x064d,\n  \"kastrokecyrillic\",\n  0x049f,\n  \"katahiraprolongmarkhalfwidth\",\n  0xff70,\n  \"kaverticalstrokecyrillic\",\n  0x049d,\n  \"kbopomofo\",\n  0x310e,\n  \"kcalsquare\",\n  0x3389,\n  \"kcaron\",\n  0x01e9,\n  \"kcedilla\",\n  0x0137,\n  \"kcircle\",\n  0x24da,\n  \"kcommaaccent\",\n  0x0137,\n  \"kdotbelow\",\n  0x1e33,\n  \"keharmenian\",\n  0x0584,\n  \"kehiragana\",\n  0x3051,\n  \"kekatakana\",\n  0x30b1,\n  \"kekatakanahalfwidth\",\n  0xff79,\n  \"kenarmenian\",\n  0x056f,\n  \"kesmallkatakana\",\n  0x30f6,\n  \"kgreenlandic\",\n  0x0138,\n  \"khabengali\",\n  0x0996,\n  \"khacyrillic\",\n  0x0445,\n  \"khadeva\",\n  0x0916,\n  \"khagujarati\",\n  0x0a96,\n  \"khagurmukhi\",\n  0x0a16,\n  \"khaharabic\",\n  0x062e,\n  \"khahfinalarabic\",\n  0xfea6,\n  \"khahinitialarabic\",\n  0xfea7,\n  \"khahmedialarabic\",\n  0xfea8,\n  \"kheicoptic\",\n  0x03e7,\n  \"khhadeva\",\n  0x0959,\n  \"khhagurmukhi\",\n  0x0a59,\n  \"khieukhacirclekorean\",\n  0x3278,\n  \"khieukhaparenkorean\",\n  0x3218,\n  \"khieukhcirclekorean\",\n  0x326a,\n  \"khieukhkorean\",\n  0x314b,\n  \"khieukhparenkorean\",\n  0x320a,\n  \"khokhaithai\",\n  0x0e02,\n  \"khokhonthai\",\n  0x0e05,\n  \"khokhuatthai\",\n  0x0e03,\n  \"khokhwaithai\",\n  0x0e04,\n  \"khomutthai\",\n  0x0e5b,\n  \"khook\",\n  0x0199,\n  \"khorakhangthai\",\n  0x0e06,\n  \"khzsquare\",\n  0x3391,\n  \"kihiragana\",\n  0x304d,\n  \"kikatakana\",\n  0x30ad,\n  \"kikatakanahalfwidth\",\n  0xff77,\n  \"kiroguramusquare\",\n  0x3315,\n  \"kiromeetorusquare\",\n  0x3316,\n  \"kirosquare\",\n  0x3314,\n  \"kiyeokacirclekorean\",\n  0x326e,\n  \"kiyeokaparenkorean\",\n  0x320e,\n  \"kiyeokcirclekorean\",\n  0x3260,\n  \"kiyeokkorean\",\n  0x3131,\n  \"kiyeokparenkorean\",\n  0x3200,\n  \"kiyeoksioskorean\",\n  0x3133,\n  \"kjecyrillic\",\n  0x045c,\n  \"klinebelow\",\n  0x1e35,\n  \"klsquare\",\n  0x3398,\n  \"kmcubedsquare\",\n  0x33a6,\n  \"kmonospace\",\n  0xff4b,\n  \"kmsquaredsquare\",\n  0x33a2,\n  \"kohiragana\",\n  0x3053,\n  \"kohmsquare\",\n  0x33c0,\n  \"kokaithai\",\n  0x0e01,\n  \"kokatakana\",\n  0x30b3,\n  \"kokatakanahalfwidth\",\n  0xff7a,\n  \"kooposquare\",\n  0x331e,\n  \"koppacyrillic\",\n  0x0481,\n  \"koreanstandardsymbol\",\n  0x327f,\n  \"koroniscmb\",\n  0x0343,\n  \"kparen\",\n  0x24a6,\n  \"kpasquare\",\n  0x33aa,\n  \"ksicyrillic\",\n  0x046f,\n  \"ktsquare\",\n  0x33cf,\n  \"kturned\",\n  0x029e,\n  \"kuhiragana\",\n  0x304f,\n  \"kukatakana\",\n  0x30af,\n  \"kukatakanahalfwidth\",\n  0xff78,\n  \"kvsquare\",\n  0x33b8,\n  \"kwsquare\",\n  0x33be,\n  \"l\",\n  0x006c,\n  \"labengali\",\n  0x09b2,\n  \"lacute\",\n  0x013a,\n  \"ladeva\",\n  0x0932,\n  \"lagujarati\",\n  0x0ab2,\n  \"lagurmukhi\",\n  0x0a32,\n  \"lakkhangyaothai\",\n  0x0e45,\n  \"lamaleffinalarabic\",\n  0xfefc,\n  \"lamalefhamzaabovefinalarabic\",\n  0xfef8,\n  \"lamalefhamzaaboveisolatedarabic\",\n  0xfef7,\n  \"lamalefhamzabelowfinalarabic\",\n  0xfefa,\n  \"lamalefhamzabelowisolatedarabic\",\n  0xfef9,\n  \"lamalefisolatedarabic\",\n  0xfefb,\n  \"lamalefmaddaabovefinalarabic\",\n  0xfef6,\n  \"lamalefmaddaaboveisolatedarabic\",\n  0xfef5,\n  \"lamarabic\",\n  0x0644,\n  \"lambda\",\n  0x03bb,\n  \"lambdastroke\",\n  0x019b,\n  \"lamed\",\n  0x05dc,\n  \"lameddagesh\",\n  0xfb3c,\n  \"lameddageshhebrew\",\n  0xfb3c,\n  \"lamedhebrew\",\n  0x05dc,\n  \"lamfinalarabic\",\n  0xfede,\n  \"lamhahinitialarabic\",\n  0xfcca,\n  \"laminitialarabic\",\n  0xfedf,\n  \"lamjeeminitialarabic\",\n  0xfcc9,\n  \"lamkhahinitialarabic\",\n  0xfccb,\n  \"lamlamhehisolatedarabic\",\n  0xfdf2,\n  \"lammedialarabic\",\n  0xfee0,\n  \"lammeemhahinitialarabic\",\n  0xfd88,\n  \"lammeeminitialarabic\",\n  0xfccc,\n  \"largecircle\",\n  0x25ef,\n  \"lbar\",\n  0x019a,\n  \"lbelt\",\n  0x026c,\n  \"lbopomofo\",\n  0x310c,\n  \"lcaron\",\n  0x013e,\n  \"lcedilla\",\n  0x013c,\n  \"lcircle\",\n  0x24db,\n  \"lcircumflexbelow\",\n  0x1e3d,\n  \"lcommaaccent\",\n  0x013c,\n  \"ldot\",\n  0x0140,\n  \"ldotaccent\",\n  0x0140,\n  \"ldotbelow\",\n  0x1e37,\n  \"ldotbelowmacron\",\n  0x1e39,\n  \"leftangleabovecmb\",\n  0x031a,\n  \"lefttackbelowcmb\",\n  0x0318,\n  \"less\",\n  0x003c,\n  \"lessequal\",\n  0x2264,\n  \"lessequalorgreater\",\n  0x22da,\n  \"lessmonospace\",\n  0xff1c,\n  \"lessorequivalent\",\n  0x2272,\n  \"lessorgreater\",\n  0x2276,\n  \"lessoverequal\",\n  0x2266,\n  \"lesssmall\",\n  0xfe64,\n  \"lezh\",\n  0x026e,\n  \"lfblock\",\n  0x258c,\n  \"lhookretroflex\",\n  0x026d,\n  \"lira\",\n  0x20a4,\n  \"liwnarmenian\",\n  0x056c,\n  \"lj\",\n  0x01c9,\n  \"ljecyrillic\",\n  0x0459,\n  \"ll\",\n  0xf6c0,\n  \"lladeva\",\n  0x0933,\n  \"llagujarati\",\n  0x0ab3,\n  \"llinebelow\",\n  0x1e3b,\n  \"llladeva\",\n  0x0934,\n  \"llvocalicbengali\",\n  0x09e1,\n  \"llvocalicdeva\",\n  0x0961,\n  \"llvocalicvowelsignbengali\",\n  0x09e3,\n  \"llvocalicvowelsigndeva\",\n  0x0963,\n  \"lmiddletilde\",\n  0x026b,\n  \"lmonospace\",\n  0xff4c,\n  \"lmsquare\",\n  0x33d0,\n  \"lochulathai\",\n  0x0e2c,\n  \"logicaland\",\n  0x2227,\n  \"logicalnot\",\n  0x00ac,\n  \"logicalnotreversed\",\n  0x2310,\n  \"logicalor\",\n  0x2228,\n  \"lolingthai\",\n  0x0e25,\n  \"longs\",\n  0x017f,\n  \"lowlinecenterline\",\n  0xfe4e,\n  \"lowlinecmb\",\n  0x0332,\n  \"lowlinedashed\",\n  0xfe4d,\n  \"lozenge\",\n  0x25ca,\n  \"lparen\",\n  0x24a7,\n  \"lslash\",\n  0x0142,\n  \"lsquare\",\n  0x2113,\n  \"lsuperior\",\n  0xf6ee,\n  \"ltshade\",\n  0x2591,\n  \"luthai\",\n  0x0e26,\n  \"lvocalicbengali\",\n  0x098c,\n  \"lvocalicdeva\",\n  0x090c,\n  \"lvocalicvowelsignbengali\",\n  0x09e2,\n  \"lvocalicvowelsigndeva\",\n  0x0962,\n  \"lxsquare\",\n  0x33d3,\n  \"m\",\n  0x006d,\n  \"mabengali\",\n  0x09ae,\n  \"macron\",\n  0x00af,\n  \"macronbelowcmb\",\n  0x0331,\n  \"macroncmb\",\n  0x0304,\n  \"macronlowmod\",\n  0x02cd,\n  \"macronmonospace\",\n  0xffe3,\n  \"macute\",\n  0x1e3f,\n  \"madeva\",\n  0x092e,\n  \"magujarati\",\n  0x0aae,\n  \"magurmukhi\",\n  0x0a2e,\n  \"mahapakhhebrew\",\n  0x05a4,\n  \"mahapakhlefthebrew\",\n  0x05a4,\n  \"mahiragana\",\n  0x307e,\n  \"maichattawalowleftthai\",\n  0xf895,\n  \"maichattawalowrightthai\",\n  0xf894,\n  \"maichattawathai\",\n  0x0e4b,\n  \"maichattawaupperleftthai\",\n  0xf893,\n  \"maieklowleftthai\",\n  0xf88c,\n  \"maieklowrightthai\",\n  0xf88b,\n  \"maiekthai\",\n  0x0e48,\n  \"maiekupperleftthai\",\n  0xf88a,\n  \"maihanakatleftthai\",\n  0xf884,\n  \"maihanakatthai\",\n  0x0e31,\n  \"maitaikhuleftthai\",\n  0xf889,\n  \"maitaikhuthai\",\n  0x0e47,\n  \"maitholowleftthai\",\n  0xf88f,\n  \"maitholowrightthai\",\n  0xf88e,\n  \"maithothai\",\n  0x0e49,\n  \"maithoupperleftthai\",\n  0xf88d,\n  \"maitrilowleftthai\",\n  0xf892,\n  \"maitrilowrightthai\",\n  0xf891,\n  \"maitrithai\",\n  0x0e4a,\n  \"maitriupperleftthai\",\n  0xf890,\n  \"maiyamokthai\",\n  0x0e46,\n  \"makatakana\",\n  0x30de,\n  \"makatakanahalfwidth\",\n  0xff8f,\n  \"male\",\n  0x2642,\n  \"mansyonsquare\",\n  0x3347,\n  \"maqafhebrew\",\n  0x05be,\n  \"mars\",\n  0x2642,\n  \"masoracirclehebrew\",\n  0x05af,\n  \"masquare\",\n  0x3383,\n  \"mbopomofo\",\n  0x3107,\n  \"mbsquare\",\n  0x33d4,\n  \"mcircle\",\n  0x24dc,\n  \"mcubedsquare\",\n  0x33a5,\n  \"mdotaccent\",\n  0x1e41,\n  \"mdotbelow\",\n  0x1e43,\n  \"meemarabic\",\n  0x0645,\n  \"meemfinalarabic\",\n  0xfee2,\n  \"meeminitialarabic\",\n  0xfee3,\n  \"meemmedialarabic\",\n  0xfee4,\n  \"meemmeeminitialarabic\",\n  0xfcd1,\n  \"meemmeemisolatedarabic\",\n  0xfc48,\n  \"meetorusquare\",\n  0x334d,\n  \"mehiragana\",\n  0x3081,\n  \"meizierasquare\",\n  0x337e,\n  \"mekatakana\",\n  0x30e1,\n  \"mekatakanahalfwidth\",\n  0xff92,\n  \"mem\",\n  0x05de,\n  \"memdagesh\",\n  0xfb3e,\n  \"memdageshhebrew\",\n  0xfb3e,\n  \"memhebrew\",\n  0x05de,\n  \"menarmenian\",\n  0x0574,\n  \"merkhahebrew\",\n  0x05a5,\n  \"merkhakefulahebrew\",\n  0x05a6,\n  \"merkhakefulalefthebrew\",\n  0x05a6,\n  \"merkhalefthebrew\",\n  0x05a5,\n  \"mhook\",\n  0x0271,\n  \"mhzsquare\",\n  0x3392,\n  \"middledotkatakanahalfwidth\",\n  0xff65,\n  \"middot\",\n  0x00b7,\n  \"mieumacirclekorean\",\n  0x3272,\n  \"mieumaparenkorean\",\n  0x3212,\n  \"mieumcirclekorean\",\n  0x3264,\n  \"mieumkorean\",\n  0x3141,\n  \"mieumpansioskorean\",\n  0x3170,\n  \"mieumparenkorean\",\n  0x3204,\n  \"mieumpieupkorean\",\n  0x316e,\n  \"mieumsioskorean\",\n  0x316f,\n  \"mihiragana\",\n  0x307f,\n  \"mikatakana\",\n  0x30df,\n  \"mikatakanahalfwidth\",\n  0xff90,\n  \"minus\",\n  0x2212,\n  \"minusbelowcmb\",\n  0x0320,\n  \"minuscircle\",\n  0x2296,\n  \"minusmod\",\n  0x02d7,\n  \"minusplus\",\n  0x2213,\n  \"minute\",\n  0x2032,\n  \"miribaarusquare\",\n  0x334a,\n  \"mirisquare\",\n  0x3349,\n  \"mlonglegturned\",\n  0x0270,\n  \"mlsquare\",\n  0x3396,\n  \"mmcubedsquare\",\n  0x33a3,\n  \"mmonospace\",\n  0xff4d,\n  \"mmsquaredsquare\",\n  0x339f,\n  \"mohiragana\",\n  0x3082,\n  \"mohmsquare\",\n  0x33c1,\n  \"mokatakana\",\n  0x30e2,\n  \"mokatakanahalfwidth\",\n  0xff93,\n  \"molsquare\",\n  0x33d6,\n  \"momathai\",\n  0x0e21,\n  \"moverssquare\",\n  0x33a7,\n  \"moverssquaredsquare\",\n  0x33a8,\n  \"mparen\",\n  0x24a8,\n  \"mpasquare\",\n  0x33ab,\n  \"mssquare\",\n  0x33b3,\n  \"msuperior\",\n  0xf6ef,\n  \"mturned\",\n  0x026f,\n  \"mu\",\n  0x00b5,\n  \"mu1\",\n  0x00b5,\n  \"muasquare\",\n  0x3382,\n  \"muchgreater\",\n  0x226b,\n  \"muchless\",\n  0x226a,\n  \"mufsquare\",\n  0x338c,\n  \"mugreek\",\n  0x03bc,\n  \"mugsquare\",\n  0x338d,\n  \"muhiragana\",\n  0x3080,\n  \"mukatakana\",\n  0x30e0,\n  \"mukatakanahalfwidth\",\n  0xff91,\n  \"mulsquare\",\n  0x3395,\n  \"multiply\",\n  0x00d7,\n  \"mumsquare\",\n  0x339b,\n  \"munahhebrew\",\n  0x05a3,\n  \"munahlefthebrew\",\n  0x05a3,\n  \"musicalnote\",\n  0x266a,\n  \"musicalnotedbl\",\n  0x266b,\n  \"musicflatsign\",\n  0x266d,\n  \"musicsharpsign\",\n  0x266f,\n  \"mussquare\",\n  0x33b2,\n  \"muvsquare\",\n  0x33b6,\n  \"muwsquare\",\n  0x33bc,\n  \"mvmegasquare\",\n  0x33b9,\n  \"mvsquare\",\n  0x33b7,\n  \"mwmegasquare\",\n  0x33bf,\n  \"mwsquare\",\n  0x33bd,\n  \"n\",\n  0x006e,\n  \"nabengali\",\n  0x09a8,\n  \"nabla\",\n  0x2207,\n  \"nacute\",\n  0x0144,\n  \"nadeva\",\n  0x0928,\n  \"nagujarati\",\n  0x0aa8,\n  \"nagurmukhi\",\n  0x0a28,\n  \"nahiragana\",\n  0x306a,\n  \"nakatakana\",\n  0x30ca,\n  \"nakatakanahalfwidth\",\n  0xff85,\n  \"napostrophe\",\n  0x0149,\n  \"nasquare\",\n  0x3381,\n  \"nbopomofo\",\n  0x310b,\n  \"nbspace\",\n  0x00a0,\n  \"ncaron\",\n  0x0148,\n  \"ncedilla\",\n  0x0146,\n  \"ncircle\",\n  0x24dd,\n  \"ncircumflexbelow\",\n  0x1e4b,\n  \"ncommaaccent\",\n  0x0146,\n  \"ndotaccent\",\n  0x1e45,\n  \"ndotbelow\",\n  0x1e47,\n  \"nehiragana\",\n  0x306d,\n  \"nekatakana\",\n  0x30cd,\n  \"nekatakanahalfwidth\",\n  0xff88,\n  \"newsheqelsign\",\n  0x20aa,\n  \"nfsquare\",\n  0x338b,\n  \"ngabengali\",\n  0x0999,\n  \"ngadeva\",\n  0x0919,\n  \"ngagujarati\",\n  0x0a99,\n  \"ngagurmukhi\",\n  0x0a19,\n  \"ngonguthai\",\n  0x0e07,\n  \"nhiragana\",\n  0x3093,\n  \"nhookleft\",\n  0x0272,\n  \"nhookretroflex\",\n  0x0273,\n  \"nieunacirclekorean\",\n  0x326f,\n  \"nieunaparenkorean\",\n  0x320f,\n  \"nieuncieuckorean\",\n  0x3135,\n  \"nieuncirclekorean\",\n  0x3261,\n  \"nieunhieuhkorean\",\n  0x3136,\n  \"nieunkorean\",\n  0x3134,\n  \"nieunpansioskorean\",\n  0x3168,\n  \"nieunparenkorean\",\n  0x3201,\n  \"nieunsioskorean\",\n  0x3167,\n  \"nieuntikeutkorean\",\n  0x3166,\n  \"nihiragana\",\n  0x306b,\n  \"nikatakana\",\n  0x30cb,\n  \"nikatakanahalfwidth\",\n  0xff86,\n  \"nikhahitleftthai\",\n  0xf899,\n  \"nikhahitthai\",\n  0x0e4d,\n  \"nine\",\n  0x0039,\n  \"ninearabic\",\n  0x0669,\n  \"ninebengali\",\n  0x09ef,\n  \"ninecircle\",\n  0x2468,\n  \"ninecircleinversesansserif\",\n  0x2792,\n  \"ninedeva\",\n  0x096f,\n  \"ninegujarati\",\n  0x0aef,\n  \"ninegurmukhi\",\n  0x0a6f,\n  \"ninehackarabic\",\n  0x0669,\n  \"ninehangzhou\",\n  0x3029,\n  \"nineideographicparen\",\n  0x3228,\n  \"nineinferior\",\n  0x2089,\n  \"ninemonospace\",\n  0xff19,\n  \"nineoldstyle\",\n  0xf739,\n  \"nineparen\",\n  0x247c,\n  \"nineperiod\",\n  0x2490,\n  \"ninepersian\",\n  0x06f9,\n  \"nineroman\",\n  0x2178,\n  \"ninesuperior\",\n  0x2079,\n  \"nineteencircle\",\n  0x2472,\n  \"nineteenparen\",\n  0x2486,\n  \"nineteenperiod\",\n  0x249a,\n  \"ninethai\",\n  0x0e59,\n  \"nj\",\n  0x01cc,\n  \"njecyrillic\",\n  0x045a,\n  \"nkatakana\",\n  0x30f3,\n  \"nkatakanahalfwidth\",\n  0xff9d,\n  \"nlegrightlong\",\n  0x019e,\n  \"nlinebelow\",\n  0x1e49,\n  \"nmonospace\",\n  0xff4e,\n  \"nmsquare\",\n  0x339a,\n  \"nnabengali\",\n  0x09a3,\n  \"nnadeva\",\n  0x0923,\n  \"nnagujarati\",\n  0x0aa3,\n  \"nnagurmukhi\",\n  0x0a23,\n  \"nnnadeva\",\n  0x0929,\n  \"nohiragana\",\n  0x306e,\n  \"nokatakana\",\n  0x30ce,\n  \"nokatakanahalfwidth\",\n  0xff89,\n  \"nonbreakingspace\",\n  0x00a0,\n  \"nonenthai\",\n  0x0e13,\n  \"nonuthai\",\n  0x0e19,\n  \"noonarabic\",\n  0x0646,\n  \"noonfinalarabic\",\n  0xfee6,\n  \"noonghunnaarabic\",\n  0x06ba,\n  \"noonghunnafinalarabic\",\n  0xfb9f,\n  \"nooninitialarabic\",\n  0xfee7,\n  \"noonjeeminitialarabic\",\n  0xfcd2,\n  \"noonjeemisolatedarabic\",\n  0xfc4b,\n  \"noonmedialarabic\",\n  0xfee8,\n  \"noonmeeminitialarabic\",\n  0xfcd5,\n  \"noonmeemisolatedarabic\",\n  0xfc4e,\n  \"noonnoonfinalarabic\",\n  0xfc8d,\n  \"notcontains\",\n  0x220c,\n  \"notelement\",\n  0x2209,\n  \"notelementof\",\n  0x2209,\n  \"notequal\",\n  0x2260,\n  \"notgreater\",\n  0x226f,\n  \"notgreaternorequal\",\n  0x2271,\n  \"notgreaternorless\",\n  0x2279,\n  \"notidentical\",\n  0x2262,\n  \"notless\",\n  0x226e,\n  \"notlessnorequal\",\n  0x2270,\n  \"notparallel\",\n  0x2226,\n  \"notprecedes\",\n  0x2280,\n  \"notsubset\",\n  0x2284,\n  \"notsucceeds\",\n  0x2281,\n  \"notsuperset\",\n  0x2285,\n  \"nowarmenian\",\n  0x0576,\n  \"nparen\",\n  0x24a9,\n  \"nssquare\",\n  0x33b1,\n  \"nsuperior\",\n  0x207f,\n  \"ntilde\",\n  0x00f1,\n  \"nu\",\n  0x03bd,\n  \"nuhiragana\",\n  0x306c,\n  \"nukatakana\",\n  0x30cc,\n  \"nukatakanahalfwidth\",\n  0xff87,\n  \"nuktabengali\",\n  0x09bc,\n  \"nuktadeva\",\n  0x093c,\n  \"nuktagujarati\",\n  0x0abc,\n  \"nuktagurmukhi\",\n  0x0a3c,\n  \"numbersign\",\n  0x0023,\n  \"numbersignmonospace\",\n  0xff03,\n  \"numbersignsmall\",\n  0xfe5f,\n  \"numeralsigngreek\",\n  0x0374,\n  \"numeralsignlowergreek\",\n  0x0375,\n  \"numero\",\n  0x2116,\n  \"nun\",\n  0x05e0,\n  \"nundagesh\",\n  0xfb40,\n  \"nundageshhebrew\",\n  0xfb40,\n  \"nunhebrew\",\n  0x05e0,\n  \"nvsquare\",\n  0x33b5,\n  \"nwsquare\",\n  0x33bb,\n  \"nyabengali\",\n  0x099e,\n  \"nyadeva\",\n  0x091e,\n  \"nyagujarati\",\n  0x0a9e,\n  \"nyagurmukhi\",\n  0x0a1e,\n  \"o\",\n  0x006f,\n  \"oacute\",\n  0x00f3,\n  \"oangthai\",\n  0x0e2d,\n  \"obarred\",\n  0x0275,\n  \"obarredcyrillic\",\n  0x04e9,\n  \"obarreddieresiscyrillic\",\n  0x04eb,\n  \"obengali\",\n  0x0993,\n  \"obopomofo\",\n  0x311b,\n  \"obreve\",\n  0x014f,\n  \"ocandradeva\",\n  0x0911,\n  \"ocandragujarati\",\n  0x0a91,\n  \"ocandravowelsigndeva\",\n  0x0949,\n  \"ocandravowelsigngujarati\",\n  0x0ac9,\n  \"ocaron\",\n  0x01d2,\n  \"ocircle\",\n  0x24de,\n  \"ocircumflex\",\n  0x00f4,\n  \"ocircumflexacute\",\n  0x1ed1,\n  \"ocircumflexdotbelow\",\n  0x1ed9,\n  \"ocircumflexgrave\",\n  0x1ed3,\n  \"ocircumflexhookabove\",\n  0x1ed5,\n  \"ocircumflextilde\",\n  0x1ed7,\n  \"ocyrillic\",\n  0x043e,\n  \"odblacute\",\n  0x0151,\n  \"odblgrave\",\n  0x020d,\n  \"odeva\",\n  0x0913,\n  \"odieresis\",\n  0x00f6,\n  \"odieresiscyrillic\",\n  0x04e7,\n  \"odotbelow\",\n  0x1ecd,\n  \"oe\",\n  0x0153,\n  \"oekorean\",\n  0x315a,\n  \"ogonek\",\n  0x02db,\n  \"ogonekcmb\",\n  0x0328,\n  \"ograve\",\n  0x00f2,\n  \"ogujarati\",\n  0x0a93,\n  \"oharmenian\",\n  0x0585,\n  \"ohiragana\",\n  0x304a,\n  \"ohookabove\",\n  0x1ecf,\n  \"ohorn\",\n  0x01a1,\n  \"ohornacute\",\n  0x1edb,\n  \"ohorndotbelow\",\n  0x1ee3,\n  \"ohorngrave\",\n  0x1edd,\n  \"ohornhookabove\",\n  0x1edf,\n  \"ohorntilde\",\n  0x1ee1,\n  \"ohungarumlaut\",\n  0x0151,\n  \"oi\",\n  0x01a3,\n  \"oinvertedbreve\",\n  0x020f,\n  \"okatakana\",\n  0x30aa,\n  \"okatakanahalfwidth\",\n  0xff75,\n  \"okorean\",\n  0x3157,\n  \"olehebrew\",\n  0x05ab,\n  \"omacron\",\n  0x014d,\n  \"omacronacute\",\n  0x1e53,\n  \"omacrongrave\",\n  0x1e51,\n  \"omdeva\",\n  0x0950,\n  \"omega\",\n  0x03c9,\n  \"omega1\",\n  0x03d6,\n  \"omegacyrillic\",\n  0x0461,\n  \"omegalatinclosed\",\n  0x0277,\n  \"omegaroundcyrillic\",\n  0x047b,\n  \"omegatitlocyrillic\",\n  0x047d,\n  \"omegatonos\",\n  0x03ce,\n  \"omgujarati\",\n  0x0ad0,\n  \"omicron\",\n  0x03bf,\n  \"omicrontonos\",\n  0x03cc,\n  \"omonospace\",\n  0xff4f,\n  \"one\",\n  0x0031,\n  \"onearabic\",\n  0x0661,\n  \"onebengali\",\n  0x09e7,\n  \"onecircle\",\n  0x2460,\n  \"onecircleinversesansserif\",\n  0x278a,\n  \"onedeva\",\n  0x0967,\n  \"onedotenleader\",\n  0x2024,\n  \"oneeighth\",\n  0x215b,\n  \"onefitted\",\n  0xf6dc,\n  \"onegujarati\",\n  0x0ae7,\n  \"onegurmukhi\",\n  0x0a67,\n  \"onehackarabic\",\n  0x0661,\n  \"onehalf\",\n  0x00bd,\n  \"onehangzhou\",\n  0x3021,\n  \"oneideographicparen\",\n  0x3220,\n  \"oneinferior\",\n  0x2081,\n  \"onemonospace\",\n  0xff11,\n  \"onenumeratorbengali\",\n  0x09f4,\n  \"oneoldstyle\",\n  0xf731,\n  \"oneparen\",\n  0x2474,\n  \"oneperiod\",\n  0x2488,\n  \"onepersian\",\n  0x06f1,\n  \"onequarter\",\n  0x00bc,\n  \"oneroman\",\n  0x2170,\n  \"onesuperior\",\n  0x00b9,\n  \"onethai\",\n  0x0e51,\n  \"onethird\",\n  0x2153,\n  \"oogonek\",\n  0x01eb,\n  \"oogonekmacron\",\n  0x01ed,\n  \"oogurmukhi\",\n  0x0a13,\n  \"oomatragurmukhi\",\n  0x0a4b,\n  \"oopen\",\n  0x0254,\n  \"oparen\",\n  0x24aa,\n  \"openbullet\",\n  0x25e6,\n  \"option\",\n  0x2325,\n  \"ordfeminine\",\n  0x00aa,\n  \"ordmasculine\",\n  0x00ba,\n  \"orthogonal\",\n  0x221f,\n  \"oshortdeva\",\n  0x0912,\n  \"oshortvowelsigndeva\",\n  0x094a,\n  \"oslash\",\n  0x00f8,\n  \"oslashacute\",\n  0x01ff,\n  \"osmallhiragana\",\n  0x3049,\n  \"osmallkatakana\",\n  0x30a9,\n  \"osmallkatakanahalfwidth\",\n  0xff6b,\n  \"ostrokeacute\",\n  0x01ff,\n  \"osuperior\",\n  0xf6f0,\n  \"otcyrillic\",\n  0x047f,\n  \"otilde\",\n  0x00f5,\n  \"otildeacute\",\n  0x1e4d,\n  \"otildedieresis\",\n  0x1e4f,\n  \"oubopomofo\",\n  0x3121,\n  \"overline\",\n  0x203e,\n  \"overlinecenterline\",\n  0xfe4a,\n  \"overlinecmb\",\n  0x0305,\n  \"overlinedashed\",\n  0xfe49,\n  \"overlinedblwavy\",\n  0xfe4c,\n  \"overlinewavy\",\n  0xfe4b,\n  \"overscore\",\n  0x00af,\n  \"ovowelsignbengali\",\n  0x09cb,\n  \"ovowelsigndeva\",\n  0x094b,\n  \"ovowelsigngujarati\",\n  0x0acb,\n  \"p\",\n  0x0070,\n  \"paampssquare\",\n  0x3380,\n  \"paasentosquare\",\n  0x332b,\n  \"pabengali\",\n  0x09aa,\n  \"pacute\",\n  0x1e55,\n  \"padeva\",\n  0x092a,\n  \"pagedown\",\n  0x21df,\n  \"pageup\",\n  0x21de,\n  \"pagujarati\",\n  0x0aaa,\n  \"pagurmukhi\",\n  0x0a2a,\n  \"pahiragana\",\n  0x3071,\n  \"paiyannoithai\",\n  0x0e2f,\n  \"pakatakana\",\n  0x30d1,\n  \"palatalizationcyrilliccmb\",\n  0x0484,\n  \"palochkacyrillic\",\n  0x04c0,\n  \"pansioskorean\",\n  0x317f,\n  \"paragraph\",\n  0x00b6,\n  \"parallel\",\n  0x2225,\n  \"parenleft\",\n  0x0028,\n  \"parenleftaltonearabic\",\n  0xfd3e,\n  \"parenleftbt\",\n  0xf8ed,\n  \"parenleftex\",\n  0xf8ec,\n  \"parenleftinferior\",\n  0x208d,\n  \"parenleftmonospace\",\n  0xff08,\n  \"parenleftsmall\",\n  0xfe59,\n  \"parenleftsuperior\",\n  0x207d,\n  \"parenlefttp\",\n  0xf8eb,\n  \"parenleftvertical\",\n  0xfe35,\n  \"parenright\",\n  0x0029,\n  \"parenrightaltonearabic\",\n  0xfd3f,\n  \"parenrightbt\",\n  0xf8f8,\n  \"parenrightex\",\n  0xf8f7,\n  \"parenrightinferior\",\n  0x208e,\n  \"parenrightmonospace\",\n  0xff09,\n  \"parenrightsmall\",\n  0xfe5a,\n  \"parenrightsuperior\",\n  0x207e,\n  \"parenrighttp\",\n  0xf8f6,\n  \"parenrightvertical\",\n  0xfe36,\n  \"partialdiff\",\n  0x2202,\n  \"paseqhebrew\",\n  0x05c0,\n  \"pashtahebrew\",\n  0x0599,\n  \"pasquare\",\n  0x33a9,\n  \"patah\",\n  0x05b7,\n  \"patah11\",\n  0x05b7,\n  \"patah1d\",\n  0x05b7,\n  \"patah2a\",\n  0x05b7,\n  \"patahhebrew\",\n  0x05b7,\n  \"patahnarrowhebrew\",\n  0x05b7,\n  \"patahquarterhebrew\",\n  0x05b7,\n  \"patahwidehebrew\",\n  0x05b7,\n  \"pazerhebrew\",\n  0x05a1,\n  \"pbopomofo\",\n  0x3106,\n  \"pcircle\",\n  0x24df,\n  \"pdotaccent\",\n  0x1e57,\n  \"pe\",\n  0x05e4,\n  \"pecyrillic\",\n  0x043f,\n  \"pedagesh\",\n  0xfb44,\n  \"pedageshhebrew\",\n  0xfb44,\n  \"peezisquare\",\n  0x333b,\n  \"pefinaldageshhebrew\",\n  0xfb43,\n  \"peharabic\",\n  0x067e,\n  \"peharmenian\",\n  0x057a,\n  \"pehebrew\",\n  0x05e4,\n  \"pehfinalarabic\",\n  0xfb57,\n  \"pehinitialarabic\",\n  0xfb58,\n  \"pehiragana\",\n  0x307a,\n  \"pehmedialarabic\",\n  0xfb59,\n  \"pekatakana\",\n  0x30da,\n  \"pemiddlehookcyrillic\",\n  0x04a7,\n  \"perafehebrew\",\n  0xfb4e,\n  \"percent\",\n  0x0025,\n  \"percentarabic\",\n  0x066a,\n  \"percentmonospace\",\n  0xff05,\n  \"percentsmall\",\n  0xfe6a,\n  \"period\",\n  0x002e,\n  \"periodarmenian\",\n  0x0589,\n  \"periodcentered\",\n  0x00b7,\n  \"periodhalfwidth\",\n  0xff61,\n  \"periodinferior\",\n  0xf6e7,\n  \"periodmonospace\",\n  0xff0e,\n  \"periodsmall\",\n  0xfe52,\n  \"periodsuperior\",\n  0xf6e8,\n  \"perispomenigreekcmb\",\n  0x0342,\n  \"perpendicular\",\n  0x22a5,\n  \"perthousand\",\n  0x2030,\n  \"peseta\",\n  0x20a7,\n  \"pfsquare\",\n  0x338a,\n  \"phabengali\",\n  0x09ab,\n  \"phadeva\",\n  0x092b,\n  \"phagujarati\",\n  0x0aab,\n  \"phagurmukhi\",\n  0x0a2b,\n  \"phi\",\n  0x03c6,\n  \"phi1\",\n  0x03d5,\n  \"phieuphacirclekorean\",\n  0x327a,\n  \"phieuphaparenkorean\",\n  0x321a,\n  \"phieuphcirclekorean\",\n  0x326c,\n  \"phieuphkorean\",\n  0x314d,\n  \"phieuphparenkorean\",\n  0x320c,\n  \"philatin\",\n  0x0278,\n  \"phinthuthai\",\n  0x0e3a,\n  \"phisymbolgreek\",\n  0x03d5,\n  \"phook\",\n  0x01a5,\n  \"phophanthai\",\n  0x0e1e,\n  \"phophungthai\",\n  0x0e1c,\n  \"phosamphaothai\",\n  0x0e20,\n  \"pi\",\n  0x03c0,\n  \"pieupacirclekorean\",\n  0x3273,\n  \"pieupaparenkorean\",\n  0x3213,\n  \"pieupcieuckorean\",\n  0x3176,\n  \"pieupcirclekorean\",\n  0x3265,\n  \"pieupkiyeokkorean\",\n  0x3172,\n  \"pieupkorean\",\n  0x3142,\n  \"pieupparenkorean\",\n  0x3205,\n  \"pieupsioskiyeokkorean\",\n  0x3174,\n  \"pieupsioskorean\",\n  0x3144,\n  \"pieupsiostikeutkorean\",\n  0x3175,\n  \"pieupthieuthkorean\",\n  0x3177,\n  \"pieuptikeutkorean\",\n  0x3173,\n  \"pihiragana\",\n  0x3074,\n  \"pikatakana\",\n  0x30d4,\n  \"pisymbolgreek\",\n  0x03d6,\n  \"piwrarmenian\",\n  0x0583,\n  \"plus\",\n  0x002b,\n  \"plusbelowcmb\",\n  0x031f,\n  \"pluscircle\",\n  0x2295,\n  \"plusminus\",\n  0x00b1,\n  \"plusmod\",\n  0x02d6,\n  \"plusmonospace\",\n  0xff0b,\n  \"plussmall\",\n  0xfe62,\n  \"plussuperior\",\n  0x207a,\n  \"pmonospace\",\n  0xff50,\n  \"pmsquare\",\n  0x33d8,\n  \"pohiragana\",\n  0x307d,\n  \"pointingindexdownwhite\",\n  0x261f,\n  \"pointingindexleftwhite\",\n  0x261c,\n  \"pointingindexrightwhite\",\n  0x261e,\n  \"pointingindexupwhite\",\n  0x261d,\n  \"pokatakana\",\n  0x30dd,\n  \"poplathai\",\n  0x0e1b,\n  \"postalmark\",\n  0x3012,\n  \"postalmarkface\",\n  0x3020,\n  \"pparen\",\n  0x24ab,\n  \"precedes\",\n  0x227a,\n  \"prescription\",\n  0x211e,\n  \"primemod\",\n  0x02b9,\n  \"primereversed\",\n  0x2035,\n  \"product\",\n  0x220f,\n  \"projective\",\n  0x2305,\n  \"prolongedkana\",\n  0x30fc,\n  \"propellor\",\n  0x2318,\n  \"propersubset\",\n  0x2282,\n  \"propersuperset\",\n  0x2283,\n  \"proportion\",\n  0x2237,\n  \"proportional\",\n  0x221d,\n  \"psi\",\n  0x03c8,\n  \"psicyrillic\",\n  0x0471,\n  \"psilipneumatacyrilliccmb\",\n  0x0486,\n  \"pssquare\",\n  0x33b0,\n  \"puhiragana\",\n  0x3077,\n  \"pukatakana\",\n  0x30d7,\n  \"pvsquare\",\n  0x33b4,\n  \"pwsquare\",\n  0x33ba,\n  \"q\",\n  0x0071,\n  \"qadeva\",\n  0x0958,\n  \"qadmahebrew\",\n  0x05a8,\n  \"qafarabic\",\n  0x0642,\n  \"qaffinalarabic\",\n  0xfed6,\n  \"qafinitialarabic\",\n  0xfed7,\n  \"qafmedialarabic\",\n  0xfed8,\n  \"qamats\",\n  0x05b8,\n  \"qamats10\",\n  0x05b8,\n  \"qamats1a\",\n  0x05b8,\n  \"qamats1c\",\n  0x05b8,\n  \"qamats27\",\n  0x05b8,\n  \"qamats29\",\n  0x05b8,\n  \"qamats33\",\n  0x05b8,\n  \"qamatsde\",\n  0x05b8,\n  \"qamatshebrew\",\n  0x05b8,\n  \"qamatsnarrowhebrew\",\n  0x05b8,\n  \"qamatsqatanhebrew\",\n  0x05b8,\n  \"qamatsqatannarrowhebrew\",\n  0x05b8,\n  \"qamatsqatanquarterhebrew\",\n  0x05b8,\n  \"qamatsqatanwidehebrew\",\n  0x05b8,\n  \"qamatsquarterhebrew\",\n  0x05b8,\n  \"qamatswidehebrew\",\n  0x05b8,\n  \"qarneyparahebrew\",\n  0x059f,\n  \"qbopomofo\",\n  0x3111,\n  \"qcircle\",\n  0x24e0,\n  \"qhook\",\n  0x02a0,\n  \"qmonospace\",\n  0xff51,\n  \"qof\",\n  0x05e7,\n  \"qofdagesh\",\n  0xfb47,\n  \"qofdageshhebrew\",\n  0xfb47,\n  \"qofhebrew\",\n  0x05e7,\n  \"qparen\",\n  0x24ac,\n  \"quarternote\",\n  0x2669,\n  \"qubuts\",\n  0x05bb,\n  \"qubuts18\",\n  0x05bb,\n  \"qubuts25\",\n  0x05bb,\n  \"qubuts31\",\n  0x05bb,\n  \"qubutshebrew\",\n  0x05bb,\n  \"qubutsnarrowhebrew\",\n  0x05bb,\n  \"qubutsquarterhebrew\",\n  0x05bb,\n  \"qubutswidehebrew\",\n  0x05bb,\n  \"question\",\n  0x003f,\n  \"questionarabic\",\n  0x061f,\n  \"questionarmenian\",\n  0x055e,\n  \"questiondown\",\n  0x00bf,\n  \"questiondownsmall\",\n  0xf7bf,\n  \"questiongreek\",\n  0x037e,\n  \"questionmonospace\",\n  0xff1f,\n  \"questionsmall\",\n  0xf73f,\n  \"quotedbl\",\n  0x0022,\n  \"quotedblbase\",\n  0x201e,\n  \"quotedblleft\",\n  0x201c,\n  \"quotedblmonospace\",\n  0xff02,\n  \"quotedblprime\",\n  0x301e,\n  \"quotedblprimereversed\",\n  0x301d,\n  \"quotedblright\",\n  0x201d,\n  \"quoteleft\",\n  0x2018,\n  \"quoteleftreversed\",\n  0x201b,\n  \"quotereversed\",\n  0x201b,\n  \"quoteright\",\n  0x2019,\n  \"quoterightn\",\n  0x0149,\n  \"quotesinglbase\",\n  0x201a,\n  \"quotesingle\",\n  0x0027,\n  \"quotesinglemonospace\",\n  0xff07,\n  \"r\",\n  0x0072,\n  \"raarmenian\",\n  0x057c,\n  \"rabengali\",\n  0x09b0,\n  \"racute\",\n  0x0155,\n  \"radeva\",\n  0x0930,\n  \"radical\",\n  0x221a,\n  \"radicalex\",\n  0xf8e5,\n  \"radoverssquare\",\n  0x33ae,\n  \"radoverssquaredsquare\",\n  0x33af,\n  \"radsquare\",\n  0x33ad,\n  \"rafe\",\n  0x05bf,\n  \"rafehebrew\",\n  0x05bf,\n  \"ragujarati\",\n  0x0ab0,\n  \"ragurmukhi\",\n  0x0a30,\n  \"rahiragana\",\n  0x3089,\n  \"rakatakana\",\n  0x30e9,\n  \"rakatakanahalfwidth\",\n  0xff97,\n  \"ralowerdiagonalbengali\",\n  0x09f1,\n  \"ramiddlediagonalbengali\",\n  0x09f0,\n  \"ramshorn\",\n  0x0264,\n  \"ratio\",\n  0x2236,\n  \"rbopomofo\",\n  0x3116,\n  \"rcaron\",\n  0x0159,\n  \"rcedilla\",\n  0x0157,\n  \"rcircle\",\n  0x24e1,\n  \"rcommaaccent\",\n  0x0157,\n  \"rdblgrave\",\n  0x0211,\n  \"rdotaccent\",\n  0x1e59,\n  \"rdotbelow\",\n  0x1e5b,\n  \"rdotbelowmacron\",\n  0x1e5d,\n  \"referencemark\",\n  0x203b,\n  \"reflexsubset\",\n  0x2286,\n  \"reflexsuperset\",\n  0x2287,\n  \"registered\",\n  0x00ae,\n  \"registersans\",\n  0xf8e8,\n  \"registerserif\",\n  0xf6da,\n  \"reharabic\",\n  0x0631,\n  \"reharmenian\",\n  0x0580,\n  \"rehfinalarabic\",\n  0xfeae,\n  \"rehiragana\",\n  0x308c,\n  \"rekatakana\",\n  0x30ec,\n  \"rekatakanahalfwidth\",\n  0xff9a,\n  \"resh\",\n  0x05e8,\n  \"reshdageshhebrew\",\n  0xfb48,\n  \"reshhebrew\",\n  0x05e8,\n  \"reversedtilde\",\n  0x223d,\n  \"reviahebrew\",\n  0x0597,\n  \"reviamugrashhebrew\",\n  0x0597,\n  \"revlogicalnot\",\n  0x2310,\n  \"rfishhook\",\n  0x027e,\n  \"rfishhookreversed\",\n  0x027f,\n  \"rhabengali\",\n  0x09dd,\n  \"rhadeva\",\n  0x095d,\n  \"rho\",\n  0x03c1,\n  \"rhook\",\n  0x027d,\n  \"rhookturned\",\n  0x027b,\n  \"rhookturnedsuperior\",\n  0x02b5,\n  \"rhosymbolgreek\",\n  0x03f1,\n  \"rhotichookmod\",\n  0x02de,\n  \"rieulacirclekorean\",\n  0x3271,\n  \"rieulaparenkorean\",\n  0x3211,\n  \"rieulcirclekorean\",\n  0x3263,\n  \"rieulhieuhkorean\",\n  0x3140,\n  \"rieulkiyeokkorean\",\n  0x313a,\n  \"rieulkiyeoksioskorean\",\n  0x3169,\n  \"rieulkorean\",\n  0x3139,\n  \"rieulmieumkorean\",\n  0x313b,\n  \"rieulpansioskorean\",\n  0x316c,\n  \"rieulparenkorean\",\n  0x3203,\n  \"rieulphieuphkorean\",\n  0x313f,\n  \"rieulpieupkorean\",\n  0x313c,\n  \"rieulpieupsioskorean\",\n  0x316b,\n  \"rieulsioskorean\",\n  0x313d,\n  \"rieulthieuthkorean\",\n  0x313e,\n  \"rieultikeutkorean\",\n  0x316a,\n  \"rieulyeorinhieuhkorean\",\n  0x316d,\n  \"rightangle\",\n  0x221f,\n  \"righttackbelowcmb\",\n  0x0319,\n  \"righttriangle\",\n  0x22bf,\n  \"rihiragana\",\n  0x308a,\n  \"rikatakana\",\n  0x30ea,\n  \"rikatakanahalfwidth\",\n  0xff98,\n  \"ring\",\n  0x02da,\n  \"ringbelowcmb\",\n  0x0325,\n  \"ringcmb\",\n  0x030a,\n  \"ringhalfleft\",\n  0x02bf,\n  \"ringhalfleftarmenian\",\n  0x0559,\n  \"ringhalfleftbelowcmb\",\n  0x031c,\n  \"ringhalfleftcentered\",\n  0x02d3,\n  \"ringhalfright\",\n  0x02be,\n  \"ringhalfrightbelowcmb\",\n  0x0339,\n  \"ringhalfrightcentered\",\n  0x02d2,\n  \"rinvertedbreve\",\n  0x0213,\n  \"rittorusquare\",\n  0x3351,\n  \"rlinebelow\",\n  0x1e5f,\n  \"rlongleg\",\n  0x027c,\n  \"rlonglegturned\",\n  0x027a,\n  \"rmonospace\",\n  0xff52,\n  \"rohiragana\",\n  0x308d,\n  \"rokatakana\",\n  0x30ed,\n  \"rokatakanahalfwidth\",\n  0xff9b,\n  \"roruathai\",\n  0x0e23,\n  \"rparen\",\n  0x24ad,\n  \"rrabengali\",\n  0x09dc,\n  \"rradeva\",\n  0x0931,\n  \"rragurmukhi\",\n  0x0a5c,\n  \"rreharabic\",\n  0x0691,\n  \"rrehfinalarabic\",\n  0xfb8d,\n  \"rrvocalicbengali\",\n  0x09e0,\n  \"rrvocalicdeva\",\n  0x0960,\n  \"rrvocalicgujarati\",\n  0x0ae0,\n  \"rrvocalicvowelsignbengali\",\n  0x09c4,\n  \"rrvocalicvowelsigndeva\",\n  0x0944,\n  \"rrvocalicvowelsigngujarati\",\n  0x0ac4,\n  \"rsuperior\",\n  0xf6f1,\n  \"rtblock\",\n  0x2590,\n  \"rturned\",\n  0x0279,\n  \"rturnedsuperior\",\n  0x02b4,\n  \"ruhiragana\",\n  0x308b,\n  \"rukatakana\",\n  0x30eb,\n  \"rukatakanahalfwidth\",\n  0xff99,\n  \"rupeemarkbengali\",\n  0x09f2,\n  \"rupeesignbengali\",\n  0x09f3,\n  \"rupiah\",\n  0xf6dd,\n  \"ruthai\",\n  0x0e24,\n  \"rvocalicbengali\",\n  0x098b,\n  \"rvocalicdeva\",\n  0x090b,\n  \"rvocalicgujarati\",\n  0x0a8b,\n  \"rvocalicvowelsignbengali\",\n  0x09c3,\n  \"rvocalicvowelsigndeva\",\n  0x0943,\n  \"rvocalicvowelsigngujarati\",\n  0x0ac3,\n  \"s\",\n  0x0073,\n  \"sabengali\",\n  0x09b8,\n  \"sacute\",\n  0x015b,\n  \"sacutedotaccent\",\n  0x1e65,\n  \"sadarabic\",\n  0x0635,\n  \"sadeva\",\n  0x0938,\n  \"sadfinalarabic\",\n  0xfeba,\n  \"sadinitialarabic\",\n  0xfebb,\n  \"sadmedialarabic\",\n  0xfebc,\n  \"sagujarati\",\n  0x0ab8,\n  \"sagurmukhi\",\n  0x0a38,\n  \"sahiragana\",\n  0x3055,\n  \"sakatakana\",\n  0x30b5,\n  \"sakatakanahalfwidth\",\n  0xff7b,\n  \"sallallahoualayhewasallamarabic\",\n  0xfdfa,\n  \"samekh\",\n  0x05e1,\n  \"samekhdagesh\",\n  0xfb41,\n  \"samekhdageshhebrew\",\n  0xfb41,\n  \"samekhhebrew\",\n  0x05e1,\n  \"saraaathai\",\n  0x0e32,\n  \"saraaethai\",\n  0x0e41,\n  \"saraaimaimalaithai\",\n  0x0e44,\n  \"saraaimaimuanthai\",\n  0x0e43,\n  \"saraamthai\",\n  0x0e33,\n  \"saraathai\",\n  0x0e30,\n  \"saraethai\",\n  0x0e40,\n  \"saraiileftthai\",\n  0xf886,\n  \"saraiithai\",\n  0x0e35,\n  \"saraileftthai\",\n  0xf885,\n  \"saraithai\",\n  0x0e34,\n  \"saraothai\",\n  0x0e42,\n  \"saraueeleftthai\",\n  0xf888,\n  \"saraueethai\",\n  0x0e37,\n  \"saraueleftthai\",\n  0xf887,\n  \"sarauethai\",\n  0x0e36,\n  \"sarauthai\",\n  0x0e38,\n  \"sarauuthai\",\n  0x0e39,\n  \"sbopomofo\",\n  0x3119,\n  \"scaron\",\n  0x0161,\n  \"scarondotaccent\",\n  0x1e67,\n  \"scedilla\",\n  0x015f,\n  \"schwa\",\n  0x0259,\n  \"schwacyrillic\",\n  0x04d9,\n  \"schwadieresiscyrillic\",\n  0x04db,\n  \"schwahook\",\n  0x025a,\n  \"scircle\",\n  0x24e2,\n  \"scircumflex\",\n  0x015d,\n  \"scommaaccent\",\n  0x0219,\n  \"sdotaccent\",\n  0x1e61,\n  \"sdotbelow\",\n  0x1e63,\n  \"sdotbelowdotaccent\",\n  0x1e69,\n  \"seagullbelowcmb\",\n  0x033c,\n  \"second\",\n  0x2033,\n  \"secondtonechinese\",\n  0x02ca,\n  \"section\",\n  0x00a7,\n  \"seenarabic\",\n  0x0633,\n  \"seenfinalarabic\",\n  0xfeb2,\n  \"seeninitialarabic\",\n  0xfeb3,\n  \"seenmedialarabic\",\n  0xfeb4,\n  \"segol\",\n  0x05b6,\n  \"segol13\",\n  0x05b6,\n  \"segol1f\",\n  0x05b6,\n  \"segol2c\",\n  0x05b6,\n  \"segolhebrew\",\n  0x05b6,\n  \"segolnarrowhebrew\",\n  0x05b6,\n  \"segolquarterhebrew\",\n  0x05b6,\n  \"segoltahebrew\",\n  0x0592,\n  \"segolwidehebrew\",\n  0x05b6,\n  \"seharmenian\",\n  0x057d,\n  \"sehiragana\",\n  0x305b,\n  \"sekatakana\",\n  0x30bb,\n  \"sekatakanahalfwidth\",\n  0xff7e,\n  \"semicolon\",\n  0x003b,\n  \"semicolonarabic\",\n  0x061b,\n  \"semicolonmonospace\",\n  0xff1b,\n  \"semicolonsmall\",\n  0xfe54,\n  \"semivoicedmarkkana\",\n  0x309c,\n  \"semivoicedmarkkanahalfwidth\",\n  0xff9f,\n  \"sentisquare\",\n  0x3322,\n  \"sentosquare\",\n  0x3323,\n  \"seven\",\n  0x0037,\n  \"sevenarabic\",\n  0x0667,\n  \"sevenbengali\",\n  0x09ed,\n  \"sevencircle\",\n  0x2466,\n  \"sevencircleinversesansserif\",\n  0x2790,\n  \"sevendeva\",\n  0x096d,\n  \"seveneighths\",\n  0x215e,\n  \"sevengujarati\",\n  0x0aed,\n  \"sevengurmukhi\",\n  0x0a6d,\n  \"sevenhackarabic\",\n  0x0667,\n  \"sevenhangzhou\",\n  0x3027,\n  \"sevenideographicparen\",\n  0x3226,\n  \"seveninferior\",\n  0x2087,\n  \"sevenmonospace\",\n  0xff17,\n  \"sevenoldstyle\",\n  0xf737,\n  \"sevenparen\",\n  0x247a,\n  \"sevenperiod\",\n  0x248e,\n  \"sevenpersian\",\n  0x06f7,\n  \"sevenroman\",\n  0x2176,\n  \"sevensuperior\",\n  0x2077,\n  \"seventeencircle\",\n  0x2470,\n  \"seventeenparen\",\n  0x2484,\n  \"seventeenperiod\",\n  0x2498,\n  \"seventhai\",\n  0x0e57,\n  \"sfthyphen\",\n  0x00ad,\n  \"shaarmenian\",\n  0x0577,\n  \"shabengali\",\n  0x09b6,\n  \"shacyrillic\",\n  0x0448,\n  \"shaddaarabic\",\n  0x0651,\n  \"shaddadammaarabic\",\n  0xfc61,\n  \"shaddadammatanarabic\",\n  0xfc5e,\n  \"shaddafathaarabic\",\n  0xfc60,\n  \"shaddakasraarabic\",\n  0xfc62,\n  \"shaddakasratanarabic\",\n  0xfc5f,\n  \"shade\",\n  0x2592,\n  \"shadedark\",\n  0x2593,\n  \"shadelight\",\n  0x2591,\n  \"shademedium\",\n  0x2592,\n  \"shadeva\",\n  0x0936,\n  \"shagujarati\",\n  0x0ab6,\n  \"shagurmukhi\",\n  0x0a36,\n  \"shalshelethebrew\",\n  0x0593,\n  \"shbopomofo\",\n  0x3115,\n  \"shchacyrillic\",\n  0x0449,\n  \"sheenarabic\",\n  0x0634,\n  \"sheenfinalarabic\",\n  0xfeb6,\n  \"sheeninitialarabic\",\n  0xfeb7,\n  \"sheenmedialarabic\",\n  0xfeb8,\n  \"sheicoptic\",\n  0x03e3,\n  \"sheqel\",\n  0x20aa,\n  \"sheqelhebrew\",\n  0x20aa,\n  \"sheva\",\n  0x05b0,\n  \"sheva115\",\n  0x05b0,\n  \"sheva15\",\n  0x05b0,\n  \"sheva22\",\n  0x05b0,\n  \"sheva2e\",\n  0x05b0,\n  \"shevahebrew\",\n  0x05b0,\n  \"shevanarrowhebrew\",\n  0x05b0,\n  \"shevaquarterhebrew\",\n  0x05b0,\n  \"shevawidehebrew\",\n  0x05b0,\n  \"shhacyrillic\",\n  0x04bb,\n  \"shimacoptic\",\n  0x03ed,\n  \"shin\",\n  0x05e9,\n  \"shindagesh\",\n  0xfb49,\n  \"shindageshhebrew\",\n  0xfb49,\n  \"shindageshshindot\",\n  0xfb2c,\n  \"shindageshshindothebrew\",\n  0xfb2c,\n  \"shindageshsindot\",\n  0xfb2d,\n  \"shindageshsindothebrew\",\n  0xfb2d,\n  \"shindothebrew\",\n  0x05c1,\n  \"shinhebrew\",\n  0x05e9,\n  \"shinshindot\",\n  0xfb2a,\n  \"shinshindothebrew\",\n  0xfb2a,\n  \"shinsindot\",\n  0xfb2b,\n  \"shinsindothebrew\",\n  0xfb2b,\n  \"shook\",\n  0x0282,\n  \"sigma\",\n  0x03c3,\n  \"sigma1\",\n  0x03c2,\n  \"sigmafinal\",\n  0x03c2,\n  \"sigmalunatesymbolgreek\",\n  0x03f2,\n  \"sihiragana\",\n  0x3057,\n  \"sikatakana\",\n  0x30b7,\n  \"sikatakanahalfwidth\",\n  0xff7c,\n  \"siluqhebrew\",\n  0x05bd,\n  \"siluqlefthebrew\",\n  0x05bd,\n  \"similar\",\n  0x223c,\n  \"sindothebrew\",\n  0x05c2,\n  \"siosacirclekorean\",\n  0x3274,\n  \"siosaparenkorean\",\n  0x3214,\n  \"sioscieuckorean\",\n  0x317e,\n  \"sioscirclekorean\",\n  0x3266,\n  \"sioskiyeokkorean\",\n  0x317a,\n  \"sioskorean\",\n  0x3145,\n  \"siosnieunkorean\",\n  0x317b,\n  \"siosparenkorean\",\n  0x3206,\n  \"siospieupkorean\",\n  0x317d,\n  \"siostikeutkorean\",\n  0x317c,\n  \"six\",\n  0x0036,\n  \"sixarabic\",\n  0x0666,\n  \"sixbengali\",\n  0x09ec,\n  \"sixcircle\",\n  0x2465,\n  \"sixcircleinversesansserif\",\n  0x278f,\n  \"sixdeva\",\n  0x096c,\n  \"sixgujarati\",\n  0x0aec,\n  \"sixgurmukhi\",\n  0x0a6c,\n  \"sixhackarabic\",\n  0x0666,\n  \"sixhangzhou\",\n  0x3026,\n  \"sixideographicparen\",\n  0x3225,\n  \"sixinferior\",\n  0x2086,\n  \"sixmonospace\",\n  0xff16,\n  \"sixoldstyle\",\n  0xf736,\n  \"sixparen\",\n  0x2479,\n  \"sixperiod\",\n  0x248d,\n  \"sixpersian\",\n  0x06f6,\n  \"sixroman\",\n  0x2175,\n  \"sixsuperior\",\n  0x2076,\n  \"sixteencircle\",\n  0x246f,\n  \"sixteencurrencydenominatorbengali\",\n  0x09f9,\n  \"sixteenparen\",\n  0x2483,\n  \"sixteenperiod\",\n  0x2497,\n  \"sixthai\",\n  0x0e56,\n  \"slash\",\n  0x002f,\n  \"slashmonospace\",\n  0xff0f,\n  \"slong\",\n  0x017f,\n  \"slongdotaccent\",\n  0x1e9b,\n  \"smileface\",\n  0x263a,\n  \"smonospace\",\n  0xff53,\n  \"sofpasuqhebrew\",\n  0x05c3,\n  \"softhyphen\",\n  0x00ad,\n  \"softsigncyrillic\",\n  0x044c,\n  \"sohiragana\",\n  0x305d,\n  \"sokatakana\",\n  0x30bd,\n  \"sokatakanahalfwidth\",\n  0xff7f,\n  \"soliduslongoverlaycmb\",\n  0x0338,\n  \"solidusshortoverlaycmb\",\n  0x0337,\n  \"sorusithai\",\n  0x0e29,\n  \"sosalathai\",\n  0x0e28,\n  \"sosothai\",\n  0x0e0b,\n  \"sosuathai\",\n  0x0e2a,\n  \"space\",\n  0x0020,\n  \"spacehackarabic\",\n  0x0020,\n  \"spade\",\n  0x2660,\n  \"spadesuitblack\",\n  0x2660,\n  \"spadesuitwhite\",\n  0x2664,\n  \"sparen\",\n  0x24ae,\n  \"squarebelowcmb\",\n  0x033b,\n  \"squarecc\",\n  0x33c4,\n  \"squarecm\",\n  0x339d,\n  \"squarediagonalcrosshatchfill\",\n  0x25a9,\n  \"squarehorizontalfill\",\n  0x25a4,\n  \"squarekg\",\n  0x338f,\n  \"squarekm\",\n  0x339e,\n  \"squarekmcapital\",\n  0x33ce,\n  \"squareln\",\n  0x33d1,\n  \"squarelog\",\n  0x33d2,\n  \"squaremg\",\n  0x338e,\n  \"squaremil\",\n  0x33d5,\n  \"squaremm\",\n  0x339c,\n  \"squaremsquared\",\n  0x33a1,\n  \"squareorthogonalcrosshatchfill\",\n  0x25a6,\n  \"squareupperlefttolowerrightfill\",\n  0x25a7,\n  \"squareupperrighttolowerleftfill\",\n  0x25a8,\n  \"squareverticalfill\",\n  0x25a5,\n  \"squarewhitewithsmallblack\",\n  0x25a3,\n  \"srsquare\",\n  0x33db,\n  \"ssabengali\",\n  0x09b7,\n  \"ssadeva\",\n  0x0937,\n  \"ssagujarati\",\n  0x0ab7,\n  \"ssangcieuckorean\",\n  0x3149,\n  \"ssanghieuhkorean\",\n  0x3185,\n  \"ssangieungkorean\",\n  0x3180,\n  \"ssangkiyeokkorean\",\n  0x3132,\n  \"ssangnieunkorean\",\n  0x3165,\n  \"ssangpieupkorean\",\n  0x3143,\n  \"ssangsioskorean\",\n  0x3146,\n  \"ssangtikeutkorean\",\n  0x3138,\n  \"ssuperior\",\n  0xf6f2,\n  \"sterling\",\n  0x00a3,\n  \"sterlingmonospace\",\n  0xffe1,\n  \"strokelongoverlaycmb\",\n  0x0336,\n  \"strokeshortoverlaycmb\",\n  0x0335,\n  \"subset\",\n  0x2282,\n  \"subsetnotequal\",\n  0x228a,\n  \"subsetorequal\",\n  0x2286,\n  \"succeeds\",\n  0x227b,\n  \"suchthat\",\n  0x220b,\n  \"suhiragana\",\n  0x3059,\n  \"sukatakana\",\n  0x30b9,\n  \"sukatakanahalfwidth\",\n  0xff7d,\n  \"sukunarabic\",\n  0x0652,\n  \"summation\",\n  0x2211,\n  \"sun\",\n  0x263c,\n  \"superset\",\n  0x2283,\n  \"supersetnotequal\",\n  0x228b,\n  \"supersetorequal\",\n  0x2287,\n  \"svsquare\",\n  0x33dc,\n  \"syouwaerasquare\",\n  0x337c,\n  \"t\",\n  0x0074,\n  \"tabengali\",\n  0x09a4,\n  \"tackdown\",\n  0x22a4,\n  \"tackleft\",\n  0x22a3,\n  \"tadeva\",\n  0x0924,\n  \"tagujarati\",\n  0x0aa4,\n  \"tagurmukhi\",\n  0x0a24,\n  \"taharabic\",\n  0x0637,\n  \"tahfinalarabic\",\n  0xfec2,\n  \"tahinitialarabic\",\n  0xfec3,\n  \"tahiragana\",\n  0x305f,\n  \"tahmedialarabic\",\n  0xfec4,\n  \"taisyouerasquare\",\n  0x337d,\n  \"takatakana\",\n  0x30bf,\n  \"takatakanahalfwidth\",\n  0xff80,\n  \"tatweelarabic\",\n  0x0640,\n  \"tau\",\n  0x03c4,\n  \"tav\",\n  0x05ea,\n  \"tavdages\",\n  0xfb4a,\n  \"tavdagesh\",\n  0xfb4a,\n  \"tavdageshhebrew\",\n  0xfb4a,\n  \"tavhebrew\",\n  0x05ea,\n  \"tbar\",\n  0x0167,\n  \"tbopomofo\",\n  0x310a,\n  \"tcaron\",\n  0x0165,\n  \"tccurl\",\n  0x02a8,\n  \"tcedilla\",\n  0x0163,\n  \"tcheharabic\",\n  0x0686,\n  \"tchehfinalarabic\",\n  0xfb7b,\n  \"tchehinitialarabic\",\n  0xfb7c,\n  \"tchehmedialarabic\",\n  0xfb7d,\n  \"tcircle\",\n  0x24e3,\n  \"tcircumflexbelow\",\n  0x1e71,\n  \"tcommaaccent\",\n  0x0163,\n  \"tdieresis\",\n  0x1e97,\n  \"tdotaccent\",\n  0x1e6b,\n  \"tdotbelow\",\n  0x1e6d,\n  \"tecyrillic\",\n  0x0442,\n  \"tedescendercyrillic\",\n  0x04ad,\n  \"teharabic\",\n  0x062a,\n  \"tehfinalarabic\",\n  0xfe96,\n  \"tehhahinitialarabic\",\n  0xfca2,\n  \"tehhahisolatedarabic\",\n  0xfc0c,\n  \"tehinitialarabic\",\n  0xfe97,\n  \"tehiragana\",\n  0x3066,\n  \"tehjeeminitialarabic\",\n  0xfca1,\n  \"tehjeemisolatedarabic\",\n  0xfc0b,\n  \"tehmarbutaarabic\",\n  0x0629,\n  \"tehmarbutafinalarabic\",\n  0xfe94,\n  \"tehmedialarabic\",\n  0xfe98,\n  \"tehmeeminitialarabic\",\n  0xfca4,\n  \"tehmeemisolatedarabic\",\n  0xfc0e,\n  \"tehnoonfinalarabic\",\n  0xfc73,\n  \"tekatakana\",\n  0x30c6,\n  \"tekatakanahalfwidth\",\n  0xff83,\n  \"telephone\",\n  0x2121,\n  \"telephoneblack\",\n  0x260e,\n  \"telishagedolahebrew\",\n  0x05a0,\n  \"telishaqetanahebrew\",\n  0x05a9,\n  \"tencircle\",\n  0x2469,\n  \"tenideographicparen\",\n  0x3229,\n  \"tenparen\",\n  0x247d,\n  \"tenperiod\",\n  0x2491,\n  \"tenroman\",\n  0x2179,\n  \"tesh\",\n  0x02a7,\n  \"tet\",\n  0x05d8,\n  \"tetdagesh\",\n  0xfb38,\n  \"tetdageshhebrew\",\n  0xfb38,\n  \"tethebrew\",\n  0x05d8,\n  \"tetsecyrillic\",\n  0x04b5,\n  \"tevirhebrew\",\n  0x059b,\n  \"tevirlefthebrew\",\n  0x059b,\n  \"thabengali\",\n  0x09a5,\n  \"thadeva\",\n  0x0925,\n  \"thagujarati\",\n  0x0aa5,\n  \"thagurmukhi\",\n  0x0a25,\n  \"thalarabic\",\n  0x0630,\n  \"thalfinalarabic\",\n  0xfeac,\n  \"thanthakhatlowleftthai\",\n  0xf898,\n  \"thanthakhatlowrightthai\",\n  0xf897,\n  \"thanthakhatthai\",\n  0x0e4c,\n  \"thanthakhatupperleftthai\",\n  0xf896,\n  \"theharabic\",\n  0x062b,\n  \"thehfinalarabic\",\n  0xfe9a,\n  \"thehinitialarabic\",\n  0xfe9b,\n  \"thehmedialarabic\",\n  0xfe9c,\n  \"thereexists\",\n  0x2203,\n  \"therefore\",\n  0x2234,\n  \"theta\",\n  0x03b8,\n  \"theta1\",\n  0x03d1,\n  \"thetasymbolgreek\",\n  0x03d1,\n  \"thieuthacirclekorean\",\n  0x3279,\n  \"thieuthaparenkorean\",\n  0x3219,\n  \"thieuthcirclekorean\",\n  0x326b,\n  \"thieuthkorean\",\n  0x314c,\n  \"thieuthparenkorean\",\n  0x320b,\n  \"thirteencircle\",\n  0x246c,\n  \"thirteenparen\",\n  0x2480,\n  \"thirteenperiod\",\n  0x2494,\n  \"thonangmonthothai\",\n  0x0e11,\n  \"thook\",\n  0x01ad,\n  \"thophuthaothai\",\n  0x0e12,\n  \"thorn\",\n  0x00fe,\n  \"thothahanthai\",\n  0x0e17,\n  \"thothanthai\",\n  0x0e10,\n  \"thothongthai\",\n  0x0e18,\n  \"thothungthai\",\n  0x0e16,\n  \"thousandcyrillic\",\n  0x0482,\n  \"thousandsseparatorarabic\",\n  0x066c,\n  \"thousandsseparatorpersian\",\n  0x066c,\n  \"three\",\n  0x0033,\n  \"threearabic\",\n  0x0663,\n  \"threebengali\",\n  0x09e9,\n  \"threecircle\",\n  0x2462,\n  \"threecircleinversesansserif\",\n  0x278c,\n  \"threedeva\",\n  0x0969,\n  \"threeeighths\",\n  0x215c,\n  \"threegujarati\",\n  0x0ae9,\n  \"threegurmukhi\",\n  0x0a69,\n  \"threehackarabic\",\n  0x0663,\n  \"threehangzhou\",\n  0x3023,\n  \"threeideographicparen\",\n  0x3222,\n  \"threeinferior\",\n  0x2083,\n  \"threemonospace\",\n  0xff13,\n  \"threenumeratorbengali\",\n  0x09f6,\n  \"threeoldstyle\",\n  0xf733,\n  \"threeparen\",\n  0x2476,\n  \"threeperiod\",\n  0x248a,\n  \"threepersian\",\n  0x06f3,\n  \"threequarters\",\n  0x00be,\n  \"threequartersemdash\",\n  0xf6de,\n  \"threeroman\",\n  0x2172,\n  \"threesuperior\",\n  0x00b3,\n  \"threethai\",\n  0x0e53,\n  \"thzsquare\",\n  0x3394,\n  \"tihiragana\",\n  0x3061,\n  \"tikatakana\",\n  0x30c1,\n  \"tikatakanahalfwidth\",\n  0xff81,\n  \"tikeutacirclekorean\",\n  0x3270,\n  \"tikeutaparenkorean\",\n  0x3210,\n  \"tikeutcirclekorean\",\n  0x3262,\n  \"tikeutkorean\",\n  0x3137,\n  \"tikeutparenkorean\",\n  0x3202,\n  \"tilde\",\n  0x02dc,\n  \"tildebelowcmb\",\n  0x0330,\n  \"tildecmb\",\n  0x0303,\n  \"tildecomb\",\n  0x0303,\n  \"tildedoublecmb\",\n  0x0360,\n  \"tildeoperator\",\n  0x223c,\n  \"tildeoverlaycmb\",\n  0x0334,\n  \"tildeverticalcmb\",\n  0x033e,\n  \"timescircle\",\n  0x2297,\n  \"tipehahebrew\",\n  0x0596,\n  \"tipehalefthebrew\",\n  0x0596,\n  \"tippigurmukhi\",\n  0x0a70,\n  \"titlocyrilliccmb\",\n  0x0483,\n  \"tiwnarmenian\",\n  0x057f,\n  \"tlinebelow\",\n  0x1e6f,\n  \"tmonospace\",\n  0xff54,\n  \"toarmenian\",\n  0x0569,\n  \"tohiragana\",\n  0x3068,\n  \"tokatakana\",\n  0x30c8,\n  \"tokatakanahalfwidth\",\n  0xff84,\n  \"tonebarextrahighmod\",\n  0x02e5,\n  \"tonebarextralowmod\",\n  0x02e9,\n  \"tonebarhighmod\",\n  0x02e6,\n  \"tonebarlowmod\",\n  0x02e8,\n  \"tonebarmidmod\",\n  0x02e7,\n  \"tonefive\",\n  0x01bd,\n  \"tonesix\",\n  0x0185,\n  \"tonetwo\",\n  0x01a8,\n  \"tonos\",\n  0x0384,\n  \"tonsquare\",\n  0x3327,\n  \"topatakthai\",\n  0x0e0f,\n  \"tortoiseshellbracketleft\",\n  0x3014,\n  \"tortoiseshellbracketleftsmall\",\n  0xfe5d,\n  \"tortoiseshellbracketleftvertical\",\n  0xfe39,\n  \"tortoiseshellbracketright\",\n  0x3015,\n  \"tortoiseshellbracketrightsmall\",\n  0xfe5e,\n  \"tortoiseshellbracketrightvertical\",\n  0xfe3a,\n  \"totaothai\",\n  0x0e15,\n  \"tpalatalhook\",\n  0x01ab,\n  \"tparen\",\n  0x24af,\n  \"trademark\",\n  0x2122,\n  \"trademarksans\",\n  0xf8ea,\n  \"trademarkserif\",\n  0xf6db,\n  \"tretroflexhook\",\n  0x0288,\n  \"triagdn\",\n  0x25bc,\n  \"triaglf\",\n  0x25c4,\n  \"triagrt\",\n  0x25ba,\n  \"triagup\",\n  0x25b2,\n  \"ts\",\n  0x02a6,\n  \"tsadi\",\n  0x05e6,\n  \"tsadidagesh\",\n  0xfb46,\n  \"tsadidageshhebrew\",\n  0xfb46,\n  \"tsadihebrew\",\n  0x05e6,\n  \"tsecyrillic\",\n  0x0446,\n  \"tsere\",\n  0x05b5,\n  \"tsere12\",\n  0x05b5,\n  \"tsere1e\",\n  0x05b5,\n  \"tsere2b\",\n  0x05b5,\n  \"tserehebrew\",\n  0x05b5,\n  \"tserenarrowhebrew\",\n  0x05b5,\n  \"tserequarterhebrew\",\n  0x05b5,\n  \"tserewidehebrew\",\n  0x05b5,\n  \"tshecyrillic\",\n  0x045b,\n  \"tsuperior\",\n  0xf6f3,\n  \"ttabengali\",\n  0x099f,\n  \"ttadeva\",\n  0x091f,\n  \"ttagujarati\",\n  0x0a9f,\n  \"ttagurmukhi\",\n  0x0a1f,\n  \"tteharabic\",\n  0x0679,\n  \"ttehfinalarabic\",\n  0xfb67,\n  \"ttehinitialarabic\",\n  0xfb68,\n  \"ttehmedialarabic\",\n  0xfb69,\n  \"tthabengali\",\n  0x09a0,\n  \"tthadeva\",\n  0x0920,\n  \"tthagujarati\",\n  0x0aa0,\n  \"tthagurmukhi\",\n  0x0a20,\n  \"tturned\",\n  0x0287,\n  \"tuhiragana\",\n  0x3064,\n  \"tukatakana\",\n  0x30c4,\n  \"tukatakanahalfwidth\",\n  0xff82,\n  \"tusmallhiragana\",\n  0x3063,\n  \"tusmallkatakana\",\n  0x30c3,\n  \"tusmallkatakanahalfwidth\",\n  0xff6f,\n  \"twelvecircle\",\n  0x246b,\n  \"twelveparen\",\n  0x247f,\n  \"twelveperiod\",\n  0x2493,\n  \"twelveroman\",\n  0x217b,\n  \"twentycircle\",\n  0x2473,\n  \"twentyhangzhou\",\n  0x5344,\n  \"twentyparen\",\n  0x2487,\n  \"twentyperiod\",\n  0x249b,\n  \"two\",\n  0x0032,\n  \"twoarabic\",\n  0x0662,\n  \"twobengali\",\n  0x09e8,\n  \"twocircle\",\n  0x2461,\n  \"twocircleinversesansserif\",\n  0x278b,\n  \"twodeva\",\n  0x0968,\n  \"twodotenleader\",\n  0x2025,\n  \"twodotleader\",\n  0x2025,\n  \"twodotleadervertical\",\n  0xfe30,\n  \"twogujarati\",\n  0x0ae8,\n  \"twogurmukhi\",\n  0x0a68,\n  \"twohackarabic\",\n  0x0662,\n  \"twohangzhou\",\n  0x3022,\n  \"twoideographicparen\",\n  0x3221,\n  \"twoinferior\",\n  0x2082,\n  \"twomonospace\",\n  0xff12,\n  \"twonumeratorbengali\",\n  0x09f5,\n  \"twooldstyle\",\n  0xf732,\n  \"twoparen\",\n  0x2475,\n  \"twoperiod\",\n  0x2489,\n  \"twopersian\",\n  0x06f2,\n  \"tworoman\",\n  0x2171,\n  \"twostroke\",\n  0x01bb,\n  \"twosuperior\",\n  0x00b2,\n  \"twothai\",\n  0x0e52,\n  \"twothirds\",\n  0x2154,\n  \"u\",\n  0x0075,\n  \"uacute\",\n  0x00fa,\n  \"ubar\",\n  0x0289,\n  \"ubengali\",\n  0x0989,\n  \"ubopomofo\",\n  0x3128,\n  \"ubreve\",\n  0x016d,\n  \"ucaron\",\n  0x01d4,\n  \"ucircle\",\n  0x24e4,\n  \"ucircumflex\",\n  0x00fb,\n  \"ucircumflexbelow\",\n  0x1e77,\n  \"ucyrillic\",\n  0x0443,\n  \"udattadeva\",\n  0x0951,\n  \"udblacute\",\n  0x0171,\n  \"udblgrave\",\n  0x0215,\n  \"udeva\",\n  0x0909,\n  \"udieresis\",\n  0x00fc,\n  \"udieresisacute\",\n  0x01d8,\n  \"udieresisbelow\",\n  0x1e73,\n  \"udieresiscaron\",\n  0x01da,\n  \"udieresiscyrillic\",\n  0x04f1,\n  \"udieresisgrave\",\n  0x01dc,\n  \"udieresismacron\",\n  0x01d6,\n  \"udotbelow\",\n  0x1ee5,\n  \"ugrave\",\n  0x00f9,\n  \"ugujarati\",\n  0x0a89,\n  \"ugurmukhi\",\n  0x0a09,\n  \"uhiragana\",\n  0x3046,\n  \"uhookabove\",\n  0x1ee7,\n  \"uhorn\",\n  0x01b0,\n  \"uhornacute\",\n  0x1ee9,\n  \"uhorndotbelow\",\n  0x1ef1,\n  \"uhorngrave\",\n  0x1eeb,\n  \"uhornhookabove\",\n  0x1eed,\n  \"uhorntilde\",\n  0x1eef,\n  \"uhungarumlaut\",\n  0x0171,\n  \"uhungarumlautcyrillic\",\n  0x04f3,\n  \"uinvertedbreve\",\n  0x0217,\n  \"ukatakana\",\n  0x30a6,\n  \"ukatakanahalfwidth\",\n  0xff73,\n  \"ukcyrillic\",\n  0x0479,\n  \"ukorean\",\n  0x315c,\n  \"umacron\",\n  0x016b,\n  \"umacroncyrillic\",\n  0x04ef,\n  \"umacrondieresis\",\n  0x1e7b,\n  \"umatragurmukhi\",\n  0x0a41,\n  \"umonospace\",\n  0xff55,\n  \"underscore\",\n  0x005f,\n  \"underscoredbl\",\n  0x2017,\n  \"underscoremonospace\",\n  0xff3f,\n  \"underscorevertical\",\n  0xfe33,\n  \"underscorewavy\",\n  0xfe4f,\n  \"union\",\n  0x222a,\n  \"universal\",\n  0x2200,\n  \"uogonek\",\n  0x0173,\n  \"uparen\",\n  0x24b0,\n  \"upblock\",\n  0x2580,\n  \"upperdothebrew\",\n  0x05c4,\n  \"upsilon\",\n  0x03c5,\n  \"upsilondieresis\",\n  0x03cb,\n  \"upsilondieresistonos\",\n  0x03b0,\n  \"upsilonlatin\",\n  0x028a,\n  \"upsilontonos\",\n  0x03cd,\n  \"uptackbelowcmb\",\n  0x031d,\n  \"uptackmod\",\n  0x02d4,\n  \"uragurmukhi\",\n  0x0a73,\n  \"uring\",\n  0x016f,\n  \"ushortcyrillic\",\n  0x045e,\n  \"usmallhiragana\",\n  0x3045,\n  \"usmallkatakana\",\n  0x30a5,\n  \"usmallkatakanahalfwidth\",\n  0xff69,\n  \"ustraightcyrillic\",\n  0x04af,\n  \"ustraightstrokecyrillic\",\n  0x04b1,\n  \"utilde\",\n  0x0169,\n  \"utildeacute\",\n  0x1e79,\n  \"utildebelow\",\n  0x1e75,\n  \"uubengali\",\n  0x098a,\n  \"uudeva\",\n  0x090a,\n  \"uugujarati\",\n  0x0a8a,\n  \"uugurmukhi\",\n  0x0a0a,\n  \"uumatragurmukhi\",\n  0x0a42,\n  \"uuvowelsignbengali\",\n  0x09c2,\n  \"uuvowelsigndeva\",\n  0x0942,\n  \"uuvowelsigngujarati\",\n  0x0ac2,\n  \"uvowelsignbengali\",\n  0x09c1,\n  \"uvowelsigndeva\",\n  0x0941,\n  \"uvowelsigngujarati\",\n  0x0ac1,\n  \"v\",\n  0x0076,\n  \"vadeva\",\n  0x0935,\n  \"vagujarati\",\n  0x0ab5,\n  \"vagurmukhi\",\n  0x0a35,\n  \"vakatakana\",\n  0x30f7,\n  \"vav\",\n  0x05d5,\n  \"vavdagesh\",\n  0xfb35,\n  \"vavdagesh65\",\n  0xfb35,\n  \"vavdageshhebrew\",\n  0xfb35,\n  \"vavhebrew\",\n  0x05d5,\n  \"vavholam\",\n  0xfb4b,\n  \"vavholamhebrew\",\n  0xfb4b,\n  \"vavvavhebrew\",\n  0x05f0,\n  \"vavyodhebrew\",\n  0x05f1,\n  \"vcircle\",\n  0x24e5,\n  \"vdotbelow\",\n  0x1e7f,\n  \"vecyrillic\",\n  0x0432,\n  \"veharabic\",\n  0x06a4,\n  \"vehfinalarabic\",\n  0xfb6b,\n  \"vehinitialarabic\",\n  0xfb6c,\n  \"vehmedialarabic\",\n  0xfb6d,\n  \"vekatakana\",\n  0x30f9,\n  \"venus\",\n  0x2640,\n  \"verticalbar\",\n  0x007c,\n  \"verticallineabovecmb\",\n  0x030d,\n  \"verticallinebelowcmb\",\n  0x0329,\n  \"verticallinelowmod\",\n  0x02cc,\n  \"verticallinemod\",\n  0x02c8,\n  \"vewarmenian\",\n  0x057e,\n  \"vhook\",\n  0x028b,\n  \"vikatakana\",\n  0x30f8,\n  \"viramabengali\",\n  0x09cd,\n  \"viramadeva\",\n  0x094d,\n  \"viramagujarati\",\n  0x0acd,\n  \"visargabengali\",\n  0x0983,\n  \"visargadeva\",\n  0x0903,\n  \"visargagujarati\",\n  0x0a83,\n  \"vmonospace\",\n  0xff56,\n  \"voarmenian\",\n  0x0578,\n  \"voicediterationhiragana\",\n  0x309e,\n  \"voicediterationkatakana\",\n  0x30fe,\n  \"voicedmarkkana\",\n  0x309b,\n  \"voicedmarkkanahalfwidth\",\n  0xff9e,\n  \"vokatakana\",\n  0x30fa,\n  \"vparen\",\n  0x24b1,\n  \"vtilde\",\n  0x1e7d,\n  \"vturned\",\n  0x028c,\n  \"vuhiragana\",\n  0x3094,\n  \"vukatakana\",\n  0x30f4,\n  \"w\",\n  0x0077,\n  \"wacute\",\n  0x1e83,\n  \"waekorean\",\n  0x3159,\n  \"wahiragana\",\n  0x308f,\n  \"wakatakana\",\n  0x30ef,\n  \"wakatakanahalfwidth\",\n  0xff9c,\n  \"wakorean\",\n  0x3158,\n  \"wasmallhiragana\",\n  0x308e,\n  \"wasmallkatakana\",\n  0x30ee,\n  \"wattosquare\",\n  0x3357,\n  \"wavedash\",\n  0x301c,\n  \"wavyunderscorevertical\",\n  0xfe34,\n  \"wawarabic\",\n  0x0648,\n  \"wawfinalarabic\",\n  0xfeee,\n  \"wawhamzaabovearabic\",\n  0x0624,\n  \"wawhamzaabovefinalarabic\",\n  0xfe86,\n  \"wbsquare\",\n  0x33dd,\n  \"wcircle\",\n  0x24e6,\n  \"wcircumflex\",\n  0x0175,\n  \"wdieresis\",\n  0x1e85,\n  \"wdotaccent\",\n  0x1e87,\n  \"wdotbelow\",\n  0x1e89,\n  \"wehiragana\",\n  0x3091,\n  \"weierstrass\",\n  0x2118,\n  \"wekatakana\",\n  0x30f1,\n  \"wekorean\",\n  0x315e,\n  \"weokorean\",\n  0x315d,\n  \"wgrave\",\n  0x1e81,\n  \"whitebullet\",\n  0x25e6,\n  \"whitecircle\",\n  0x25cb,\n  \"whitecircleinverse\",\n  0x25d9,\n  \"whitecornerbracketleft\",\n  0x300e,\n  \"whitecornerbracketleftvertical\",\n  0xfe43,\n  \"whitecornerbracketright\",\n  0x300f,\n  \"whitecornerbracketrightvertical\",\n  0xfe44,\n  \"whitediamond\",\n  0x25c7,\n  \"whitediamondcontainingblacksmalldiamond\",\n  0x25c8,\n  \"whitedownpointingsmalltriangle\",\n  0x25bf,\n  \"whitedownpointingtriangle\",\n  0x25bd,\n  \"whiteleftpointingsmalltriangle\",\n  0x25c3,\n  \"whiteleftpointingtriangle\",\n  0x25c1,\n  \"whitelenticularbracketleft\",\n  0x3016,\n  \"whitelenticularbracketright\",\n  0x3017,\n  \"whiterightpointingsmalltriangle\",\n  0x25b9,\n  \"whiterightpointingtriangle\",\n  0x25b7,\n  \"whitesmallsquare\",\n  0x25ab,\n  \"whitesmilingface\",\n  0x263a,\n  \"whitesquare\",\n  0x25a1,\n  \"whitestar\",\n  0x2606,\n  \"whitetelephone\",\n  0x260f,\n  \"whitetortoiseshellbracketleft\",\n  0x3018,\n  \"whitetortoiseshellbracketright\",\n  0x3019,\n  \"whiteuppointingsmalltriangle\",\n  0x25b5,\n  \"whiteuppointingtriangle\",\n  0x25b3,\n  \"wihiragana\",\n  0x3090,\n  \"wikatakana\",\n  0x30f0,\n  \"wikorean\",\n  0x315f,\n  \"wmonospace\",\n  0xff57,\n  \"wohiragana\",\n  0x3092,\n  \"wokatakana\",\n  0x30f2,\n  \"wokatakanahalfwidth\",\n  0xff66,\n  \"won\",\n  0x20a9,\n  \"wonmonospace\",\n  0xffe6,\n  \"wowaenthai\",\n  0x0e27,\n  \"wparen\",\n  0x24b2,\n  \"wring\",\n  0x1e98,\n  \"wsuperior\",\n  0x02b7,\n  \"wturned\",\n  0x028d,\n  \"wynn\",\n  0x01bf,\n  \"x\",\n  0x0078,\n  \"xabovecmb\",\n  0x033d,\n  \"xbopomofo\",\n  0x3112,\n  \"xcircle\",\n  0x24e7,\n  \"xdieresis\",\n  0x1e8d,\n  \"xdotaccent\",\n  0x1e8b,\n  \"xeharmenian\",\n  0x056d,\n  \"xi\",\n  0x03be,\n  \"xmonospace\",\n  0xff58,\n  \"xparen\",\n  0x24b3,\n  \"xsuperior\",\n  0x02e3,\n  \"y\",\n  0x0079,\n  \"yaadosquare\",\n  0x334e,\n  \"yabengali\",\n  0x09af,\n  \"yacute\",\n  0x00fd,\n  \"yadeva\",\n  0x092f,\n  \"yaekorean\",\n  0x3152,\n  \"yagujarati\",\n  0x0aaf,\n  \"yagurmukhi\",\n  0x0a2f,\n  \"yahiragana\",\n  0x3084,\n  \"yakatakana\",\n  0x30e4,\n  \"yakatakanahalfwidth\",\n  0xff94,\n  \"yakorean\",\n  0x3151,\n  \"yamakkanthai\",\n  0x0e4e,\n  \"yasmallhiragana\",\n  0x3083,\n  \"yasmallkatakana\",\n  0x30e3,\n  \"yasmallkatakanahalfwidth\",\n  0xff6c,\n  \"yatcyrillic\",\n  0x0463,\n  \"ycircle\",\n  0x24e8,\n  \"ycircumflex\",\n  0x0177,\n  \"ydieresis\",\n  0x00ff,\n  \"ydotaccent\",\n  0x1e8f,\n  \"ydotbelow\",\n  0x1ef5,\n  \"yeharabic\",\n  0x064a,\n  \"yehbarreearabic\",\n  0x06d2,\n  \"yehbarreefinalarabic\",\n  0xfbaf,\n  \"yehfinalarabic\",\n  0xfef2,\n  \"yehhamzaabovearabic\",\n  0x0626,\n  \"yehhamzaabovefinalarabic\",\n  0xfe8a,\n  \"yehhamzaaboveinitialarabic\",\n  0xfe8b,\n  \"yehhamzaabovemedialarabic\",\n  0xfe8c,\n  \"yehinitialarabic\",\n  0xfef3,\n  \"yehmedialarabic\",\n  0xfef4,\n  \"yehmeeminitialarabic\",\n  0xfcdd,\n  \"yehmeemisolatedarabic\",\n  0xfc58,\n  \"yehnoonfinalarabic\",\n  0xfc94,\n  \"yehthreedotsbelowarabic\",\n  0x06d1,\n  \"yekorean\",\n  0x3156,\n  \"yen\",\n  0x00a5,\n  \"yenmonospace\",\n  0xffe5,\n  \"yeokorean\",\n  0x3155,\n  \"yeorinhieuhkorean\",\n  0x3186,\n  \"yerahbenyomohebrew\",\n  0x05aa,\n  \"yerahbenyomolefthebrew\",\n  0x05aa,\n  \"yericyrillic\",\n  0x044b,\n  \"yerudieresiscyrillic\",\n  0x04f9,\n  \"yesieungkorean\",\n  0x3181,\n  \"yesieungpansioskorean\",\n  0x3183,\n  \"yesieungsioskorean\",\n  0x3182,\n  \"yetivhebrew\",\n  0x059a,\n  \"ygrave\",\n  0x1ef3,\n  \"yhook\",\n  0x01b4,\n  \"yhookabove\",\n  0x1ef7,\n  \"yiarmenian\",\n  0x0575,\n  \"yicyrillic\",\n  0x0457,\n  \"yikorean\",\n  0x3162,\n  \"yinyang\",\n  0x262f,\n  \"yiwnarmenian\",\n  0x0582,\n  \"ymonospace\",\n  0xff59,\n  \"yod\",\n  0x05d9,\n  \"yoddagesh\",\n  0xfb39,\n  \"yoddageshhebrew\",\n  0xfb39,\n  \"yodhebrew\",\n  0x05d9,\n  \"yodyodhebrew\",\n  0x05f2,\n  \"yodyodpatahhebrew\",\n  0xfb1f,\n  \"yohiragana\",\n  0x3088,\n  \"yoikorean\",\n  0x3189,\n  \"yokatakana\",\n  0x30e8,\n  \"yokatakanahalfwidth\",\n  0xff96,\n  \"yokorean\",\n  0x315b,\n  \"yosmallhiragana\",\n  0x3087,\n  \"yosmallkatakana\",\n  0x30e7,\n  \"yosmallkatakanahalfwidth\",\n  0xff6e,\n  \"yotgreek\",\n  0x03f3,\n  \"yoyaekorean\",\n  0x3188,\n  \"yoyakorean\",\n  0x3187,\n  \"yoyakthai\",\n  0x0e22,\n  \"yoyingthai\",\n  0x0e0d,\n  \"yparen\",\n  0x24b4,\n  \"ypogegrammeni\",\n  0x037a,\n  \"ypogegrammenigreekcmb\",\n  0x0345,\n  \"yr\",\n  0x01a6,\n  \"yring\",\n  0x1e99,\n  \"ysuperior\",\n  0x02b8,\n  \"ytilde\",\n  0x1ef9,\n  \"yturned\",\n  0x028e,\n  \"yuhiragana\",\n  0x3086,\n  \"yuikorean\",\n  0x318c,\n  \"yukatakana\",\n  0x30e6,\n  \"yukatakanahalfwidth\",\n  0xff95,\n  \"yukorean\",\n  0x3160,\n  \"yusbigcyrillic\",\n  0x046b,\n  \"yusbigiotifiedcyrillic\",\n  0x046d,\n  \"yuslittlecyrillic\",\n  0x0467,\n  \"yuslittleiotifiedcyrillic\",\n  0x0469,\n  \"yusmallhiragana\",\n  0x3085,\n  \"yusmallkatakana\",\n  0x30e5,\n  \"yusmallkatakanahalfwidth\",\n  0xff6d,\n  \"yuyekorean\",\n  0x318b,\n  \"yuyeokorean\",\n  0x318a,\n  \"yyabengali\",\n  0x09df,\n  \"yyadeva\",\n  0x095f,\n  \"z\",\n  0x007a,\n  \"zaarmenian\",\n  0x0566,\n  \"zacute\",\n  0x017a,\n  \"zadeva\",\n  0x095b,\n  \"zagurmukhi\",\n  0x0a5b,\n  \"zaharabic\",\n  0x0638,\n  \"zahfinalarabic\",\n  0xfec6,\n  \"zahinitialarabic\",\n  0xfec7,\n  \"zahiragana\",\n  0x3056,\n  \"zahmedialarabic\",\n  0xfec8,\n  \"zainarabic\",\n  0x0632,\n  \"zainfinalarabic\",\n  0xfeb0,\n  \"zakatakana\",\n  0x30b6,\n  \"zaqefgadolhebrew\",\n  0x0595,\n  \"zaqefqatanhebrew\",\n  0x0594,\n  \"zarqahebrew\",\n  0x0598,\n  \"zayin\",\n  0x05d6,\n  \"zayindagesh\",\n  0xfb36,\n  \"zayindageshhebrew\",\n  0xfb36,\n  \"zayinhebrew\",\n  0x05d6,\n  \"zbopomofo\",\n  0x3117,\n  \"zcaron\",\n  0x017e,\n  \"zcircle\",\n  0x24e9,\n  \"zcircumflex\",\n  0x1e91,\n  \"zcurl\",\n  0x0291,\n  \"zdot\",\n  0x017c,\n  \"zdotaccent\",\n  0x017c,\n  \"zdotbelow\",\n  0x1e93,\n  \"zecyrillic\",\n  0x0437,\n  \"zedescendercyrillic\",\n  0x0499,\n  \"zedieresiscyrillic\",\n  0x04df,\n  \"zehiragana\",\n  0x305c,\n  \"zekatakana\",\n  0x30bc,\n  \"zero\",\n  0x0030,\n  \"zeroarabic\",\n  0x0660,\n  \"zerobengali\",\n  0x09e6,\n  \"zerodeva\",\n  0x0966,\n  \"zerogujarati\",\n  0x0ae6,\n  \"zerogurmukhi\",\n  0x0a66,\n  \"zerohackarabic\",\n  0x0660,\n  \"zeroinferior\",\n  0x2080,\n  \"zeromonospace\",\n  0xff10,\n  \"zerooldstyle\",\n  0xf730,\n  \"zeropersian\",\n  0x06f0,\n  \"zerosuperior\",\n  0x2070,\n  \"zerothai\",\n  0x0e50,\n  \"zerowidthjoiner\",\n  0xfeff,\n  \"zerowidthnonjoiner\",\n  0x200c,\n  \"zerowidthspace\",\n  0x200b,\n  \"zeta\",\n  0x03b6,\n  \"zhbopomofo\",\n  0x3113,\n  \"zhearmenian\",\n  0x056a,\n  \"zhebrevecyrillic\",\n  0x04c2,\n  \"zhecyrillic\",\n  0x0436,\n  \"zhedescendercyrillic\",\n  0x0497,\n  \"zhedieresiscyrillic\",\n  0x04dd,\n  \"zihiragana\",\n  0x3058,\n  \"zikatakana\",\n  0x30b8,\n  \"zinorhebrew\",\n  0x05ae,\n  \"zlinebelow\",\n  0x1e95,\n  \"zmonospace\",\n  0xff5a,\n  \"zohiragana\",\n  0x305e,\n  \"zokatakana\",\n  0x30be,\n  \"zparen\",\n  0x24b5,\n  \"zretroflexhook\",\n  0x0290,\n  \"zstroke\",\n  0x01b6,\n  \"zuhiragana\",\n  0x305a,\n  \"zukatakana\",\n  0x30ba,\n  \".notdef\",\n  0x0000,\n  \"angbracketleftbig\",\n  0x2329,\n  \"angbracketleftBig\",\n  0x2329,\n  \"angbracketleftbigg\",\n  0x2329,\n  \"angbracketleftBigg\",\n  0x2329,\n  \"angbracketrightBig\",\n  0x232a,\n  \"angbracketrightbig\",\n  0x232a,\n  \"angbracketrightBigg\",\n  0x232a,\n  \"angbracketrightbigg\",\n  0x232a,\n  \"arrowhookleft\",\n  0x21aa,\n  \"arrowhookright\",\n  0x21a9,\n  \"arrowlefttophalf\",\n  0x21bc,\n  \"arrowleftbothalf\",\n  0x21bd,\n  \"arrownortheast\",\n  0x2197,\n  \"arrownorthwest\",\n  0x2196,\n  \"arrowrighttophalf\",\n  0x21c0,\n  \"arrowrightbothalf\",\n  0x21c1,\n  \"arrowsoutheast\",\n  0x2198,\n  \"arrowsouthwest\",\n  0x2199,\n  \"backslashbig\",\n  0x2216,\n  \"backslashBig\",\n  0x2216,\n  \"backslashBigg\",\n  0x2216,\n  \"backslashbigg\",\n  0x2216,\n  \"bardbl\",\n  0x2016,\n  \"bracehtipdownleft\",\n  0xfe37,\n  \"bracehtipdownright\",\n  0xfe37,\n  \"bracehtipupleft\",\n  0xfe38,\n  \"bracehtipupright\",\n  0xfe38,\n  \"braceleftBig\",\n  0x007b,\n  \"braceleftbig\",\n  0x007b,\n  \"braceleftbigg\",\n  0x007b,\n  \"braceleftBigg\",\n  0x007b,\n  \"bracerightBig\",\n  0x007d,\n  \"bracerightbig\",\n  0x007d,\n  \"bracerightbigg\",\n  0x007d,\n  \"bracerightBigg\",\n  0x007d,\n  \"bracketleftbig\",\n  0x005b,\n  \"bracketleftBig\",\n  0x005b,\n  \"bracketleftbigg\",\n  0x005b,\n  \"bracketleftBigg\",\n  0x005b,\n  \"bracketrightBig\",\n  0x005d,\n  \"bracketrightbig\",\n  0x005d,\n  \"bracketrightbigg\",\n  0x005d,\n  \"bracketrightBigg\",\n  0x005d,\n  \"ceilingleftbig\",\n  0x2308,\n  \"ceilingleftBig\",\n  0x2308,\n  \"ceilingleftBigg\",\n  0x2308,\n  \"ceilingleftbigg\",\n  0x2308,\n  \"ceilingrightbig\",\n  0x2309,\n  \"ceilingrightBig\",\n  0x2309,\n  \"ceilingrightbigg\",\n  0x2309,\n  \"ceilingrightBigg\",\n  0x2309,\n  \"circledotdisplay\",\n  0x2299,\n  \"circledottext\",\n  0x2299,\n  \"circlemultiplydisplay\",\n  0x2297,\n  \"circlemultiplytext\",\n  0x2297,\n  \"circleplusdisplay\",\n  0x2295,\n  \"circleplustext\",\n  0x2295,\n  \"contintegraldisplay\",\n  0x222e,\n  \"contintegraltext\",\n  0x222e,\n  \"coproductdisplay\",\n  0x2210,\n  \"coproducttext\",\n  0x2210,\n  \"floorleftBig\",\n  0x230a,\n  \"floorleftbig\",\n  0x230a,\n  \"floorleftbigg\",\n  0x230a,\n  \"floorleftBigg\",\n  0x230a,\n  \"floorrightbig\",\n  0x230b,\n  \"floorrightBig\",\n  0x230b,\n  \"floorrightBigg\",\n  0x230b,\n  \"floorrightbigg\",\n  0x230b,\n  \"hatwide\",\n  0x0302,\n  \"hatwider\",\n  0x0302,\n  \"hatwidest\",\n  0x0302,\n  \"intercal\",\n  0x1d40,\n  \"integraldisplay\",\n  0x222b,\n  \"integraltext\",\n  0x222b,\n  \"intersectiondisplay\",\n  0x22c2,\n  \"intersectiontext\",\n  0x22c2,\n  \"logicalanddisplay\",\n  0x2227,\n  \"logicalandtext\",\n  0x2227,\n  \"logicalordisplay\",\n  0x2228,\n  \"logicalortext\",\n  0x2228,\n  \"parenleftBig\",\n  0x0028,\n  \"parenleftbig\",\n  0x0028,\n  \"parenleftBigg\",\n  0x0028,\n  \"parenleftbigg\",\n  0x0028,\n  \"parenrightBig\",\n  0x0029,\n  \"parenrightbig\",\n  0x0029,\n  \"parenrightBigg\",\n  0x0029,\n  \"parenrightbigg\",\n  0x0029,\n  \"prime\",\n  0x2032,\n  \"productdisplay\",\n  0x220f,\n  \"producttext\",\n  0x220f,\n  \"radicalbig\",\n  0x221a,\n  \"radicalBig\",\n  0x221a,\n  \"radicalBigg\",\n  0x221a,\n  \"radicalbigg\",\n  0x221a,\n  \"radicalbt\",\n  0x221a,\n  \"radicaltp\",\n  0x221a,\n  \"radicalvertex\",\n  0x221a,\n  \"slashbig\",\n  0x002f,\n  \"slashBig\",\n  0x002f,\n  \"slashBigg\",\n  0x002f,\n  \"slashbigg\",\n  0x002f,\n  \"summationdisplay\",\n  0x2211,\n  \"summationtext\",\n  0x2211,\n  \"tildewide\",\n  0x02dc,\n  \"tildewider\",\n  0x02dc,\n  \"tildewidest\",\n  0x02dc,\n  \"uniondisplay\",\n  0x22c3,\n  \"unionmultidisplay\",\n  0x228e,\n  \"unionmultitext\",\n  0x228e,\n  \"unionsqdisplay\",\n  0x2294,\n  \"unionsqtext\",\n  0x2294,\n  \"uniontext\",\n  0x22c3,\n  \"vextenddouble\",\n  0x2225,\n  \"vextendsingle\",\n  0x2223\n ];\n});\nvar getDingbatsGlyphsUnicode = (0,_core_utils_js__WEBPACK_IMPORTED_MODULE_0__.getArrayLookupTableFactory)(function () {\n return [\n  \"space\",\n  0x0020,\n  \"a1\",\n  0x2701,\n  \"a2\",\n  0x2702,\n  \"a202\",\n  0x2703,\n  \"a3\",\n  0x2704,\n  \"a4\",\n  0x260e,\n  \"a5\",\n  0x2706,\n  \"a119\",\n  0x2707,\n  \"a118\",\n  0x2708,\n  \"a117\",\n  0x2709,\n  \"a11\",\n  0x261b,\n  \"a12\",\n  0x261e,\n  \"a13\",\n  0x270c,\n  \"a14\",\n  0x270d,\n  \"a15\",\n  0x270e,\n  \"a16\",\n  0x270f,\n  \"a105\",\n  0x2710,\n  \"a17\",\n  0x2711,\n  \"a18\",\n  0x2712,\n  \"a19\",\n  0x2713,\n  \"a20\",\n  0x2714,\n  \"a21\",\n  0x2715,\n  \"a22\",\n  0x2716,\n  \"a23\",\n  0x2717,\n  \"a24\",\n  0x2718,\n  \"a25\",\n  0x2719,\n  \"a26\",\n  0x271a,\n  \"a27\",\n  0x271b,\n  \"a28\",\n  0x271c,\n  \"a6\",\n  0x271d,\n  \"a7\",\n  0x271e,\n  \"a8\",\n  0x271f,\n  \"a9\",\n  0x2720,\n  \"a10\",\n  0x2721,\n  \"a29\",\n  0x2722,\n  \"a30\",\n  0x2723,\n  \"a31\",\n  0x2724,\n  \"a32\",\n  0x2725,\n  \"a33\",\n  0x2726,\n  \"a34\",\n  0x2727,\n  \"a35\",\n  0x2605,\n  \"a36\",\n  0x2729,\n  \"a37\",\n  0x272a,\n  \"a38\",\n  0x272b,\n  \"a39\",\n  0x272c,\n  \"a40\",\n  0x272d,\n  \"a41\",\n  0x272e,\n  \"a42\",\n  0x272f,\n  \"a43\",\n  0x2730,\n  \"a44\",\n  0x2731,\n  \"a45\",\n  0x2732,\n  \"a46\",\n  0x2733,\n  \"a47\",\n  0x2734,\n  \"a48\",\n  0x2735,\n  \"a49\",\n  0x2736,\n  \"a50\",\n  0x2737,\n  \"a51\",\n  0x2738,\n  \"a52\",\n  0x2739,\n  \"a53\",\n  0x273a,\n  \"a54\",\n  0x273b,\n  \"a55\",\n  0x273c,\n  \"a56\",\n  0x273d,\n  \"a57\",\n  0x273e,\n  \"a58\",\n  0x273f,\n  \"a59\",\n  0x2740,\n  \"a60\",\n  0x2741,\n  \"a61\",\n  0x2742,\n  \"a62\",\n  0x2743,\n  \"a63\",\n  0x2744,\n  \"a64\",\n  0x2745,\n  \"a65\",\n  0x2746,\n  \"a66\",\n  0x2747,\n  \"a67\",\n  0x2748,\n  \"a68\",\n  0x2749,\n  \"a69\",\n  0x274a,\n  \"a70\",\n  0x274b,\n  \"a71\",\n  0x25cf,\n  \"a72\",\n  0x274d,\n  \"a73\",\n  0x25a0,\n  \"a74\",\n  0x274f,\n  \"a203\",\n  0x2750,\n  \"a75\",\n  0x2751,\n  \"a204\",\n  0x2752,\n  \"a76\",\n  0x25b2,\n  \"a77\",\n  0x25bc,\n  \"a78\",\n  0x25c6,\n  \"a79\",\n  0x2756,\n  \"a81\",\n  0x25d7,\n  \"a82\",\n  0x2758,\n  \"a83\",\n  0x2759,\n  \"a84\",\n  0x275a,\n  \"a97\",\n  0x275b,\n  \"a98\",\n  0x275c,\n  \"a99\",\n  0x275d,\n  \"a100\",\n  0x275e,\n  \"a101\",\n  0x2761,\n  \"a102\",\n  0x2762,\n  \"a103\",\n  0x2763,\n  \"a104\",\n  0x2764,\n  \"a106\",\n  0x2765,\n  \"a107\",\n  0x2766,\n  \"a108\",\n  0x2767,\n  \"a112\",\n  0x2663,\n  \"a111\",\n  0x2666,\n  \"a110\",\n  0x2665,\n  \"a109\",\n  0x2660,\n  \"a120\",\n  0x2460,\n  \"a121\",\n  0x2461,\n  \"a122\",\n  0x2462,\n  \"a123\",\n  0x2463,\n  \"a124\",\n  0x2464,\n  \"a125\",\n  0x2465,\n  \"a126\",\n  0x2466,\n  \"a127\",\n  0x2467,\n  \"a128\",\n  0x2468,\n  \"a129\",\n  0x2469,\n  \"a130\",\n  0x2776,\n  \"a131\",\n  0x2777,\n  \"a132\",\n  0x2778,\n  \"a133\",\n  0x2779,\n  \"a134\",\n  0x277a,\n  \"a135\",\n  0x277b,\n  \"a136\",\n  0x277c,\n  \"a137\",\n  0x277d,\n  \"a138\",\n  0x277e,\n  \"a139\",\n  0x277f,\n  \"a140\",\n  0x2780,\n  \"a141\",\n  0x2781,\n  \"a142\",\n  0x2782,\n  \"a143\",\n  0x2783,\n  \"a144\",\n  0x2784,\n  \"a145\",\n  0x2785,\n  \"a146\",\n  0x2786,\n  \"a147\",\n  0x2787,\n  \"a148\",\n  0x2788,\n  \"a149\",\n  0x2789,\n  \"a150\",\n  0x278a,\n  \"a151\",\n  0x278b,\n  \"a152\",\n  0x278c,\n  \"a153\",\n  0x278d,\n  \"a154\",\n  0x278e,\n  \"a155\",\n  0x278f,\n  \"a156\",\n  0x2790,\n  \"a157\",\n  0x2791,\n  \"a158\",\n  0x2792,\n  \"a159\",\n  0x2793,\n  \"a160\",\n  0x2794,\n  \"a161\",\n  0x2192,\n  \"a163\",\n  0x2194,\n  \"a164\",\n  0x2195,\n  \"a196\",\n  0x2798,\n  \"a165\",\n  0x2799,\n  \"a192\",\n  0x279a,\n  \"a166\",\n  0x279b,\n  \"a167\",\n  0x279c,\n  \"a168\",\n  0x279d,\n  \"a169\",\n  0x279e,\n  \"a170\",\n  0x279f,\n  \"a171\",\n  0x27a0,\n  \"a172\",\n  0x27a1,\n  \"a173\",\n  0x27a2,\n  \"a162\",\n  0x27a3,\n  \"a174\",\n  0x27a4,\n  \"a175\",\n  0x27a5,\n  \"a176\",\n  0x27a6,\n  \"a177\",\n  0x27a7,\n  \"a178\",\n  0x27a8,\n  \"a179\",\n  0x27a9,\n  \"a193\",\n  0x27aa,\n  \"a180\",\n  0x27ab,\n  \"a199\",\n  0x27ac,\n  \"a181\",\n  0x27ad,\n  \"a200\",\n  0x27ae,\n  \"a182\",\n  0x27af,\n  \"a201\",\n  0x27b1,\n  \"a183\",\n  0x27b2,\n  \"a184\",\n  0x27b3,\n  \"a197\",\n  0x27b4,\n  \"a185\",\n  0x27b5,\n  \"a194\",\n  0x27b6,\n  \"a198\",\n  0x27b7,\n  \"a186\",\n  0x27b8,\n  \"a195\",\n  0x27b9,\n  \"a187\",\n  0x27ba,\n  \"a188\",\n  0x27bb,\n  \"a189\",\n  0x27bc,\n  \"a190\",\n  0x27bd,\n  \"a191\",\n  0x27be,\n  \"a89\",\n  0x2768,\n  \"a90\",\n  0x2769,\n  \"a93\",\n  0x276a,\n  \"a94\",\n  0x276b,\n  \"a91\",\n  0x276c,\n  \"a92\",\n  0x276d,\n  \"a205\",\n  0x276e,\n  \"a85\",\n  0x276f,\n  \"a206\",\n  0x2770,\n  \"a86\",\n  0x2771,\n  \"a87\",\n  0x2772,\n  \"a88\",\n  0x2773,\n  \"a95\",\n  0x2774,\n  \"a96\",\n  0x2775,\n  \".notdef\",\n  0x0000\n ];\n});\n\n\n/***/ }),\n/* 34 */\n/***/ ((__unused_webpack_module, exports, __w_pdfjs_require__) => {\n\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.getSymbolsFonts = exports.getSupplementalGlyphMapForCalibri = exports.getSupplementalGlyphMapForArialBlack = exports.getStdFontMap = exports.getSerifFonts = exports.getNonStdFontMap = exports.getGlyphMapForStandardFonts = void 0;\n\nvar _core_utils = __w_pdfjs_require__(8);\n\nconst getStdFontMap = (0, _core_utils.getLookupTableFactory)(function (t) {\n  t.ArialNarrow = \"Helvetica\";\n  t[\"ArialNarrow-Bold\"] = \"Helvetica-Bold\";\n  t[\"ArialNarrow-BoldItalic\"] = \"Helvetica-BoldOblique\";\n  t[\"ArialNarrow-Italic\"] = \"Helvetica-Oblique\";\n  t.ArialBlack = \"Helvetica\";\n  t[\"ArialBlack-Bold\"] = \"Helvetica-Bold\";\n  t[\"ArialBlack-BoldItalic\"] = \"Helvetica-BoldOblique\";\n  t[\"ArialBlack-Italic\"] = \"Helvetica-Oblique\";\n  t[\"Arial-Black\"] = \"Helvetica\";\n  t[\"Arial-Black-Bold\"] = \"Helvetica-Bold\";\n  t[\"Arial-Black-BoldItalic\"] = \"Helvetica-BoldOblique\";\n  t[\"Arial-Black-Italic\"] = \"Helvetica-Oblique\";\n  t.Arial = \"Helvetica\";\n  t[\"Arial-Bold\"] = \"Helvetica-Bold\";\n  t[\"Arial-BoldItalic\"] = \"Helvetica-BoldOblique\";\n  t[\"Arial-Italic\"] = \"Helvetica-Oblique\";\n  t[\"Arial-BoldItalicMT\"] = \"Helvetica-BoldOblique\";\n  t[\"Arial-BoldMT\"] = \"Helvetica-Bold\";\n  t[\"Arial-ItalicMT\"] = \"Helvetica-Oblique\";\n  t.ArialMT = \"Helvetica\";\n  t[\"Courier-Bold\"] = \"Courier-Bold\";\n  t[\"Courier-BoldItalic\"] = \"Courier-BoldOblique\";\n  t[\"Courier-Italic\"] = \"Courier-Oblique\";\n  t.CourierNew = \"Courier\";\n  t[\"CourierNew-Bold\"] = \"Courier-Bold\";\n  t[\"CourierNew-BoldItalic\"] = \"Courier-BoldOblique\";\n  t[\"CourierNew-Italic\"] = \"Courier-Oblique\";\n  t[\"CourierNewPS-BoldItalicMT\"] = \"Courier-BoldOblique\";\n  t[\"CourierNewPS-BoldMT\"] = \"Courier-Bold\";\n  t[\"CourierNewPS-ItalicMT\"] = \"Courier-Oblique\";\n  t.CourierNewPSMT = \"Courier\";\n  t.Helvetica = \"Helvetica\";\n  t[\"Helvetica-Bold\"] = \"Helvetica-Bold\";\n  t[\"Helvetica-BoldItalic\"] = \"Helvetica-BoldOblique\";\n  t[\"Helvetica-BoldOblique\"] = \"Helvetica-BoldOblique\";\n  t[\"Helvetica-Italic\"] = \"Helvetica-Oblique\";\n  t[\"Helvetica-Oblique\"] = \"Helvetica-Oblique\";\n  t[\"Symbol-Bold\"] = \"Symbol\";\n  t[\"Symbol-BoldItalic\"] = \"Symbol\";\n  t[\"Symbol-Italic\"] = \"Symbol\";\n  t.TimesNewRoman = \"Times-Roman\";\n  t[\"TimesNewRoman-Bold\"] = \"Times-Bold\";\n  t[\"TimesNewRoman-BoldItalic\"] = \"Times-BoldItalic\";\n  t[\"TimesNewRoman-Italic\"] = \"Times-Italic\";\n  t.TimesNewRomanPS = \"Times-Roman\";\n  t[\"TimesNewRomanPS-Bold\"] = \"Times-Bold\";\n  t[\"TimesNewRomanPS-BoldItalic\"] = \"Times-BoldItalic\";\n  t[\"TimesNewRomanPS-BoldItalicMT\"] = \"Times-BoldItalic\";\n  t[\"TimesNewRomanPS-BoldMT\"] = \"Times-Bold\";\n  t[\"TimesNewRomanPS-Italic\"] = \"Times-Italic\";\n  t[\"TimesNewRomanPS-ItalicMT\"] = \"Times-Italic\";\n  t.TimesNewRomanPSMT = \"Times-Roman\";\n  t[\"TimesNewRomanPSMT-Bold\"] = \"Times-Bold\";\n  t[\"TimesNewRomanPSMT-BoldItalic\"] = \"Times-BoldItalic\";\n  t[\"TimesNewRomanPSMT-Italic\"] = \"Times-Italic\";\n});\nexports.getStdFontMap = getStdFontMap;\nconst getNonStdFontMap = (0, _core_utils.getLookupTableFactory)(function (t) {\n  t.Calibri = \"Helvetica\";\n  t[\"Calibri-Bold\"] = \"Helvetica-Bold\";\n  t[\"Calibri-BoldItalic\"] = \"Helvetica-BoldOblique\";\n  t[\"Calibri-Italic\"] = \"Helvetica-Oblique\";\n  t.CenturyGothic = \"Helvetica\";\n  t[\"CenturyGothic-Bold\"] = \"Helvetica-Bold\";\n  t[\"CenturyGothic-BoldItalic\"] = \"Helvetica-BoldOblique\";\n  t[\"CenturyGothic-Italic\"] = \"Helvetica-Oblique\";\n  t.ComicSansMS = \"Comic Sans MS\";\n  t[\"ComicSansMS-Bold\"] = \"Comic Sans MS-Bold\";\n  t[\"ComicSansMS-BoldItalic\"] = \"Comic Sans MS-BoldItalic\";\n  t[\"ComicSansMS-Italic\"] = \"Comic Sans MS-Italic\";\n  t.LucidaConsole = \"Courier\";\n  t[\"LucidaConsole-Bold\"] = \"Courier-Bold\";\n  t[\"LucidaConsole-BoldItalic\"] = \"Courier-BoldOblique\";\n  t[\"LucidaConsole-Italic\"] = \"Courier-Oblique\";\n  t[\"LucidaSans-Demi\"] = \"Helvetica-Bold\";\n  t[\"MS-Gothic\"] = \"MS Gothic\";\n  t[\"MS-Gothic-Bold\"] = \"MS Gothic-Bold\";\n  t[\"MS-Gothic-BoldItalic\"] = \"MS Gothic-BoldItalic\";\n  t[\"MS-Gothic-Italic\"] = \"MS Gothic-Italic\";\n  t[\"MS-Mincho\"] = \"MS Mincho\";\n  t[\"MS-Mincho-Bold\"] = \"MS Mincho-Bold\";\n  t[\"MS-Mincho-BoldItalic\"] = \"MS Mincho-BoldItalic\";\n  t[\"MS-Mincho-Italic\"] = \"MS Mincho-Italic\";\n  t[\"MS-PGothic\"] = \"MS PGothic\";\n  t[\"MS-PGothic-Bold\"] = \"MS PGothic-Bold\";\n  t[\"MS-PGothic-BoldItalic\"] = \"MS PGothic-BoldItalic\";\n  t[\"MS-PGothic-Italic\"] = \"MS PGothic-Italic\";\n  t[\"MS-PMincho\"] = \"MS PMincho\";\n  t[\"MS-PMincho-Bold\"] = \"MS PMincho-Bold\";\n  t[\"MS-PMincho-BoldItalic\"] = \"MS PMincho-BoldItalic\";\n  t[\"MS-PMincho-Italic\"] = \"MS PMincho-Italic\";\n  t.NuptialScript = \"Times-Italic\";\n  t.SegoeUISymbol = \"Helvetica\";\n  t.Wingdings = \"ZapfDingbats\";\n  t[\"Wingdings-Regular\"] = \"ZapfDingbats\";\n});\nexports.getNonStdFontMap = getNonStdFontMap;\nconst getSerifFonts = (0, _core_utils.getLookupTableFactory)(function (t) {\n  t[\"Adobe Jenson\"] = true;\n  t[\"Adobe Text\"] = true;\n  t.Albertus = true;\n  t.Aldus = true;\n  t.Alexandria = true;\n  t.Algerian = true;\n  t[\"American Typewriter\"] = true;\n  t.Antiqua = true;\n  t.Apex = true;\n  t.Arno = true;\n  t.Aster = true;\n  t.Aurora = true;\n  t.Baskerville = true;\n  t.Bell = true;\n  t.Bembo = true;\n  t[\"Bembo Schoolbook\"] = true;\n  t.Benguiat = true;\n  t[\"Berkeley Old Style\"] = true;\n  t[\"Bernhard Modern\"] = true;\n  t[\"Berthold City\"] = true;\n  t.Bodoni = true;\n  t[\"Bauer Bodoni\"] = true;\n  t[\"Book Antiqua\"] = true;\n  t.Bookman = true;\n  t[\"Bordeaux Roman\"] = true;\n  t[\"Californian FB\"] = true;\n  t.Calisto = true;\n  t.Calvert = true;\n  t.Capitals = true;\n  t.Cambria = true;\n  t.Cartier = true;\n  t.Caslon = true;\n  t.Catull = true;\n  t.Centaur = true;\n  t[\"Century Old Style\"] = true;\n  t[\"Century Schoolbook\"] = true;\n  t.Chaparral = true;\n  t[\"Charis SIL\"] = true;\n  t.Cheltenham = true;\n  t[\"Cholla Slab\"] = true;\n  t.Clarendon = true;\n  t.Clearface = true;\n  t.Cochin = true;\n  t.Colonna = true;\n  t[\"Computer Modern\"] = true;\n  t[\"Concrete Roman\"] = true;\n  t.Constantia = true;\n  t[\"Cooper Black\"] = true;\n  t.Corona = true;\n  t.Ecotype = true;\n  t.Egyptienne = true;\n  t.Elephant = true;\n  t.Excelsior = true;\n  t.Fairfield = true;\n  t[\"FF Scala\"] = true;\n  t.Folkard = true;\n  t.Footlight = true;\n  t.FreeSerif = true;\n  t[\"Friz Quadrata\"] = true;\n  t.Garamond = true;\n  t.Gentium = true;\n  t.Georgia = true;\n  t.Gloucester = true;\n  t[\"Goudy Old Style\"] = true;\n  t[\"Goudy Schoolbook\"] = true;\n  t[\"Goudy Pro Font\"] = true;\n  t.Granjon = true;\n  t[\"Guardian Egyptian\"] = true;\n  t.Heather = true;\n  t.Hercules = true;\n  t[\"High Tower Text\"] = true;\n  t.Hiroshige = true;\n  t[\"Hoefler Text\"] = true;\n  t[\"Humana Serif\"] = true;\n  t.Imprint = true;\n  t[\"Ionic No. 5\"] = true;\n  t.Janson = true;\n  t.Joanna = true;\n  t.Korinna = true;\n  t.Lexicon = true;\n  t[\"Liberation Serif\"] = true;\n  t[\"Linux Libertine\"] = true;\n  t.Literaturnaya = true;\n  t.Lucida = true;\n  t[\"Lucida Bright\"] = true;\n  t.Melior = true;\n  t.Memphis = true;\n  t.Miller = true;\n  t.Minion = true;\n  t.Modern = true;\n  t[\"Mona Lisa\"] = true;\n  t[\"Mrs Eaves\"] = true;\n  t[\"MS Serif\"] = true;\n  t[\"Museo Slab\"] = true;\n  t[\"New York\"] = true;\n  t[\"Nimbus Roman\"] = true;\n  t[\"NPS Rawlinson Roadway\"] = true;\n  t.NuptialScript = true;\n  t.Palatino = true;\n  t.Perpetua = true;\n  t.Plantin = true;\n  t[\"Plantin Schoolbook\"] = true;\n  t.Playbill = true;\n  t[\"Poor Richard\"] = true;\n  t[\"Rawlinson Roadway\"] = true;\n  t.Renault = true;\n  t.Requiem = true;\n  t.Rockwell = true;\n  t.Roman = true;\n  t[\"Rotis Serif\"] = true;\n  t.Sabon = true;\n  t.Scala = true;\n  t.Seagull = true;\n  t.Sistina = true;\n  t.Souvenir = true;\n  t.STIX = true;\n  t[\"Stone Informal\"] = true;\n  t[\"Stone Serif\"] = true;\n  t.Sylfaen = true;\n  t.Times = true;\n  t.Trajan = true;\n  t[\"Trinité\"] = true;\n  t[\"Trump Mediaeval\"] = true;\n  t.Utopia = true;\n  t[\"Vale Type\"] = true;\n  t[\"Bitstream Vera\"] = true;\n  t[\"Vera Serif\"] = true;\n  t.Versailles = true;\n  t.Wanted = true;\n  t.Weiss = true;\n  t[\"Wide Latin\"] = true;\n  t.Windsor = true;\n  t.XITS = true;\n});\nexports.getSerifFonts = getSerifFonts;\nconst getSymbolsFonts = (0, _core_utils.getLookupTableFactory)(function (t) {\n  t.Dingbats = true;\n  t.Symbol = true;\n  t.ZapfDingbats = true;\n});\nexports.getSymbolsFonts = getSymbolsFonts;\nconst getGlyphMapForStandardFonts = (0, _core_utils.getLookupTableFactory)(function (t) {\n  t[2] = 10;\n  t[3] = 32;\n  t[4] = 33;\n  t[5] = 34;\n  t[6] = 35;\n  t[7] = 36;\n  t[8] = 37;\n  t[9] = 38;\n  t[10] = 39;\n  t[11] = 40;\n  t[12] = 41;\n  t[13] = 42;\n  t[14] = 43;\n  t[15] = 44;\n  t[16] = 45;\n  t[17] = 46;\n  t[18] = 47;\n  t[19] = 48;\n  t[20] = 49;\n  t[21] = 50;\n  t[22] = 51;\n  t[23] = 52;\n  t[24] = 53;\n  t[25] = 54;\n  t[26] = 55;\n  t[27] = 56;\n  t[28] = 57;\n  t[29] = 58;\n  t[30] = 894;\n  t[31] = 60;\n  t[32] = 61;\n  t[33] = 62;\n  t[34] = 63;\n  t[35] = 64;\n  t[36] = 65;\n  t[37] = 66;\n  t[38] = 67;\n  t[39] = 68;\n  t[40] = 69;\n  t[41] = 70;\n  t[42] = 71;\n  t[43] = 72;\n  t[44] = 73;\n  t[45] = 74;\n  t[46] = 75;\n  t[47] = 76;\n  t[48] = 77;\n  t[49] = 78;\n  t[50] = 79;\n  t[51] = 80;\n  t[52] = 81;\n  t[53] = 82;\n  t[54] = 83;\n  t[55] = 84;\n  t[56] = 85;\n  t[57] = 86;\n  t[58] = 87;\n  t[59] = 88;\n  t[60] = 89;\n  t[61] = 90;\n  t[62] = 91;\n  t[63] = 92;\n  t[64] = 93;\n  t[65] = 94;\n  t[66] = 95;\n  t[67] = 96;\n  t[68] = 97;\n  t[69] = 98;\n  t[70] = 99;\n  t[71] = 100;\n  t[72] = 101;\n  t[73] = 102;\n  t[74] = 103;\n  t[75] = 104;\n  t[76] = 105;\n  t[77] = 106;\n  t[78] = 107;\n  t[79] = 108;\n  t[80] = 109;\n  t[81] = 110;\n  t[82] = 111;\n  t[83] = 112;\n  t[84] = 113;\n  t[85] = 114;\n  t[86] = 115;\n  t[87] = 116;\n  t[88] = 117;\n  t[89] = 118;\n  t[90] = 119;\n  t[91] = 120;\n  t[92] = 121;\n  t[93] = 122;\n  t[94] = 123;\n  t[95] = 124;\n  t[96] = 125;\n  t[97] = 126;\n  t[98] = 196;\n  t[99] = 197;\n  t[100] = 199;\n  t[101] = 201;\n  t[102] = 209;\n  t[103] = 214;\n  t[104] = 220;\n  t[105] = 225;\n  t[106] = 224;\n  t[107] = 226;\n  t[108] = 228;\n  t[109] = 227;\n  t[110] = 229;\n  t[111] = 231;\n  t[112] = 233;\n  t[113] = 232;\n  t[114] = 234;\n  t[115] = 235;\n  t[116] = 237;\n  t[117] = 236;\n  t[118] = 238;\n  t[119] = 239;\n  t[120] = 241;\n  t[121] = 243;\n  t[122] = 242;\n  t[123] = 244;\n  t[124] = 246;\n  t[125] = 245;\n  t[126] = 250;\n  t[127] = 249;\n  t[128] = 251;\n  t[129] = 252;\n  t[130] = 8224;\n  t[131] = 176;\n  t[132] = 162;\n  t[133] = 163;\n  t[134] = 167;\n  t[135] = 8226;\n  t[136] = 182;\n  t[137] = 223;\n  t[138] = 174;\n  t[139] = 169;\n  t[140] = 8482;\n  t[141] = 180;\n  t[142] = 168;\n  t[143] = 8800;\n  t[144] = 198;\n  t[145] = 216;\n  t[146] = 8734;\n  t[147] = 177;\n  t[148] = 8804;\n  t[149] = 8805;\n  t[150] = 165;\n  t[151] = 181;\n  t[152] = 8706;\n  t[153] = 8721;\n  t[154] = 8719;\n  t[156] = 8747;\n  t[157] = 170;\n  t[158] = 186;\n  t[159] = 8486;\n  t[160] = 230;\n  t[161] = 248;\n  t[162] = 191;\n  t[163] = 161;\n  t[164] = 172;\n  t[165] = 8730;\n  t[166] = 402;\n  t[167] = 8776;\n  t[168] = 8710;\n  t[169] = 171;\n  t[170] = 187;\n  t[171] = 8230;\n  t[210] = 218;\n  t[223] = 711;\n  t[224] = 321;\n  t[225] = 322;\n  t[227] = 353;\n  t[229] = 382;\n  t[234] = 253;\n  t[252] = 263;\n  t[253] = 268;\n  t[254] = 269;\n  t[258] = 258;\n  t[260] = 260;\n  t[261] = 261;\n  t[265] = 280;\n  t[266] = 281;\n  t[268] = 283;\n  t[269] = 313;\n  t[275] = 323;\n  t[276] = 324;\n  t[278] = 328;\n  t[284] = 345;\n  t[285] = 346;\n  t[286] = 347;\n  t[292] = 367;\n  t[295] = 377;\n  t[296] = 378;\n  t[298] = 380;\n  t[305] = 963;\n  t[306] = 964;\n  t[307] = 966;\n  t[308] = 8215;\n  t[309] = 8252;\n  t[310] = 8319;\n  t[311] = 8359;\n  t[312] = 8592;\n  t[313] = 8593;\n  t[337] = 9552;\n  t[493] = 1039;\n  t[494] = 1040;\n  t[705] = 1524;\n  t[706] = 8362;\n  t[710] = 64288;\n  t[711] = 64298;\n  t[759] = 1617;\n  t[761] = 1776;\n  t[763] = 1778;\n  t[775] = 1652;\n  t[777] = 1764;\n  t[778] = 1780;\n  t[779] = 1781;\n  t[780] = 1782;\n  t[782] = 771;\n  t[783] = 64726;\n  t[786] = 8363;\n  t[788] = 8532;\n  t[790] = 768;\n  t[791] = 769;\n  t[792] = 768;\n  t[795] = 803;\n  t[797] = 64336;\n  t[798] = 64337;\n  t[799] = 64342;\n  t[800] = 64343;\n  t[801] = 64344;\n  t[802] = 64345;\n  t[803] = 64362;\n  t[804] = 64363;\n  t[805] = 64364;\n  t[2424] = 7821;\n  t[2425] = 7822;\n  t[2426] = 7823;\n  t[2427] = 7824;\n  t[2428] = 7825;\n  t[2429] = 7826;\n  t[2430] = 7827;\n  t[2433] = 7682;\n  t[2678] = 8045;\n  t[2679] = 8046;\n  t[2830] = 1552;\n  t[2838] = 686;\n  t[2840] = 751;\n  t[2842] = 753;\n  t[2843] = 754;\n  t[2844] = 755;\n  t[2846] = 757;\n  t[2856] = 767;\n  t[2857] = 848;\n  t[2858] = 849;\n  t[2862] = 853;\n  t[2863] = 854;\n  t[2864] = 855;\n  t[2865] = 861;\n  t[2866] = 862;\n  t[2906] = 7460;\n  t[2908] = 7462;\n  t[2909] = 7463;\n  t[2910] = 7464;\n  t[2912] = 7466;\n  t[2913] = 7467;\n  t[2914] = 7468;\n  t[2916] = 7470;\n  t[2917] = 7471;\n  t[2918] = 7472;\n  t[2920] = 7474;\n  t[2921] = 7475;\n  t[2922] = 7476;\n  t[2924] = 7478;\n  t[2925] = 7479;\n  t[2926] = 7480;\n  t[2928] = 7482;\n  t[2929] = 7483;\n  t[2930] = 7484;\n  t[2932] = 7486;\n  t[2933] = 7487;\n  t[2934] = 7488;\n  t[2936] = 7490;\n  t[2937] = 7491;\n  t[2938] = 7492;\n  t[2940] = 7494;\n  t[2941] = 7495;\n  t[2942] = 7496;\n  t[2944] = 7498;\n  t[2946] = 7500;\n  t[2948] = 7502;\n  t[2950] = 7504;\n  t[2951] = 7505;\n  t[2952] = 7506;\n  t[2954] = 7508;\n  t[2955] = 7509;\n  t[2956] = 7510;\n  t[2958] = 7512;\n  t[2959] = 7513;\n  t[2960] = 7514;\n  t[2962] = 7516;\n  t[2963] = 7517;\n  t[2964] = 7518;\n  t[2966] = 7520;\n  t[2967] = 7521;\n  t[2968] = 7522;\n  t[2970] = 7524;\n  t[2971] = 7525;\n  t[2972] = 7526;\n  t[2974] = 7528;\n  t[2975] = 7529;\n  t[2976] = 7530;\n  t[2978] = 1537;\n  t[2979] = 1538;\n  t[2980] = 1539;\n  t[2982] = 1549;\n  t[2983] = 1551;\n  t[2984] = 1552;\n  t[2986] = 1554;\n  t[2987] = 1555;\n  t[2988] = 1556;\n  t[2990] = 1623;\n  t[2991] = 1624;\n  t[2995] = 1775;\n  t[2999] = 1791;\n  t[3002] = 64290;\n  t[3003] = 64291;\n  t[3004] = 64292;\n  t[3006] = 64294;\n  t[3007] = 64295;\n  t[3008] = 64296;\n  t[3011] = 1900;\n  t[3014] = 8223;\n  t[3015] = 8244;\n  t[3017] = 7532;\n  t[3018] = 7533;\n  t[3019] = 7534;\n  t[3075] = 7590;\n  t[3076] = 7591;\n  t[3079] = 7594;\n  t[3080] = 7595;\n  t[3083] = 7598;\n  t[3084] = 7599;\n  t[3087] = 7602;\n  t[3088] = 7603;\n  t[3091] = 7606;\n  t[3092] = 7607;\n  t[3095] = 7610;\n  t[3096] = 7611;\n  t[3099] = 7614;\n  t[3100] = 7615;\n  t[3103] = 7618;\n  t[3104] = 7619;\n  t[3107] = 8337;\n  t[3108] = 8338;\n  t[3116] = 1884;\n  t[3119] = 1885;\n  t[3120] = 1885;\n  t[3123] = 1886;\n  t[3124] = 1886;\n  t[3127] = 1887;\n  t[3128] = 1887;\n  t[3131] = 1888;\n  t[3132] = 1888;\n  t[3135] = 1889;\n  t[3136] = 1889;\n  t[3139] = 1890;\n  t[3140] = 1890;\n  t[3143] = 1891;\n  t[3144] = 1891;\n  t[3147] = 1892;\n  t[3148] = 1892;\n  t[3153] = 580;\n  t[3154] = 581;\n  t[3157] = 584;\n  t[3158] = 585;\n  t[3161] = 588;\n  t[3162] = 589;\n  t[3165] = 891;\n  t[3166] = 892;\n  t[3169] = 1274;\n  t[3170] = 1275;\n  t[3173] = 1278;\n  t[3174] = 1279;\n  t[3181] = 7622;\n  t[3182] = 7623;\n  t[3282] = 11799;\n  t[3316] = 578;\n  t[3379] = 42785;\n  t[3393] = 1159;\n  t[3416] = 8377;\n});\nexports.getGlyphMapForStandardFonts = getGlyphMapForStandardFonts;\nconst getSupplementalGlyphMapForArialBlack = (0, _core_utils.getLookupTableFactory)(function (t) {\n  t[227] = 322;\n  t[264] = 261;\n  t[291] = 346;\n});\nexports.getSupplementalGlyphMapForArialBlack = getSupplementalGlyphMapForArialBlack;\nconst getSupplementalGlyphMapForCalibri = (0, _core_utils.getLookupTableFactory)(function (t) {\n  t[1] = 32;\n  t[4] = 65;\n  t[17] = 66;\n  t[18] = 67;\n  t[24] = 68;\n  t[28] = 69;\n  t[38] = 70;\n  t[39] = 71;\n  t[44] = 72;\n  t[47] = 73;\n  t[58] = 74;\n  t[60] = 75;\n  t[62] = 76;\n  t[68] = 77;\n  t[69] = 78;\n  t[75] = 79;\n  t[87] = 80;\n  t[89] = 81;\n  t[90] = 82;\n  t[94] = 83;\n  t[100] = 84;\n  t[104] = 85;\n  t[115] = 86;\n  t[116] = 87;\n  t[121] = 88;\n  t[122] = 89;\n  t[127] = 90;\n  t[258] = 97;\n  t[268] = 261;\n  t[271] = 98;\n  t[272] = 99;\n  t[273] = 263;\n  t[282] = 100;\n  t[286] = 101;\n  t[295] = 281;\n  t[296] = 102;\n  t[336] = 103;\n  t[346] = 104;\n  t[349] = 105;\n  t[361] = 106;\n  t[364] = 107;\n  t[367] = 108;\n  t[371] = 322;\n  t[373] = 109;\n  t[374] = 110;\n  t[381] = 111;\n  t[383] = 243;\n  t[393] = 112;\n  t[395] = 113;\n  t[396] = 114;\n  t[400] = 115;\n  t[401] = 347;\n  t[410] = 116;\n  t[437] = 117;\n  t[448] = 118;\n  t[449] = 119;\n  t[454] = 120;\n  t[455] = 121;\n  t[460] = 122;\n  t[463] = 380;\n  t[853] = 44;\n  t[855] = 58;\n  t[856] = 46;\n  t[876] = 47;\n  t[878] = 45;\n  t[882] = 45;\n  t[894] = 40;\n  t[895] = 41;\n  t[896] = 91;\n  t[897] = 93;\n  t[923] = 64;\n  t[1004] = 48;\n  t[1005] = 49;\n  t[1006] = 50;\n  t[1007] = 51;\n  t[1008] = 52;\n  t[1009] = 53;\n  t[1010] = 54;\n  t[1011] = 55;\n  t[1012] = 56;\n  t[1013] = 57;\n  t[1081] = 37;\n  t[1085] = 43;\n  t[1086] = 45;\n});\nexports.getSupplementalGlyphMapForCalibri = getSupplementalGlyphMapForCalibri;\n\n/***/ }),\n/* 35 */\n/***/ ((__unused_webpack_module, __webpack_exports__, __w_pdfjs_require__) => {\n\n__w_pdfjs_require__.r(__webpack_exports__);\n/* harmony export */ __w_pdfjs_require__.d(__webpack_exports__, {\n/* harmony export */   \"getNormalizedUnicodes\": () => /* binding */ getNormalizedUnicodes,\n/* harmony export */   \"getUnicodeForGlyph\": () => /* binding */ getUnicodeForGlyph,\n/* harmony export */   \"getUnicodeRangeFor\": () => /* binding */ getUnicodeRangeFor,\n/* harmony export */   \"mapSpecialUnicodeValues\": () => /* binding */ mapSpecialUnicodeValues,\n/* harmony export */   \"reverseIfRtl\": () => /* binding */ reverseIfRtl\n/* harmony export */ });\n/* harmony import */ var _core_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __w_pdfjs_require__(8);\n\nvar getSpecialPUASymbols = (0,_core_utils_js__WEBPACK_IMPORTED_MODULE_0__.getLookupTableFactory)(function (t) {\n t[63721] = 0x00a9;\n t[63193] = 0x00a9;\n t[63720] = 0x00ae;\n t[63194] = 0x00ae;\n t[63722] = 0x2122;\n t[63195] = 0x2122;\n t[63729] = 0x23a7;\n t[63730] = 0x23a8;\n t[63731] = 0x23a9;\n t[63740] = 0x23ab;\n t[63741] = 0x23ac;\n t[63742] = 0x23ad;\n t[63726] = 0x23a1;\n t[63727] = 0x23a2;\n t[63728] = 0x23a3;\n t[63737] = 0x23a4;\n t[63738] = 0x23a5;\n t[63739] = 0x23a6;\n t[63723] = 0x239b;\n t[63724] = 0x239c;\n t[63725] = 0x239d;\n t[63734] = 0x239e;\n t[63735] = 0x239f;\n t[63736] = 0x23a0;\n});\nfunction mapSpecialUnicodeValues(code) {\n if (code >= 0xfff0 && code <= 0xffff) {\n  return 0;\n } else if (code >= 0xf600 && code <= 0xf8ff) {\n  return getSpecialPUASymbols()[code] || code;\n } else if (code === 0x00ad) {\n  return 0x002d;\n }\n return code;\n}\nfunction getUnicodeForGlyph(name, glyphsUnicodeMap) {\n var unicode = glyphsUnicodeMap[name];\n if (unicode !== undefined) {\n  return unicode;\n }\n if (!name) {\n  return -1;\n }\n if (name[0] === \"u\") {\n  var nameLen = name.length, hexStr;\n  if (nameLen === 7 && name[1] === \"n\" && name[2] === \"i\") {\n   hexStr = name.substring(3);\n  } else if (nameLen >= 5 && nameLen <= 7) {\n   hexStr = name.substring(1);\n  } else {\n   return -1;\n  }\n  if (hexStr === hexStr.toUpperCase()) {\n   unicode = parseInt(hexStr, 16);\n   if (unicode >= 0) {\n    return unicode;\n   }\n  }\n }\n return -1;\n}\nvar UnicodeRanges = [\n {\n  begin: 0x0000,\n  end: 0x007f\n },\n {\n  begin: 0x0080,\n  end: 0x00ff\n },\n {\n  begin: 0x0100,\n  end: 0x017f\n },\n {\n  begin: 0x0180,\n  end: 0x024f\n },\n {\n  begin: 0x0250,\n  end: 0x02af\n },\n {\n  begin: 0x02b0,\n  end: 0x02ff\n },\n {\n  begin: 0x0300,\n  end: 0x036f\n },\n {\n  begin: 0x0370,\n  end: 0x03ff\n },\n {\n  begin: 0x2c80,\n  end: 0x2cff\n },\n {\n  begin: 0x0400,\n  end: 0x04ff\n },\n {\n  begin: 0x0530,\n  end: 0x058f\n },\n {\n  begin: 0x0590,\n  end: 0x05ff\n },\n {\n  begin: 0xa500,\n  end: 0xa63f\n },\n {\n  begin: 0x0600,\n  end: 0x06ff\n },\n {\n  begin: 0x07c0,\n  end: 0x07ff\n },\n {\n  begin: 0x0900,\n  end: 0x097f\n },\n {\n  begin: 0x0980,\n  end: 0x09ff\n },\n {\n  begin: 0x0a00,\n  end: 0x0a7f\n },\n {\n  begin: 0x0a80,\n  end: 0x0aff\n },\n {\n  begin: 0x0b00,\n  end: 0x0b7f\n },\n {\n  begin: 0x0b80,\n  end: 0x0bff\n },\n {\n  begin: 0x0c00,\n  end: 0x0c7f\n },\n {\n  begin: 0x0c80,\n  end: 0x0cff\n },\n {\n  begin: 0x0d00,\n  end: 0x0d7f\n },\n {\n  begin: 0x0e00,\n  end: 0x0e7f\n },\n {\n  begin: 0x0e80,\n  end: 0x0eff\n },\n {\n  begin: 0x10a0,\n  end: 0x10ff\n },\n {\n  begin: 0x1b00,\n  end: 0x1b7f\n },\n {\n  begin: 0x1100,\n  end: 0x11ff\n },\n {\n  begin: 0x1e00,\n  end: 0x1eff\n },\n {\n  begin: 0x1f00,\n  end: 0x1fff\n },\n {\n  begin: 0x2000,\n  end: 0x206f\n },\n {\n  begin: 0x2070,\n  end: 0x209f\n },\n {\n  begin: 0x20a0,\n  end: 0x20cf\n },\n {\n  begin: 0x20d0,\n  end: 0x20ff\n },\n {\n  begin: 0x2100,\n  end: 0x214f\n },\n {\n  begin: 0x2150,\n  end: 0x218f\n },\n {\n  begin: 0x2190,\n  end: 0x21ff\n },\n {\n  begin: 0x2200,\n  end: 0x22ff\n },\n {\n  begin: 0x2300,\n  end: 0x23ff\n },\n {\n  begin: 0x2400,\n  end: 0x243f\n },\n {\n  begin: 0x2440,\n  end: 0x245f\n },\n {\n  begin: 0x2460,\n  end: 0x24ff\n },\n {\n  begin: 0x2500,\n  end: 0x257f\n },\n {\n  begin: 0x2580,\n  end: 0x259f\n },\n {\n  begin: 0x25a0,\n  end: 0x25ff\n },\n {\n  begin: 0x2600,\n  end: 0x26ff\n },\n {\n  begin: 0x2700,\n  end: 0x27bf\n },\n {\n  begin: 0x3000,\n  end: 0x303f\n },\n {\n  begin: 0x3040,\n  end: 0x309f\n },\n {\n  begin: 0x30a0,\n  end: 0x30ff\n },\n {\n  begin: 0x3100,\n  end: 0x312f\n },\n {\n  begin: 0x3130,\n  end: 0x318f\n },\n {\n  begin: 0xa840,\n  end: 0xa87f\n },\n {\n  begin: 0x3200,\n  end: 0x32ff\n },\n {\n  begin: 0x3300,\n  end: 0x33ff\n },\n {\n  begin: 0xac00,\n  end: 0xd7af\n },\n {\n  begin: 0xd800,\n  end: 0xdfff\n },\n {\n  begin: 0x10900,\n  end: 0x1091f\n },\n {\n  begin: 0x4e00,\n  end: 0x9fff\n },\n {\n  begin: 0xe000,\n  end: 0xf8ff\n },\n {\n  begin: 0x31c0,\n  end: 0x31ef\n },\n {\n  begin: 0xfb00,\n  end: 0xfb4f\n },\n {\n  begin: 0xfb50,\n  end: 0xfdff\n },\n {\n  begin: 0xfe20,\n  end: 0xfe2f\n },\n {\n  begin: 0xfe10,\n  end: 0xfe1f\n },\n {\n  begin: 0xfe50,\n  end: 0xfe6f\n },\n {\n  begin: 0xfe70,\n  end: 0xfeff\n },\n {\n  begin: 0xff00,\n  end: 0xffef\n },\n {\n  begin: 0xfff0,\n  end: 0xffff\n },\n {\n  begin: 0x0f00,\n  end: 0x0fff\n },\n {\n  begin: 0x0700,\n  end: 0x074f\n },\n {\n  begin: 0x0780,\n  end: 0x07bf\n },\n {\n  begin: 0x0d80,\n  end: 0x0dff\n },\n {\n  begin: 0x1000,\n  end: 0x109f\n },\n {\n  begin: 0x1200,\n  end: 0x137f\n },\n {\n  begin: 0x13a0,\n  end: 0x13ff\n },\n {\n  begin: 0x1400,\n  end: 0x167f\n },\n {\n  begin: 0x1680,\n  end: 0x169f\n },\n {\n  begin: 0x16a0,\n  end: 0x16ff\n },\n {\n  begin: 0x1780,\n  end: 0x17ff\n },\n {\n  begin: 0x1800,\n  end: 0x18af\n },\n {\n  begin: 0x2800,\n  end: 0x28ff\n },\n {\n  begin: 0xa000,\n  end: 0xa48f\n },\n {\n  begin: 0x1700,\n  end: 0x171f\n },\n {\n  begin: 0x10300,\n  end: 0x1032f\n },\n {\n  begin: 0x10330,\n  end: 0x1034f\n },\n {\n  begin: 0x10400,\n  end: 0x1044f\n },\n {\n  begin: 0x1d000,\n  end: 0x1d0ff\n },\n {\n  begin: 0x1d400,\n  end: 0x1d7ff\n },\n {\n  begin: 0xff000,\n  end: 0xffffd\n },\n {\n  begin: 0xfe00,\n  end: 0xfe0f\n },\n {\n  begin: 0xe0000,\n  end: 0xe007f\n },\n {\n  begin: 0x1900,\n  end: 0x194f\n },\n {\n  begin: 0x1950,\n  end: 0x197f\n },\n {\n  begin: 0x1980,\n  end: 0x19df\n },\n {\n  begin: 0x1a00,\n  end: 0x1a1f\n },\n {\n  begin: 0x2c00,\n  end: 0x2c5f\n },\n {\n  begin: 0x2d30,\n  end: 0x2d7f\n },\n {\n  begin: 0x4dc0,\n  end: 0x4dff\n },\n {\n  begin: 0xa800,\n  end: 0xa82f\n },\n {\n  begin: 0x10000,\n  end: 0x1007f\n },\n {\n  begin: 0x10140,\n  end: 0x1018f\n },\n {\n  begin: 0x10380,\n  end: 0x1039f\n },\n {\n  begin: 0x103a0,\n  end: 0x103df\n },\n {\n  begin: 0x10450,\n  end: 0x1047f\n },\n {\n  begin: 0x10480,\n  end: 0x104af\n },\n {\n  begin: 0x10800,\n  end: 0x1083f\n },\n {\n  begin: 0x10a00,\n  end: 0x10a5f\n },\n {\n  begin: 0x1d300,\n  end: 0x1d35f\n },\n {\n  begin: 0x12000,\n  end: 0x123ff\n },\n {\n  begin: 0x1d360,\n  end: 0x1d37f\n },\n {\n  begin: 0x1b80,\n  end: 0x1bbf\n },\n {\n  begin: 0x1c00,\n  end: 0x1c4f\n },\n {\n  begin: 0x1c50,\n  end: 0x1c7f\n },\n {\n  begin: 0xa880,\n  end: 0xa8df\n },\n {\n  begin: 0xa900,\n  end: 0xa92f\n },\n {\n  begin: 0xa930,\n  end: 0xa95f\n },\n {\n  begin: 0xaa00,\n  end: 0xaa5f\n },\n {\n  begin: 0x10190,\n  end: 0x101cf\n },\n {\n  begin: 0x101d0,\n  end: 0x101ff\n },\n {\n  begin: 0x102a0,\n  end: 0x102df\n },\n {\n  begin: 0x1f030,\n  end: 0x1f09f\n }\n];\nfunction getUnicodeRangeFor(value) {\n for (var i = 0, ii = UnicodeRanges.length; i < ii; i++) {\n  var range = UnicodeRanges[i];\n  if (value >= range.begin && value < range.end) {\n   return i;\n  }\n }\n return -1;\n}\nfunction isRTLRangeFor(value) {\n var range = UnicodeRanges[13];\n if (value >= range.begin && value < range.end) {\n  return true;\n }\n range = UnicodeRanges[11];\n if (value >= range.begin && value < range.end) {\n  return true;\n }\n return false;\n}\nvar getNormalizedUnicodes = (0,_core_utils_js__WEBPACK_IMPORTED_MODULE_0__.getArrayLookupTableFactory)(function () {\n return [\n  \"\\u00A8\",\n  \"\\u0020\\u0308\",\n  \"\\u00AF\",\n  \"\\u0020\\u0304\",\n  \"\\u00B4\",\n  \"\\u0020\\u0301\",\n  \"\\u00B5\",\n  \"\\u03BC\",\n  \"\\u00B8\",\n  \"\\u0020\\u0327\",\n  \"\\u0132\",\n  \"\\u0049\\u004A\",\n  \"\\u0133\",\n  \"\\u0069\\u006A\",\n  \"\\u013F\",\n  \"\\u004C\\u00B7\",\n  \"\\u0140\",\n  \"\\u006C\\u00B7\",\n  \"\\u0149\",\n  \"\\u02BC\\u006E\",\n  \"\\u017F\",\n  \"\\u0073\",\n  \"\\u01C4\",\n  \"\\u0044\\u017D\",\n  \"\\u01C5\",\n  \"\\u0044\\u017E\",\n  \"\\u01C6\",\n  \"\\u0064\\u017E\",\n  \"\\u01C7\",\n  \"\\u004C\\u004A\",\n  \"\\u01C8\",\n  \"\\u004C\\u006A\",\n  \"\\u01C9\",\n  \"\\u006C\\u006A\",\n  \"\\u01CA\",\n  \"\\u004E\\u004A\",\n  \"\\u01CB\",\n  \"\\u004E\\u006A\",\n  \"\\u01CC\",\n  \"\\u006E\\u006A\",\n  \"\\u01F1\",\n  \"\\u0044\\u005A\",\n  \"\\u01F2\",\n  \"\\u0044\\u007A\",\n  \"\\u01F3\",\n  \"\\u0064\\u007A\",\n  \"\\u02D8\",\n  \"\\u0020\\u0306\",\n  \"\\u02D9\",\n  \"\\u0020\\u0307\",\n  \"\\u02DA\",\n  \"\\u0020\\u030A\",\n  \"\\u02DB\",\n  \"\\u0020\\u0328\",\n  \"\\u02DC\",\n  \"\\u0020\\u0303\",\n  \"\\u02DD\",\n  \"\\u0020\\u030B\",\n  \"\\u037A\",\n  \"\\u0020\\u0345\",\n  \"\\u0384\",\n  \"\\u0020\\u0301\",\n  \"\\u03D0\",\n  \"\\u03B2\",\n  \"\\u03D1\",\n  \"\\u03B8\",\n  \"\\u03D2\",\n  \"\\u03A5\",\n  \"\\u03D5\",\n  \"\\u03C6\",\n  \"\\u03D6\",\n  \"\\u03C0\",\n  \"\\u03F0\",\n  \"\\u03BA\",\n  \"\\u03F1\",\n  \"\\u03C1\",\n  \"\\u03F2\",\n  \"\\u03C2\",\n  \"\\u03F4\",\n  \"\\u0398\",\n  \"\\u03F5\",\n  \"\\u03B5\",\n  \"\\u03F9\",\n  \"\\u03A3\",\n  \"\\u0587\",\n  \"\\u0565\\u0582\",\n  \"\\u0675\",\n  \"\\u0627\\u0674\",\n  \"\\u0676\",\n  \"\\u0648\\u0674\",\n  \"\\u0677\",\n  \"\\u06C7\\u0674\",\n  \"\\u0678\",\n  \"\\u064A\\u0674\",\n  \"\\u0E33\",\n  \"\\u0E4D\\u0E32\",\n  \"\\u0EB3\",\n  \"\\u0ECD\\u0EB2\",\n  \"\\u0EDC\",\n  \"\\u0EAB\\u0E99\",\n  \"\\u0EDD\",\n  \"\\u0EAB\\u0EA1\",\n  \"\\u0F77\",\n  \"\\u0FB2\\u0F81\",\n  \"\\u0F79\",\n  \"\\u0FB3\\u0F81\",\n  \"\\u1E9A\",\n  \"\\u0061\\u02BE\",\n  \"\\u1FBD\",\n  \"\\u0020\\u0313\",\n  \"\\u1FBF\",\n  \"\\u0020\\u0313\",\n  \"\\u1FC0\",\n  \"\\u0020\\u0342\",\n  \"\\u1FFE\",\n  \"\\u0020\\u0314\",\n  \"\\u2002\",\n  \"\\u0020\",\n  \"\\u2003\",\n  \"\\u0020\",\n  \"\\u2004\",\n  \"\\u0020\",\n  \"\\u2005\",\n  \"\\u0020\",\n  \"\\u2006\",\n  \"\\u0020\",\n  \"\\u2008\",\n  \"\\u0020\",\n  \"\\u2009\",\n  \"\\u0020\",\n  \"\\u200A\",\n  \"\\u0020\",\n  \"\\u2017\",\n  \"\\u0020\\u0333\",\n  \"\\u2024\",\n  \"\\u002E\",\n  \"\\u2025\",\n  \"\\u002E\\u002E\",\n  \"\\u2026\",\n  \"\\u002E\\u002E\\u002E\",\n  \"\\u2033\",\n  \"\\u2032\\u2032\",\n  \"\\u2034\",\n  \"\\u2032\\u2032\\u2032\",\n  \"\\u2036\",\n  \"\\u2035\\u2035\",\n  \"\\u2037\",\n  \"\\u2035\\u2035\\u2035\",\n  \"\\u203C\",\n  \"\\u0021\\u0021\",\n  \"\\u203E\",\n  \"\\u0020\\u0305\",\n  \"\\u2047\",\n  \"\\u003F\\u003F\",\n  \"\\u2048\",\n  \"\\u003F\\u0021\",\n  \"\\u2049\",\n  \"\\u0021\\u003F\",\n  \"\\u2057\",\n  \"\\u2032\\u2032\\u2032\\u2032\",\n  \"\\u205F\",\n  \"\\u0020\",\n  \"\\u20A8\",\n  \"\\u0052\\u0073\",\n  \"\\u2100\",\n  \"\\u0061\\u002F\\u0063\",\n  \"\\u2101\",\n  \"\\u0061\\u002F\\u0073\",\n  \"\\u2103\",\n  \"\\u00B0\\u0043\",\n  \"\\u2105\",\n  \"\\u0063\\u002F\\u006F\",\n  \"\\u2106\",\n  \"\\u0063\\u002F\\u0075\",\n  \"\\u2107\",\n  \"\\u0190\",\n  \"\\u2109\",\n  \"\\u00B0\\u0046\",\n  \"\\u2116\",\n  \"\\u004E\\u006F\",\n  \"\\u2121\",\n  \"\\u0054\\u0045\\u004C\",\n  \"\\u2135\",\n  \"\\u05D0\",\n  \"\\u2136\",\n  \"\\u05D1\",\n  \"\\u2137\",\n  \"\\u05D2\",\n  \"\\u2138\",\n  \"\\u05D3\",\n  \"\\u213B\",\n  \"\\u0046\\u0041\\u0058\",\n  \"\\u2160\",\n  \"\\u0049\",\n  \"\\u2161\",\n  \"\\u0049\\u0049\",\n  \"\\u2162\",\n  \"\\u0049\\u0049\\u0049\",\n  \"\\u2163\",\n  \"\\u0049\\u0056\",\n  \"\\u2164\",\n  \"\\u0056\",\n  \"\\u2165\",\n  \"\\u0056\\u0049\",\n  \"\\u2166\",\n  \"\\u0056\\u0049\\u0049\",\n  \"\\u2167\",\n  \"\\u0056\\u0049\\u0049\\u0049\",\n  \"\\u2168\",\n  \"\\u0049\\u0058\",\n  \"\\u2169\",\n  \"\\u0058\",\n  \"\\u216A\",\n  \"\\u0058\\u0049\",\n  \"\\u216B\",\n  \"\\u0058\\u0049\\u0049\",\n  \"\\u216C\",\n  \"\\u004C\",\n  \"\\u216D\",\n  \"\\u0043\",\n  \"\\u216E\",\n  \"\\u0044\",\n  \"\\u216F\",\n  \"\\u004D\",\n  \"\\u2170\",\n  \"\\u0069\",\n  \"\\u2171\",\n  \"\\u0069\\u0069\",\n  \"\\u2172\",\n  \"\\u0069\\u0069\\u0069\",\n  \"\\u2173\",\n  \"\\u0069\\u0076\",\n  \"\\u2174\",\n  \"\\u0076\",\n  \"\\u2175\",\n  \"\\u0076\\u0069\",\n  \"\\u2176\",\n  \"\\u0076\\u0069\\u0069\",\n  \"\\u2177\",\n  \"\\u0076\\u0069\\u0069\\u0069\",\n  \"\\u2178\",\n  \"\\u0069\\u0078\",\n  \"\\u2179\",\n  \"\\u0078\",\n  \"\\u217A\",\n  \"\\u0078\\u0069\",\n  \"\\u217B\",\n  \"\\u0078\\u0069\\u0069\",\n  \"\\u217C\",\n  \"\\u006C\",\n  \"\\u217D\",\n  \"\\u0063\",\n  \"\\u217E\",\n  \"\\u0064\",\n  \"\\u217F\",\n  \"\\u006D\",\n  \"\\u222C\",\n  \"\\u222B\\u222B\",\n  \"\\u222D\",\n  \"\\u222B\\u222B\\u222B\",\n  \"\\u222F\",\n  \"\\u222E\\u222E\",\n  \"\\u2230\",\n  \"\\u222E\\u222E\\u222E\",\n  \"\\u2474\",\n  \"\\u0028\\u0031\\u0029\",\n  \"\\u2475\",\n  \"\\u0028\\u0032\\u0029\",\n  \"\\u2476\",\n  \"\\u0028\\u0033\\u0029\",\n  \"\\u2477\",\n  \"\\u0028\\u0034\\u0029\",\n  \"\\u2478\",\n  \"\\u0028\\u0035\\u0029\",\n  \"\\u2479\",\n  \"\\u0028\\u0036\\u0029\",\n  \"\\u247A\",\n  \"\\u0028\\u0037\\u0029\",\n  \"\\u247B\",\n  \"\\u0028\\u0038\\u0029\",\n  \"\\u247C\",\n  \"\\u0028\\u0039\\u0029\",\n  \"\\u247D\",\n  \"\\u0028\\u0031\\u0030\\u0029\",\n  \"\\u247E\",\n  \"\\u0028\\u0031\\u0031\\u0029\",\n  \"\\u247F\",\n  \"\\u0028\\u0031\\u0032\\u0029\",\n  \"\\u2480\",\n  \"\\u0028\\u0031\\u0033\\u0029\",\n  \"\\u2481\",\n  \"\\u0028\\u0031\\u0034\\u0029\",\n  \"\\u2482\",\n  \"\\u0028\\u0031\\u0035\\u0029\",\n  \"\\u2483\",\n  \"\\u0028\\u0031\\u0036\\u0029\",\n  \"\\u2484\",\n  \"\\u0028\\u0031\\u0037\\u0029\",\n  \"\\u2485\",\n  \"\\u0028\\u0031\\u0038\\u0029\",\n  \"\\u2486\",\n  \"\\u0028\\u0031\\u0039\\u0029\",\n  \"\\u2487\",\n  \"\\u0028\\u0032\\u0030\\u0029\",\n  \"\\u2488\",\n  \"\\u0031\\u002E\",\n  \"\\u2489\",\n  \"\\u0032\\u002E\",\n  \"\\u248A\",\n  \"\\u0033\\u002E\",\n  \"\\u248B\",\n  \"\\u0034\\u002E\",\n  \"\\u248C\",\n  \"\\u0035\\u002E\",\n  \"\\u248D\",\n  \"\\u0036\\u002E\",\n  \"\\u248E\",\n  \"\\u0037\\u002E\",\n  \"\\u248F\",\n  \"\\u0038\\u002E\",\n  \"\\u2490\",\n  \"\\u0039\\u002E\",\n  \"\\u2491\",\n  \"\\u0031\\u0030\\u002E\",\n  \"\\u2492\",\n  \"\\u0031\\u0031\\u002E\",\n  \"\\u2493\",\n  \"\\u0031\\u0032\\u002E\",\n  \"\\u2494\",\n  \"\\u0031\\u0033\\u002E\",\n  \"\\u2495\",\n  \"\\u0031\\u0034\\u002E\",\n  \"\\u2496\",\n  \"\\u0031\\u0035\\u002E\",\n  \"\\u2497\",\n  \"\\u0031\\u0036\\u002E\",\n  \"\\u2498\",\n  \"\\u0031\\u0037\\u002E\",\n  \"\\u2499\",\n  \"\\u0031\\u0038\\u002E\",\n  \"\\u249A\",\n  \"\\u0031\\u0039\\u002E\",\n  \"\\u249B\",\n  \"\\u0032\\u0030\\u002E\",\n  \"\\u249C\",\n  \"\\u0028\\u0061\\u0029\",\n  \"\\u249D\",\n  \"\\u0028\\u0062\\u0029\",\n  \"\\u249E\",\n  \"\\u0028\\u0063\\u0029\",\n  \"\\u249F\",\n  \"\\u0028\\u0064\\u0029\",\n  \"\\u24A0\",\n  \"\\u0028\\u0065\\u0029\",\n  \"\\u24A1\",\n  \"\\u0028\\u0066\\u0029\",\n  \"\\u24A2\",\n  \"\\u0028\\u0067\\u0029\",\n  \"\\u24A3\",\n  \"\\u0028\\u0068\\u0029\",\n  \"\\u24A4\",\n  \"\\u0028\\u0069\\u0029\",\n  \"\\u24A5\",\n  \"\\u0028\\u006A\\u0029\",\n  \"\\u24A6\",\n  \"\\u0028\\u006B\\u0029\",\n  \"\\u24A7\",\n  \"\\u0028\\u006C\\u0029\",\n  \"\\u24A8\",\n  \"\\u0028\\u006D\\u0029\",\n  \"\\u24A9\",\n  \"\\u0028\\u006E\\u0029\",\n  \"\\u24AA\",\n  \"\\u0028\\u006F\\u0029\",\n  \"\\u24AB\",\n  \"\\u0028\\u0070\\u0029\",\n  \"\\u24AC\",\n  \"\\u0028\\u0071\\u0029\",\n  \"\\u24AD\",\n  \"\\u0028\\u0072\\u0029\",\n  \"\\u24AE\",\n  \"\\u0028\\u0073\\u0029\",\n  \"\\u24AF\",\n  \"\\u0028\\u0074\\u0029\",\n  \"\\u24B0\",\n  \"\\u0028\\u0075\\u0029\",\n  \"\\u24B1\",\n  \"\\u0028\\u0076\\u0029\",\n  \"\\u24B2\",\n  \"\\u0028\\u0077\\u0029\",\n  \"\\u24B3\",\n  \"\\u0028\\u0078\\u0029\",\n  \"\\u24B4\",\n  \"\\u0028\\u0079\\u0029\",\n  \"\\u24B5\",\n  \"\\u0028\\u007A\\u0029\",\n  \"\\u2A0C\",\n  \"\\u222B\\u222B\\u222B\\u222B\",\n  \"\\u2A74\",\n  \"\\u003A\\u003A\\u003D\",\n  \"\\u2A75\",\n  \"\\u003D\\u003D\",\n  \"\\u2A76\",\n  \"\\u003D\\u003D\\u003D\",\n  \"\\u2E9F\",\n  \"\\u6BCD\",\n  \"\\u2EF3\",\n  \"\\u9F9F\",\n  \"\\u2F00\",\n  \"\\u4E00\",\n  \"\\u2F01\",\n  \"\\u4E28\",\n  \"\\u2F02\",\n  \"\\u4E36\",\n  \"\\u2F03\",\n  \"\\u4E3F\",\n  \"\\u2F04\",\n  \"\\u4E59\",\n  \"\\u2F05\",\n  \"\\u4E85\",\n  \"\\u2F06\",\n  \"\\u4E8C\",\n  \"\\u2F07\",\n  \"\\u4EA0\",\n  \"\\u2F08\",\n  \"\\u4EBA\",\n  \"\\u2F09\",\n  \"\\u513F\",\n  \"\\u2F0A\",\n  \"\\u5165\",\n  \"\\u2F0B\",\n  \"\\u516B\",\n  \"\\u2F0C\",\n  \"\\u5182\",\n  \"\\u2F0D\",\n  \"\\u5196\",\n  \"\\u2F0E\",\n  \"\\u51AB\",\n  \"\\u2F0F\",\n  \"\\u51E0\",\n  \"\\u2F10\",\n  \"\\u51F5\",\n  \"\\u2F11\",\n  \"\\u5200\",\n  \"\\u2F12\",\n  \"\\u529B\",\n  \"\\u2F13\",\n  \"\\u52F9\",\n  \"\\u2F14\",\n  \"\\u5315\",\n  \"\\u2F15\",\n  \"\\u531A\",\n  \"\\u2F16\",\n  \"\\u5338\",\n  \"\\u2F17\",\n  \"\\u5341\",\n  \"\\u2F18\",\n  \"\\u535C\",\n  \"\\u2F19\",\n  \"\\u5369\",\n  \"\\u2F1A\",\n  \"\\u5382\",\n  \"\\u2F1B\",\n  \"\\u53B6\",\n  \"\\u2F1C\",\n  \"\\u53C8\",\n  \"\\u2F1D\",\n  \"\\u53E3\",\n  \"\\u2F1E\",\n  \"\\u56D7\",\n  \"\\u2F1F\",\n  \"\\u571F\",\n  \"\\u2F20\",\n  \"\\u58EB\",\n  \"\\u2F21\",\n  \"\\u5902\",\n  \"\\u2F22\",\n  \"\\u590A\",\n  \"\\u2F23\",\n  \"\\u5915\",\n  \"\\u2F24\",\n  \"\\u5927\",\n  \"\\u2F25\",\n  \"\\u5973\",\n  \"\\u2F26\",\n  \"\\u5B50\",\n  \"\\u2F27\",\n  \"\\u5B80\",\n  \"\\u2F28\",\n  \"\\u5BF8\",\n  \"\\u2F29\",\n  \"\\u5C0F\",\n  \"\\u2F2A\",\n  \"\\u5C22\",\n  \"\\u2F2B\",\n  \"\\u5C38\",\n  \"\\u2F2C\",\n  \"\\u5C6E\",\n  \"\\u2F2D\",\n  \"\\u5C71\",\n  \"\\u2F2E\",\n  \"\\u5DDB\",\n  \"\\u2F2F\",\n  \"\\u5DE5\",\n  \"\\u2F30\",\n  \"\\u5DF1\",\n  \"\\u2F31\",\n  \"\\u5DFE\",\n  \"\\u2F32\",\n  \"\\u5E72\",\n  \"\\u2F33\",\n  \"\\u5E7A\",\n  \"\\u2F34\",\n  \"\\u5E7F\",\n  \"\\u2F35\",\n  \"\\u5EF4\",\n  \"\\u2F36\",\n  \"\\u5EFE\",\n  \"\\u2F37\",\n  \"\\u5F0B\",\n  \"\\u2F38\",\n  \"\\u5F13\",\n  \"\\u2F39\",\n  \"\\u5F50\",\n  \"\\u2F3A\",\n  \"\\u5F61\",\n  \"\\u2F3B\",\n  \"\\u5F73\",\n  \"\\u2F3C\",\n  \"\\u5FC3\",\n  \"\\u2F3D\",\n  \"\\u6208\",\n  \"\\u2F3E\",\n  \"\\u6236\",\n  \"\\u2F3F\",\n  \"\\u624B\",\n  \"\\u2F40\",\n  \"\\u652F\",\n  \"\\u2F41\",\n  \"\\u6534\",\n  \"\\u2F42\",\n  \"\\u6587\",\n  \"\\u2F43\",\n  \"\\u6597\",\n  \"\\u2F44\",\n  \"\\u65A4\",\n  \"\\u2F45\",\n  \"\\u65B9\",\n  \"\\u2F46\",\n  \"\\u65E0\",\n  \"\\u2F47\",\n  \"\\u65E5\",\n  \"\\u2F48\",\n  \"\\u66F0\",\n  \"\\u2F49\",\n  \"\\u6708\",\n  \"\\u2F4A\",\n  \"\\u6728\",\n  \"\\u2F4B\",\n  \"\\u6B20\",\n  \"\\u2F4C\",\n  \"\\u6B62\",\n  \"\\u2F4D\",\n  \"\\u6B79\",\n  \"\\u2F4E\",\n  \"\\u6BB3\",\n  \"\\u2F4F\",\n  \"\\u6BCB\",\n  \"\\u2F50\",\n  \"\\u6BD4\",\n  \"\\u2F51\",\n  \"\\u6BDB\",\n  \"\\u2F52\",\n  \"\\u6C0F\",\n  \"\\u2F53\",\n  \"\\u6C14\",\n  \"\\u2F54\",\n  \"\\u6C34\",\n  \"\\u2F55\",\n  \"\\u706B\",\n  \"\\u2F56\",\n  \"\\u722A\",\n  \"\\u2F57\",\n  \"\\u7236\",\n  \"\\u2F58\",\n  \"\\u723B\",\n  \"\\u2F59\",\n  \"\\u723F\",\n  \"\\u2F5A\",\n  \"\\u7247\",\n  \"\\u2F5B\",\n  \"\\u7259\",\n  \"\\u2F5C\",\n  \"\\u725B\",\n  \"\\u2F5D\",\n  \"\\u72AC\",\n  \"\\u2F5E\",\n  \"\\u7384\",\n  \"\\u2F5F\",\n  \"\\u7389\",\n  \"\\u2F60\",\n  \"\\u74DC\",\n  \"\\u2F61\",\n  \"\\u74E6\",\n  \"\\u2F62\",\n  \"\\u7518\",\n  \"\\u2F63\",\n  \"\\u751F\",\n  \"\\u2F64\",\n  \"\\u7528\",\n  \"\\u2F65\",\n  \"\\u7530\",\n  \"\\u2F66\",\n  \"\\u758B\",\n  \"\\u2F67\",\n  \"\\u7592\",\n  \"\\u2F68\",\n  \"\\u7676\",\n  \"\\u2F69\",\n  \"\\u767D\",\n  \"\\u2F6A\",\n  \"\\u76AE\",\n  \"\\u2F6B\",\n  \"\\u76BF\",\n  \"\\u2F6C\",\n  \"\\u76EE\",\n  \"\\u2F6D\",\n  \"\\u77DB\",\n  \"\\u2F6E\",\n  \"\\u77E2\",\n  \"\\u2F6F\",\n  \"\\u77F3\",\n  \"\\u2F70\",\n  \"\\u793A\",\n  \"\\u2F71\",\n  \"\\u79B8\",\n  \"\\u2F72\",\n  \"\\u79BE\",\n  \"\\u2F73\",\n  \"\\u7A74\",\n  \"\\u2F74\",\n  \"\\u7ACB\",\n  \"\\u2F75\",\n  \"\\u7AF9\",\n  \"\\u2F76\",\n  \"\\u7C73\",\n  \"\\u2F77\",\n  \"\\u7CF8\",\n  \"\\u2F78\",\n  \"\\u7F36\",\n  \"\\u2F79\",\n  \"\\u7F51\",\n  \"\\u2F7A\",\n  \"\\u7F8A\",\n  \"\\u2F7B\",\n  \"\\u7FBD\",\n  \"\\u2F7C\",\n  \"\\u8001\",\n  \"\\u2F7D\",\n  \"\\u800C\",\n  \"\\u2F7E\",\n  \"\\u8012\",\n  \"\\u2F7F\",\n  \"\\u8033\",\n  \"\\u2F80\",\n  \"\\u807F\",\n  \"\\u2F81\",\n  \"\\u8089\",\n  \"\\u2F82\",\n  \"\\u81E3\",\n  \"\\u2F83\",\n  \"\\u81EA\",\n  \"\\u2F84\",\n  \"\\u81F3\",\n  \"\\u2F85\",\n  \"\\u81FC\",\n  \"\\u2F86\",\n  \"\\u820C\",\n  \"\\u2F87\",\n  \"\\u821B\",\n  \"\\u2F88\",\n  \"\\u821F\",\n  \"\\u2F89\",\n  \"\\u826E\",\n  \"\\u2F8A\",\n  \"\\u8272\",\n  \"\\u2F8B\",\n  \"\\u8278\",\n  \"\\u2F8C\",\n  \"\\u864D\",\n  \"\\u2F8D\",\n  \"\\u866B\",\n  \"\\u2F8E\",\n  \"\\u8840\",\n  \"\\u2F8F\",\n  \"\\u884C\",\n  \"\\u2F90\",\n  \"\\u8863\",\n  \"\\u2F91\",\n  \"\\u897E\",\n  \"\\u2F92\",\n  \"\\u898B\",\n  \"\\u2F93\",\n  \"\\u89D2\",\n  \"\\u2F94\",\n  \"\\u8A00\",\n  \"\\u2F95\",\n  \"\\u8C37\",\n  \"\\u2F96\",\n  \"\\u8C46\",\n  \"\\u2F97\",\n  \"\\u8C55\",\n  \"\\u2F98\",\n  \"\\u8C78\",\n  \"\\u2F99\",\n  \"\\u8C9D\",\n  \"\\u2F9A\",\n  \"\\u8D64\",\n  \"\\u2F9B\",\n  \"\\u8D70\",\n  \"\\u2F9C\",\n  \"\\u8DB3\",\n  \"\\u2F9D\",\n  \"\\u8EAB\",\n  \"\\u2F9E\",\n  \"\\u8ECA\",\n  \"\\u2F9F\",\n  \"\\u8F9B\",\n  \"\\u2FA0\",\n  \"\\u8FB0\",\n  \"\\u2FA1\",\n  \"\\u8FB5\",\n  \"\\u2FA2\",\n  \"\\u9091\",\n  \"\\u2FA3\",\n  \"\\u9149\",\n  \"\\u2FA4\",\n  \"\\u91C6\",\n  \"\\u2FA5\",\n  \"\\u91CC\",\n  \"\\u2FA6\",\n  \"\\u91D1\",\n  \"\\u2FA7\",\n  \"\\u9577\",\n  \"\\u2FA8\",\n  \"\\u9580\",\n  \"\\u2FA9\",\n  \"\\u961C\",\n  \"\\u2FAA\",\n  \"\\u96B6\",\n  \"\\u2FAB\",\n  \"\\u96B9\",\n  \"\\u2FAC\",\n  \"\\u96E8\",\n  \"\\u2FAD\",\n  \"\\u9751\",\n  \"\\u2FAE\",\n  \"\\u975E\",\n  \"\\u2FAF\",\n  \"\\u9762\",\n  \"\\u2FB0\",\n  \"\\u9769\",\n  \"\\u2FB1\",\n  \"\\u97CB\",\n  \"\\u2FB2\",\n  \"\\u97ED\",\n  \"\\u2FB3\",\n  \"\\u97F3\",\n  \"\\u2FB4\",\n  \"\\u9801\",\n  \"\\u2FB5\",\n  \"\\u98A8\",\n  \"\\u2FB6\",\n  \"\\u98DB\",\n  \"\\u2FB7\",\n  \"\\u98DF\",\n  \"\\u2FB8\",\n  \"\\u9996\",\n  \"\\u2FB9\",\n  \"\\u9999\",\n  \"\\u2FBA\",\n  \"\\u99AC\",\n  \"\\u2FBB\",\n  \"\\u9AA8\",\n  \"\\u2FBC\",\n  \"\\u9AD8\",\n  \"\\u2FBD\",\n  \"\\u9ADF\",\n  \"\\u2FBE\",\n  \"\\u9B25\",\n  \"\\u2FBF\",\n  \"\\u9B2F\",\n  \"\\u2FC0\",\n  \"\\u9B32\",\n  \"\\u2FC1\",\n  \"\\u9B3C\",\n  \"\\u2FC2\",\n  \"\\u9B5A\",\n  \"\\u2FC3\",\n  \"\\u9CE5\",\n  \"\\u2FC4\",\n  \"\\u9E75\",\n  \"\\u2FC5\",\n  \"\\u9E7F\",\n  \"\\u2FC6\",\n  \"\\u9EA5\",\n  \"\\u2FC7\",\n  \"\\u9EBB\",\n  \"\\u2FC8\",\n  \"\\u9EC3\",\n  \"\\u2FC9\",\n  \"\\u9ECD\",\n  \"\\u2FCA\",\n  \"\\u9ED1\",\n  \"\\u2FCB\",\n  \"\\u9EF9\",\n  \"\\u2FCC\",\n  \"\\u9EFD\",\n  \"\\u2FCD\",\n  \"\\u9F0E\",\n  \"\\u2FCE\",\n  \"\\u9F13\",\n  \"\\u2FCF\",\n  \"\\u9F20\",\n  \"\\u2FD0\",\n  \"\\u9F3B\",\n  \"\\u2FD1\",\n  \"\\u9F4A\",\n  \"\\u2FD2\",\n  \"\\u9F52\",\n  \"\\u2FD3\",\n  \"\\u9F8D\",\n  \"\\u2FD4\",\n  \"\\u9F9C\",\n  \"\\u2FD5\",\n  \"\\u9FA0\",\n  \"\\u3036\",\n  \"\\u3012\",\n  \"\\u3038\",\n  \"\\u5341\",\n  \"\\u3039\",\n  \"\\u5344\",\n  \"\\u303A\",\n  \"\\u5345\",\n  \"\\u309B\",\n  \"\\u0020\\u3099\",\n  \"\\u309C\",\n  \"\\u0020\\u309A\",\n  \"\\u3131\",\n  \"\\u1100\",\n  \"\\u3132\",\n  \"\\u1101\",\n  \"\\u3133\",\n  \"\\u11AA\",\n  \"\\u3134\",\n  \"\\u1102\",\n  \"\\u3135\",\n  \"\\u11AC\",\n  \"\\u3136\",\n  \"\\u11AD\",\n  \"\\u3137\",\n  \"\\u1103\",\n  \"\\u3138\",\n  \"\\u1104\",\n  \"\\u3139\",\n  \"\\u1105\",\n  \"\\u313A\",\n  \"\\u11B0\",\n  \"\\u313B\",\n  \"\\u11B1\",\n  \"\\u313C\",\n  \"\\u11B2\",\n  \"\\u313D\",\n  \"\\u11B3\",\n  \"\\u313E\",\n  \"\\u11B4\",\n  \"\\u313F\",\n  \"\\u11B5\",\n  \"\\u3140\",\n  \"\\u111A\",\n  \"\\u3141\",\n  \"\\u1106\",\n  \"\\u3142\",\n  \"\\u1107\",\n  \"\\u3143\",\n  \"\\u1108\",\n  \"\\u3144\",\n  \"\\u1121\",\n  \"\\u3145\",\n  \"\\u1109\",\n  \"\\u3146\",\n  \"\\u110A\",\n  \"\\u3147\",\n  \"\\u110B\",\n  \"\\u3148\",\n  \"\\u110C\",\n  \"\\u3149\",\n  \"\\u110D\",\n  \"\\u314A\",\n  \"\\u110E\",\n  \"\\u314B\",\n  \"\\u110F\",\n  \"\\u314C\",\n  \"\\u1110\",\n  \"\\u314D\",\n  \"\\u1111\",\n  \"\\u314E\",\n  \"\\u1112\",\n  \"\\u314F\",\n  \"\\u1161\",\n  \"\\u3150\",\n  \"\\u1162\",\n  \"\\u3151\",\n  \"\\u1163\",\n  \"\\u3152\",\n  \"\\u1164\",\n  \"\\u3153\",\n  \"\\u1165\",\n  \"\\u3154\",\n  \"\\u1166\",\n  \"\\u3155\",\n  \"\\u1167\",\n  \"\\u3156\",\n  \"\\u1168\",\n  \"\\u3157\",\n  \"\\u1169\",\n  \"\\u3158\",\n  \"\\u116A\",\n  \"\\u3159\",\n  \"\\u116B\",\n  \"\\u315A\",\n  \"\\u116C\",\n  \"\\u315B\",\n  \"\\u116D\",\n  \"\\u315C\",\n  \"\\u116E\",\n  \"\\u315D\",\n  \"\\u116F\",\n  \"\\u315E\",\n  \"\\u1170\",\n  \"\\u315F\",\n  \"\\u1171\",\n  \"\\u3160\",\n  \"\\u1172\",\n  \"\\u3161\",\n  \"\\u1173\",\n  \"\\u3162\",\n  \"\\u1174\",\n  \"\\u3163\",\n  \"\\u1175\",\n  \"\\u3164\",\n  \"\\u1160\",\n  \"\\u3165\",\n  \"\\u1114\",\n  \"\\u3166\",\n  \"\\u1115\",\n  \"\\u3167\",\n  \"\\u11C7\",\n  \"\\u3168\",\n  \"\\u11C8\",\n  \"\\u3169\",\n  \"\\u11CC\",\n  \"\\u316A\",\n  \"\\u11CE\",\n  \"\\u316B\",\n  \"\\u11D3\",\n  \"\\u316C\",\n  \"\\u11D7\",\n  \"\\u316D\",\n  \"\\u11D9\",\n  \"\\u316E\",\n  \"\\u111C\",\n  \"\\u316F\",\n  \"\\u11DD\",\n  \"\\u3170\",\n  \"\\u11DF\",\n  \"\\u3171\",\n  \"\\u111D\",\n  \"\\u3172\",\n  \"\\u111E\",\n  \"\\u3173\",\n  \"\\u1120\",\n  \"\\u3174\",\n  \"\\u1122\",\n  \"\\u3175\",\n  \"\\u1123\",\n  \"\\u3176\",\n  \"\\u1127\",\n  \"\\u3177\",\n  \"\\u1129\",\n  \"\\u3178\",\n  \"\\u112B\",\n  \"\\u3179\",\n  \"\\u112C\",\n  \"\\u317A\",\n  \"\\u112D\",\n  \"\\u317B\",\n  \"\\u112E\",\n  \"\\u317C\",\n  \"\\u112F\",\n  \"\\u317D\",\n  \"\\u1132\",\n  \"\\u317E\",\n  \"\\u1136\",\n  \"\\u317F\",\n  \"\\u1140\",\n  \"\\u3180\",\n  \"\\u1147\",\n  \"\\u3181\",\n  \"\\u114C\",\n  \"\\u3182\",\n  \"\\u11F1\",\n  \"\\u3183\",\n  \"\\u11F2\",\n  \"\\u3184\",\n  \"\\u1157\",\n  \"\\u3185\",\n  \"\\u1158\",\n  \"\\u3186\",\n  \"\\u1159\",\n  \"\\u3187\",\n  \"\\u1184\",\n  \"\\u3188\",\n  \"\\u1185\",\n  \"\\u3189\",\n  \"\\u1188\",\n  \"\\u318A\",\n  \"\\u1191\",\n  \"\\u318B\",\n  \"\\u1192\",\n  \"\\u318C\",\n  \"\\u1194\",\n  \"\\u318D\",\n  \"\\u119E\",\n  \"\\u318E\",\n  \"\\u11A1\",\n  \"\\u3200\",\n  \"\\u0028\\u1100\\u0029\",\n  \"\\u3201\",\n  \"\\u0028\\u1102\\u0029\",\n  \"\\u3202\",\n  \"\\u0028\\u1103\\u0029\",\n  \"\\u3203\",\n  \"\\u0028\\u1105\\u0029\",\n  \"\\u3204\",\n  \"\\u0028\\u1106\\u0029\",\n  \"\\u3205\",\n  \"\\u0028\\u1107\\u0029\",\n  \"\\u3206\",\n  \"\\u0028\\u1109\\u0029\",\n  \"\\u3207\",\n  \"\\u0028\\u110B\\u0029\",\n  \"\\u3208\",\n  \"\\u0028\\u110C\\u0029\",\n  \"\\u3209\",\n  \"\\u0028\\u110E\\u0029\",\n  \"\\u320A\",\n  \"\\u0028\\u110F\\u0029\",\n  \"\\u320B\",\n  \"\\u0028\\u1110\\u0029\",\n  \"\\u320C\",\n  \"\\u0028\\u1111\\u0029\",\n  \"\\u320D\",\n  \"\\u0028\\u1112\\u0029\",\n  \"\\u320E\",\n  \"\\u0028\\u1100\\u1161\\u0029\",\n  \"\\u320F\",\n  \"\\u0028\\u1102\\u1161\\u0029\",\n  \"\\u3210\",\n  \"\\u0028\\u1103\\u1161\\u0029\",\n  \"\\u3211\",\n  \"\\u0028\\u1105\\u1161\\u0029\",\n  \"\\u3212\",\n  \"\\u0028\\u1106\\u1161\\u0029\",\n  \"\\u3213\",\n  \"\\u0028\\u1107\\u1161\\u0029\",\n  \"\\u3214\",\n  \"\\u0028\\u1109\\u1161\\u0029\",\n  \"\\u3215\",\n  \"\\u0028\\u110B\\u1161\\u0029\",\n  \"\\u3216\",\n  \"\\u0028\\u110C\\u1161\\u0029\",\n  \"\\u3217\",\n  \"\\u0028\\u110E\\u1161\\u0029\",\n  \"\\u3218\",\n  \"\\u0028\\u110F\\u1161\\u0029\",\n  \"\\u3219\",\n  \"\\u0028\\u1110\\u1161\\u0029\",\n  \"\\u321A\",\n  \"\\u0028\\u1111\\u1161\\u0029\",\n  \"\\u321B\",\n  \"\\u0028\\u1112\\u1161\\u0029\",\n  \"\\u321C\",\n  \"\\u0028\\u110C\\u116E\\u0029\",\n  \"\\u321D\",\n  \"\\u0028\\u110B\\u1169\\u110C\\u1165\\u11AB\\u0029\",\n  \"\\u321E\",\n  \"\\u0028\\u110B\\u1169\\u1112\\u116E\\u0029\",\n  \"\\u3220\",\n  \"\\u0028\\u4E00\\u0029\",\n  \"\\u3221\",\n  \"\\u0028\\u4E8C\\u0029\",\n  \"\\u3222\",\n  \"\\u0028\\u4E09\\u0029\",\n  \"\\u3223\",\n  \"\\u0028\\u56DB\\u0029\",\n  \"\\u3224\",\n  \"\\u0028\\u4E94\\u0029\",\n  \"\\u3225\",\n  \"\\u0028\\u516D\\u0029\",\n  \"\\u3226\",\n  \"\\u0028\\u4E03\\u0029\",\n  \"\\u3227\",\n  \"\\u0028\\u516B\\u0029\",\n  \"\\u3228\",\n  \"\\u0028\\u4E5D\\u0029\",\n  \"\\u3229\",\n  \"\\u0028\\u5341\\u0029\",\n  \"\\u322A\",\n  \"\\u0028\\u6708\\u0029\",\n  \"\\u322B\",\n  \"\\u0028\\u706B\\u0029\",\n  \"\\u322C\",\n  \"\\u0028\\u6C34\\u0029\",\n  \"\\u322D\",\n  \"\\u0028\\u6728\\u0029\",\n  \"\\u322E\",\n  \"\\u0028\\u91D1\\u0029\",\n  \"\\u322F\",\n  \"\\u0028\\u571F\\u0029\",\n  \"\\u3230\",\n  \"\\u0028\\u65E5\\u0029\",\n  \"\\u3231\",\n  \"\\u0028\\u682A\\u0029\",\n  \"\\u3232\",\n  \"\\u0028\\u6709\\u0029\",\n  \"\\u3233\",\n  \"\\u0028\\u793E\\u0029\",\n  \"\\u3234\",\n  \"\\u0028\\u540D\\u0029\",\n  \"\\u3235\",\n  \"\\u0028\\u7279\\u0029\",\n  \"\\u3236\",\n  \"\\u0028\\u8CA1\\u0029\",\n  \"\\u3237\",\n  \"\\u0028\\u795D\\u0029\",\n  \"\\u3238\",\n  \"\\u0028\\u52B4\\u0029\",\n  \"\\u3239\",\n  \"\\u0028\\u4EE3\\u0029\",\n  \"\\u323A\",\n  \"\\u0028\\u547C\\u0029\",\n  \"\\u323B\",\n  \"\\u0028\\u5B66\\u0029\",\n  \"\\u323C\",\n  \"\\u0028\\u76E3\\u0029\",\n  \"\\u323D\",\n  \"\\u0028\\u4F01\\u0029\",\n  \"\\u323E\",\n  \"\\u0028\\u8CC7\\u0029\",\n  \"\\u323F\",\n  \"\\u0028\\u5354\\u0029\",\n  \"\\u3240\",\n  \"\\u0028\\u796D\\u0029\",\n  \"\\u3241\",\n  \"\\u0028\\u4F11\\u0029\",\n  \"\\u3242\",\n  \"\\u0028\\u81EA\\u0029\",\n  \"\\u3243\",\n  \"\\u0028\\u81F3\\u0029\",\n  \"\\u32C0\",\n  \"\\u0031\\u6708\",\n  \"\\u32C1\",\n  \"\\u0032\\u6708\",\n  \"\\u32C2\",\n  \"\\u0033\\u6708\",\n  \"\\u32C3\",\n  \"\\u0034\\u6708\",\n  \"\\u32C4\",\n  \"\\u0035\\u6708\",\n  \"\\u32C5\",\n  \"\\u0036\\u6708\",\n  \"\\u32C6\",\n  \"\\u0037\\u6708\",\n  \"\\u32C7\",\n  \"\\u0038\\u6708\",\n  \"\\u32C8\",\n  \"\\u0039\\u6708\",\n  \"\\u32C9\",\n  \"\\u0031\\u0030\\u6708\",\n  \"\\u32CA\",\n  \"\\u0031\\u0031\\u6708\",\n  \"\\u32CB\",\n  \"\\u0031\\u0032\\u6708\",\n  \"\\u3358\",\n  \"\\u0030\\u70B9\",\n  \"\\u3359\",\n  \"\\u0031\\u70B9\",\n  \"\\u335A\",\n  \"\\u0032\\u70B9\",\n  \"\\u335B\",\n  \"\\u0033\\u70B9\",\n  \"\\u335C\",\n  \"\\u0034\\u70B9\",\n  \"\\u335D\",\n  \"\\u0035\\u70B9\",\n  \"\\u335E\",\n  \"\\u0036\\u70B9\",\n  \"\\u335F\",\n  \"\\u0037\\u70B9\",\n  \"\\u3360\",\n  \"\\u0038\\u70B9\",\n  \"\\u3361\",\n  \"\\u0039\\u70B9\",\n  \"\\u3362\",\n  \"\\u0031\\u0030\\u70B9\",\n  \"\\u3363\",\n  \"\\u0031\\u0031\\u70B9\",\n  \"\\u3364\",\n  \"\\u0031\\u0032\\u70B9\",\n  \"\\u3365\",\n  \"\\u0031\\u0033\\u70B9\",\n  \"\\u3366\",\n  \"\\u0031\\u0034\\u70B9\",\n  \"\\u3367\",\n  \"\\u0031\\u0035\\u70B9\",\n  \"\\u3368\",\n  \"\\u0031\\u0036\\u70B9\",\n  \"\\u3369\",\n  \"\\u0031\\u0037\\u70B9\",\n  \"\\u336A\",\n  \"\\u0031\\u0038\\u70B9\",\n  \"\\u336B\",\n  \"\\u0031\\u0039\\u70B9\",\n  \"\\u336C\",\n  \"\\u0032\\u0030\\u70B9\",\n  \"\\u336D\",\n  \"\\u0032\\u0031\\u70B9\",\n  \"\\u336E\",\n  \"\\u0032\\u0032\\u70B9\",\n  \"\\u336F\",\n  \"\\u0032\\u0033\\u70B9\",\n  \"\\u3370\",\n  \"\\u0032\\u0034\\u70B9\",\n  \"\\u33E0\",\n  \"\\u0031\\u65E5\",\n  \"\\u33E1\",\n  \"\\u0032\\u65E5\",\n  \"\\u33E2\",\n  \"\\u0033\\u65E5\",\n  \"\\u33E3\",\n  \"\\u0034\\u65E5\",\n  \"\\u33E4\",\n  \"\\u0035\\u65E5\",\n  \"\\u33E5\",\n  \"\\u0036\\u65E5\",\n  \"\\u33E6\",\n  \"\\u0037\\u65E5\",\n  \"\\u33E7\",\n  \"\\u0038\\u65E5\",\n  \"\\u33E8\",\n  \"\\u0039\\u65E5\",\n  \"\\u33E9\",\n  \"\\u0031\\u0030\\u65E5\",\n  \"\\u33EA\",\n  \"\\u0031\\u0031\\u65E5\",\n  \"\\u33EB\",\n  \"\\u0031\\u0032\\u65E5\",\n  \"\\u33EC\",\n  \"\\u0031\\u0033\\u65E5\",\n  \"\\u33ED\",\n  \"\\u0031\\u0034\\u65E5\",\n  \"\\u33EE\",\n  \"\\u0031\\u0035\\u65E5\",\n  \"\\u33EF\",\n  \"\\u0031\\u0036\\u65E5\",\n  \"\\u33F0\",\n  \"\\u0031\\u0037\\u65E5\",\n  \"\\u33F1\",\n  \"\\u0031\\u0038\\u65E5\",\n  \"\\u33F2\",\n  \"\\u0031\\u0039\\u65E5\",\n  \"\\u33F3\",\n  \"\\u0032\\u0030\\u65E5\",\n  \"\\u33F4\",\n  \"\\u0032\\u0031\\u65E5\",\n  \"\\u33F5\",\n  \"\\u0032\\u0032\\u65E5\",\n  \"\\u33F6\",\n  \"\\u0032\\u0033\\u65E5\",\n  \"\\u33F7\",\n  \"\\u0032\\u0034\\u65E5\",\n  \"\\u33F8\",\n  \"\\u0032\\u0035\\u65E5\",\n  \"\\u33F9\",\n  \"\\u0032\\u0036\\u65E5\",\n  \"\\u33FA\",\n  \"\\u0032\\u0037\\u65E5\",\n  \"\\u33FB\",\n  \"\\u0032\\u0038\\u65E5\",\n  \"\\u33FC\",\n  \"\\u0032\\u0039\\u65E5\",\n  \"\\u33FD\",\n  \"\\u0033\\u0030\\u65E5\",\n  \"\\u33FE\",\n  \"\\u0033\\u0031\\u65E5\",\n  \"\\uFB00\",\n  \"\\u0066\\u0066\",\n  \"\\uFB01\",\n  \"\\u0066\\u0069\",\n  \"\\uFB02\",\n  \"\\u0066\\u006C\",\n  \"\\uFB03\",\n  \"\\u0066\\u0066\\u0069\",\n  \"\\uFB04\",\n  \"\\u0066\\u0066\\u006C\",\n  \"\\uFB05\",\n  \"\\u017F\\u0074\",\n  \"\\uFB06\",\n  \"\\u0073\\u0074\",\n  \"\\uFB13\",\n  \"\\u0574\\u0576\",\n  \"\\uFB14\",\n  \"\\u0574\\u0565\",\n  \"\\uFB15\",\n  \"\\u0574\\u056B\",\n  \"\\uFB16\",\n  \"\\u057E\\u0576\",\n  \"\\uFB17\",\n  \"\\u0574\\u056D\",\n  \"\\uFB4F\",\n  \"\\u05D0\\u05DC\",\n  \"\\uFB50\",\n  \"\\u0671\",\n  \"\\uFB51\",\n  \"\\u0671\",\n  \"\\uFB52\",\n  \"\\u067B\",\n  \"\\uFB53\",\n  \"\\u067B\",\n  \"\\uFB54\",\n  \"\\u067B\",\n  \"\\uFB55\",\n  \"\\u067B\",\n  \"\\uFB56\",\n  \"\\u067E\",\n  \"\\uFB57\",\n  \"\\u067E\",\n  \"\\uFB58\",\n  \"\\u067E\",\n  \"\\uFB59\",\n  \"\\u067E\",\n  \"\\uFB5A\",\n  \"\\u0680\",\n  \"\\uFB5B\",\n  \"\\u0680\",\n  \"\\uFB5C\",\n  \"\\u0680\",\n  \"\\uFB5D\",\n  \"\\u0680\",\n  \"\\uFB5E\",\n  \"\\u067A\",\n  \"\\uFB5F\",\n  \"\\u067A\",\n  \"\\uFB60\",\n  \"\\u067A\",\n  \"\\uFB61\",\n  \"\\u067A\",\n  \"\\uFB62\",\n  \"\\u067F\",\n  \"\\uFB63\",\n  \"\\u067F\",\n  \"\\uFB64\",\n  \"\\u067F\",\n  \"\\uFB65\",\n  \"\\u067F\",\n  \"\\uFB66\",\n  \"\\u0679\",\n  \"\\uFB67\",\n  \"\\u0679\",\n  \"\\uFB68\",\n  \"\\u0679\",\n  \"\\uFB69\",\n  \"\\u0679\",\n  \"\\uFB6A\",\n  \"\\u06A4\",\n  \"\\uFB6B\",\n  \"\\u06A4\",\n  \"\\uFB6C\",\n  \"\\u06A4\",\n  \"\\uFB6D\",\n  \"\\u06A4\",\n  \"\\uFB6E\",\n  \"\\u06A6\",\n  \"\\uFB6F\",\n  \"\\u06A6\",\n  \"\\uFB70\",\n  \"\\u06A6\",\n  \"\\uFB71\",\n  \"\\u06A6\",\n  \"\\uFB72\",\n  \"\\u0684\",\n  \"\\uFB73\",\n  \"\\u0684\",\n  \"\\uFB74\",\n  \"\\u0684\",\n  \"\\uFB75\",\n  \"\\u0684\",\n  \"\\uFB76\",\n  \"\\u0683\",\n  \"\\uFB77\",\n  \"\\u0683\",\n  \"\\uFB78\",\n  \"\\u0683\",\n  \"\\uFB79\",\n  \"\\u0683\",\n  \"\\uFB7A\",\n  \"\\u0686\",\n  \"\\uFB7B\",\n  \"\\u0686\",\n  \"\\uFB7C\",\n  \"\\u0686\",\n  \"\\uFB7D\",\n  \"\\u0686\",\n  \"\\uFB7E\",\n  \"\\u0687\",\n  \"\\uFB7F\",\n  \"\\u0687\",\n  \"\\uFB80\",\n  \"\\u0687\",\n  \"\\uFB81\",\n  \"\\u0687\",\n  \"\\uFB82\",\n  \"\\u068D\",\n  \"\\uFB83\",\n  \"\\u068D\",\n  \"\\uFB84\",\n  \"\\u068C\",\n  \"\\uFB85\",\n  \"\\u068C\",\n  \"\\uFB86\",\n  \"\\u068E\",\n  \"\\uFB87\",\n  \"\\u068E\",\n  \"\\uFB88\",\n  \"\\u0688\",\n  \"\\uFB89\",\n  \"\\u0688\",\n  \"\\uFB8A\",\n  \"\\u0698\",\n  \"\\uFB8B\",\n  \"\\u0698\",\n  \"\\uFB8C\",\n  \"\\u0691\",\n  \"\\uFB8D\",\n  \"\\u0691\",\n  \"\\uFB8E\",\n  \"\\u06A9\",\n  \"\\uFB8F\",\n  \"\\u06A9\",\n  \"\\uFB90\",\n  \"\\u06A9\",\n  \"\\uFB91\",\n  \"\\u06A9\",\n  \"\\uFB92\",\n  \"\\u06AF\",\n  \"\\uFB93\",\n  \"\\u06AF\",\n  \"\\uFB94\",\n  \"\\u06AF\",\n  \"\\uFB95\",\n  \"\\u06AF\",\n  \"\\uFB96\",\n  \"\\u06B3\",\n  \"\\uFB97\",\n  \"\\u06B3\",\n  \"\\uFB98\",\n  \"\\u06B3\",\n  \"\\uFB99\",\n  \"\\u06B3\",\n  \"\\uFB9A\",\n  \"\\u06B1\",\n  \"\\uFB9B\",\n  \"\\u06B1\",\n  \"\\uFB9C\",\n  \"\\u06B1\",\n  \"\\uFB9D\",\n  \"\\u06B1\",\n  \"\\uFB9E\",\n  \"\\u06BA\",\n  \"\\uFB9F\",\n  \"\\u06BA\",\n  \"\\uFBA0\",\n  \"\\u06BB\",\n  \"\\uFBA1\",\n  \"\\u06BB\",\n  \"\\uFBA2\",\n  \"\\u06BB\",\n  \"\\uFBA3\",\n  \"\\u06BB\",\n  \"\\uFBA4\",\n  \"\\u06C0\",\n  \"\\uFBA5\",\n  \"\\u06C0\",\n  \"\\uFBA6\",\n  \"\\u06C1\",\n  \"\\uFBA7\",\n  \"\\u06C1\",\n  \"\\uFBA8\",\n  \"\\u06C1\",\n  \"\\uFBA9\",\n  \"\\u06C1\",\n  \"\\uFBAA\",\n  \"\\u06BE\",\n  \"\\uFBAB\",\n  \"\\u06BE\",\n  \"\\uFBAC\",\n  \"\\u06BE\",\n  \"\\uFBAD\",\n  \"\\u06BE\",\n  \"\\uFBAE\",\n  \"\\u06D2\",\n  \"\\uFBAF\",\n  \"\\u06D2\",\n  \"\\uFBB0\",\n  \"\\u06D3\",\n  \"\\uFBB1\",\n  \"\\u06D3\",\n  \"\\uFBD3\",\n  \"\\u06AD\",\n  \"\\uFBD4\",\n  \"\\u06AD\",\n  \"\\uFBD5\",\n  \"\\u06AD\",\n  \"\\uFBD6\",\n  \"\\u06AD\",\n  \"\\uFBD7\",\n  \"\\u06C7\",\n  \"\\uFBD8\",\n  \"\\u06C7\",\n  \"\\uFBD9\",\n  \"\\u06C6\",\n  \"\\uFBDA\",\n  \"\\u06C6\",\n  \"\\uFBDB\",\n  \"\\u06C8\",\n  \"\\uFBDC\",\n  \"\\u06C8\",\n  \"\\uFBDD\",\n  \"\\u0677\",\n  \"\\uFBDE\",\n  \"\\u06CB\",\n  \"\\uFBDF\",\n  \"\\u06CB\",\n  \"\\uFBE0\",\n  \"\\u06C5\",\n  \"\\uFBE1\",\n  \"\\u06C5\",\n  \"\\uFBE2\",\n  \"\\u06C9\",\n  \"\\uFBE3\",\n  \"\\u06C9\",\n  \"\\uFBE4\",\n  \"\\u06D0\",\n  \"\\uFBE5\",\n  \"\\u06D0\",\n  \"\\uFBE6\",\n  \"\\u06D0\",\n  \"\\uFBE7\",\n  \"\\u06D0\",\n  \"\\uFBE8\",\n  \"\\u0649\",\n  \"\\uFBE9\",\n  \"\\u0649\",\n  \"\\uFBEA\",\n  \"\\u0626\\u0627\",\n  \"\\uFBEB\",\n  \"\\u0626\\u0627\",\n  \"\\uFBEC\",\n  \"\\u0626\\u06D5\",\n  \"\\uFBED\",\n  \"\\u0626\\u06D5\",\n  \"\\uFBEE\",\n  \"\\u0626\\u0648\",\n  \"\\uFBEF\",\n  \"\\u0626\\u0648\",\n  \"\\uFBF0\",\n  \"\\u0626\\u06C7\",\n  \"\\uFBF1\",\n  \"\\u0626\\u06C7\",\n  \"\\uFBF2\",\n  \"\\u0626\\u06C6\",\n  \"\\uFBF3\",\n  \"\\u0626\\u06C6\",\n  \"\\uFBF4\",\n  \"\\u0626\\u06C8\",\n  \"\\uFBF5\",\n  \"\\u0626\\u06C8\",\n  \"\\uFBF6\",\n  \"\\u0626\\u06D0\",\n  \"\\uFBF7\",\n  \"\\u0626\\u06D0\",\n  \"\\uFBF8\",\n  \"\\u0626\\u06D0\",\n  \"\\uFBF9\",\n  \"\\u0626\\u0649\",\n  \"\\uFBFA\",\n  \"\\u0626\\u0649\",\n  \"\\uFBFB\",\n  \"\\u0626\\u0649\",\n  \"\\uFBFC\",\n  \"\\u06CC\",\n  \"\\uFBFD\",\n  \"\\u06CC\",\n  \"\\uFBFE\",\n  \"\\u06CC\",\n  \"\\uFBFF\",\n  \"\\u06CC\",\n  \"\\uFC00\",\n  \"\\u0626\\u062C\",\n  \"\\uFC01\",\n  \"\\u0626\\u062D\",\n  \"\\uFC02\",\n  \"\\u0626\\u0645\",\n  \"\\uFC03\",\n  \"\\u0626\\u0649\",\n  \"\\uFC04\",\n  \"\\u0626\\u064A\",\n  \"\\uFC05\",\n  \"\\u0628\\u062C\",\n  \"\\uFC06\",\n  \"\\u0628\\u062D\",\n  \"\\uFC07\",\n  \"\\u0628\\u062E\",\n  \"\\uFC08\",\n  \"\\u0628\\u0645\",\n  \"\\uFC09\",\n  \"\\u0628\\u0649\",\n  \"\\uFC0A\",\n  \"\\u0628\\u064A\",\n  \"\\uFC0B\",\n  \"\\u062A\\u062C\",\n  \"\\uFC0C\",\n  \"\\u062A\\u062D\",\n  \"\\uFC0D\",\n  \"\\u062A\\u062E\",\n  \"\\uFC0E\",\n  \"\\u062A\\u0645\",\n  \"\\uFC0F\",\n  \"\\u062A\\u0649\",\n  \"\\uFC10\",\n  \"\\u062A\\u064A\",\n  \"\\uFC11\",\n  \"\\u062B\\u062C\",\n  \"\\uFC12\",\n  \"\\u062B\\u0645\",\n  \"\\uFC13\",\n  \"\\u062B\\u0649\",\n  \"\\uFC14\",\n  \"\\u062B\\u064A\",\n  \"\\uFC15\",\n  \"\\u062C\\u062D\",\n  \"\\uFC16\",\n  \"\\u062C\\u0645\",\n  \"\\uFC17\",\n  \"\\u062D\\u062C\",\n  \"\\uFC18\",\n  \"\\u062D\\u0645\",\n  \"\\uFC19\",\n  \"\\u062E\\u062C\",\n  \"\\uFC1A\",\n  \"\\u062E\\u062D\",\n  \"\\uFC1B\",\n  \"\\u062E\\u0645\",\n  \"\\uFC1C\",\n  \"\\u0633\\u062C\",\n  \"\\uFC1D\",\n  \"\\u0633\\u062D\",\n  \"\\uFC1E\",\n  \"\\u0633\\u062E\",\n  \"\\uFC1F\",\n  \"\\u0633\\u0645\",\n  \"\\uFC20\",\n  \"\\u0635\\u062D\",\n  \"\\uFC21\",\n  \"\\u0635\\u0645\",\n  \"\\uFC22\",\n  \"\\u0636\\u062C\",\n  \"\\uFC23\",\n  \"\\u0636\\u062D\",\n  \"\\uFC24\",\n  \"\\u0636\\u062E\",\n  \"\\uFC25\",\n  \"\\u0636\\u0645\",\n  \"\\uFC26\",\n  \"\\u0637\\u062D\",\n  \"\\uFC27\",\n  \"\\u0637\\u0645\",\n  \"\\uFC28\",\n  \"\\u0638\\u0645\",\n  \"\\uFC29\",\n  \"\\u0639\\u062C\",\n  \"\\uFC2A\",\n  \"\\u0639\\u0645\",\n  \"\\uFC2B\",\n  \"\\u063A\\u062C\",\n  \"\\uFC2C\",\n  \"\\u063A\\u0645\",\n  \"\\uFC2D\",\n  \"\\u0641\\u062C\",\n  \"\\uFC2E\",\n  \"\\u0641\\u062D\",\n  \"\\uFC2F\",\n  \"\\u0641\\u062E\",\n  \"\\uFC30\",\n  \"\\u0641\\u0645\",\n  \"\\uFC31\",\n  \"\\u0641\\u0649\",\n  \"\\uFC32\",\n  \"\\u0641\\u064A\",\n  \"\\uFC33\",\n  \"\\u0642\\u062D\",\n  \"\\uFC34\",\n  \"\\u0642\\u0645\",\n  \"\\uFC35\",\n  \"\\u0642\\u0649\",\n  \"\\uFC36\",\n  \"\\u0642\\u064A\",\n  \"\\uFC37\",\n  \"\\u0643\\u0627\",\n  \"\\uFC38\",\n  \"\\u0643\\u062C\",\n  \"\\uFC39\",\n  \"\\u0643\\u062D\",\n  \"\\uFC3A\",\n  \"\\u0643\\u062E\",\n  \"\\uFC3B\",\n  \"\\u0643\\u0644\",\n  \"\\uFC3C\",\n  \"\\u0643\\u0645\",\n  \"\\uFC3D\",\n  \"\\u0643\\u0649\",\n  \"\\uFC3E\",\n  \"\\u0643\\u064A\",\n  \"\\uFC3F\",\n  \"\\u0644\\u062C\",\n  \"\\uFC40\",\n  \"\\u0644\\u062D\",\n  \"\\uFC41\",\n  \"\\u0644\\u062E\",\n  \"\\uFC42\",\n  \"\\u0644\\u0645\",\n  \"\\uFC43\",\n  \"\\u0644\\u0649\",\n  \"\\uFC44\",\n  \"\\u0644\\u064A\",\n  \"\\uFC45\",\n  \"\\u0645\\u062C\",\n  \"\\uFC46\",\n  \"\\u0645\\u062D\",\n  \"\\uFC47\",\n  \"\\u0645\\u062E\",\n  \"\\uFC48\",\n  \"\\u0645\\u0645\",\n  \"\\uFC49\",\n  \"\\u0645\\u0649\",\n  \"\\uFC4A\",\n  \"\\u0645\\u064A\",\n  \"\\uFC4B\",\n  \"\\u0646\\u062C\",\n  \"\\uFC4C\",\n  \"\\u0646\\u062D\",\n  \"\\uFC4D\",\n  \"\\u0646\\u062E\",\n  \"\\uFC4E\",\n  \"\\u0646\\u0645\",\n  \"\\uFC4F\",\n  \"\\u0646\\u0649\",\n  \"\\uFC50\",\n  \"\\u0646\\u064A\",\n  \"\\uFC51\",\n  \"\\u0647\\u062C\",\n  \"\\uFC52\",\n  \"\\u0647\\u0645\",\n  \"\\uFC53\",\n  \"\\u0647\\u0649\",\n  \"\\uFC54\",\n  \"\\u0647\\u064A\",\n  \"\\uFC55\",\n  \"\\u064A\\u062C\",\n  \"\\uFC56\",\n  \"\\u064A\\u062D\",\n  \"\\uFC57\",\n  \"\\u064A\\u062E\",\n  \"\\uFC58\",\n  \"\\u064A\\u0645\",\n  \"\\uFC59\",\n  \"\\u064A\\u0649\",\n  \"\\uFC5A\",\n  \"\\u064A\\u064A\",\n  \"\\uFC5B\",\n  \"\\u0630\\u0670\",\n  \"\\uFC5C\",\n  \"\\u0631\\u0670\",\n  \"\\uFC5D\",\n  \"\\u0649\\u0670\",\n  \"\\uFC5E\",\n  \"\\u0020\\u064C\\u0651\",\n  \"\\uFC5F\",\n  \"\\u0020\\u064D\\u0651\",\n  \"\\uFC60\",\n  \"\\u0020\\u064E\\u0651\",\n  \"\\uFC61\",\n  \"\\u0020\\u064F\\u0651\",\n  \"\\uFC62\",\n  \"\\u0020\\u0650\\u0651\",\n  \"\\uFC63\",\n  \"\\u0020\\u0651\\u0670\",\n  \"\\uFC64\",\n  \"\\u0626\\u0631\",\n  \"\\uFC65\",\n  \"\\u0626\\u0632\",\n  \"\\uFC66\",\n  \"\\u0626\\u0645\",\n  \"\\uFC67\",\n  \"\\u0626\\u0646\",\n  \"\\uFC68\",\n  \"\\u0626\\u0649\",\n  \"\\uFC69\",\n  \"\\u0626\\u064A\",\n  \"\\uFC6A\",\n  \"\\u0628\\u0631\",\n  \"\\uFC6B\",\n  \"\\u0628\\u0632\",\n  \"\\uFC6C\",\n  \"\\u0628\\u0645\",\n  \"\\uFC6D\",\n  \"\\u0628\\u0646\",\n  \"\\uFC6E\",\n  \"\\u0628\\u0649\",\n  \"\\uFC6F\",\n  \"\\u0628\\u064A\",\n  \"\\uFC70\",\n  \"\\u062A\\u0631\",\n  \"\\uFC71\",\n  \"\\u062A\\u0632\",\n  \"\\uFC72\",\n  \"\\u062A\\u0645\",\n  \"\\uFC73\",\n  \"\\u062A\\u0646\",\n  \"\\uFC74\",\n  \"\\u062A\\u0649\",\n  \"\\uFC75\",\n  \"\\u062A\\u064A\",\n  \"\\uFC76\",\n  \"\\u062B\\u0631\",\n  \"\\uFC77\",\n  \"\\u062B\\u0632\",\n  \"\\uFC78\",\n  \"\\u062B\\u0645\",\n  \"\\uFC79\",\n  \"\\u062B\\u0646\",\n  \"\\uFC7A\",\n  \"\\u062B\\u0649\",\n  \"\\uFC7B\",\n  \"\\u062B\\u064A\",\n  \"\\uFC7C\",\n  \"\\u0641\\u0649\",\n  \"\\uFC7D\",\n  \"\\u0641\\u064A\",\n  \"\\uFC7E\",\n  \"\\u0642\\u0649\",\n  \"\\uFC7F\",\n  \"\\u0642\\u064A\",\n  \"\\uFC80\",\n  \"\\u0643\\u0627\",\n  \"\\uFC81\",\n  \"\\u0643\\u0644\",\n  \"\\uFC82\",\n  \"\\u0643\\u0645\",\n  \"\\uFC83\",\n  \"\\u0643\\u0649\",\n  \"\\uFC84\",\n  \"\\u0643\\u064A\",\n  \"\\uFC85\",\n  \"\\u0644\\u0645\",\n  \"\\uFC86\",\n  \"\\u0644\\u0649\",\n  \"\\uFC87\",\n  \"\\u0644\\u064A\",\n  \"\\uFC88\",\n  \"\\u0645\\u0627\",\n  \"\\uFC89\",\n  \"\\u0645\\u0645\",\n  \"\\uFC8A\",\n  \"\\u0646\\u0631\",\n  \"\\uFC8B\",\n  \"\\u0646\\u0632\",\n  \"\\uFC8C\",\n  \"\\u0646\\u0645\",\n  \"\\uFC8D\",\n  \"\\u0646\\u0646\",\n  \"\\uFC8E\",\n  \"\\u0646\\u0649\",\n  \"\\uFC8F\",\n  \"\\u0646\\u064A\",\n  \"\\uFC90\",\n  \"\\u0649\\u0670\",\n  \"\\uFC91\",\n  \"\\u064A\\u0631\",\n  \"\\uFC92\",\n  \"\\u064A\\u0632\",\n  \"\\uFC93\",\n  \"\\u064A\\u0645\",\n  \"\\uFC94\",\n  \"\\u064A\\u0646\",\n  \"\\uFC95\",\n  \"\\u064A\\u0649\",\n  \"\\uFC96\",\n  \"\\u064A\\u064A\",\n  \"\\uFC97\",\n  \"\\u0626\\u062C\",\n  \"\\uFC98\",\n  \"\\u0626\\u062D\",\n  \"\\uFC99\",\n  \"\\u0626\\u062E\",\n  \"\\uFC9A\",\n  \"\\u0626\\u0645\",\n  \"\\uFC9B\",\n  \"\\u0626\\u0647\",\n  \"\\uFC9C\",\n  \"\\u0628\\u062C\",\n  \"\\uFC9D\",\n  \"\\u0628\\u062D\",\n  \"\\uFC9E\",\n  \"\\u0628\\u062E\",\n  \"\\uFC9F\",\n  \"\\u0628\\u0645\",\n  \"\\uFCA0\",\n  \"\\u0628\\u0647\",\n  \"\\uFCA1\",\n  \"\\u062A\\u062C\",\n  \"\\uFCA2\",\n  \"\\u062A\\u062D\",\n  \"\\uFCA3\",\n  \"\\u062A\\u062E\",\n  \"\\uFCA4\",\n  \"\\u062A\\u0645\",\n  \"\\uFCA5\",\n  \"\\u062A\\u0647\",\n  \"\\uFCA6\",\n  \"\\u062B\\u0645\",\n  \"\\uFCA7\",\n  \"\\u062C\\u062D\",\n  \"\\uFCA8\",\n  \"\\u062C\\u0645\",\n  \"\\uFCA9\",\n  \"\\u062D\\u062C\",\n  \"\\uFCAA\",\n  \"\\u062D\\u0645\",\n  \"\\uFCAB\",\n  \"\\u062E\\u062C\",\n  \"\\uFCAC\",\n  \"\\u062E\\u0645\",\n  \"\\uFCAD\",\n  \"\\u0633\\u062C\",\n  \"\\uFCAE\",\n  \"\\u0633\\u062D\",\n  \"\\uFCAF\",\n  \"\\u0633\\u062E\",\n  \"\\uFCB0\",\n  \"\\u0633\\u0645\",\n  \"\\uFCB1\",\n  \"\\u0635\\u062D\",\n  \"\\uFCB2\",\n  \"\\u0635\\u062E\",\n  \"\\uFCB3\",\n  \"\\u0635\\u0645\",\n  \"\\uFCB4\",\n  \"\\u0636\\u062C\",\n  \"\\uFCB5\",\n  \"\\u0636\\u062D\",\n  \"\\uFCB6\",\n  \"\\u0636\\u062E\",\n  \"\\uFCB7\",\n  \"\\u0636\\u0645\",\n  \"\\uFCB8\",\n  \"\\u0637\\u062D\",\n  \"\\uFCB9\",\n  \"\\u0638\\u0645\",\n  \"\\uFCBA\",\n  \"\\u0639\\u062C\",\n  \"\\uFCBB\",\n  \"\\u0639\\u0645\",\n  \"\\uFCBC\",\n  \"\\u063A\\u062C\",\n  \"\\uFCBD\",\n  \"\\u063A\\u0645\",\n  \"\\uFCBE\",\n  \"\\u0641\\u062C\",\n  \"\\uFCBF\",\n  \"\\u0641\\u062D\",\n  \"\\uFCC0\",\n  \"\\u0641\\u062E\",\n  \"\\uFCC1\",\n  \"\\u0641\\u0645\",\n  \"\\uFCC2\",\n  \"\\u0642\\u062D\",\n  \"\\uFCC3\",\n  \"\\u0642\\u0645\",\n  \"\\uFCC4\",\n  \"\\u0643\\u062C\",\n  \"\\uFCC5\",\n  \"\\u0643\\u062D\",\n  \"\\uFCC6\",\n  \"\\u0643\\u062E\",\n  \"\\uFCC7\",\n  \"\\u0643\\u0644\",\n  \"\\uFCC8\",\n  \"\\u0643\\u0645\",\n  \"\\uFCC9\",\n  \"\\u0644\\u062C\",\n  \"\\uFCCA\",\n  \"\\u0644\\u062D\",\n  \"\\uFCCB\",\n  \"\\u0644\\u062E\",\n  \"\\uFCCC\",\n  \"\\u0644\\u0645\",\n  \"\\uFCCD\",\n  \"\\u0644\\u0647\",\n  \"\\uFCCE\",\n  \"\\u0645\\u062C\",\n  \"\\uFCCF\",\n  \"\\u0645\\u062D\",\n  \"\\uFCD0\",\n  \"\\u0645\\u062E\",\n  \"\\uFCD1\",\n  \"\\u0645\\u0645\",\n  \"\\uFCD2\",\n  \"\\u0646\\u062C\",\n  \"\\uFCD3\",\n  \"\\u0646\\u062D\",\n  \"\\uFCD4\",\n  \"\\u0646\\u062E\",\n  \"\\uFCD5\",\n  \"\\u0646\\u0645\",\n  \"\\uFCD6\",\n  \"\\u0646\\u0647\",\n  \"\\uFCD7\",\n  \"\\u0647\\u062C\",\n  \"\\uFCD8\",\n  \"\\u0647\\u0645\",\n  \"\\uFCD9\",\n  \"\\u0647\\u0670\",\n  \"\\uFCDA\",\n  \"\\u064A\\u062C\",\n  \"\\uFCDB\",\n  \"\\u064A\\u062D\",\n  \"\\uFCDC\",\n  \"\\u064A\\u062E\",\n  \"\\uFCDD\",\n  \"\\u064A\\u0645\",\n  \"\\uFCDE\",\n  \"\\u064A\\u0647\",\n  \"\\uFCDF\",\n  \"\\u0626\\u0645\",\n  \"\\uFCE0\",\n  \"\\u0626\\u0647\",\n  \"\\uFCE1\",\n  \"\\u0628\\u0645\",\n  \"\\uFCE2\",\n  \"\\u0628\\u0647\",\n  \"\\uFCE3\",\n  \"\\u062A\\u0645\",\n  \"\\uFCE4\",\n  \"\\u062A\\u0647\",\n  \"\\uFCE5\",\n  \"\\u062B\\u0645\",\n  \"\\uFCE6\",\n  \"\\u062B\\u0647\",\n  \"\\uFCE7\",\n  \"\\u0633\\u0645\",\n  \"\\uFCE8\",\n  \"\\u0633\\u0647\",\n  \"\\uFCE9\",\n  \"\\u0634\\u0645\",\n  \"\\uFCEA\",\n  \"\\u0634\\u0647\",\n  \"\\uFCEB\",\n  \"\\u0643\\u0644\",\n  \"\\uFCEC\",\n  \"\\u0643\\u0645\",\n  \"\\uFCED\",\n  \"\\u0644\\u0645\",\n  \"\\uFCEE\",\n  \"\\u0646\\u0645\",\n  \"\\uFCEF\",\n  \"\\u0646\\u0647\",\n  \"\\uFCF0\",\n  \"\\u064A\\u0645\",\n  \"\\uFCF1\",\n  \"\\u064A\\u0647\",\n  \"\\uFCF2\",\n  \"\\u0640\\u064E\\u0651\",\n  \"\\uFCF3\",\n  \"\\u0640\\u064F\\u0651\",\n  \"\\uFCF4\",\n  \"\\u0640\\u0650\\u0651\",\n  \"\\uFCF5\",\n  \"\\u0637\\u0649\",\n  \"\\uFCF6\",\n  \"\\u0637\\u064A\",\n  \"\\uFCF7\",\n  \"\\u0639\\u0649\",\n  \"\\uFCF8\",\n  \"\\u0639\\u064A\",\n  \"\\uFCF9\",\n  \"\\u063A\\u0649\",\n  \"\\uFCFA\",\n  \"\\u063A\\u064A\",\n  \"\\uFCFB\",\n  \"\\u0633\\u0649\",\n  \"\\uFCFC\",\n  \"\\u0633\\u064A\",\n  \"\\uFCFD\",\n  \"\\u0634\\u0649\",\n  \"\\uFCFE\",\n  \"\\u0634\\u064A\",\n  \"\\uFCFF\",\n  \"\\u062D\\u0649\",\n  \"\\uFD00\",\n  \"\\u062D\\u064A\",\n  \"\\uFD01\",\n  \"\\u062C\\u0649\",\n  \"\\uFD02\",\n  \"\\u062C\\u064A\",\n  \"\\uFD03\",\n  \"\\u062E\\u0649\",\n  \"\\uFD04\",\n  \"\\u062E\\u064A\",\n  \"\\uFD05\",\n  \"\\u0635\\u0649\",\n  \"\\uFD06\",\n  \"\\u0635\\u064A\",\n  \"\\uFD07\",\n  \"\\u0636\\u0649\",\n  \"\\uFD08\",\n  \"\\u0636\\u064A\",\n  \"\\uFD09\",\n  \"\\u0634\\u062C\",\n  \"\\uFD0A\",\n  \"\\u0634\\u062D\",\n  \"\\uFD0B\",\n  \"\\u0634\\u062E\",\n  \"\\uFD0C\",\n  \"\\u0634\\u0645\",\n  \"\\uFD0D\",\n  \"\\u0634\\u0631\",\n  \"\\uFD0E\",\n  \"\\u0633\\u0631\",\n  \"\\uFD0F\",\n  \"\\u0635\\u0631\",\n  \"\\uFD10\",\n  \"\\u0636\\u0631\",\n  \"\\uFD11\",\n  \"\\u0637\\u0649\",\n  \"\\uFD12\",\n  \"\\u0637\\u064A\",\n  \"\\uFD13\",\n  \"\\u0639\\u0649\",\n  \"\\uFD14\",\n  \"\\u0639\\u064A\",\n  \"\\uFD15\",\n  \"\\u063A\\u0649\",\n  \"\\uFD16\",\n  \"\\u063A\\u064A\",\n  \"\\uFD17\",\n  \"\\u0633\\u0649\",\n  \"\\uFD18\",\n  \"\\u0633\\u064A\",\n  \"\\uFD19\",\n  \"\\u0634\\u0649\",\n  \"\\uFD1A\",\n  \"\\u0634\\u064A\",\n  \"\\uFD1B\",\n  \"\\u062D\\u0649\",\n  \"\\uFD1C\",\n  \"\\u062D\\u064A\",\n  \"\\uFD1D\",\n  \"\\u062C\\u0649\",\n  \"\\uFD1E\",\n  \"\\u062C\\u064A\",\n  \"\\uFD1F\",\n  \"\\u062E\\u0649\",\n  \"\\uFD20\",\n  \"\\u062E\\u064A\",\n  \"\\uFD21\",\n  \"\\u0635\\u0649\",\n  \"\\uFD22\",\n  \"\\u0635\\u064A\",\n  \"\\uFD23\",\n  \"\\u0636\\u0649\",\n  \"\\uFD24\",\n  \"\\u0636\\u064A\",\n  \"\\uFD25\",\n  \"\\u0634\\u062C\",\n  \"\\uFD26\",\n  \"\\u0634\\u062D\",\n  \"\\uFD27\",\n  \"\\u0634\\u062E\",\n  \"\\uFD28\",\n  \"\\u0634\\u0645\",\n  \"\\uFD29\",\n  \"\\u0634\\u0631\",\n  \"\\uFD2A\",\n  \"\\u0633\\u0631\",\n  \"\\uFD2B\",\n  \"\\u0635\\u0631\",\n  \"\\uFD2C\",\n  \"\\u0636\\u0631\",\n  \"\\uFD2D\",\n  \"\\u0634\\u062C\",\n  \"\\uFD2E\",\n  \"\\u0634\\u062D\",\n  \"\\uFD2F\",\n  \"\\u0634\\u062E\",\n  \"\\uFD30\",\n  \"\\u0634\\u0645\",\n  \"\\uFD31\",\n  \"\\u0633\\u0647\",\n  \"\\uFD32\",\n  \"\\u0634\\u0647\",\n  \"\\uFD33\",\n  \"\\u0637\\u0645\",\n  \"\\uFD34\",\n  \"\\u0633\\u062C\",\n  \"\\uFD35\",\n  \"\\u0633\\u062D\",\n  \"\\uFD36\",\n  \"\\u0633\\u062E\",\n  \"\\uFD37\",\n  \"\\u0634\\u062C\",\n  \"\\uFD38\",\n  \"\\u0634\\u062D\",\n  \"\\uFD39\",\n  \"\\u0634\\u062E\",\n  \"\\uFD3A\",\n  \"\\u0637\\u0645\",\n  \"\\uFD3B\",\n  \"\\u0638\\u0645\",\n  \"\\uFD3C\",\n  \"\\u0627\\u064B\",\n  \"\\uFD3D\",\n  \"\\u0627\\u064B\",\n  \"\\uFD50\",\n  \"\\u062A\\u062C\\u0645\",\n  \"\\uFD51\",\n  \"\\u062A\\u062D\\u062C\",\n  \"\\uFD52\",\n  \"\\u062A\\u062D\\u062C\",\n  \"\\uFD53\",\n  \"\\u062A\\u062D\\u0645\",\n  \"\\uFD54\",\n  \"\\u062A\\u062E\\u0645\",\n  \"\\uFD55\",\n  \"\\u062A\\u0645\\u062C\",\n  \"\\uFD56\",\n  \"\\u062A\\u0645\\u062D\",\n  \"\\uFD57\",\n  \"\\u062A\\u0645\\u062E\",\n  \"\\uFD58\",\n  \"\\u062C\\u0645\\u062D\",\n  \"\\uFD59\",\n  \"\\u062C\\u0645\\u062D\",\n  \"\\uFD5A\",\n  \"\\u062D\\u0645\\u064A\",\n  \"\\uFD5B\",\n  \"\\u062D\\u0645\\u0649\",\n  \"\\uFD5C\",\n  \"\\u0633\\u062D\\u062C\",\n  \"\\uFD5D\",\n  \"\\u0633\\u062C\\u062D\",\n  \"\\uFD5E\",\n  \"\\u0633\\u062C\\u0649\",\n  \"\\uFD5F\",\n  \"\\u0633\\u0645\\u062D\",\n  \"\\uFD60\",\n  \"\\u0633\\u0645\\u062D\",\n  \"\\uFD61\",\n  \"\\u0633\\u0645\\u062C\",\n  \"\\uFD62\",\n  \"\\u0633\\u0645\\u0645\",\n  \"\\uFD63\",\n  \"\\u0633\\u0645\\u0645\",\n  \"\\uFD64\",\n  \"\\u0635\\u062D\\u062D\",\n  \"\\uFD65\",\n  \"\\u0635\\u062D\\u062D\",\n  \"\\uFD66\",\n  \"\\u0635\\u0645\\u0645\",\n  \"\\uFD67\",\n  \"\\u0634\\u062D\\u0645\",\n  \"\\uFD68\",\n  \"\\u0634\\u062D\\u0645\",\n  \"\\uFD69\",\n  \"\\u0634\\u062C\\u064A\",\n  \"\\uFD6A\",\n  \"\\u0634\\u0645\\u062E\",\n  \"\\uFD6B\",\n  \"\\u0634\\u0645\\u062E\",\n  \"\\uFD6C\",\n  \"\\u0634\\u0645\\u0645\",\n  \"\\uFD6D\",\n  \"\\u0634\\u0645\\u0645\",\n  \"\\uFD6E\",\n  \"\\u0636\\u062D\\u0649\",\n  \"\\uFD6F\",\n  \"\\u0636\\u062E\\u0645\",\n  \"\\uFD70\",\n  \"\\u0636\\u062E\\u0645\",\n  \"\\uFD71\",\n  \"\\u0637\\u0645\\u062D\",\n  \"\\uFD72\",\n  \"\\u0637\\u0645\\u062D\",\n  \"\\uFD73\",\n  \"\\u0637\\u0645\\u0645\",\n  \"\\uFD74\",\n  \"\\u0637\\u0645\\u064A\",\n  \"\\uFD75\",\n  \"\\u0639\\u062C\\u0645\",\n  \"\\uFD76\",\n  \"\\u0639\\u0645\\u0645\",\n  \"\\uFD77\",\n  \"\\u0639\\u0645\\u0645\",\n  \"\\uFD78\",\n  \"\\u0639\\u0645\\u0649\",\n  \"\\uFD79\",\n  \"\\u063A\\u0645\\u0645\",\n  \"\\uFD7A\",\n  \"\\u063A\\u0645\\u064A\",\n  \"\\uFD7B\",\n  \"\\u063A\\u0645\\u0649\",\n  \"\\uFD7C\",\n  \"\\u0641\\u062E\\u0645\",\n  \"\\uFD7D\",\n  \"\\u0641\\u062E\\u0645\",\n  \"\\uFD7E\",\n  \"\\u0642\\u0645\\u062D\",\n  \"\\uFD7F\",\n  \"\\u0642\\u0645\\u0645\",\n  \"\\uFD80\",\n  \"\\u0644\\u062D\\u0645\",\n  \"\\uFD81\",\n  \"\\u0644\\u062D\\u064A\",\n  \"\\uFD82\",\n  \"\\u0644\\u062D\\u0649\",\n  \"\\uFD83\",\n  \"\\u0644\\u062C\\u062C\",\n  \"\\uFD84\",\n  \"\\u0644\\u062C\\u062C\",\n  \"\\uFD85\",\n  \"\\u0644\\u062E\\u0645\",\n  \"\\uFD86\",\n  \"\\u0644\\u062E\\u0645\",\n  \"\\uFD87\",\n  \"\\u0644\\u0645\\u062D\",\n  \"\\uFD88\",\n  \"\\u0644\\u0645\\u062D\",\n  \"\\uFD89\",\n  \"\\u0645\\u062D\\u062C\",\n  \"\\uFD8A\",\n  \"\\u0645\\u062D\\u0645\",\n  \"\\uFD8B\",\n  \"\\u0645\\u062D\\u064A\",\n  \"\\uFD8C\",\n  \"\\u0645\\u062C\\u062D\",\n  \"\\uFD8D\",\n  \"\\u0645\\u062C\\u0645\",\n  \"\\uFD8E\",\n  \"\\u0645\\u062E\\u062C\",\n  \"\\uFD8F\",\n  \"\\u0645\\u062E\\u0645\",\n  \"\\uFD92\",\n  \"\\u0645\\u062C\\u062E\",\n  \"\\uFD93\",\n  \"\\u0647\\u0645\\u062C\",\n  \"\\uFD94\",\n  \"\\u0647\\u0645\\u0645\",\n  \"\\uFD95\",\n  \"\\u0646\\u062D\\u0645\",\n  \"\\uFD96\",\n  \"\\u0646\\u062D\\u0649\",\n  \"\\uFD97\",\n  \"\\u0646\\u062C\\u0645\",\n  \"\\uFD98\",\n  \"\\u0646\\u062C\\u0645\",\n  \"\\uFD99\",\n  \"\\u0646\\u062C\\u0649\",\n  \"\\uFD9A\",\n  \"\\u0646\\u0645\\u064A\",\n  \"\\uFD9B\",\n  \"\\u0646\\u0645\\u0649\",\n  \"\\uFD9C\",\n  \"\\u064A\\u0645\\u0645\",\n  \"\\uFD9D\",\n  \"\\u064A\\u0645\\u0645\",\n  \"\\uFD9E\",\n  \"\\u0628\\u062E\\u064A\",\n  \"\\uFD9F\",\n  \"\\u062A\\u062C\\u064A\",\n  \"\\uFDA0\",\n  \"\\u062A\\u062C\\u0649\",\n  \"\\uFDA1\",\n  \"\\u062A\\u062E\\u064A\",\n  \"\\uFDA2\",\n  \"\\u062A\\u062E\\u0649\",\n  \"\\uFDA3\",\n  \"\\u062A\\u0645\\u064A\",\n  \"\\uFDA4\",\n  \"\\u062A\\u0645\\u0649\",\n  \"\\uFDA5\",\n  \"\\u062C\\u0645\\u064A\",\n  \"\\uFDA6\",\n  \"\\u062C\\u062D\\u0649\",\n  \"\\uFDA7\",\n  \"\\u062C\\u0645\\u0649\",\n  \"\\uFDA8\",\n  \"\\u0633\\u062E\\u0649\",\n  \"\\uFDA9\",\n  \"\\u0635\\u062D\\u064A\",\n  \"\\uFDAA\",\n  \"\\u0634\\u062D\\u064A\",\n  \"\\uFDAB\",\n  \"\\u0636\\u062D\\u064A\",\n  \"\\uFDAC\",\n  \"\\u0644\\u062C\\u064A\",\n  \"\\uFDAD\",\n  \"\\u0644\\u0645\\u064A\",\n  \"\\uFDAE\",\n  \"\\u064A\\u062D\\u064A\",\n  \"\\uFDAF\",\n  \"\\u064A\\u062C\\u064A\",\n  \"\\uFDB0\",\n  \"\\u064A\\u0645\\u064A\",\n  \"\\uFDB1\",\n  \"\\u0645\\u0645\\u064A\",\n  \"\\uFDB2\",\n  \"\\u0642\\u0645\\u064A\",\n  \"\\uFDB3\",\n  \"\\u0646\\u062D\\u064A\",\n  \"\\uFDB4\",\n  \"\\u0642\\u0645\\u062D\",\n  \"\\uFDB5\",\n  \"\\u0644\\u062D\\u0645\",\n  \"\\uFDB6\",\n  \"\\u0639\\u0645\\u064A\",\n  \"\\uFDB7\",\n  \"\\u0643\\u0645\\u064A\",\n  \"\\uFDB8\",\n  \"\\u0646\\u062C\\u062D\",\n  \"\\uFDB9\",\n  \"\\u0645\\u062E\\u064A\",\n  \"\\uFDBA\",\n  \"\\u0644\\u062C\\u0645\",\n  \"\\uFDBB\",\n  \"\\u0643\\u0645\\u0645\",\n  \"\\uFDBC\",\n  \"\\u0644\\u062C\\u0645\",\n  \"\\uFDBD\",\n  \"\\u0646\\u062C\\u062D\",\n  \"\\uFDBE\",\n  \"\\u062C\\u062D\\u064A\",\n  \"\\uFDBF\",\n  \"\\u062D\\u062C\\u064A\",\n  \"\\uFDC0\",\n  \"\\u0645\\u062C\\u064A\",\n  \"\\uFDC1\",\n  \"\\u0641\\u0645\\u064A\",\n  \"\\uFDC2\",\n  \"\\u0628\\u062D\\u064A\",\n  \"\\uFDC3\",\n  \"\\u0643\\u0645\\u0645\",\n  \"\\uFDC4\",\n  \"\\u0639\\u062C\\u0645\",\n  \"\\uFDC5\",\n  \"\\u0635\\u0645\\u0645\",\n  \"\\uFDC6\",\n  \"\\u0633\\u062E\\u064A\",\n  \"\\uFDC7\",\n  \"\\u0646\\u062C\\u064A\",\n  \"\\uFE49\",\n  \"\\u203E\",\n  \"\\uFE4A\",\n  \"\\u203E\",\n  \"\\uFE4B\",\n  \"\\u203E\",\n  \"\\uFE4C\",\n  \"\\u203E\",\n  \"\\uFE4D\",\n  \"\\u005F\",\n  \"\\uFE4E\",\n  \"\\u005F\",\n  \"\\uFE4F\",\n  \"\\u005F\",\n  \"\\uFE80\",\n  \"\\u0621\",\n  \"\\uFE81\",\n  \"\\u0622\",\n  \"\\uFE82\",\n  \"\\u0622\",\n  \"\\uFE83\",\n  \"\\u0623\",\n  \"\\uFE84\",\n  \"\\u0623\",\n  \"\\uFE85\",\n  \"\\u0624\",\n  \"\\uFE86\",\n  \"\\u0624\",\n  \"\\uFE87\",\n  \"\\u0625\",\n  \"\\uFE88\",\n  \"\\u0625\",\n  \"\\uFE89\",\n  \"\\u0626\",\n  \"\\uFE8A\",\n  \"\\u0626\",\n  \"\\uFE8B\",\n  \"\\u0626\",\n  \"\\uFE8C\",\n  \"\\u0626\",\n  \"\\uFE8D\",\n  \"\\u0627\",\n  \"\\uFE8E\",\n  \"\\u0627\",\n  \"\\uFE8F\",\n  \"\\u0628\",\n  \"\\uFE90\",\n  \"\\u0628\",\n  \"\\uFE91\",\n  \"\\u0628\",\n  \"\\uFE92\",\n  \"\\u0628\",\n  \"\\uFE93\",\n  \"\\u0629\",\n  \"\\uFE94\",\n  \"\\u0629\",\n  \"\\uFE95\",\n  \"\\u062A\",\n  \"\\uFE96\",\n  \"\\u062A\",\n  \"\\uFE97\",\n  \"\\u062A\",\n  \"\\uFE98\",\n  \"\\u062A\",\n  \"\\uFE99\",\n  \"\\u062B\",\n  \"\\uFE9A\",\n  \"\\u062B\",\n  \"\\uFE9B\",\n  \"\\u062B\",\n  \"\\uFE9C\",\n  \"\\u062B\",\n  \"\\uFE9D\",\n  \"\\u062C\",\n  \"\\uFE9E\",\n  \"\\u062C\",\n  \"\\uFE9F\",\n  \"\\u062C\",\n  \"\\uFEA0\",\n  \"\\u062C\",\n  \"\\uFEA1\",\n  \"\\u062D\",\n  \"\\uFEA2\",\n  \"\\u062D\",\n  \"\\uFEA3\",\n  \"\\u062D\",\n  \"\\uFEA4\",\n  \"\\u062D\",\n  \"\\uFEA5\",\n  \"\\u062E\",\n  \"\\uFEA6\",\n  \"\\u062E\",\n  \"\\uFEA7\",\n  \"\\u062E\",\n  \"\\uFEA8\",\n  \"\\u062E\",\n  \"\\uFEA9\",\n  \"\\u062F\",\n  \"\\uFEAA\",\n  \"\\u062F\",\n  \"\\uFEAB\",\n  \"\\u0630\",\n  \"\\uFEAC\",\n  \"\\u0630\",\n  \"\\uFEAD\",\n  \"\\u0631\",\n  \"\\uFEAE\",\n  \"\\u0631\",\n  \"\\uFEAF\",\n  \"\\u0632\",\n  \"\\uFEB0\",\n  \"\\u0632\",\n  \"\\uFEB1\",\n  \"\\u0633\",\n  \"\\uFEB2\",\n  \"\\u0633\",\n  \"\\uFEB3\",\n  \"\\u0633\",\n  \"\\uFEB4\",\n  \"\\u0633\",\n  \"\\uFEB5\",\n  \"\\u0634\",\n  \"\\uFEB6\",\n  \"\\u0634\",\n  \"\\uFEB7\",\n  \"\\u0634\",\n  \"\\uFEB8\",\n  \"\\u0634\",\n  \"\\uFEB9\",\n  \"\\u0635\",\n  \"\\uFEBA\",\n  \"\\u0635\",\n  \"\\uFEBB\",\n  \"\\u0635\",\n  \"\\uFEBC\",\n  \"\\u0635\",\n  \"\\uFEBD\",\n  \"\\u0636\",\n  \"\\uFEBE\",\n  \"\\u0636\",\n  \"\\uFEBF\",\n  \"\\u0636\",\n  \"\\uFEC0\",\n  \"\\u0636\",\n  \"\\uFEC1\",\n  \"\\u0637\",\n  \"\\uFEC2\",\n  \"\\u0637\",\n  \"\\uFEC3\",\n  \"\\u0637\",\n  \"\\uFEC4\",\n  \"\\u0637\",\n  \"\\uFEC5\",\n  \"\\u0638\",\n  \"\\uFEC6\",\n  \"\\u0638\",\n  \"\\uFEC7\",\n  \"\\u0638\",\n  \"\\uFEC8\",\n  \"\\u0638\",\n  \"\\uFEC9\",\n  \"\\u0639\",\n  \"\\uFECA\",\n  \"\\u0639\",\n  \"\\uFECB\",\n  \"\\u0639\",\n  \"\\uFECC\",\n  \"\\u0639\",\n  \"\\uFECD\",\n  \"\\u063A\",\n  \"\\uFECE\",\n  \"\\u063A\",\n  \"\\uFECF\",\n  \"\\u063A\",\n  \"\\uFED0\",\n  \"\\u063A\",\n  \"\\uFED1\",\n  \"\\u0641\",\n  \"\\uFED2\",\n  \"\\u0641\",\n  \"\\uFED3\",\n  \"\\u0641\",\n  \"\\uFED4\",\n  \"\\u0641\",\n  \"\\uFED5\",\n  \"\\u0642\",\n  \"\\uFED6\",\n  \"\\u0642\",\n  \"\\uFED7\",\n  \"\\u0642\",\n  \"\\uFED8\",\n  \"\\u0642\",\n  \"\\uFED9\",\n  \"\\u0643\",\n  \"\\uFEDA\",\n  \"\\u0643\",\n  \"\\uFEDB\",\n  \"\\u0643\",\n  \"\\uFEDC\",\n  \"\\u0643\",\n  \"\\uFEDD\",\n  \"\\u0644\",\n  \"\\uFEDE\",\n  \"\\u0644\",\n  \"\\uFEDF\",\n  \"\\u0644\",\n  \"\\uFEE0\",\n  \"\\u0644\",\n  \"\\uFEE1\",\n  \"\\u0645\",\n  \"\\uFEE2\",\n  \"\\u0645\",\n  \"\\uFEE3\",\n  \"\\u0645\",\n  \"\\uFEE4\",\n  \"\\u0645\",\n  \"\\uFEE5\",\n  \"\\u0646\",\n  \"\\uFEE6\",\n  \"\\u0646\",\n  \"\\uFEE7\",\n  \"\\u0646\",\n  \"\\uFEE8\",\n  \"\\u0646\",\n  \"\\uFEE9\",\n  \"\\u0647\",\n  \"\\uFEEA\",\n  \"\\u0647\",\n  \"\\uFEEB\",\n  \"\\u0647\",\n  \"\\uFEEC\",\n  \"\\u0647\",\n  \"\\uFEED\",\n  \"\\u0648\",\n  \"\\uFEEE\",\n  \"\\u0648\",\n  \"\\uFEEF\",\n  \"\\u0649\",\n  \"\\uFEF0\",\n  \"\\u0649\",\n  \"\\uFEF1\",\n  \"\\u064A\",\n  \"\\uFEF2\",\n  \"\\u064A\",\n  \"\\uFEF3\",\n  \"\\u064A\",\n  \"\\uFEF4\",\n  \"\\u064A\",\n  \"\\uFEF5\",\n  \"\\u0644\\u0622\",\n  \"\\uFEF6\",\n  \"\\u0644\\u0622\",\n  \"\\uFEF7\",\n  \"\\u0644\\u0623\",\n  \"\\uFEF8\",\n  \"\\u0644\\u0623\",\n  \"\\uFEF9\",\n  \"\\u0644\\u0625\",\n  \"\\uFEFA\",\n  \"\\u0644\\u0625\",\n  \"\\uFEFB\",\n  \"\\u0644\\u0627\",\n  \"\\uFEFC\",\n  \"\\u0644\\u0627\"\n ];\n});\nfunction reverseIfRtl(chars) {\n var charsLength = chars.length;\n if (charsLength <= 1 || !isRTLRangeFor(chars.charCodeAt(0))) {\n  return chars;\n }\n var s = \"\";\n for (var ii = charsLength - 1; ii >= 0; ii--) {\n  s += chars[ii];\n }\n return s;\n}\n\n\n/***/ }),\n/* 36 */\n/***/ ((__unused_webpack_module, exports, __w_pdfjs_require__) => {\n\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.FontRendererFactory = void 0;\n\nvar _util = __w_pdfjs_require__(2);\n\nvar _cff_parser = __w_pdfjs_require__(30);\n\nvar _glyphlist = __w_pdfjs_require__(33);\n\nvar _encodings = __w_pdfjs_require__(32);\n\nvar _stream = __w_pdfjs_require__(12);\n\nvar FontRendererFactory = function FontRendererFactoryClosure() {\n  function getLong(data, offset) {\n    return data[offset] << 24 | data[offset + 1] << 16 | data[offset + 2] << 8 | data[offset + 3];\n  }\n\n  function getUshort(data, offset) {\n    return data[offset] << 8 | data[offset + 1];\n  }\n\n  function getSubroutineBias(subrs) {\n    const numSubrs = subrs.length;\n    let bias = 32768;\n\n    if (numSubrs < 1240) {\n      bias = 107;\n    } else if (numSubrs < 33900) {\n      bias = 1131;\n    }\n\n    return bias;\n  }\n\n  function parseCmap(data, start, end) {\n    var offset = getUshort(data, start + 2) === 1 ? getLong(data, start + 8) : getLong(data, start + 16);\n    var format = getUshort(data, start + offset);\n    var ranges, p, i;\n\n    if (format === 4) {\n      getUshort(data, start + offset + 2);\n      var segCount = getUshort(data, start + offset + 6) >> 1;\n      p = start + offset + 14;\n      ranges = [];\n\n      for (i = 0; i < segCount; i++, p += 2) {\n        ranges[i] = {\n          end: getUshort(data, p)\n        };\n      }\n\n      p += 2;\n\n      for (i = 0; i < segCount; i++, p += 2) {\n        ranges[i].start = getUshort(data, p);\n      }\n\n      for (i = 0; i < segCount; i++, p += 2) {\n        ranges[i].idDelta = getUshort(data, p);\n      }\n\n      for (i = 0; i < segCount; i++, p += 2) {\n        var idOffset = getUshort(data, p);\n\n        if (idOffset === 0) {\n          continue;\n        }\n\n        ranges[i].ids = [];\n\n        for (var j = 0, jj = ranges[i].end - ranges[i].start + 1; j < jj; j++) {\n          ranges[i].ids[j] = getUshort(data, p + idOffset);\n          idOffset += 2;\n        }\n      }\n\n      return ranges;\n    } else if (format === 12) {\n      getLong(data, start + offset + 4);\n      var groups = getLong(data, start + offset + 12);\n      p = start + offset + 16;\n      ranges = [];\n\n      for (i = 0; i < groups; i++) {\n        ranges.push({\n          start: getLong(data, p),\n          end: getLong(data, p + 4),\n          idDelta: getLong(data, p + 8) - getLong(data, p)\n        });\n        p += 12;\n      }\n\n      return ranges;\n    }\n\n    throw new _util.FormatError(`unsupported cmap: ${format}`);\n  }\n\n  function parseCff(data, start, end, seacAnalysisEnabled) {\n    var properties = {};\n    var parser = new _cff_parser.CFFParser(new _stream.Stream(data, start, end - start), properties, seacAnalysisEnabled);\n    var cff = parser.parse();\n    return {\n      glyphs: cff.charStrings.objects,\n      subrs: cff.topDict.privateDict && cff.topDict.privateDict.subrsIndex && cff.topDict.privateDict.subrsIndex.objects,\n      gsubrs: cff.globalSubrIndex && cff.globalSubrIndex.objects,\n      isCFFCIDFont: cff.isCIDFont,\n      fdSelect: cff.fdSelect,\n      fdArray: cff.fdArray\n    };\n  }\n\n  function parseGlyfTable(glyf, loca, isGlyphLocationsLong) {\n    var itemSize, itemDecode;\n\n    if (isGlyphLocationsLong) {\n      itemSize = 4;\n\n      itemDecode = function fontItemDecodeLong(data, offset) {\n        return data[offset] << 24 | data[offset + 1] << 16 | data[offset + 2] << 8 | data[offset + 3];\n      };\n    } else {\n      itemSize = 2;\n\n      itemDecode = function fontItemDecode(data, offset) {\n        return data[offset] << 9 | data[offset + 1] << 1;\n      };\n    }\n\n    var glyphs = [];\n    var startOffset = itemDecode(loca, 0);\n\n    for (var j = itemSize; j < loca.length; j += itemSize) {\n      var endOffset = itemDecode(loca, j);\n      glyphs.push(glyf.subarray(startOffset, endOffset));\n      startOffset = endOffset;\n    }\n\n    return glyphs;\n  }\n\n  function lookupCmap(ranges, unicode) {\n    var code = unicode.codePointAt(0),\n        gid = 0;\n    var l = 0,\n        r = ranges.length - 1;\n\n    while (l < r) {\n      var c = l + r + 1 >> 1;\n\n      if (code < ranges[c].start) {\n        r = c - 1;\n      } else {\n        l = c;\n      }\n    }\n\n    if (ranges[l].start <= code && code <= ranges[l].end) {\n      gid = ranges[l].idDelta + (ranges[l].ids ? ranges[l].ids[code - ranges[l].start] : code) & 0xffff;\n    }\n\n    return {\n      charCode: code,\n      glyphId: gid\n    };\n  }\n\n  function compileGlyf(code, cmds, font) {\n    function moveTo(x, y) {\n      cmds.push({\n        cmd: \"moveTo\",\n        args: [x, y]\n      });\n    }\n\n    function lineTo(x, y) {\n      cmds.push({\n        cmd: \"lineTo\",\n        args: [x, y]\n      });\n    }\n\n    function quadraticCurveTo(xa, ya, x, y) {\n      cmds.push({\n        cmd: \"quadraticCurveTo\",\n        args: [xa, ya, x, y]\n      });\n    }\n\n    var i = 0;\n    var numberOfContours = (code[i] << 24 | code[i + 1] << 16) >> 16;\n    var flags;\n    var x = 0,\n        y = 0;\n    i += 10;\n\n    if (numberOfContours < 0) {\n      do {\n        flags = code[i] << 8 | code[i + 1];\n        var glyphIndex = code[i + 2] << 8 | code[i + 3];\n        i += 4;\n        var arg1, arg2;\n\n        if (flags & 0x01) {\n          arg1 = (code[i] << 24 | code[i + 1] << 16) >> 16;\n          arg2 = (code[i + 2] << 24 | code[i + 3] << 16) >> 16;\n          i += 4;\n        } else {\n          arg1 = code[i++];\n          arg2 = code[i++];\n        }\n\n        if (flags & 0x02) {\n          x = arg1;\n          y = arg2;\n        } else {\n          x = 0;\n          y = 0;\n        }\n\n        var scaleX = 1,\n            scaleY = 1,\n            scale01 = 0,\n            scale10 = 0;\n\n        if (flags & 0x08) {\n          scaleX = scaleY = (code[i] << 24 | code[i + 1] << 16) / 1073741824;\n          i += 2;\n        } else if (flags & 0x40) {\n          scaleX = (code[i] << 24 | code[i + 1] << 16) / 1073741824;\n          scaleY = (code[i + 2] << 24 | code[i + 3] << 16) / 1073741824;\n          i += 4;\n        } else if (flags & 0x80) {\n          scaleX = (code[i] << 24 | code[i + 1] << 16) / 1073741824;\n          scale01 = (code[i + 2] << 24 | code[i + 3] << 16) / 1073741824;\n          scale10 = (code[i + 4] << 24 | code[i + 5] << 16) / 1073741824;\n          scaleY = (code[i + 6] << 24 | code[i + 7] << 16) / 1073741824;\n          i += 8;\n        }\n\n        var subglyph = font.glyphs[glyphIndex];\n\n        if (subglyph) {\n          cmds.push({\n            cmd: \"save\"\n          });\n          cmds.push({\n            cmd: \"transform\",\n            args: [scaleX, scale01, scale10, scaleY, x, y]\n          });\n          compileGlyf(subglyph, cmds, font);\n          cmds.push({\n            cmd: \"restore\"\n          });\n        }\n      } while (flags & 0x20);\n    } else {\n      var endPtsOfContours = [];\n      var j, jj;\n\n      for (j = 0; j < numberOfContours; j++) {\n        endPtsOfContours.push(code[i] << 8 | code[i + 1]);\n        i += 2;\n      }\n\n      var instructionLength = code[i] << 8 | code[i + 1];\n      i += 2 + instructionLength;\n      var numberOfPoints = endPtsOfContours[endPtsOfContours.length - 1] + 1;\n      var points = [];\n\n      while (points.length < numberOfPoints) {\n        flags = code[i++];\n        var repeat = 1;\n\n        if (flags & 0x08) {\n          repeat += code[i++];\n        }\n\n        while (repeat-- > 0) {\n          points.push({\n            flags\n          });\n        }\n      }\n\n      for (j = 0; j < numberOfPoints; j++) {\n        switch (points[j].flags & 0x12) {\n          case 0x00:\n            x += (code[i] << 24 | code[i + 1] << 16) >> 16;\n            i += 2;\n            break;\n\n          case 0x02:\n            x -= code[i++];\n            break;\n\n          case 0x12:\n            x += code[i++];\n            break;\n        }\n\n        points[j].x = x;\n      }\n\n      for (j = 0; j < numberOfPoints; j++) {\n        switch (points[j].flags & 0x24) {\n          case 0x00:\n            y += (code[i] << 24 | code[i + 1] << 16) >> 16;\n            i += 2;\n            break;\n\n          case 0x04:\n            y -= code[i++];\n            break;\n\n          case 0x24:\n            y += code[i++];\n            break;\n        }\n\n        points[j].y = y;\n      }\n\n      var startPoint = 0;\n\n      for (i = 0; i < numberOfContours; i++) {\n        var endPoint = endPtsOfContours[i];\n        var contour = points.slice(startPoint, endPoint + 1);\n\n        if (contour[0].flags & 1) {\n          contour.push(contour[0]);\n        } else if (contour[contour.length - 1].flags & 1) {\n          contour.unshift(contour[contour.length - 1]);\n        } else {\n          var p = {\n            flags: 1,\n            x: (contour[0].x + contour[contour.length - 1].x) / 2,\n            y: (contour[0].y + contour[contour.length - 1].y) / 2\n          };\n          contour.unshift(p);\n          contour.push(p);\n        }\n\n        moveTo(contour[0].x, contour[0].y);\n\n        for (j = 1, jj = contour.length; j < jj; j++) {\n          if (contour[j].flags & 1) {\n            lineTo(contour[j].x, contour[j].y);\n          } else if (contour[j + 1].flags & 1) {\n            quadraticCurveTo(contour[j].x, contour[j].y, contour[j + 1].x, contour[j + 1].y);\n            j++;\n          } else {\n            quadraticCurveTo(contour[j].x, contour[j].y, (contour[j].x + contour[j + 1].x) / 2, (contour[j].y + contour[j + 1].y) / 2);\n          }\n        }\n\n        startPoint = endPoint + 1;\n      }\n    }\n  }\n\n  function compileCharString(charStringCode, cmds, font, glyphId) {\n    function moveTo(x, y) {\n      cmds.push({\n        cmd: \"moveTo\",\n        args: [x, y]\n      });\n    }\n\n    function lineTo(x, y) {\n      cmds.push({\n        cmd: \"lineTo\",\n        args: [x, y]\n      });\n    }\n\n    function bezierCurveTo(x1, y1, x2, y2, x, y) {\n      cmds.push({\n        cmd: \"bezierCurveTo\",\n        args: [x1, y1, x2, y2, x, y]\n      });\n    }\n\n    var stack = [];\n    var x = 0,\n        y = 0;\n    var stems = 0;\n\n    function parse(code) {\n      var i = 0;\n\n      while (i < code.length) {\n        var stackClean = false;\n        var v = code[i++];\n        var xa, xb, ya, yb, y1, y2, y3, n, subrCode;\n\n        switch (v) {\n          case 1:\n            stems += stack.length >> 1;\n            stackClean = true;\n            break;\n\n          case 3:\n            stems += stack.length >> 1;\n            stackClean = true;\n            break;\n\n          case 4:\n            y += stack.pop();\n            moveTo(x, y);\n            stackClean = true;\n            break;\n\n          case 5:\n            while (stack.length > 0) {\n              x += stack.shift();\n              y += stack.shift();\n              lineTo(x, y);\n            }\n\n            break;\n\n          case 6:\n            while (stack.length > 0) {\n              x += stack.shift();\n              lineTo(x, y);\n\n              if (stack.length === 0) {\n                break;\n              }\n\n              y += stack.shift();\n              lineTo(x, y);\n            }\n\n            break;\n\n          case 7:\n            while (stack.length > 0) {\n              y += stack.shift();\n              lineTo(x, y);\n\n              if (stack.length === 0) {\n                break;\n              }\n\n              x += stack.shift();\n              lineTo(x, y);\n            }\n\n            break;\n\n          case 8:\n            while (stack.length > 0) {\n              xa = x + stack.shift();\n              ya = y + stack.shift();\n              xb = xa + stack.shift();\n              yb = ya + stack.shift();\n              x = xb + stack.shift();\n              y = yb + stack.shift();\n              bezierCurveTo(xa, ya, xb, yb, x, y);\n            }\n\n            break;\n\n          case 10:\n            n = stack.pop();\n            subrCode = null;\n\n            if (font.isCFFCIDFont) {\n              const fdIndex = font.fdSelect.getFDIndex(glyphId);\n\n              if (fdIndex >= 0 && fdIndex < font.fdArray.length) {\n                const fontDict = font.fdArray[fdIndex];\n                let subrs;\n\n                if (fontDict.privateDict && fontDict.privateDict.subrsIndex) {\n                  subrs = fontDict.privateDict.subrsIndex.objects;\n                }\n\n                if (subrs) {\n                  n += getSubroutineBias(subrs);\n                  subrCode = subrs[n];\n                }\n              } else {\n                (0, _util.warn)(\"Invalid fd index for glyph index.\");\n              }\n            } else {\n              subrCode = font.subrs[n + font.subrsBias];\n            }\n\n            if (subrCode) {\n              parse(subrCode);\n            }\n\n            break;\n\n          case 11:\n            return;\n\n          case 12:\n            v = code[i++];\n\n            switch (v) {\n              case 34:\n                xa = x + stack.shift();\n                xb = xa + stack.shift();\n                y1 = y + stack.shift();\n                x = xb + stack.shift();\n                bezierCurveTo(xa, y, xb, y1, x, y1);\n                xa = x + stack.shift();\n                xb = xa + stack.shift();\n                x = xb + stack.shift();\n                bezierCurveTo(xa, y1, xb, y, x, y);\n                break;\n\n              case 35:\n                xa = x + stack.shift();\n                ya = y + stack.shift();\n                xb = xa + stack.shift();\n                yb = ya + stack.shift();\n                x = xb + stack.shift();\n                y = yb + stack.shift();\n                bezierCurveTo(xa, ya, xb, yb, x, y);\n                xa = x + stack.shift();\n                ya = y + stack.shift();\n                xb = xa + stack.shift();\n                yb = ya + stack.shift();\n                x = xb + stack.shift();\n                y = yb + stack.shift();\n                bezierCurveTo(xa, ya, xb, yb, x, y);\n                stack.pop();\n                break;\n\n              case 36:\n                xa = x + stack.shift();\n                y1 = y + stack.shift();\n                xb = xa + stack.shift();\n                y2 = y1 + stack.shift();\n                x = xb + stack.shift();\n                bezierCurveTo(xa, y1, xb, y2, x, y2);\n                xa = x + stack.shift();\n                xb = xa + stack.shift();\n                y3 = y2 + stack.shift();\n                x = xb + stack.shift();\n                bezierCurveTo(xa, y2, xb, y3, x, y);\n                break;\n\n              case 37:\n                var x0 = x,\n                    y0 = y;\n                xa = x + stack.shift();\n                ya = y + stack.shift();\n                xb = xa + stack.shift();\n                yb = ya + stack.shift();\n                x = xb + stack.shift();\n                y = yb + stack.shift();\n                bezierCurveTo(xa, ya, xb, yb, x, y);\n                xa = x + stack.shift();\n                ya = y + stack.shift();\n                xb = xa + stack.shift();\n                yb = ya + stack.shift();\n                x = xb;\n                y = yb;\n\n                if (Math.abs(x - x0) > Math.abs(y - y0)) {\n                  x += stack.shift();\n                } else {\n                  y += stack.shift();\n                }\n\n                bezierCurveTo(xa, ya, xb, yb, x, y);\n                break;\n\n              default:\n                throw new _util.FormatError(`unknown operator: 12 ${v}`);\n            }\n\n            break;\n\n          case 14:\n            if (stack.length >= 4) {\n              var achar = stack.pop();\n              var bchar = stack.pop();\n              y = stack.pop();\n              x = stack.pop();\n              cmds.push({\n                cmd: \"save\"\n              });\n              cmds.push({\n                cmd: \"translate\",\n                args: [x, y]\n              });\n              var cmap = lookupCmap(font.cmap, String.fromCharCode(font.glyphNameMap[_encodings.StandardEncoding[achar]]));\n              compileCharString(font.glyphs[cmap.glyphId], cmds, font, cmap.glyphId);\n              cmds.push({\n                cmd: \"restore\"\n              });\n              cmap = lookupCmap(font.cmap, String.fromCharCode(font.glyphNameMap[_encodings.StandardEncoding[bchar]]));\n              compileCharString(font.glyphs[cmap.glyphId], cmds, font, cmap.glyphId);\n            }\n\n            return;\n\n          case 18:\n            stems += stack.length >> 1;\n            stackClean = true;\n            break;\n\n          case 19:\n            stems += stack.length >> 1;\n            i += stems + 7 >> 3;\n            stackClean = true;\n            break;\n\n          case 20:\n            stems += stack.length >> 1;\n            i += stems + 7 >> 3;\n            stackClean = true;\n            break;\n\n          case 21:\n            y += stack.pop();\n            x += stack.pop();\n            moveTo(x, y);\n            stackClean = true;\n            break;\n\n          case 22:\n            x += stack.pop();\n            moveTo(x, y);\n            stackClean = true;\n            break;\n\n          case 23:\n            stems += stack.length >> 1;\n            stackClean = true;\n            break;\n\n          case 24:\n            while (stack.length > 2) {\n              xa = x + stack.shift();\n              ya = y + stack.shift();\n              xb = xa + stack.shift();\n              yb = ya + stack.shift();\n              x = xb + stack.shift();\n              y = yb + stack.shift();\n              bezierCurveTo(xa, ya, xb, yb, x, y);\n            }\n\n            x += stack.shift();\n            y += stack.shift();\n            lineTo(x, y);\n            break;\n\n          case 25:\n            while (stack.length > 6) {\n              x += stack.shift();\n              y += stack.shift();\n              lineTo(x, y);\n            }\n\n            xa = x + stack.shift();\n            ya = y + stack.shift();\n            xb = xa + stack.shift();\n            yb = ya + stack.shift();\n            x = xb + stack.shift();\n            y = yb + stack.shift();\n            bezierCurveTo(xa, ya, xb, yb, x, y);\n            break;\n\n          case 26:\n            if (stack.length % 2) {\n              x += stack.shift();\n            }\n\n            while (stack.length > 0) {\n              xa = x;\n              ya = y + stack.shift();\n              xb = xa + stack.shift();\n              yb = ya + stack.shift();\n              x = xb;\n              y = yb + stack.shift();\n              bezierCurveTo(xa, ya, xb, yb, x, y);\n            }\n\n            break;\n\n          case 27:\n            if (stack.length % 2) {\n              y += stack.shift();\n            }\n\n            while (stack.length > 0) {\n              xa = x + stack.shift();\n              ya = y;\n              xb = xa + stack.shift();\n              yb = ya + stack.shift();\n              x = xb + stack.shift();\n              y = yb;\n              bezierCurveTo(xa, ya, xb, yb, x, y);\n            }\n\n            break;\n\n          case 28:\n            stack.push((code[i] << 24 | code[i + 1] << 16) >> 16);\n            i += 2;\n            break;\n\n          case 29:\n            n = stack.pop() + font.gsubrsBias;\n            subrCode = font.gsubrs[n];\n\n            if (subrCode) {\n              parse(subrCode);\n            }\n\n            break;\n\n          case 30:\n            while (stack.length > 0) {\n              xa = x;\n              ya = y + stack.shift();\n              xb = xa + stack.shift();\n              yb = ya + stack.shift();\n              x = xb + stack.shift();\n              y = yb + (stack.length === 1 ? stack.shift() : 0);\n              bezierCurveTo(xa, ya, xb, yb, x, y);\n\n              if (stack.length === 0) {\n                break;\n              }\n\n              xa = x + stack.shift();\n              ya = y;\n              xb = xa + stack.shift();\n              yb = ya + stack.shift();\n              y = yb + stack.shift();\n              x = xb + (stack.length === 1 ? stack.shift() : 0);\n              bezierCurveTo(xa, ya, xb, yb, x, y);\n            }\n\n            break;\n\n          case 31:\n            while (stack.length > 0) {\n              xa = x + stack.shift();\n              ya = y;\n              xb = xa + stack.shift();\n              yb = ya + stack.shift();\n              y = yb + stack.shift();\n              x = xb + (stack.length === 1 ? stack.shift() : 0);\n              bezierCurveTo(xa, ya, xb, yb, x, y);\n\n              if (stack.length === 0) {\n                break;\n              }\n\n              xa = x;\n              ya = y + stack.shift();\n              xb = xa + stack.shift();\n              yb = ya + stack.shift();\n              x = xb + stack.shift();\n              y = yb + (stack.length === 1 ? stack.shift() : 0);\n              bezierCurveTo(xa, ya, xb, yb, x, y);\n            }\n\n            break;\n\n          default:\n            if (v < 32) {\n              throw new _util.FormatError(`unknown operator: ${v}`);\n            }\n\n            if (v < 247) {\n              stack.push(v - 139);\n            } else if (v < 251) {\n              stack.push((v - 247) * 256 + code[i++] + 108);\n            } else if (v < 255) {\n              stack.push(-(v - 251) * 256 - code[i++] - 108);\n            } else {\n              stack.push((code[i] << 24 | code[i + 1] << 16 | code[i + 2] << 8 | code[i + 3]) / 65536);\n              i += 4;\n            }\n\n            break;\n        }\n\n        if (stackClean) {\n          stack.length = 0;\n        }\n      }\n    }\n\n    parse(charStringCode);\n  }\n\n  const NOOP = [];\n\n  class CompiledFont {\n    constructor(fontMatrix) {\n      if (this.constructor === CompiledFont) {\n        (0, _util.unreachable)(\"Cannot initialize CompiledFont.\");\n      }\n\n      this.fontMatrix = fontMatrix;\n      this.compiledGlyphs = Object.create(null);\n      this.compiledCharCodeToGlyphId = Object.create(null);\n    }\n\n    getPathJs(unicode) {\n      const cmap = lookupCmap(this.cmap, unicode);\n      let fn = this.compiledGlyphs[cmap.glyphId];\n\n      if (!fn) {\n        fn = this.compileGlyph(this.glyphs[cmap.glyphId], cmap.glyphId);\n        this.compiledGlyphs[cmap.glyphId] = fn;\n      }\n\n      if (this.compiledCharCodeToGlyphId[cmap.charCode] === undefined) {\n        this.compiledCharCodeToGlyphId[cmap.charCode] = cmap.glyphId;\n      }\n\n      return fn;\n    }\n\n    compileGlyph(code, glyphId) {\n      if (!code || code.length === 0 || code[0] === 14) {\n        return NOOP;\n      }\n\n      let fontMatrix = this.fontMatrix;\n\n      if (this.isCFFCIDFont) {\n        const fdIndex = this.fdSelect.getFDIndex(glyphId);\n\n        if (fdIndex >= 0 && fdIndex < this.fdArray.length) {\n          const fontDict = this.fdArray[fdIndex];\n          fontMatrix = fontDict.getByName(\"FontMatrix\") || _util.FONT_IDENTITY_MATRIX;\n        } else {\n          (0, _util.warn)(\"Invalid fd index for glyph index.\");\n        }\n      }\n\n      const cmds = [];\n      cmds.push({\n        cmd: \"save\"\n      });\n      cmds.push({\n        cmd: \"transform\",\n        args: fontMatrix.slice()\n      });\n      cmds.push({\n        cmd: \"scale\",\n        args: [\"size\", \"-size\"]\n      });\n      this.compileGlyphImpl(code, cmds, glyphId);\n      cmds.push({\n        cmd: \"restore\"\n      });\n      return cmds;\n    }\n\n    compileGlyphImpl() {\n      (0, _util.unreachable)(\"Children classes should implement this.\");\n    }\n\n    hasBuiltPath(unicode) {\n      const cmap = lookupCmap(this.cmap, unicode);\n      return this.compiledGlyphs[cmap.glyphId] !== undefined && this.compiledCharCodeToGlyphId[cmap.charCode] !== undefined;\n    }\n\n  }\n\n  class TrueTypeCompiled extends CompiledFont {\n    constructor(glyphs, cmap, fontMatrix) {\n      super(fontMatrix || [0.000488, 0, 0, 0.000488, 0, 0]);\n      this.glyphs = glyphs;\n      this.cmap = cmap;\n    }\n\n    compileGlyphImpl(code, cmds) {\n      compileGlyf(code, cmds, this);\n    }\n\n  }\n\n  class Type2Compiled extends CompiledFont {\n    constructor(cffInfo, cmap, fontMatrix, glyphNameMap) {\n      super(fontMatrix || [0.001, 0, 0, 0.001, 0, 0]);\n      this.glyphs = cffInfo.glyphs;\n      this.gsubrs = cffInfo.gsubrs || [];\n      this.subrs = cffInfo.subrs || [];\n      this.cmap = cmap;\n      this.glyphNameMap = glyphNameMap || (0, _glyphlist.getGlyphsUnicode)();\n      this.gsubrsBias = getSubroutineBias(this.gsubrs);\n      this.subrsBias = getSubroutineBias(this.subrs);\n      this.isCFFCIDFont = cffInfo.isCFFCIDFont;\n      this.fdSelect = cffInfo.fdSelect;\n      this.fdArray = cffInfo.fdArray;\n    }\n\n    compileGlyphImpl(code, cmds, glyphId) {\n      compileCharString(code, cmds, this, glyphId);\n    }\n\n  }\n\n  return {\n    create: function FontRendererFactory_create(font, seacAnalysisEnabled) {\n      var data = new Uint8Array(font.data);\n      var cmap, glyf, loca, cff, indexToLocFormat, unitsPerEm;\n      var numTables = getUshort(data, 4);\n\n      for (var i = 0, p = 12; i < numTables; i++, p += 16) {\n        var tag = (0, _util.bytesToString)(data.subarray(p, p + 4));\n        var offset = getLong(data, p + 8);\n        var length = getLong(data, p + 12);\n\n        switch (tag) {\n          case \"cmap\":\n            cmap = parseCmap(data, offset, offset + length);\n            break;\n\n          case \"glyf\":\n            glyf = data.subarray(offset, offset + length);\n            break;\n\n          case \"loca\":\n            loca = data.subarray(offset, offset + length);\n            break;\n\n          case \"head\":\n            unitsPerEm = getUshort(data, offset + 18);\n            indexToLocFormat = getUshort(data, offset + 50);\n            break;\n\n          case \"CFF \":\n            cff = parseCff(data, offset, offset + length, seacAnalysisEnabled);\n            break;\n        }\n      }\n\n      if (glyf) {\n        var fontMatrix = !unitsPerEm ? font.fontMatrix : [1 / unitsPerEm, 0, 0, 1 / unitsPerEm, 0, 0];\n        return new TrueTypeCompiled(parseGlyfTable(glyf, loca, indexToLocFormat), cmap, fontMatrix);\n      }\n\n      return new Type2Compiled(cff, cmap, font.fontMatrix, font.glyphNameMap);\n    }\n  };\n}();\n\nexports.FontRendererFactory = FontRendererFactory;\n\n/***/ }),\n/* 37 */\n/***/ ((__unused_webpack_module, exports, __w_pdfjs_require__) => {\n\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.Type1Parser = void 0;\n\nvar _encodings = __w_pdfjs_require__(32);\n\nvar _core_utils = __w_pdfjs_require__(8);\n\nvar _stream = __w_pdfjs_require__(12);\n\nvar _util = __w_pdfjs_require__(2);\n\nvar HINTING_ENABLED = false;\n\nvar Type1CharString = function Type1CharStringClosure() {\n  var COMMAND_MAP = {\n    hstem: [1],\n    vstem: [3],\n    vmoveto: [4],\n    rlineto: [5],\n    hlineto: [6],\n    vlineto: [7],\n    rrcurveto: [8],\n    callsubr: [10],\n    flex: [12, 35],\n    drop: [12, 18],\n    endchar: [14],\n    rmoveto: [21],\n    hmoveto: [22],\n    vhcurveto: [30],\n    hvcurveto: [31]\n  };\n\n  function Type1CharString() {\n    this.width = 0;\n    this.lsb = 0;\n    this.flexing = false;\n    this.output = [];\n    this.stack = [];\n  }\n\n  Type1CharString.prototype = {\n    convert: function Type1CharString_convert(encoded, subrs, seacAnalysisEnabled) {\n      var count = encoded.length;\n      var error = false;\n      var wx, sbx, subrNumber;\n\n      for (var i = 0; i < count; i++) {\n        var value = encoded[i];\n\n        if (value < 32) {\n          if (value === 12) {\n            value = (value << 8) + encoded[++i];\n          }\n\n          switch (value) {\n            case 1:\n              if (!HINTING_ENABLED) {\n                this.stack = [];\n                break;\n              }\n\n              error = this.executeCommand(2, COMMAND_MAP.hstem);\n              break;\n\n            case 3:\n              if (!HINTING_ENABLED) {\n                this.stack = [];\n                break;\n              }\n\n              error = this.executeCommand(2, COMMAND_MAP.vstem);\n              break;\n\n            case 4:\n              if (this.flexing) {\n                if (this.stack.length < 1) {\n                  error = true;\n                  break;\n                }\n\n                var dy = this.stack.pop();\n                this.stack.push(0, dy);\n                break;\n              }\n\n              error = this.executeCommand(1, COMMAND_MAP.vmoveto);\n              break;\n\n            case 5:\n              error = this.executeCommand(2, COMMAND_MAP.rlineto);\n              break;\n\n            case 6:\n              error = this.executeCommand(1, COMMAND_MAP.hlineto);\n              break;\n\n            case 7:\n              error = this.executeCommand(1, COMMAND_MAP.vlineto);\n              break;\n\n            case 8:\n              error = this.executeCommand(6, COMMAND_MAP.rrcurveto);\n              break;\n\n            case 9:\n              this.stack = [];\n              break;\n\n            case 10:\n              if (this.stack.length < 1) {\n                error = true;\n                break;\n              }\n\n              subrNumber = this.stack.pop();\n\n              if (!subrs[subrNumber]) {\n                error = true;\n                break;\n              }\n\n              error = this.convert(subrs[subrNumber], subrs, seacAnalysisEnabled);\n              break;\n\n            case 11:\n              return error;\n\n            case 13:\n              if (this.stack.length < 2) {\n                error = true;\n                break;\n              }\n\n              wx = this.stack.pop();\n              sbx = this.stack.pop();\n              this.lsb = sbx;\n              this.width = wx;\n              this.stack.push(wx, sbx);\n              error = this.executeCommand(2, COMMAND_MAP.hmoveto);\n              break;\n\n            case 14:\n              this.output.push(COMMAND_MAP.endchar[0]);\n              break;\n\n            case 21:\n              if (this.flexing) {\n                break;\n              }\n\n              error = this.executeCommand(2, COMMAND_MAP.rmoveto);\n              break;\n\n            case 22:\n              if (this.flexing) {\n                this.stack.push(0);\n                break;\n              }\n\n              error = this.executeCommand(1, COMMAND_MAP.hmoveto);\n              break;\n\n            case 30:\n              error = this.executeCommand(4, COMMAND_MAP.vhcurveto);\n              break;\n\n            case 31:\n              error = this.executeCommand(4, COMMAND_MAP.hvcurveto);\n              break;\n\n            case (12 << 8) + 0:\n              this.stack = [];\n              break;\n\n            case (12 << 8) + 1:\n              if (!HINTING_ENABLED) {\n                this.stack = [];\n                break;\n              }\n\n              error = this.executeCommand(2, COMMAND_MAP.vstem);\n              break;\n\n            case (12 << 8) + 2:\n              if (!HINTING_ENABLED) {\n                this.stack = [];\n                break;\n              }\n\n              error = this.executeCommand(2, COMMAND_MAP.hstem);\n              break;\n\n            case (12 << 8) + 6:\n              if (seacAnalysisEnabled) {\n                const asb = this.stack[this.stack.length - 5];\n                this.seac = this.stack.splice(-4, 4);\n                this.seac[0] += this.lsb - asb;\n                error = this.executeCommand(0, COMMAND_MAP.endchar);\n              } else {\n                error = this.executeCommand(4, COMMAND_MAP.endchar);\n              }\n\n              break;\n\n            case (12 << 8) + 7:\n              if (this.stack.length < 4) {\n                error = true;\n                break;\n              }\n\n              this.stack.pop();\n              wx = this.stack.pop();\n              var sby = this.stack.pop();\n              sbx = this.stack.pop();\n              this.lsb = sbx;\n              this.width = wx;\n              this.stack.push(wx, sbx, sby);\n              error = this.executeCommand(3, COMMAND_MAP.rmoveto);\n              break;\n\n            case (12 << 8) + 12:\n              if (this.stack.length < 2) {\n                error = true;\n                break;\n              }\n\n              var num2 = this.stack.pop();\n              var num1 = this.stack.pop();\n              this.stack.push(num1 / num2);\n              break;\n\n            case (12 << 8) + 16:\n              if (this.stack.length < 2) {\n                error = true;\n                break;\n              }\n\n              subrNumber = this.stack.pop();\n              var numArgs = this.stack.pop();\n\n              if (subrNumber === 0 && numArgs === 3) {\n                var flexArgs = this.stack.splice(this.stack.length - 17, 17);\n                this.stack.push(flexArgs[2] + flexArgs[0], flexArgs[3] + flexArgs[1], flexArgs[4], flexArgs[5], flexArgs[6], flexArgs[7], flexArgs[8], flexArgs[9], flexArgs[10], flexArgs[11], flexArgs[12], flexArgs[13], flexArgs[14]);\n                error = this.executeCommand(13, COMMAND_MAP.flex, true);\n                this.flexing = false;\n                this.stack.push(flexArgs[15], flexArgs[16]);\n              } else if (subrNumber === 1 && numArgs === 0) {\n                this.flexing = true;\n              }\n\n              break;\n\n            case (12 << 8) + 17:\n              break;\n\n            case (12 << 8) + 33:\n              this.stack = [];\n              break;\n\n            default:\n              (0, _util.warn)('Unknown type 1 charstring command of \"' + value + '\"');\n              break;\n          }\n\n          if (error) {\n            break;\n          }\n\n          continue;\n        } else if (value <= 246) {\n          value = value - 139;\n        } else if (value <= 250) {\n          value = (value - 247) * 256 + encoded[++i] + 108;\n        } else if (value <= 254) {\n          value = -((value - 251) * 256) - encoded[++i] - 108;\n        } else {\n          value = (encoded[++i] & 0xff) << 24 | (encoded[++i] & 0xff) << 16 | (encoded[++i] & 0xff) << 8 | (encoded[++i] & 0xff) << 0;\n        }\n\n        this.stack.push(value);\n      }\n\n      return error;\n    },\n\n    executeCommand(howManyArgs, command, keepStack) {\n      var stackLength = this.stack.length;\n\n      if (howManyArgs > stackLength) {\n        return true;\n      }\n\n      var start = stackLength - howManyArgs;\n\n      for (var i = start; i < stackLength; i++) {\n        var value = this.stack[i];\n\n        if (Number.isInteger(value)) {\n          this.output.push(28, value >> 8 & 0xff, value & 0xff);\n        } else {\n          value = 65536 * value | 0;\n          this.output.push(255, value >> 24 & 0xff, value >> 16 & 0xff, value >> 8 & 0xff, value & 0xff);\n        }\n      }\n\n      this.output.push.apply(this.output, command);\n\n      if (keepStack) {\n        this.stack.splice(start, howManyArgs);\n      } else {\n        this.stack.length = 0;\n      }\n\n      return false;\n    }\n\n  };\n  return Type1CharString;\n}();\n\nvar Type1Parser = function Type1ParserClosure() {\n  var EEXEC_ENCRYPT_KEY = 55665;\n  var CHAR_STRS_ENCRYPT_KEY = 4330;\n\n  function isHexDigit(code) {\n    return code >= 48 && code <= 57 || code >= 65 && code <= 70 || code >= 97 && code <= 102;\n  }\n\n  function decrypt(data, key, discardNumber) {\n    if (discardNumber >= data.length) {\n      return new Uint8Array(0);\n    }\n\n    var r = key | 0,\n        c1 = 52845,\n        c2 = 22719,\n        i,\n        j;\n\n    for (i = 0; i < discardNumber; i++) {\n      r = (data[i] + r) * c1 + c2 & (1 << 16) - 1;\n    }\n\n    var count = data.length - discardNumber;\n    var decrypted = new Uint8Array(count);\n\n    for (i = discardNumber, j = 0; j < count; i++, j++) {\n      var value = data[i];\n      decrypted[j] = value ^ r >> 8;\n      r = (value + r) * c1 + c2 & (1 << 16) - 1;\n    }\n\n    return decrypted;\n  }\n\n  function decryptAscii(data, key, discardNumber) {\n    var r = key | 0,\n        c1 = 52845,\n        c2 = 22719;\n    var count = data.length,\n        maybeLength = count >>> 1;\n    var decrypted = new Uint8Array(maybeLength);\n    var i, j;\n\n    for (i = 0, j = 0; i < count; i++) {\n      var digit1 = data[i];\n\n      if (!isHexDigit(digit1)) {\n        continue;\n      }\n\n      i++;\n      var digit2;\n\n      while (i < count && !isHexDigit(digit2 = data[i])) {\n        i++;\n      }\n\n      if (i < count) {\n        var value = parseInt(String.fromCharCode(digit1, digit2), 16);\n        decrypted[j++] = value ^ r >> 8;\n        r = (value + r) * c1 + c2 & (1 << 16) - 1;\n      }\n    }\n\n    return decrypted.slice(discardNumber, j);\n  }\n\n  function isSpecial(c) {\n    return c === 0x2f || c === 0x5b || c === 0x5d || c === 0x7b || c === 0x7d || c === 0x28 || c === 0x29;\n  }\n\n  function Type1Parser(stream, encrypted, seacAnalysisEnabled) {\n    if (encrypted) {\n      var data = stream.getBytes();\n      var isBinary = !((isHexDigit(data[0]) || (0, _core_utils.isWhiteSpace)(data[0])) && isHexDigit(data[1]) && isHexDigit(data[2]) && isHexDigit(data[3]) && isHexDigit(data[4]) && isHexDigit(data[5]) && isHexDigit(data[6]) && isHexDigit(data[7]));\n      stream = new _stream.Stream(isBinary ? decrypt(data, EEXEC_ENCRYPT_KEY, 4) : decryptAscii(data, EEXEC_ENCRYPT_KEY, 4));\n    }\n\n    this.seacAnalysisEnabled = !!seacAnalysisEnabled;\n    this.stream = stream;\n    this.nextChar();\n  }\n\n  Type1Parser.prototype = {\n    readNumberArray: function Type1Parser_readNumberArray() {\n      this.getToken();\n      var array = [];\n\n      while (true) {\n        var token = this.getToken();\n\n        if (token === null || token === \"]\" || token === \"}\") {\n          break;\n        }\n\n        array.push(parseFloat(token || 0));\n      }\n\n      return array;\n    },\n    readNumber: function Type1Parser_readNumber() {\n      var token = this.getToken();\n      return parseFloat(token || 0);\n    },\n    readInt: function Type1Parser_readInt() {\n      var token = this.getToken();\n      return parseInt(token || 0, 10) | 0;\n    },\n    readBoolean: function Type1Parser_readBoolean() {\n      var token = this.getToken();\n      return token === \"true\" ? 1 : 0;\n    },\n    nextChar: function Type1_nextChar() {\n      return this.currentChar = this.stream.getByte();\n    },\n    getToken: function Type1Parser_getToken() {\n      var comment = false;\n      var ch = this.currentChar;\n\n      while (true) {\n        if (ch === -1) {\n          return null;\n        }\n\n        if (comment) {\n          if (ch === 0x0a || ch === 0x0d) {\n            comment = false;\n          }\n        } else if (ch === 0x25) {\n          comment = true;\n        } else if (!(0, _core_utils.isWhiteSpace)(ch)) {\n          break;\n        }\n\n        ch = this.nextChar();\n      }\n\n      if (isSpecial(ch)) {\n        this.nextChar();\n        return String.fromCharCode(ch);\n      }\n\n      var token = \"\";\n\n      do {\n        token += String.fromCharCode(ch);\n        ch = this.nextChar();\n      } while (ch >= 0 && !(0, _core_utils.isWhiteSpace)(ch) && !isSpecial(ch));\n\n      return token;\n    },\n    readCharStrings: function Type1Parser_readCharStrings(bytes, lenIV) {\n      if (lenIV === -1) {\n        return bytes;\n      }\n\n      return decrypt(bytes, CHAR_STRS_ENCRYPT_KEY, lenIV);\n    },\n    extractFontProgram: function Type1Parser_extractFontProgram(properties) {\n      var stream = this.stream;\n      var subrs = [],\n          charstrings = [];\n      var privateData = Object.create(null);\n      privateData.lenIV = 4;\n      var program = {\n        subrs: [],\n        charstrings: [],\n        properties: {\n          privateData\n        }\n      };\n      var token, length, data, lenIV, encoded;\n\n      while ((token = this.getToken()) !== null) {\n        if (token !== \"/\") {\n          continue;\n        }\n\n        token = this.getToken();\n\n        switch (token) {\n          case \"CharStrings\":\n            this.getToken();\n            this.getToken();\n            this.getToken();\n            this.getToken();\n\n            while (true) {\n              token = this.getToken();\n\n              if (token === null || token === \"end\") {\n                break;\n              }\n\n              if (token !== \"/\") {\n                continue;\n              }\n\n              var glyph = this.getToken();\n              length = this.readInt();\n              this.getToken();\n              data = length > 0 ? stream.getBytes(length) : new Uint8Array(0);\n              lenIV = program.properties.privateData.lenIV;\n              encoded = this.readCharStrings(data, lenIV);\n              this.nextChar();\n              token = this.getToken();\n\n              if (token === \"noaccess\") {\n                this.getToken();\n              }\n\n              charstrings.push({\n                glyph,\n                encoded\n              });\n            }\n\n            break;\n\n          case \"Subrs\":\n            this.readInt();\n            this.getToken();\n\n            while (this.getToken() === \"dup\") {\n              const index = this.readInt();\n              length = this.readInt();\n              this.getToken();\n              data = length > 0 ? stream.getBytes(length) : new Uint8Array(0);\n              lenIV = program.properties.privateData.lenIV;\n              encoded = this.readCharStrings(data, lenIV);\n              this.nextChar();\n              token = this.getToken();\n\n              if (token === \"noaccess\") {\n                this.getToken();\n              }\n\n              subrs[index] = encoded;\n            }\n\n            break;\n\n          case \"BlueValues\":\n          case \"OtherBlues\":\n          case \"FamilyBlues\":\n          case \"FamilyOtherBlues\":\n            var blueArray = this.readNumberArray();\n\n            if (blueArray.length > 0 && blueArray.length % 2 === 0 && HINTING_ENABLED) {\n              program.properties.privateData[token] = blueArray;\n            }\n\n            break;\n\n          case \"StemSnapH\":\n          case \"StemSnapV\":\n            program.properties.privateData[token] = this.readNumberArray();\n            break;\n\n          case \"StdHW\":\n          case \"StdVW\":\n            program.properties.privateData[token] = this.readNumberArray()[0];\n            break;\n\n          case \"BlueShift\":\n          case \"lenIV\":\n          case \"BlueFuzz\":\n          case \"BlueScale\":\n          case \"LanguageGroup\":\n          case \"ExpansionFactor\":\n            program.properties.privateData[token] = this.readNumber();\n            break;\n\n          case \"ForceBold\":\n            program.properties.privateData[token] = this.readBoolean();\n            break;\n        }\n      }\n\n      for (var i = 0; i < charstrings.length; i++) {\n        glyph = charstrings[i].glyph;\n        encoded = charstrings[i].encoded;\n        var charString = new Type1CharString();\n        var error = charString.convert(encoded, subrs, this.seacAnalysisEnabled);\n        var output = charString.output;\n\n        if (error) {\n          output = [14];\n        }\n\n        const charStringObject = {\n          glyphName: glyph,\n          charstring: output,\n          width: charString.width,\n          lsb: charString.lsb,\n          seac: charString.seac\n        };\n\n        if (glyph === \".notdef\") {\n          program.charstrings.unshift(charStringObject);\n        } else {\n          program.charstrings.push(charStringObject);\n        }\n\n        if (properties.builtInEncoding) {\n          const index = properties.builtInEncoding.indexOf(glyph);\n\n          if (index > -1 && properties.widths[index] === undefined && index >= properties.firstChar && index <= properties.lastChar) {\n            properties.widths[index] = charString.width;\n          }\n        }\n      }\n\n      return program;\n    },\n    extractFontHeader: function Type1Parser_extractFontHeader(properties) {\n      var token;\n\n      while ((token = this.getToken()) !== null) {\n        if (token !== \"/\") {\n          continue;\n        }\n\n        token = this.getToken();\n\n        switch (token) {\n          case \"FontMatrix\":\n            var matrix = this.readNumberArray();\n            properties.fontMatrix = matrix;\n            break;\n\n          case \"Encoding\":\n            var encodingArg = this.getToken();\n            var encoding;\n\n            if (!/^\\d+$/.test(encodingArg)) {\n              encoding = (0, _encodings.getEncoding)(encodingArg);\n            } else {\n              encoding = [];\n              var size = parseInt(encodingArg, 10) | 0;\n              this.getToken();\n\n              for (var j = 0; j < size; j++) {\n                token = this.getToken();\n\n                while (token !== \"dup\" && token !== \"def\") {\n                  token = this.getToken();\n\n                  if (token === null) {\n                    return;\n                  }\n                }\n\n                if (token === \"def\") {\n                  break;\n                }\n\n                var index = this.readInt();\n                this.getToken();\n                var glyph = this.getToken();\n                encoding[index] = glyph;\n                this.getToken();\n              }\n            }\n\n            properties.builtInEncoding = encoding;\n            break;\n\n          case \"FontBBox\":\n            var fontBBox = this.readNumberArray();\n            properties.ascent = Math.max(fontBBox[3], fontBBox[1]);\n            properties.descent = Math.min(fontBBox[1], fontBBox[3]);\n            properties.ascentScaled = true;\n            break;\n        }\n      }\n    }\n  };\n  return Type1Parser;\n}();\n\nexports.Type1Parser = Type1Parser;\n\n/***/ }),\n/* 38 */\n/***/ ((__unused_webpack_module, exports, __w_pdfjs_require__) => {\n\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.getTilingPatternIR = getTilingPatternIR;\nexports.Pattern = void 0;\n\nvar _util = __w_pdfjs_require__(2);\n\nvar _colorspace = __w_pdfjs_require__(23);\n\nvar _primitives = __w_pdfjs_require__(5);\n\nvar _core_utils = __w_pdfjs_require__(8);\n\nvar ShadingType = {\n  FUNCTION_BASED: 1,\n  AXIAL: 2,\n  RADIAL: 3,\n  FREE_FORM_MESH: 4,\n  LATTICE_FORM_MESH: 5,\n  COONS_PATCH_MESH: 6,\n  TENSOR_PATCH_MESH: 7\n};\n\nvar Pattern = function PatternClosure() {\n  function Pattern() {\n    (0, _util.unreachable)(\"should not call Pattern constructor\");\n  }\n\n  Pattern.prototype = {\n    getPattern: function Pattern_getPattern(ctx) {\n      (0, _util.unreachable)(`Should not call Pattern.getStyle: ${ctx}`);\n    }\n  };\n\n  Pattern.parseShading = function (shading, matrix, xref, res, handler, pdfFunctionFactory, localColorSpaceCache) {\n    var dict = (0, _primitives.isStream)(shading) ? shading.dict : shading;\n    var type = dict.get(\"ShadingType\");\n\n    try {\n      switch (type) {\n        case ShadingType.AXIAL:\n        case ShadingType.RADIAL:\n          return new Shadings.RadialAxial(dict, matrix, xref, res, pdfFunctionFactory, localColorSpaceCache);\n\n        case ShadingType.FREE_FORM_MESH:\n        case ShadingType.LATTICE_FORM_MESH:\n        case ShadingType.COONS_PATCH_MESH:\n        case ShadingType.TENSOR_PATCH_MESH:\n          return new Shadings.Mesh(shading, matrix, xref, res, pdfFunctionFactory, localColorSpaceCache);\n\n        default:\n          throw new _util.FormatError(\"Unsupported ShadingType: \" + type);\n      }\n    } catch (ex) {\n      if (ex instanceof _core_utils.MissingDataException) {\n        throw ex;\n      }\n\n      handler.send(\"UnsupportedFeature\", {\n        featureId: _util.UNSUPPORTED_FEATURES.shadingPattern\n      });\n      (0, _util.warn)(ex);\n      return new Shadings.Dummy();\n    }\n  };\n\n  return Pattern;\n}();\n\nexports.Pattern = Pattern;\nvar Shadings = {};\nShadings.SMALL_NUMBER = 1e-6;\n\nShadings.RadialAxial = function RadialAxialClosure() {\n  function RadialAxial(dict, matrix, xref, resources, pdfFunctionFactory, localColorSpaceCache) {\n    this.matrix = matrix;\n    this.coordsArr = dict.getArray(\"Coords\");\n    this.shadingType = dict.get(\"ShadingType\");\n    this.type = \"Pattern\";\n\n    const cs = _colorspace.ColorSpace.parse({\n      cs: dict.getRaw(\"ColorSpace\") || dict.getRaw(\"CS\"),\n      xref,\n      resources,\n      pdfFunctionFactory,\n      localColorSpaceCache\n    });\n\n    this.cs = cs;\n    const bbox = dict.getArray(\"BBox\");\n\n    if (Array.isArray(bbox) && bbox.length === 4) {\n      this.bbox = _util.Util.normalizeRect(bbox);\n    } else {\n      this.bbox = null;\n    }\n\n    var t0 = 0.0,\n        t1 = 1.0;\n\n    if (dict.has(\"Domain\")) {\n      var domainArr = dict.getArray(\"Domain\");\n      t0 = domainArr[0];\n      t1 = domainArr[1];\n    }\n\n    var extendStart = false,\n        extendEnd = false;\n\n    if (dict.has(\"Extend\")) {\n      var extendArr = dict.getArray(\"Extend\");\n      extendStart = extendArr[0];\n      extendEnd = extendArr[1];\n    }\n\n    if (this.shadingType === ShadingType.RADIAL && (!extendStart || !extendEnd)) {\n      var x1 = this.coordsArr[0];\n      var y1 = this.coordsArr[1];\n      var r1 = this.coordsArr[2];\n      var x2 = this.coordsArr[3];\n      var y2 = this.coordsArr[4];\n      var r2 = this.coordsArr[5];\n      var distance = Math.sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2));\n\n      if (r1 <= r2 + distance && r2 <= r1 + distance) {\n        (0, _util.warn)(\"Unsupported radial gradient.\");\n      }\n    }\n\n    this.extendStart = extendStart;\n    this.extendEnd = extendEnd;\n    var fnObj = dict.getRaw(\"Function\");\n    var fn = pdfFunctionFactory.createFromArray(fnObj);\n    const NUMBER_OF_SAMPLES = 10;\n    const step = (t1 - t0) / NUMBER_OF_SAMPLES;\n    var colorStops = this.colorStops = [];\n\n    if (t0 >= t1 || step <= 0) {\n      (0, _util.info)(\"Bad shading domain.\");\n      return;\n    }\n\n    var color = new Float32Array(cs.numComps),\n        ratio = new Float32Array(1);\n    var rgbColor;\n\n    for (let i = 0; i <= NUMBER_OF_SAMPLES; i++) {\n      ratio[0] = t0 + i * step;\n      fn(ratio, 0, color, 0);\n      rgbColor = cs.getRgb(color, 0);\n\n      var cssColor = _util.Util.makeHexColor(rgbColor[0], rgbColor[1], rgbColor[2]);\n\n      colorStops.push([i / NUMBER_OF_SAMPLES, cssColor]);\n    }\n\n    var background = \"transparent\";\n\n    if (dict.has(\"Background\")) {\n      rgbColor = cs.getRgb(dict.get(\"Background\"), 0);\n      background = _util.Util.makeHexColor(rgbColor[0], rgbColor[1], rgbColor[2]);\n    }\n\n    if (!extendStart) {\n      colorStops.unshift([0, background]);\n      colorStops[1][0] += Shadings.SMALL_NUMBER;\n    }\n\n    if (!extendEnd) {\n      colorStops[colorStops.length - 1][0] -= Shadings.SMALL_NUMBER;\n      colorStops.push([1, background]);\n    }\n\n    this.colorStops = colorStops;\n  }\n\n  RadialAxial.prototype = {\n    getIR: function RadialAxial_getIR() {\n      var coordsArr = this.coordsArr;\n      var shadingType = this.shadingType;\n      var type, p0, p1, r0, r1;\n\n      if (shadingType === ShadingType.AXIAL) {\n        p0 = [coordsArr[0], coordsArr[1]];\n        p1 = [coordsArr[2], coordsArr[3]];\n        r0 = null;\n        r1 = null;\n        type = \"axial\";\n      } else if (shadingType === ShadingType.RADIAL) {\n        p0 = [coordsArr[0], coordsArr[1]];\n        p1 = [coordsArr[3], coordsArr[4]];\n        r0 = coordsArr[2];\n        r1 = coordsArr[5];\n        type = \"radial\";\n      } else {\n        (0, _util.unreachable)(`getPattern type unknown: ${shadingType}`);\n      }\n\n      var matrix = this.matrix;\n\n      if (matrix) {\n        p0 = _util.Util.applyTransform(p0, matrix);\n        p1 = _util.Util.applyTransform(p1, matrix);\n\n        if (shadingType === ShadingType.RADIAL) {\n          var scale = _util.Util.singularValueDecompose2dScale(matrix);\n\n          r0 *= scale[0];\n          r1 *= scale[1];\n        }\n      }\n\n      return [\"RadialAxial\", type, this.bbox, this.colorStops, p0, p1, r0, r1];\n    }\n  };\n  return RadialAxial;\n}();\n\nShadings.Mesh = function MeshClosure() {\n  function MeshStreamReader(stream, context) {\n    this.stream = stream;\n    this.context = context;\n    this.buffer = 0;\n    this.bufferLength = 0;\n    var numComps = context.numComps;\n    this.tmpCompsBuf = new Float32Array(numComps);\n    var csNumComps = context.colorSpace.numComps;\n    this.tmpCsCompsBuf = context.colorFn ? new Float32Array(csNumComps) : this.tmpCompsBuf;\n  }\n\n  MeshStreamReader.prototype = {\n    get hasData() {\n      if (this.stream.end) {\n        return this.stream.pos < this.stream.end;\n      }\n\n      if (this.bufferLength > 0) {\n        return true;\n      }\n\n      var nextByte = this.stream.getByte();\n\n      if (nextByte < 0) {\n        return false;\n      }\n\n      this.buffer = nextByte;\n      this.bufferLength = 8;\n      return true;\n    },\n\n    readBits: function MeshStreamReader_readBits(n) {\n      var buffer = this.buffer;\n      var bufferLength = this.bufferLength;\n\n      if (n === 32) {\n        if (bufferLength === 0) {\n          return (this.stream.getByte() << 24 | this.stream.getByte() << 16 | this.stream.getByte() << 8 | this.stream.getByte()) >>> 0;\n        }\n\n        buffer = buffer << 24 | this.stream.getByte() << 16 | this.stream.getByte() << 8 | this.stream.getByte();\n        var nextByte = this.stream.getByte();\n        this.buffer = nextByte & (1 << bufferLength) - 1;\n        return (buffer << 8 - bufferLength | (nextByte & 0xff) >> bufferLength) >>> 0;\n      }\n\n      if (n === 8 && bufferLength === 0) {\n        return this.stream.getByte();\n      }\n\n      while (bufferLength < n) {\n        buffer = buffer << 8 | this.stream.getByte();\n        bufferLength += 8;\n      }\n\n      bufferLength -= n;\n      this.bufferLength = bufferLength;\n      this.buffer = buffer & (1 << bufferLength) - 1;\n      return buffer >> bufferLength;\n    },\n    align: function MeshStreamReader_align() {\n      this.buffer = 0;\n      this.bufferLength = 0;\n    },\n    readFlag: function MeshStreamReader_readFlag() {\n      return this.readBits(this.context.bitsPerFlag);\n    },\n    readCoordinate: function MeshStreamReader_readCoordinate() {\n      var bitsPerCoordinate = this.context.bitsPerCoordinate;\n      var xi = this.readBits(bitsPerCoordinate);\n      var yi = this.readBits(bitsPerCoordinate);\n      var decode = this.context.decode;\n      var scale = bitsPerCoordinate < 32 ? 1 / ((1 << bitsPerCoordinate) - 1) : 2.3283064365386963e-10;\n      return [xi * scale * (decode[1] - decode[0]) + decode[0], yi * scale * (decode[3] - decode[2]) + decode[2]];\n    },\n    readComponents: function MeshStreamReader_readComponents() {\n      var numComps = this.context.numComps;\n      var bitsPerComponent = this.context.bitsPerComponent;\n      var scale = bitsPerComponent < 32 ? 1 / ((1 << bitsPerComponent) - 1) : 2.3283064365386963e-10;\n      var decode = this.context.decode;\n      var components = this.tmpCompsBuf;\n\n      for (var i = 0, j = 4; i < numComps; i++, j += 2) {\n        var ci = this.readBits(bitsPerComponent);\n        components[i] = ci * scale * (decode[j + 1] - decode[j]) + decode[j];\n      }\n\n      var color = this.tmpCsCompsBuf;\n\n      if (this.context.colorFn) {\n        this.context.colorFn(components, 0, color, 0);\n      }\n\n      return this.context.colorSpace.getRgb(color, 0);\n    }\n  };\n\n  function decodeType4Shading(mesh, reader) {\n    var coords = mesh.coords;\n    var colors = mesh.colors;\n    var operators = [];\n    var ps = [];\n    var verticesLeft = 0;\n\n    while (reader.hasData) {\n      var f = reader.readFlag();\n      var coord = reader.readCoordinate();\n      var color = reader.readComponents();\n\n      if (verticesLeft === 0) {\n        if (!(0 <= f && f <= 2)) {\n          throw new _util.FormatError(\"Unknown type4 flag\");\n        }\n\n        switch (f) {\n          case 0:\n            verticesLeft = 3;\n            break;\n\n          case 1:\n            ps.push(ps[ps.length - 2], ps[ps.length - 1]);\n            verticesLeft = 1;\n            break;\n\n          case 2:\n            ps.push(ps[ps.length - 3], ps[ps.length - 1]);\n            verticesLeft = 1;\n            break;\n        }\n\n        operators.push(f);\n      }\n\n      ps.push(coords.length);\n      coords.push(coord);\n      colors.push(color);\n      verticesLeft--;\n      reader.align();\n    }\n\n    mesh.figures.push({\n      type: \"triangles\",\n      coords: new Int32Array(ps),\n      colors: new Int32Array(ps)\n    });\n  }\n\n  function decodeType5Shading(mesh, reader, verticesPerRow) {\n    var coords = mesh.coords;\n    var colors = mesh.colors;\n    var ps = [];\n\n    while (reader.hasData) {\n      var coord = reader.readCoordinate();\n      var color = reader.readComponents();\n      ps.push(coords.length);\n      coords.push(coord);\n      colors.push(color);\n    }\n\n    mesh.figures.push({\n      type: \"lattice\",\n      coords: new Int32Array(ps),\n      colors: new Int32Array(ps),\n      verticesPerRow\n    });\n  }\n\n  var MIN_SPLIT_PATCH_CHUNKS_AMOUNT = 3;\n  var MAX_SPLIT_PATCH_CHUNKS_AMOUNT = 20;\n  var TRIANGLE_DENSITY = 20;\n\n  var getB = function getBClosure() {\n    function buildB(count) {\n      var lut = [];\n\n      for (var i = 0; i <= count; i++) {\n        var t = i / count,\n            t_ = 1 - t;\n        lut.push(new Float32Array([t_ * t_ * t_, 3 * t * t_ * t_, 3 * t * t * t_, t * t * t]));\n      }\n\n      return lut;\n    }\n\n    var cache = [];\n    return function getB(count) {\n      if (!cache[count]) {\n        cache[count] = buildB(count);\n      }\n\n      return cache[count];\n    };\n  }();\n\n  function buildFigureFromPatch(mesh, index) {\n    var figure = mesh.figures[index];\n    (0, _util.assert)(figure.type === \"patch\", \"Unexpected patch mesh figure\");\n    var coords = mesh.coords,\n        colors = mesh.colors;\n    var pi = figure.coords;\n    var ci = figure.colors;\n    var figureMinX = Math.min(coords[pi[0]][0], coords[pi[3]][0], coords[pi[12]][0], coords[pi[15]][0]);\n    var figureMinY = Math.min(coords[pi[0]][1], coords[pi[3]][1], coords[pi[12]][1], coords[pi[15]][1]);\n    var figureMaxX = Math.max(coords[pi[0]][0], coords[pi[3]][0], coords[pi[12]][0], coords[pi[15]][0]);\n    var figureMaxY = Math.max(coords[pi[0]][1], coords[pi[3]][1], coords[pi[12]][1], coords[pi[15]][1]);\n    var splitXBy = Math.ceil((figureMaxX - figureMinX) * TRIANGLE_DENSITY / (mesh.bounds[2] - mesh.bounds[0]));\n    splitXBy = Math.max(MIN_SPLIT_PATCH_CHUNKS_AMOUNT, Math.min(MAX_SPLIT_PATCH_CHUNKS_AMOUNT, splitXBy));\n    var splitYBy = Math.ceil((figureMaxY - figureMinY) * TRIANGLE_DENSITY / (mesh.bounds[3] - mesh.bounds[1]));\n    splitYBy = Math.max(MIN_SPLIT_PATCH_CHUNKS_AMOUNT, Math.min(MAX_SPLIT_PATCH_CHUNKS_AMOUNT, splitYBy));\n    var verticesPerRow = splitXBy + 1;\n    var figureCoords = new Int32Array((splitYBy + 1) * verticesPerRow);\n    var figureColors = new Int32Array((splitYBy + 1) * verticesPerRow);\n    var k = 0;\n    var cl = new Uint8Array(3),\n        cr = new Uint8Array(3);\n    var c0 = colors[ci[0]],\n        c1 = colors[ci[1]],\n        c2 = colors[ci[2]],\n        c3 = colors[ci[3]];\n    var bRow = getB(splitYBy),\n        bCol = getB(splitXBy);\n\n    for (var row = 0; row <= splitYBy; row++) {\n      cl[0] = (c0[0] * (splitYBy - row) + c2[0] * row) / splitYBy | 0;\n      cl[1] = (c0[1] * (splitYBy - row) + c2[1] * row) / splitYBy | 0;\n      cl[2] = (c0[2] * (splitYBy - row) + c2[2] * row) / splitYBy | 0;\n      cr[0] = (c1[0] * (splitYBy - row) + c3[0] * row) / splitYBy | 0;\n      cr[1] = (c1[1] * (splitYBy - row) + c3[1] * row) / splitYBy | 0;\n      cr[2] = (c1[2] * (splitYBy - row) + c3[2] * row) / splitYBy | 0;\n\n      for (var col = 0; col <= splitXBy; col++, k++) {\n        if ((row === 0 || row === splitYBy) && (col === 0 || col === splitXBy)) {\n          continue;\n        }\n\n        var x = 0,\n            y = 0;\n        var q = 0;\n\n        for (var i = 0; i <= 3; i++) {\n          for (var j = 0; j <= 3; j++, q++) {\n            var m = bRow[row][i] * bCol[col][j];\n            x += coords[pi[q]][0] * m;\n            y += coords[pi[q]][1] * m;\n          }\n        }\n\n        figureCoords[k] = coords.length;\n        coords.push([x, y]);\n        figureColors[k] = colors.length;\n        var newColor = new Uint8Array(3);\n        newColor[0] = (cl[0] * (splitXBy - col) + cr[0] * col) / splitXBy | 0;\n        newColor[1] = (cl[1] * (splitXBy - col) + cr[1] * col) / splitXBy | 0;\n        newColor[2] = (cl[2] * (splitXBy - col) + cr[2] * col) / splitXBy | 0;\n        colors.push(newColor);\n      }\n    }\n\n    figureCoords[0] = pi[0];\n    figureColors[0] = ci[0];\n    figureCoords[splitXBy] = pi[3];\n    figureColors[splitXBy] = ci[1];\n    figureCoords[verticesPerRow * splitYBy] = pi[12];\n    figureColors[verticesPerRow * splitYBy] = ci[2];\n    figureCoords[verticesPerRow * splitYBy + splitXBy] = pi[15];\n    figureColors[verticesPerRow * splitYBy + splitXBy] = ci[3];\n    mesh.figures[index] = {\n      type: \"lattice\",\n      coords: figureCoords,\n      colors: figureColors,\n      verticesPerRow\n    };\n  }\n\n  function decodeType6Shading(mesh, reader) {\n    var coords = mesh.coords;\n    var colors = mesh.colors;\n    var ps = new Int32Array(16);\n    var cs = new Int32Array(4);\n\n    while (reader.hasData) {\n      var f = reader.readFlag();\n\n      if (!(0 <= f && f <= 3)) {\n        throw new _util.FormatError(\"Unknown type6 flag\");\n      }\n\n      var i, ii;\n      var pi = coords.length;\n\n      for (i = 0, ii = f !== 0 ? 8 : 12; i < ii; i++) {\n        coords.push(reader.readCoordinate());\n      }\n\n      var ci = colors.length;\n\n      for (i = 0, ii = f !== 0 ? 2 : 4; i < ii; i++) {\n        colors.push(reader.readComponents());\n      }\n\n      var tmp1, tmp2, tmp3, tmp4;\n\n      switch (f) {\n        case 0:\n          ps[12] = pi + 3;\n          ps[13] = pi + 4;\n          ps[14] = pi + 5;\n          ps[15] = pi + 6;\n          ps[8] = pi + 2;\n          ps[11] = pi + 7;\n          ps[4] = pi + 1;\n          ps[7] = pi + 8;\n          ps[0] = pi;\n          ps[1] = pi + 11;\n          ps[2] = pi + 10;\n          ps[3] = pi + 9;\n          cs[2] = ci + 1;\n          cs[3] = ci + 2;\n          cs[0] = ci;\n          cs[1] = ci + 3;\n          break;\n\n        case 1:\n          tmp1 = ps[12];\n          tmp2 = ps[13];\n          tmp3 = ps[14];\n          tmp4 = ps[15];\n          ps[12] = tmp4;\n          ps[13] = pi + 0;\n          ps[14] = pi + 1;\n          ps[15] = pi + 2;\n          ps[8] = tmp3;\n          ps[11] = pi + 3;\n          ps[4] = tmp2;\n          ps[7] = pi + 4;\n          ps[0] = tmp1;\n          ps[1] = pi + 7;\n          ps[2] = pi + 6;\n          ps[3] = pi + 5;\n          tmp1 = cs[2];\n          tmp2 = cs[3];\n          cs[2] = tmp2;\n          cs[3] = ci;\n          cs[0] = tmp1;\n          cs[1] = ci + 1;\n          break;\n\n        case 2:\n          tmp1 = ps[15];\n          tmp2 = ps[11];\n          ps[12] = ps[3];\n          ps[13] = pi + 0;\n          ps[14] = pi + 1;\n          ps[15] = pi + 2;\n          ps[8] = ps[7];\n          ps[11] = pi + 3;\n          ps[4] = tmp2;\n          ps[7] = pi + 4;\n          ps[0] = tmp1;\n          ps[1] = pi + 7;\n          ps[2] = pi + 6;\n          ps[3] = pi + 5;\n          tmp1 = cs[3];\n          cs[2] = cs[1];\n          cs[3] = ci;\n          cs[0] = tmp1;\n          cs[1] = ci + 1;\n          break;\n\n        case 3:\n          ps[12] = ps[0];\n          ps[13] = pi + 0;\n          ps[14] = pi + 1;\n          ps[15] = pi + 2;\n          ps[8] = ps[1];\n          ps[11] = pi + 3;\n          ps[4] = ps[2];\n          ps[7] = pi + 4;\n          ps[0] = ps[3];\n          ps[1] = pi + 7;\n          ps[2] = pi + 6;\n          ps[3] = pi + 5;\n          cs[2] = cs[0];\n          cs[3] = ci;\n          cs[0] = cs[1];\n          cs[1] = ci + 1;\n          break;\n      }\n\n      ps[5] = coords.length;\n      coords.push([(-4 * coords[ps[0]][0] - coords[ps[15]][0] + 6 * (coords[ps[4]][0] + coords[ps[1]][0]) - 2 * (coords[ps[12]][0] + coords[ps[3]][0]) + 3 * (coords[ps[13]][0] + coords[ps[7]][0])) / 9, (-4 * coords[ps[0]][1] - coords[ps[15]][1] + 6 * (coords[ps[4]][1] + coords[ps[1]][1]) - 2 * (coords[ps[12]][1] + coords[ps[3]][1]) + 3 * (coords[ps[13]][1] + coords[ps[7]][1])) / 9]);\n      ps[6] = coords.length;\n      coords.push([(-4 * coords[ps[3]][0] - coords[ps[12]][0] + 6 * (coords[ps[2]][0] + coords[ps[7]][0]) - 2 * (coords[ps[0]][0] + coords[ps[15]][0]) + 3 * (coords[ps[4]][0] + coords[ps[14]][0])) / 9, (-4 * coords[ps[3]][1] - coords[ps[12]][1] + 6 * (coords[ps[2]][1] + coords[ps[7]][1]) - 2 * (coords[ps[0]][1] + coords[ps[15]][1]) + 3 * (coords[ps[4]][1] + coords[ps[14]][1])) / 9]);\n      ps[9] = coords.length;\n      coords.push([(-4 * coords[ps[12]][0] - coords[ps[3]][0] + 6 * (coords[ps[8]][0] + coords[ps[13]][0]) - 2 * (coords[ps[0]][0] + coords[ps[15]][0]) + 3 * (coords[ps[11]][0] + coords[ps[1]][0])) / 9, (-4 * coords[ps[12]][1] - coords[ps[3]][1] + 6 * (coords[ps[8]][1] + coords[ps[13]][1]) - 2 * (coords[ps[0]][1] + coords[ps[15]][1]) + 3 * (coords[ps[11]][1] + coords[ps[1]][1])) / 9]);\n      ps[10] = coords.length;\n      coords.push([(-4 * coords[ps[15]][0] - coords[ps[0]][0] + 6 * (coords[ps[11]][0] + coords[ps[14]][0]) - 2 * (coords[ps[12]][0] + coords[ps[3]][0]) + 3 * (coords[ps[2]][0] + coords[ps[8]][0])) / 9, (-4 * coords[ps[15]][1] - coords[ps[0]][1] + 6 * (coords[ps[11]][1] + coords[ps[14]][1]) - 2 * (coords[ps[12]][1] + coords[ps[3]][1]) + 3 * (coords[ps[2]][1] + coords[ps[8]][1])) / 9]);\n      mesh.figures.push({\n        type: \"patch\",\n        coords: new Int32Array(ps),\n        colors: new Int32Array(cs)\n      });\n    }\n  }\n\n  function decodeType7Shading(mesh, reader) {\n    var coords = mesh.coords;\n    var colors = mesh.colors;\n    var ps = new Int32Array(16);\n    var cs = new Int32Array(4);\n\n    while (reader.hasData) {\n      var f = reader.readFlag();\n\n      if (!(0 <= f && f <= 3)) {\n        throw new _util.FormatError(\"Unknown type7 flag\");\n      }\n\n      var i, ii;\n      var pi = coords.length;\n\n      for (i = 0, ii = f !== 0 ? 12 : 16; i < ii; i++) {\n        coords.push(reader.readCoordinate());\n      }\n\n      var ci = colors.length;\n\n      for (i = 0, ii = f !== 0 ? 2 : 4; i < ii; i++) {\n        colors.push(reader.readComponents());\n      }\n\n      var tmp1, tmp2, tmp3, tmp4;\n\n      switch (f) {\n        case 0:\n          ps[12] = pi + 3;\n          ps[13] = pi + 4;\n          ps[14] = pi + 5;\n          ps[15] = pi + 6;\n          ps[8] = pi + 2;\n          ps[9] = pi + 13;\n          ps[10] = pi + 14;\n          ps[11] = pi + 7;\n          ps[4] = pi + 1;\n          ps[5] = pi + 12;\n          ps[6] = pi + 15;\n          ps[7] = pi + 8;\n          ps[0] = pi;\n          ps[1] = pi + 11;\n          ps[2] = pi + 10;\n          ps[3] = pi + 9;\n          cs[2] = ci + 1;\n          cs[3] = ci + 2;\n          cs[0] = ci;\n          cs[1] = ci + 3;\n          break;\n\n        case 1:\n          tmp1 = ps[12];\n          tmp2 = ps[13];\n          tmp3 = ps[14];\n          tmp4 = ps[15];\n          ps[12] = tmp4;\n          ps[13] = pi + 0;\n          ps[14] = pi + 1;\n          ps[15] = pi + 2;\n          ps[8] = tmp3;\n          ps[9] = pi + 9;\n          ps[10] = pi + 10;\n          ps[11] = pi + 3;\n          ps[4] = tmp2;\n          ps[5] = pi + 8;\n          ps[6] = pi + 11;\n          ps[7] = pi + 4;\n          ps[0] = tmp1;\n          ps[1] = pi + 7;\n          ps[2] = pi + 6;\n          ps[3] = pi + 5;\n          tmp1 = cs[2];\n          tmp2 = cs[3];\n          cs[2] = tmp2;\n          cs[3] = ci;\n          cs[0] = tmp1;\n          cs[1] = ci + 1;\n          break;\n\n        case 2:\n          tmp1 = ps[15];\n          tmp2 = ps[11];\n          ps[12] = ps[3];\n          ps[13] = pi + 0;\n          ps[14] = pi + 1;\n          ps[15] = pi + 2;\n          ps[8] = ps[7];\n          ps[9] = pi + 9;\n          ps[10] = pi + 10;\n          ps[11] = pi + 3;\n          ps[4] = tmp2;\n          ps[5] = pi + 8;\n          ps[6] = pi + 11;\n          ps[7] = pi + 4;\n          ps[0] = tmp1;\n          ps[1] = pi + 7;\n          ps[2] = pi + 6;\n          ps[3] = pi + 5;\n          tmp1 = cs[3];\n          cs[2] = cs[1];\n          cs[3] = ci;\n          cs[0] = tmp1;\n          cs[1] = ci + 1;\n          break;\n\n        case 3:\n          ps[12] = ps[0];\n          ps[13] = pi + 0;\n          ps[14] = pi + 1;\n          ps[15] = pi + 2;\n          ps[8] = ps[1];\n          ps[9] = pi + 9;\n          ps[10] = pi + 10;\n          ps[11] = pi + 3;\n          ps[4] = ps[2];\n          ps[5] = pi + 8;\n          ps[6] = pi + 11;\n          ps[7] = pi + 4;\n          ps[0] = ps[3];\n          ps[1] = pi + 7;\n          ps[2] = pi + 6;\n          ps[3] = pi + 5;\n          cs[2] = cs[0];\n          cs[3] = ci;\n          cs[0] = cs[1];\n          cs[1] = ci + 1;\n          break;\n      }\n\n      mesh.figures.push({\n        type: \"patch\",\n        coords: new Int32Array(ps),\n        colors: new Int32Array(cs)\n      });\n    }\n  }\n\n  function updateBounds(mesh) {\n    var minX = mesh.coords[0][0],\n        minY = mesh.coords[0][1],\n        maxX = minX,\n        maxY = minY;\n\n    for (var i = 1, ii = mesh.coords.length; i < ii; i++) {\n      var x = mesh.coords[i][0],\n          y = mesh.coords[i][1];\n      minX = minX > x ? x : minX;\n      minY = minY > y ? y : minY;\n      maxX = maxX < x ? x : maxX;\n      maxY = maxY < y ? y : maxY;\n    }\n\n    mesh.bounds = [minX, minY, maxX, maxY];\n  }\n\n  function packData(mesh) {\n    var i, ii, j, jj;\n    var coords = mesh.coords;\n    var coordsPacked = new Float32Array(coords.length * 2);\n\n    for (i = 0, j = 0, ii = coords.length; i < ii; i++) {\n      var xy = coords[i];\n      coordsPacked[j++] = xy[0];\n      coordsPacked[j++] = xy[1];\n    }\n\n    mesh.coords = coordsPacked;\n    var colors = mesh.colors;\n    var colorsPacked = new Uint8Array(colors.length * 3);\n\n    for (i = 0, j = 0, ii = colors.length; i < ii; i++) {\n      var c = colors[i];\n      colorsPacked[j++] = c[0];\n      colorsPacked[j++] = c[1];\n      colorsPacked[j++] = c[2];\n    }\n\n    mesh.colors = colorsPacked;\n    var figures = mesh.figures;\n\n    for (i = 0, ii = figures.length; i < ii; i++) {\n      var figure = figures[i],\n          ps = figure.coords,\n          cs = figure.colors;\n\n      for (j = 0, jj = ps.length; j < jj; j++) {\n        ps[j] *= 2;\n        cs[j] *= 3;\n      }\n    }\n  }\n\n  function Mesh(stream, matrix, xref, resources, pdfFunctionFactory, localColorSpaceCache) {\n    if (!(0, _primitives.isStream)(stream)) {\n      throw new _util.FormatError(\"Mesh data is not a stream\");\n    }\n\n    var dict = stream.dict;\n    this.matrix = matrix;\n    this.shadingType = dict.get(\"ShadingType\");\n    this.type = \"Pattern\";\n    const bbox = dict.getArray(\"BBox\");\n\n    if (Array.isArray(bbox) && bbox.length === 4) {\n      this.bbox = _util.Util.normalizeRect(bbox);\n    } else {\n      this.bbox = null;\n    }\n\n    const cs = _colorspace.ColorSpace.parse({\n      cs: dict.getRaw(\"ColorSpace\") || dict.getRaw(\"CS\"),\n      xref,\n      resources,\n      pdfFunctionFactory,\n      localColorSpaceCache\n    });\n\n    this.cs = cs;\n    this.background = dict.has(\"Background\") ? cs.getRgb(dict.get(\"Background\"), 0) : null;\n    var fnObj = dict.getRaw(\"Function\");\n    var fn = fnObj ? pdfFunctionFactory.createFromArray(fnObj) : null;\n    this.coords = [];\n    this.colors = [];\n    this.figures = [];\n    var decodeContext = {\n      bitsPerCoordinate: dict.get(\"BitsPerCoordinate\"),\n      bitsPerComponent: dict.get(\"BitsPerComponent\"),\n      bitsPerFlag: dict.get(\"BitsPerFlag\"),\n      decode: dict.getArray(\"Decode\"),\n      colorFn: fn,\n      colorSpace: cs,\n      numComps: fn ? 1 : cs.numComps\n    };\n    var reader = new MeshStreamReader(stream, decodeContext);\n    var patchMesh = false;\n\n    switch (this.shadingType) {\n      case ShadingType.FREE_FORM_MESH:\n        decodeType4Shading(this, reader);\n        break;\n\n      case ShadingType.LATTICE_FORM_MESH:\n        var verticesPerRow = dict.get(\"VerticesPerRow\") | 0;\n\n        if (verticesPerRow < 2) {\n          throw new _util.FormatError(\"Invalid VerticesPerRow\");\n        }\n\n        decodeType5Shading(this, reader, verticesPerRow);\n        break;\n\n      case ShadingType.COONS_PATCH_MESH:\n        decodeType6Shading(this, reader);\n        patchMesh = true;\n        break;\n\n      case ShadingType.TENSOR_PATCH_MESH:\n        decodeType7Shading(this, reader);\n        patchMesh = true;\n        break;\n\n      default:\n        (0, _util.unreachable)(\"Unsupported mesh type.\");\n        break;\n    }\n\n    if (patchMesh) {\n      updateBounds(this);\n\n      for (var i = 0, ii = this.figures.length; i < ii; i++) {\n        buildFigureFromPatch(this, i);\n      }\n    }\n\n    updateBounds(this);\n    packData(this);\n  }\n\n  Mesh.prototype = {\n    getIR: function Mesh_getIR() {\n      return [\"Mesh\", this.shadingType, this.coords, this.colors, this.figures, this.bounds, this.matrix, this.bbox, this.background];\n    }\n  };\n  return Mesh;\n}();\n\nShadings.Dummy = function DummyClosure() {\n  function Dummy() {\n    this.type = \"Pattern\";\n  }\n\n  Dummy.prototype = {\n    getIR: function Dummy_getIR() {\n      return [\"Dummy\"];\n    }\n  };\n  return Dummy;\n}();\n\nfunction getTilingPatternIR(operatorList, dict, color) {\n  const matrix = dict.getArray(\"Matrix\");\n\n  const bbox = _util.Util.normalizeRect(dict.getArray(\"BBox\"));\n\n  const xstep = dict.get(\"XStep\");\n  const ystep = dict.get(\"YStep\");\n  const paintType = dict.get(\"PaintType\");\n  const tilingType = dict.get(\"TilingType\");\n\n  if (bbox[2] - bbox[0] === 0 || bbox[3] - bbox[1] === 0) {\n    throw new _util.FormatError(`Invalid getTilingPatternIR /BBox array: [${bbox}].`);\n  }\n\n  return [\"TilingPattern\", color, operatorList, matrix, bbox, xstep, ystep, paintType, tilingType];\n}\n\n/***/ }),\n/* 39 */\n/***/ ((__unused_webpack_module, exports, __w_pdfjs_require__) => {\n\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.isPDFFunction = isPDFFunction;\nexports.PostScriptEvaluator = exports.PostScriptCompiler = exports.PDFFunctionFactory = void 0;\n\nvar _primitives = __w_pdfjs_require__(5);\n\nvar _util = __w_pdfjs_require__(2);\n\nvar _ps_parser = __w_pdfjs_require__(40);\n\nvar _image_utils = __w_pdfjs_require__(24);\n\nclass PDFFunctionFactory {\n  constructor({\n    xref,\n    isEvalSupported = true\n  }) {\n    this.xref = xref;\n    this.isEvalSupported = isEvalSupported !== false;\n  }\n\n  create(fn) {\n    const cachedFunction = this.getCached(fn);\n\n    if (cachedFunction) {\n      return cachedFunction;\n    }\n\n    const parsedFunction = PDFFunction.parse({\n      xref: this.xref,\n      isEvalSupported: this.isEvalSupported,\n      fn: fn instanceof _primitives.Ref ? this.xref.fetch(fn) : fn\n    });\n\n    this._cache(fn, parsedFunction);\n\n    return parsedFunction;\n  }\n\n  createFromArray(fnObj) {\n    const cachedFunction = this.getCached(fnObj);\n\n    if (cachedFunction) {\n      return cachedFunction;\n    }\n\n    const parsedFunction = PDFFunction.parseArray({\n      xref: this.xref,\n      isEvalSupported: this.isEvalSupported,\n      fnObj: fnObj instanceof _primitives.Ref ? this.xref.fetch(fnObj) : fnObj\n    });\n\n    this._cache(fnObj, parsedFunction);\n\n    return parsedFunction;\n  }\n\n  getCached(cacheKey) {\n    let fnRef;\n\n    if (cacheKey instanceof _primitives.Ref) {\n      fnRef = cacheKey;\n    } else if (cacheKey instanceof _primitives.Dict) {\n      fnRef = cacheKey.objId;\n    } else if ((0, _primitives.isStream)(cacheKey)) {\n      fnRef = cacheKey.dict && cacheKey.dict.objId;\n    }\n\n    if (fnRef) {\n      const localFunction = this._localFunctionCache.getByRef(fnRef);\n\n      if (localFunction) {\n        return localFunction;\n      }\n    }\n\n    return null;\n  }\n\n  _cache(cacheKey, parsedFunction) {\n    if (!parsedFunction) {\n      throw new Error('PDFFunctionFactory._cache - expected \"parsedFunction\" argument.');\n    }\n\n    let fnRef;\n\n    if (cacheKey instanceof _primitives.Ref) {\n      fnRef = cacheKey;\n    } else if (cacheKey instanceof _primitives.Dict) {\n      fnRef = cacheKey.objId;\n    } else if ((0, _primitives.isStream)(cacheKey)) {\n      fnRef = cacheKey.dict && cacheKey.dict.objId;\n    }\n\n    if (fnRef) {\n      this._localFunctionCache.set(null, fnRef, parsedFunction);\n    }\n  }\n\n  get _localFunctionCache() {\n    return (0, _util.shadow)(this, \"_localFunctionCache\", new _image_utils.LocalFunctionCache());\n  }\n\n}\n\nexports.PDFFunctionFactory = PDFFunctionFactory;\n\nfunction toNumberArray(arr) {\n  if (!Array.isArray(arr)) {\n    return null;\n  }\n\n  const length = arr.length;\n\n  for (let i = 0; i < length; i++) {\n    if (typeof arr[i] !== \"number\") {\n      const result = new Array(length);\n\n      for (let j = 0; j < length; j++) {\n        result[j] = +arr[j];\n      }\n\n      return result;\n    }\n  }\n\n  return arr;\n}\n\nvar PDFFunction = function PDFFunctionClosure() {\n  const CONSTRUCT_SAMPLED = 0;\n  const CONSTRUCT_INTERPOLATED = 2;\n  const CONSTRUCT_STICHED = 3;\n  const CONSTRUCT_POSTSCRIPT = 4;\n  return {\n    getSampleArray(size, outputSize, bps, stream) {\n      var i, ii;\n      var length = 1;\n\n      for (i = 0, ii = size.length; i < ii; i++) {\n        length *= size[i];\n      }\n\n      length *= outputSize;\n      var array = new Array(length);\n      var codeSize = 0;\n      var codeBuf = 0;\n      var sampleMul = 1.0 / (2.0 ** bps - 1);\n      var strBytes = stream.getBytes((length * bps + 7) / 8);\n      var strIdx = 0;\n\n      for (i = 0; i < length; i++) {\n        while (codeSize < bps) {\n          codeBuf <<= 8;\n          codeBuf |= strBytes[strIdx++];\n          codeSize += 8;\n        }\n\n        codeSize -= bps;\n        array[i] = (codeBuf >> codeSize) * sampleMul;\n        codeBuf &= (1 << codeSize) - 1;\n      }\n\n      return array;\n    },\n\n    getIR({\n      xref,\n      isEvalSupported,\n      fn\n    }) {\n      var dict = fn.dict;\n\n      if (!dict) {\n        dict = fn;\n      }\n\n      var types = [this.constructSampled, null, this.constructInterpolated, this.constructStiched, this.constructPostScript];\n      var typeNum = dict.get(\"FunctionType\");\n      var typeFn = types[typeNum];\n\n      if (!typeFn) {\n        throw new _util.FormatError(\"Unknown type of function\");\n      }\n\n      return typeFn.call(this, {\n        xref,\n        isEvalSupported,\n        fn,\n        dict\n      });\n    },\n\n    fromIR({\n      xref,\n      isEvalSupported,\n      IR\n    }) {\n      var type = IR[0];\n\n      switch (type) {\n        case CONSTRUCT_SAMPLED:\n          return this.constructSampledFromIR({\n            xref,\n            isEvalSupported,\n            IR\n          });\n\n        case CONSTRUCT_INTERPOLATED:\n          return this.constructInterpolatedFromIR({\n            xref,\n            isEvalSupported,\n            IR\n          });\n\n        case CONSTRUCT_STICHED:\n          return this.constructStichedFromIR({\n            xref,\n            isEvalSupported,\n            IR\n          });\n\n        default:\n          return this.constructPostScriptFromIR({\n            xref,\n            isEvalSupported,\n            IR\n          });\n      }\n    },\n\n    parse({\n      xref,\n      isEvalSupported,\n      fn\n    }) {\n      const IR = this.getIR({\n        xref,\n        isEvalSupported,\n        fn\n      });\n      return this.fromIR({\n        xref,\n        isEvalSupported,\n        IR\n      });\n    },\n\n    parseArray({\n      xref,\n      isEvalSupported,\n      fnObj\n    }) {\n      if (!Array.isArray(fnObj)) {\n        return this.parse({\n          xref,\n          isEvalSupported,\n          fn: fnObj\n        });\n      }\n\n      var fnArray = [];\n\n      for (var j = 0, jj = fnObj.length; j < jj; j++) {\n        fnArray.push(this.parse({\n          xref,\n          isEvalSupported,\n          fn: xref.fetchIfRef(fnObj[j])\n        }));\n      }\n\n      return function (src, srcOffset, dest, destOffset) {\n        for (var i = 0, ii = fnArray.length; i < ii; i++) {\n          fnArray[i](src, srcOffset, dest, destOffset + i);\n        }\n      };\n    },\n\n    constructSampled({\n      xref,\n      isEvalSupported,\n      fn,\n      dict\n    }) {\n      function toMultiArray(arr) {\n        var inputLength = arr.length;\n        var out = [];\n        var index = 0;\n\n        for (var i = 0; i < inputLength; i += 2) {\n          out[index] = [arr[i], arr[i + 1]];\n          ++index;\n        }\n\n        return out;\n      }\n\n      var domain = toNumberArray(dict.getArray(\"Domain\"));\n      var range = toNumberArray(dict.getArray(\"Range\"));\n\n      if (!domain || !range) {\n        throw new _util.FormatError(\"No domain or range\");\n      }\n\n      var inputSize = domain.length / 2;\n      var outputSize = range.length / 2;\n      domain = toMultiArray(domain);\n      range = toMultiArray(range);\n      var size = toNumberArray(dict.getArray(\"Size\"));\n      var bps = dict.get(\"BitsPerSample\");\n      var order = dict.get(\"Order\") || 1;\n\n      if (order !== 1) {\n        (0, _util.info)(\"No support for cubic spline interpolation: \" + order);\n      }\n\n      var encode = toNumberArray(dict.getArray(\"Encode\"));\n\n      if (!encode) {\n        encode = [];\n\n        for (var i = 0; i < inputSize; ++i) {\n          encode.push([0, size[i] - 1]);\n        }\n      } else {\n        encode = toMultiArray(encode);\n      }\n\n      var decode = toNumberArray(dict.getArray(\"Decode\"));\n\n      if (!decode) {\n        decode = range;\n      } else {\n        decode = toMultiArray(decode);\n      }\n\n      var samples = this.getSampleArray(size, outputSize, bps, fn);\n      return [CONSTRUCT_SAMPLED, inputSize, domain, encode, decode, samples, size, outputSize, 2 ** bps - 1, range];\n    },\n\n    constructSampledFromIR({\n      xref,\n      isEvalSupported,\n      IR\n    }) {\n      function interpolate(x, xmin, xmax, ymin, ymax) {\n        return ymin + (x - xmin) * ((ymax - ymin) / (xmax - xmin));\n      }\n\n      return function constructSampledFromIRResult(src, srcOffset, dest, destOffset) {\n        var m = IR[1];\n        var domain = IR[2];\n        var encode = IR[3];\n        var decode = IR[4];\n        var samples = IR[5];\n        var size = IR[6];\n        var n = IR[7];\n        var range = IR[9];\n        var cubeVertices = 1 << m;\n        var cubeN = new Float64Array(cubeVertices);\n        var cubeVertex = new Uint32Array(cubeVertices);\n        var i, j;\n\n        for (j = 0; j < cubeVertices; j++) {\n          cubeN[j] = 1;\n        }\n\n        var k = n,\n            pos = 1;\n\n        for (i = 0; i < m; ++i) {\n          var domain_2i = domain[i][0];\n          var domain_2i_1 = domain[i][1];\n          var xi = Math.min(Math.max(src[srcOffset + i], domain_2i), domain_2i_1);\n          var e = interpolate(xi, domain_2i, domain_2i_1, encode[i][0], encode[i][1]);\n          var size_i = size[i];\n          e = Math.min(Math.max(e, 0), size_i - 1);\n          var e0 = e < size_i - 1 ? Math.floor(e) : e - 1;\n          var n0 = e0 + 1 - e;\n          var n1 = e - e0;\n          var offset0 = e0 * k;\n          var offset1 = offset0 + k;\n\n          for (j = 0; j < cubeVertices; j++) {\n            if (j & pos) {\n              cubeN[j] *= n1;\n              cubeVertex[j] += offset1;\n            } else {\n              cubeN[j] *= n0;\n              cubeVertex[j] += offset0;\n            }\n          }\n\n          k *= size_i;\n          pos <<= 1;\n        }\n\n        for (j = 0; j < n; ++j) {\n          var rj = 0;\n\n          for (i = 0; i < cubeVertices; i++) {\n            rj += samples[cubeVertex[i] + j] * cubeN[i];\n          }\n\n          rj = interpolate(rj, 0, 1, decode[j][0], decode[j][1]);\n          dest[destOffset + j] = Math.min(Math.max(rj, range[j][0]), range[j][1]);\n        }\n      };\n    },\n\n    constructInterpolated({\n      xref,\n      isEvalSupported,\n      fn,\n      dict\n    }) {\n      var c0 = toNumberArray(dict.getArray(\"C0\")) || [0];\n      var c1 = toNumberArray(dict.getArray(\"C1\")) || [1];\n      var n = dict.get(\"N\");\n      var length = c0.length;\n      var diff = [];\n\n      for (var i = 0; i < length; ++i) {\n        diff.push(c1[i] - c0[i]);\n      }\n\n      return [CONSTRUCT_INTERPOLATED, c0, diff, n];\n    },\n\n    constructInterpolatedFromIR({\n      xref,\n      isEvalSupported,\n      IR\n    }) {\n      var c0 = IR[1];\n      var diff = IR[2];\n      var n = IR[3];\n      var length = diff.length;\n      return function constructInterpolatedFromIRResult(src, srcOffset, dest, destOffset) {\n        var x = n === 1 ? src[srcOffset] : src[srcOffset] ** n;\n\n        for (var j = 0; j < length; ++j) {\n          dest[destOffset + j] = c0[j] + x * diff[j];\n        }\n      };\n    },\n\n    constructStiched({\n      xref,\n      isEvalSupported,\n      fn,\n      dict\n    }) {\n      var domain = toNumberArray(dict.getArray(\"Domain\"));\n\n      if (!domain) {\n        throw new _util.FormatError(\"No domain\");\n      }\n\n      var inputSize = domain.length / 2;\n\n      if (inputSize !== 1) {\n        throw new _util.FormatError(\"Bad domain for stiched function\");\n      }\n\n      var fnRefs = dict.get(\"Functions\");\n      var fns = [];\n\n      for (var i = 0, ii = fnRefs.length; i < ii; ++i) {\n        fns.push(this.parse({\n          xref,\n          isEvalSupported,\n          fn: xref.fetchIfRef(fnRefs[i])\n        }));\n      }\n\n      var bounds = toNumberArray(dict.getArray(\"Bounds\"));\n      var encode = toNumberArray(dict.getArray(\"Encode\"));\n      return [CONSTRUCT_STICHED, domain, bounds, encode, fns];\n    },\n\n    constructStichedFromIR({\n      xref,\n      isEvalSupported,\n      IR\n    }) {\n      var domain = IR[1];\n      var bounds = IR[2];\n      var encode = IR[3];\n      var fns = IR[4];\n      var tmpBuf = new Float32Array(1);\n      return function constructStichedFromIRResult(src, srcOffset, dest, destOffset) {\n        var clip = function constructStichedFromIRClip(v, min, max) {\n          if (v > max) {\n            v = max;\n          } else if (v < min) {\n            v = min;\n          }\n\n          return v;\n        };\n\n        var v = clip(src[srcOffset], domain[0], domain[1]);\n\n        for (var i = 0, ii = bounds.length; i < ii; ++i) {\n          if (v < bounds[i]) {\n            break;\n          }\n        }\n\n        var dmin = domain[0];\n\n        if (i > 0) {\n          dmin = bounds[i - 1];\n        }\n\n        var dmax = domain[1];\n\n        if (i < bounds.length) {\n          dmax = bounds[i];\n        }\n\n        var rmin = encode[2 * i];\n        var rmax = encode[2 * i + 1];\n        tmpBuf[0] = dmin === dmax ? rmin : rmin + (v - dmin) * (rmax - rmin) / (dmax - dmin);\n        fns[i](tmpBuf, 0, dest, destOffset);\n      };\n    },\n\n    constructPostScript({\n      xref,\n      isEvalSupported,\n      fn,\n      dict\n    }) {\n      var domain = toNumberArray(dict.getArray(\"Domain\"));\n      var range = toNumberArray(dict.getArray(\"Range\"));\n\n      if (!domain) {\n        throw new _util.FormatError(\"No domain.\");\n      }\n\n      if (!range) {\n        throw new _util.FormatError(\"No range.\");\n      }\n\n      var lexer = new _ps_parser.PostScriptLexer(fn);\n      var parser = new _ps_parser.PostScriptParser(lexer);\n      var code = parser.parse();\n      return [CONSTRUCT_POSTSCRIPT, domain, range, code];\n    },\n\n    constructPostScriptFromIR({\n      xref,\n      isEvalSupported,\n      IR\n    }) {\n      var domain = IR[1];\n      var range = IR[2];\n      var code = IR[3];\n\n      if (isEvalSupported && _util.IsEvalSupportedCached.value) {\n        const compiled = new PostScriptCompiler().compile(code, domain, range);\n\n        if (compiled) {\n          return new Function(\"src\", \"srcOffset\", \"dest\", \"destOffset\", compiled);\n        }\n      }\n\n      (0, _util.info)(\"Unable to compile PS function\");\n      var numOutputs = range.length >> 1;\n      var numInputs = domain.length >> 1;\n      var evaluator = new PostScriptEvaluator(code);\n      var cache = Object.create(null);\n      var MAX_CACHE_SIZE = 2048 * 4;\n      var cache_available = MAX_CACHE_SIZE;\n      var tmpBuf = new Float32Array(numInputs);\n      return function constructPostScriptFromIRResult(src, srcOffset, dest, destOffset) {\n        var i, value;\n        var key = \"\";\n        var input = tmpBuf;\n\n        for (i = 0; i < numInputs; i++) {\n          value = src[srcOffset + i];\n          input[i] = value;\n          key += value + \"_\";\n        }\n\n        var cachedValue = cache[key];\n\n        if (cachedValue !== undefined) {\n          dest.set(cachedValue, destOffset);\n          return;\n        }\n\n        var output = new Float32Array(numOutputs);\n        var stack = evaluator.execute(input);\n        var stackIndex = stack.length - numOutputs;\n\n        for (i = 0; i < numOutputs; i++) {\n          value = stack[stackIndex + i];\n          var bound = range[i * 2];\n\n          if (value < bound) {\n            value = bound;\n          } else {\n            bound = range[i * 2 + 1];\n\n            if (value > bound) {\n              value = bound;\n            }\n          }\n\n          output[i] = value;\n        }\n\n        if (cache_available > 0) {\n          cache_available--;\n          cache[key] = output;\n        }\n\n        dest.set(output, destOffset);\n      };\n    }\n\n  };\n}();\n\nfunction isPDFFunction(v) {\n  var fnDict;\n\n  if (typeof v !== \"object\") {\n    return false;\n  } else if ((0, _primitives.isDict)(v)) {\n    fnDict = v;\n  } else if ((0, _primitives.isStream)(v)) {\n    fnDict = v.dict;\n  } else {\n    return false;\n  }\n\n  return fnDict.has(\"FunctionType\");\n}\n\nvar PostScriptStack = function PostScriptStackClosure() {\n  var MAX_STACK_SIZE = 100;\n\n  function PostScriptStack(initialStack) {\n    this.stack = !initialStack ? [] : Array.prototype.slice.call(initialStack, 0);\n  }\n\n  PostScriptStack.prototype = {\n    push: function PostScriptStack_push(value) {\n      if (this.stack.length >= MAX_STACK_SIZE) {\n        throw new Error(\"PostScript function stack overflow.\");\n      }\n\n      this.stack.push(value);\n    },\n    pop: function PostScriptStack_pop() {\n      if (this.stack.length <= 0) {\n        throw new Error(\"PostScript function stack underflow.\");\n      }\n\n      return this.stack.pop();\n    },\n    copy: function PostScriptStack_copy(n) {\n      if (this.stack.length + n >= MAX_STACK_SIZE) {\n        throw new Error(\"PostScript function stack overflow.\");\n      }\n\n      var stack = this.stack;\n\n      for (var i = stack.length - n, j = n - 1; j >= 0; j--, i++) {\n        stack.push(stack[i]);\n      }\n    },\n    index: function PostScriptStack_index(n) {\n      this.push(this.stack[this.stack.length - n - 1]);\n    },\n    roll: function PostScriptStack_roll(n, p) {\n      var stack = this.stack;\n      var l = stack.length - n;\n      var r = stack.length - 1,\n          c = l + (p - Math.floor(p / n) * n),\n          i,\n          j,\n          t;\n\n      for (i = l, j = r; i < j; i++, j--) {\n        t = stack[i];\n        stack[i] = stack[j];\n        stack[j] = t;\n      }\n\n      for (i = l, j = c - 1; i < j; i++, j--) {\n        t = stack[i];\n        stack[i] = stack[j];\n        stack[j] = t;\n      }\n\n      for (i = c, j = r; i < j; i++, j--) {\n        t = stack[i];\n        stack[i] = stack[j];\n        stack[j] = t;\n      }\n    }\n  };\n  return PostScriptStack;\n}();\n\nvar PostScriptEvaluator = function PostScriptEvaluatorClosure() {\n  function PostScriptEvaluator(operators) {\n    this.operators = operators;\n  }\n\n  PostScriptEvaluator.prototype = {\n    execute: function PostScriptEvaluator_execute(initialStack) {\n      var stack = new PostScriptStack(initialStack);\n      var counter = 0;\n      var operators = this.operators;\n      var length = operators.length;\n      var operator, a, b;\n\n      while (counter < length) {\n        operator = operators[counter++];\n\n        if (typeof operator === \"number\") {\n          stack.push(operator);\n          continue;\n        }\n\n        switch (operator) {\n          case \"jz\":\n            b = stack.pop();\n            a = stack.pop();\n\n            if (!a) {\n              counter = b;\n            }\n\n            break;\n\n          case \"j\":\n            a = stack.pop();\n            counter = a;\n            break;\n\n          case \"abs\":\n            a = stack.pop();\n            stack.push(Math.abs(a));\n            break;\n\n          case \"add\":\n            b = stack.pop();\n            a = stack.pop();\n            stack.push(a + b);\n            break;\n\n          case \"and\":\n            b = stack.pop();\n            a = stack.pop();\n\n            if ((0, _util.isBool)(a) && (0, _util.isBool)(b)) {\n              stack.push(a && b);\n            } else {\n              stack.push(a & b);\n            }\n\n            break;\n\n          case \"atan\":\n            a = stack.pop();\n            stack.push(Math.atan(a));\n            break;\n\n          case \"bitshift\":\n            b = stack.pop();\n            a = stack.pop();\n\n            if (a > 0) {\n              stack.push(a << b);\n            } else {\n              stack.push(a >> b);\n            }\n\n            break;\n\n          case \"ceiling\":\n            a = stack.pop();\n            stack.push(Math.ceil(a));\n            break;\n\n          case \"copy\":\n            a = stack.pop();\n            stack.copy(a);\n            break;\n\n          case \"cos\":\n            a = stack.pop();\n            stack.push(Math.cos(a));\n            break;\n\n          case \"cvi\":\n            a = stack.pop() | 0;\n            stack.push(a);\n            break;\n\n          case \"cvr\":\n            break;\n\n          case \"div\":\n            b = stack.pop();\n            a = stack.pop();\n            stack.push(a / b);\n            break;\n\n          case \"dup\":\n            stack.copy(1);\n            break;\n\n          case \"eq\":\n            b = stack.pop();\n            a = stack.pop();\n            stack.push(a === b);\n            break;\n\n          case \"exch\":\n            stack.roll(2, 1);\n            break;\n\n          case \"exp\":\n            b = stack.pop();\n            a = stack.pop();\n            stack.push(a ** b);\n            break;\n\n          case \"false\":\n            stack.push(false);\n            break;\n\n          case \"floor\":\n            a = stack.pop();\n            stack.push(Math.floor(a));\n            break;\n\n          case \"ge\":\n            b = stack.pop();\n            a = stack.pop();\n            stack.push(a >= b);\n            break;\n\n          case \"gt\":\n            b = stack.pop();\n            a = stack.pop();\n            stack.push(a > b);\n            break;\n\n          case \"idiv\":\n            b = stack.pop();\n            a = stack.pop();\n            stack.push(a / b | 0);\n            break;\n\n          case \"index\":\n            a = stack.pop();\n            stack.index(a);\n            break;\n\n          case \"le\":\n            b = stack.pop();\n            a = stack.pop();\n            stack.push(a <= b);\n            break;\n\n          case \"ln\":\n            a = stack.pop();\n            stack.push(Math.log(a));\n            break;\n\n          case \"log\":\n            a = stack.pop();\n            stack.push(Math.log(a) / Math.LN10);\n            break;\n\n          case \"lt\":\n            b = stack.pop();\n            a = stack.pop();\n            stack.push(a < b);\n            break;\n\n          case \"mod\":\n            b = stack.pop();\n            a = stack.pop();\n            stack.push(a % b);\n            break;\n\n          case \"mul\":\n            b = stack.pop();\n            a = stack.pop();\n            stack.push(a * b);\n            break;\n\n          case \"ne\":\n            b = stack.pop();\n            a = stack.pop();\n            stack.push(a !== b);\n            break;\n\n          case \"neg\":\n            a = stack.pop();\n            stack.push(-a);\n            break;\n\n          case \"not\":\n            a = stack.pop();\n\n            if ((0, _util.isBool)(a)) {\n              stack.push(!a);\n            } else {\n              stack.push(~a);\n            }\n\n            break;\n\n          case \"or\":\n            b = stack.pop();\n            a = stack.pop();\n\n            if ((0, _util.isBool)(a) && (0, _util.isBool)(b)) {\n              stack.push(a || b);\n            } else {\n              stack.push(a | b);\n            }\n\n            break;\n\n          case \"pop\":\n            stack.pop();\n            break;\n\n          case \"roll\":\n            b = stack.pop();\n            a = stack.pop();\n            stack.roll(a, b);\n            break;\n\n          case \"round\":\n            a = stack.pop();\n            stack.push(Math.round(a));\n            break;\n\n          case \"sin\":\n            a = stack.pop();\n            stack.push(Math.sin(a));\n            break;\n\n          case \"sqrt\":\n            a = stack.pop();\n            stack.push(Math.sqrt(a));\n            break;\n\n          case \"sub\":\n            b = stack.pop();\n            a = stack.pop();\n            stack.push(a - b);\n            break;\n\n          case \"true\":\n            stack.push(true);\n            break;\n\n          case \"truncate\":\n            a = stack.pop();\n            a = a < 0 ? Math.ceil(a) : Math.floor(a);\n            stack.push(a);\n            break;\n\n          case \"xor\":\n            b = stack.pop();\n            a = stack.pop();\n\n            if ((0, _util.isBool)(a) && (0, _util.isBool)(b)) {\n              stack.push(a !== b);\n            } else {\n              stack.push(a ^ b);\n            }\n\n            break;\n\n          default:\n            throw new _util.FormatError(`Unknown operator ${operator}`);\n        }\n      }\n\n      return stack.stack;\n    }\n  };\n  return PostScriptEvaluator;\n}();\n\nexports.PostScriptEvaluator = PostScriptEvaluator;\n\nvar PostScriptCompiler = function PostScriptCompilerClosure() {\n  function AstNode(type) {\n    this.type = type;\n  }\n\n  AstNode.prototype.visit = function (visitor) {\n    (0, _util.unreachable)(\"abstract method\");\n  };\n\n  function AstArgument(index, min, max) {\n    AstNode.call(this, \"args\");\n    this.index = index;\n    this.min = min;\n    this.max = max;\n  }\n\n  AstArgument.prototype = Object.create(AstNode.prototype);\n\n  AstArgument.prototype.visit = function (visitor) {\n    visitor.visitArgument(this);\n  };\n\n  function AstLiteral(number) {\n    AstNode.call(this, \"literal\");\n    this.number = number;\n    this.min = number;\n    this.max = number;\n  }\n\n  AstLiteral.prototype = Object.create(AstNode.prototype);\n\n  AstLiteral.prototype.visit = function (visitor) {\n    visitor.visitLiteral(this);\n  };\n\n  function AstBinaryOperation(op, arg1, arg2, min, max) {\n    AstNode.call(this, \"binary\");\n    this.op = op;\n    this.arg1 = arg1;\n    this.arg2 = arg2;\n    this.min = min;\n    this.max = max;\n  }\n\n  AstBinaryOperation.prototype = Object.create(AstNode.prototype);\n\n  AstBinaryOperation.prototype.visit = function (visitor) {\n    visitor.visitBinaryOperation(this);\n  };\n\n  function AstMin(arg, max) {\n    AstNode.call(this, \"max\");\n    this.arg = arg;\n    this.min = arg.min;\n    this.max = max;\n  }\n\n  AstMin.prototype = Object.create(AstNode.prototype);\n\n  AstMin.prototype.visit = function (visitor) {\n    visitor.visitMin(this);\n  };\n\n  function AstVariable(index, min, max) {\n    AstNode.call(this, \"var\");\n    this.index = index;\n    this.min = min;\n    this.max = max;\n  }\n\n  AstVariable.prototype = Object.create(AstNode.prototype);\n\n  AstVariable.prototype.visit = function (visitor) {\n    visitor.visitVariable(this);\n  };\n\n  function AstVariableDefinition(variable, arg) {\n    AstNode.call(this, \"definition\");\n    this.variable = variable;\n    this.arg = arg;\n  }\n\n  AstVariableDefinition.prototype = Object.create(AstNode.prototype);\n\n  AstVariableDefinition.prototype.visit = function (visitor) {\n    visitor.visitVariableDefinition(this);\n  };\n\n  function ExpressionBuilderVisitor() {\n    this.parts = [];\n  }\n\n  ExpressionBuilderVisitor.prototype = {\n    visitArgument(arg) {\n      this.parts.push(\"Math.max(\", arg.min, \", Math.min(\", arg.max, \", src[srcOffset + \", arg.index, \"]))\");\n    },\n\n    visitVariable(variable) {\n      this.parts.push(\"v\", variable.index);\n    },\n\n    visitLiteral(literal) {\n      this.parts.push(literal.number);\n    },\n\n    visitBinaryOperation(operation) {\n      this.parts.push(\"(\");\n      operation.arg1.visit(this);\n      this.parts.push(\" \", operation.op, \" \");\n      operation.arg2.visit(this);\n      this.parts.push(\")\");\n    },\n\n    visitVariableDefinition(definition) {\n      this.parts.push(\"var \");\n      definition.variable.visit(this);\n      this.parts.push(\" = \");\n      definition.arg.visit(this);\n      this.parts.push(\";\");\n    },\n\n    visitMin(max) {\n      this.parts.push(\"Math.min(\");\n      max.arg.visit(this);\n      this.parts.push(\", \", max.max, \")\");\n    },\n\n    toString() {\n      return this.parts.join(\"\");\n    }\n\n  };\n\n  function buildAddOperation(num1, num2) {\n    if (num2.type === \"literal\" && num2.number === 0) {\n      return num1;\n    }\n\n    if (num1.type === \"literal\" && num1.number === 0) {\n      return num2;\n    }\n\n    if (num2.type === \"literal\" && num1.type === \"literal\") {\n      return new AstLiteral(num1.number + num2.number);\n    }\n\n    return new AstBinaryOperation(\"+\", num1, num2, num1.min + num2.min, num1.max + num2.max);\n  }\n\n  function buildMulOperation(num1, num2) {\n    if (num2.type === \"literal\") {\n      if (num2.number === 0) {\n        return new AstLiteral(0);\n      } else if (num2.number === 1) {\n        return num1;\n      } else if (num1.type === \"literal\") {\n        return new AstLiteral(num1.number * num2.number);\n      }\n    }\n\n    if (num1.type === \"literal\") {\n      if (num1.number === 0) {\n        return new AstLiteral(0);\n      } else if (num1.number === 1) {\n        return num2;\n      }\n    }\n\n    var min = Math.min(num1.min * num2.min, num1.min * num2.max, num1.max * num2.min, num1.max * num2.max);\n    var max = Math.max(num1.min * num2.min, num1.min * num2.max, num1.max * num2.min, num1.max * num2.max);\n    return new AstBinaryOperation(\"*\", num1, num2, min, max);\n  }\n\n  function buildSubOperation(num1, num2) {\n    if (num2.type === \"literal\") {\n      if (num2.number === 0) {\n        return num1;\n      } else if (num1.type === \"literal\") {\n        return new AstLiteral(num1.number - num2.number);\n      }\n    }\n\n    if (num2.type === \"binary\" && num2.op === \"-\" && num1.type === \"literal\" && num1.number === 1 && num2.arg1.type === \"literal\" && num2.arg1.number === 1) {\n      return num2.arg2;\n    }\n\n    return new AstBinaryOperation(\"-\", num1, num2, num1.min - num2.max, num1.max - num2.min);\n  }\n\n  function buildMinOperation(num1, max) {\n    if (num1.min >= max) {\n      return new AstLiteral(max);\n    } else if (num1.max <= max) {\n      return num1;\n    }\n\n    return new AstMin(num1, max);\n  }\n\n  function PostScriptCompiler() {}\n\n  PostScriptCompiler.prototype = {\n    compile: function PostScriptCompiler_compile(code, domain, range) {\n      var stack = [];\n      var instructions = [];\n      var inputSize = domain.length >> 1,\n          outputSize = range.length >> 1;\n      var lastRegister = 0;\n      var n, j;\n      var num1, num2, ast1, ast2, tmpVar, item;\n\n      for (let i = 0; i < inputSize; i++) {\n        stack.push(new AstArgument(i, domain[i * 2], domain[i * 2 + 1]));\n      }\n\n      for (let i = 0, ii = code.length; i < ii; i++) {\n        item = code[i];\n\n        if (typeof item === \"number\") {\n          stack.push(new AstLiteral(item));\n          continue;\n        }\n\n        switch (item) {\n          case \"add\":\n            if (stack.length < 2) {\n              return null;\n            }\n\n            num2 = stack.pop();\n            num1 = stack.pop();\n            stack.push(buildAddOperation(num1, num2));\n            break;\n\n          case \"cvr\":\n            if (stack.length < 1) {\n              return null;\n            }\n\n            break;\n\n          case \"mul\":\n            if (stack.length < 2) {\n              return null;\n            }\n\n            num2 = stack.pop();\n            num1 = stack.pop();\n            stack.push(buildMulOperation(num1, num2));\n            break;\n\n          case \"sub\":\n            if (stack.length < 2) {\n              return null;\n            }\n\n            num2 = stack.pop();\n            num1 = stack.pop();\n            stack.push(buildSubOperation(num1, num2));\n            break;\n\n          case \"exch\":\n            if (stack.length < 2) {\n              return null;\n            }\n\n            ast1 = stack.pop();\n            ast2 = stack.pop();\n            stack.push(ast1, ast2);\n            break;\n\n          case \"pop\":\n            if (stack.length < 1) {\n              return null;\n            }\n\n            stack.pop();\n            break;\n\n          case \"index\":\n            if (stack.length < 1) {\n              return null;\n            }\n\n            num1 = stack.pop();\n\n            if (num1.type !== \"literal\") {\n              return null;\n            }\n\n            n = num1.number;\n\n            if (n < 0 || !Number.isInteger(n) || stack.length < n) {\n              return null;\n            }\n\n            ast1 = stack[stack.length - n - 1];\n\n            if (ast1.type === \"literal\" || ast1.type === \"var\") {\n              stack.push(ast1);\n              break;\n            }\n\n            tmpVar = new AstVariable(lastRegister++, ast1.min, ast1.max);\n            stack[stack.length - n - 1] = tmpVar;\n            stack.push(tmpVar);\n            instructions.push(new AstVariableDefinition(tmpVar, ast1));\n            break;\n\n          case \"dup\":\n            if (stack.length < 1) {\n              return null;\n            }\n\n            if (typeof code[i + 1] === \"number\" && code[i + 2] === \"gt\" && code[i + 3] === i + 7 && code[i + 4] === \"jz\" && code[i + 5] === \"pop\" && code[i + 6] === code[i + 1]) {\n              num1 = stack.pop();\n              stack.push(buildMinOperation(num1, code[i + 1]));\n              i += 6;\n              break;\n            }\n\n            ast1 = stack[stack.length - 1];\n\n            if (ast1.type === \"literal\" || ast1.type === \"var\") {\n              stack.push(ast1);\n              break;\n            }\n\n            tmpVar = new AstVariable(lastRegister++, ast1.min, ast1.max);\n            stack[stack.length - 1] = tmpVar;\n            stack.push(tmpVar);\n            instructions.push(new AstVariableDefinition(tmpVar, ast1));\n            break;\n\n          case \"roll\":\n            if (stack.length < 2) {\n              return null;\n            }\n\n            num2 = stack.pop();\n            num1 = stack.pop();\n\n            if (num2.type !== \"literal\" || num1.type !== \"literal\") {\n              return null;\n            }\n\n            j = num2.number;\n            n = num1.number;\n\n            if (n <= 0 || !Number.isInteger(n) || !Number.isInteger(j) || stack.length < n) {\n              return null;\n            }\n\n            j = (j % n + n) % n;\n\n            if (j === 0) {\n              break;\n            }\n\n            Array.prototype.push.apply(stack, stack.splice(stack.length - n, n - j));\n            break;\n\n          default:\n            return null;\n        }\n      }\n\n      if (stack.length !== outputSize) {\n        return null;\n      }\n\n      var result = [];\n      instructions.forEach(function (instruction) {\n        var statementBuilder = new ExpressionBuilderVisitor();\n        instruction.visit(statementBuilder);\n        result.push(statementBuilder.toString());\n      });\n      stack.forEach(function (expr, i) {\n        var statementBuilder = new ExpressionBuilderVisitor();\n        expr.visit(statementBuilder);\n        var min = range[i * 2],\n            max = range[i * 2 + 1];\n        var out = [statementBuilder.toString()];\n\n        if (min > expr.min) {\n          out.unshift(\"Math.max(\", min, \", \");\n          out.push(\")\");\n        }\n\n        if (max < expr.max) {\n          out.unshift(\"Math.min(\", max, \", \");\n          out.push(\")\");\n        }\n\n        out.unshift(\"dest[destOffset + \", i, \"] = \");\n        out.push(\";\");\n        result.push(out.join(\"\"));\n      });\n      return result.join(\"\\n\");\n    }\n  };\n  return PostScriptCompiler;\n}();\n\nexports.PostScriptCompiler = PostScriptCompiler;\n\n/***/ }),\n/* 40 */\n/***/ ((__unused_webpack_module, exports, __w_pdfjs_require__) => {\n\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.PostScriptParser = exports.PostScriptLexer = void 0;\n\nvar _util = __w_pdfjs_require__(2);\n\nvar _primitives = __w_pdfjs_require__(5);\n\nvar _core_utils = __w_pdfjs_require__(8);\n\nclass PostScriptParser {\n  constructor(lexer) {\n    this.lexer = lexer;\n    this.operators = [];\n    this.token = null;\n    this.prev = null;\n  }\n\n  nextToken() {\n    this.prev = this.token;\n    this.token = this.lexer.getToken();\n  }\n\n  accept(type) {\n    if (this.token.type === type) {\n      this.nextToken();\n      return true;\n    }\n\n    return false;\n  }\n\n  expect(type) {\n    if (this.accept(type)) {\n      return true;\n    }\n\n    throw new _util.FormatError(`Unexpected symbol: found ${this.token.type} expected ${type}.`);\n  }\n\n  parse() {\n    this.nextToken();\n    this.expect(PostScriptTokenTypes.LBRACE);\n    this.parseBlock();\n    this.expect(PostScriptTokenTypes.RBRACE);\n    return this.operators;\n  }\n\n  parseBlock() {\n    while (true) {\n      if (this.accept(PostScriptTokenTypes.NUMBER)) {\n        this.operators.push(this.prev.value);\n      } else if (this.accept(PostScriptTokenTypes.OPERATOR)) {\n        this.operators.push(this.prev.value);\n      } else if (this.accept(PostScriptTokenTypes.LBRACE)) {\n        this.parseCondition();\n      } else {\n        return;\n      }\n    }\n  }\n\n  parseCondition() {\n    const conditionLocation = this.operators.length;\n    this.operators.push(null, null);\n    this.parseBlock();\n    this.expect(PostScriptTokenTypes.RBRACE);\n\n    if (this.accept(PostScriptTokenTypes.IF)) {\n      this.operators[conditionLocation] = this.operators.length;\n      this.operators[conditionLocation + 1] = \"jz\";\n    } else if (this.accept(PostScriptTokenTypes.LBRACE)) {\n      const jumpLocation = this.operators.length;\n      this.operators.push(null, null);\n      const endOfTrue = this.operators.length;\n      this.parseBlock();\n      this.expect(PostScriptTokenTypes.RBRACE);\n      this.expect(PostScriptTokenTypes.IFELSE);\n      this.operators[jumpLocation] = this.operators.length;\n      this.operators[jumpLocation + 1] = \"j\";\n      this.operators[conditionLocation] = endOfTrue;\n      this.operators[conditionLocation + 1] = \"jz\";\n    } else {\n      throw new _util.FormatError(\"PS Function: error parsing conditional.\");\n    }\n  }\n\n}\n\nexports.PostScriptParser = PostScriptParser;\nconst PostScriptTokenTypes = {\n  LBRACE: 0,\n  RBRACE: 1,\n  NUMBER: 2,\n  OPERATOR: 3,\n  IF: 4,\n  IFELSE: 5\n};\n\nconst PostScriptToken = function PostScriptTokenClosure() {\n  const opCache = Object.create(null);\n\n  class PostScriptToken {\n    constructor(type, value) {\n      this.type = type;\n      this.value = value;\n    }\n\n    static getOperator(op) {\n      const opValue = opCache[op];\n\n      if (opValue) {\n        return opValue;\n      }\n\n      return opCache[op] = new PostScriptToken(PostScriptTokenTypes.OPERATOR, op);\n    }\n\n    static get LBRACE() {\n      return (0, _util.shadow)(this, \"LBRACE\", new PostScriptToken(PostScriptTokenTypes.LBRACE, \"{\"));\n    }\n\n    static get RBRACE() {\n      return (0, _util.shadow)(this, \"RBRACE\", new PostScriptToken(PostScriptTokenTypes.RBRACE, \"}\"));\n    }\n\n    static get IF() {\n      return (0, _util.shadow)(this, \"IF\", new PostScriptToken(PostScriptTokenTypes.IF, \"IF\"));\n    }\n\n    static get IFELSE() {\n      return (0, _util.shadow)(this, \"IFELSE\", new PostScriptToken(PostScriptTokenTypes.IFELSE, \"IFELSE\"));\n    }\n\n  }\n\n  return PostScriptToken;\n}();\n\nclass PostScriptLexer {\n  constructor(stream) {\n    this.stream = stream;\n    this.nextChar();\n    this.strBuf = [];\n  }\n\n  nextChar() {\n    return this.currentChar = this.stream.getByte();\n  }\n\n  getToken() {\n    let comment = false;\n    let ch = this.currentChar;\n\n    while (true) {\n      if (ch < 0) {\n        return _primitives.EOF;\n      }\n\n      if (comment) {\n        if (ch === 0x0a || ch === 0x0d) {\n          comment = false;\n        }\n      } else if (ch === 0x25) {\n        comment = true;\n      } else if (!(0, _core_utils.isWhiteSpace)(ch)) {\n        break;\n      }\n\n      ch = this.nextChar();\n    }\n\n    switch (ch | 0) {\n      case 0x30:\n      case 0x31:\n      case 0x32:\n      case 0x33:\n      case 0x34:\n      case 0x35:\n      case 0x36:\n      case 0x37:\n      case 0x38:\n      case 0x39:\n      case 0x2b:\n      case 0x2d:\n      case 0x2e:\n        return new PostScriptToken(PostScriptTokenTypes.NUMBER, this.getNumber());\n\n      case 0x7b:\n        this.nextChar();\n        return PostScriptToken.LBRACE;\n\n      case 0x7d:\n        this.nextChar();\n        return PostScriptToken.RBRACE;\n    }\n\n    const strBuf = this.strBuf;\n    strBuf.length = 0;\n    strBuf[0] = String.fromCharCode(ch);\n\n    while ((ch = this.nextChar()) >= 0 && (ch >= 0x41 && ch <= 0x5a || ch >= 0x61 && ch <= 0x7a)) {\n      strBuf.push(String.fromCharCode(ch));\n    }\n\n    const str = strBuf.join(\"\");\n\n    switch (str.toLowerCase()) {\n      case \"if\":\n        return PostScriptToken.IF;\n\n      case \"ifelse\":\n        return PostScriptToken.IFELSE;\n\n      default:\n        return PostScriptToken.getOperator(str);\n    }\n  }\n\n  getNumber() {\n    let ch = this.currentChar;\n    const strBuf = this.strBuf;\n    strBuf.length = 0;\n    strBuf[0] = String.fromCharCode(ch);\n\n    while ((ch = this.nextChar()) >= 0) {\n      if (ch >= 0x30 && ch <= 0x39 || ch === 0x2d || ch === 0x2e) {\n        strBuf.push(String.fromCharCode(ch));\n      } else {\n        break;\n      }\n    }\n\n    const value = parseFloat(strBuf.join(\"\"));\n\n    if (isNaN(value)) {\n      throw new _util.FormatError(`Invalid floating point number: ${value}`);\n    }\n\n    return value;\n  }\n\n}\n\nexports.PostScriptLexer = PostScriptLexer;\n\n/***/ }),\n/* 41 */\n/***/ ((__unused_webpack_module, exports, __w_pdfjs_require__) => {\n\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.bidi = bidi;\n\nvar _util = __w_pdfjs_require__(2);\n\nvar baseTypesnvar arabicTypes = [\"AN\", \"AN\", \"AN\", \"AN\", \"AN\", \"AN\", \"ON\", \"ON\", \"AL\", \"ET\", \"ET\", \"AL\", \"CS\", \"AL\", \"ON\", \"ON\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"AL\", \"AL\", \"\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"AN\", \"AN\", \"AN\", \"AN\", \"AN\", \"AN\", \"AN\", \"AN\", \"AN\", \"AN\", \"ET\", \"AN\", \"AN\", \"AL\", \"AL\", \"AL\", \"NSM\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"AN\", \"ON\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"AL\", \"AL\", \"NSM\", \"NSM\", \"ON\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"AL\", \"AL\", \"EN\", \"EN\", \"EN\", \"EN\", \"EN\", \"EN\", \"EN\", \"EN\", \"EN\", \"EN\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\"];\n\nfunction isOdd(i) {\n  return (i & 1) !== 0;\n}\n\nfunction isEven(i) {\n  return (i & 1) === 0;\n}\n\nfunction findUnequal(arr, start, value) {\n  for (var j = start, jj = arr.length; j < jj; ++j) {\n    if (arr[j] !== value) {\n      return j;\n    }\n  }\n\n  return j;\n}\n\nfunction setValues(arr, start, end, value) {\n  for (var j = start; j < end; ++j) {\n    arr[j] = value;\n  }\n}\n\nfunction reverseValues(arr, start, end) {\n  for (var i = start, j = end - 1; i < j; ++i, --j) {\n    var temp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = temp;\n  }\n}\n\nfunction createBidiText(str, isLTR, vertical = false) {\n  let dir = \"ltr\";\n\n  if (vertical) {\n    dir = \"ttb\";\n  } else if (!isLTR) {\n    dir = \"rtl\";\n  }\n\n  return {\n    str,\n    dir\n  };\n}\n\nvar chars = [];\nvar types = [];\n\nfunction bidi(str, startLevel, vertical) {\n  var isLTR = true;\n  var strLength = str.length;\n\n  if (strLength === 0 || vertical) {\n    return createBidiText(str, isLTR, vertical);\n  }\n\n  chars.length = strLength;\n  types.length = strLength;\n  var numBidi = 0;\n  var i, ii;\n\n  for (i = 0; i < strLength; ++i) {\n    chars[i] = str.charAt(i);\n    var charCode = str.charCodeAt(i);\n    var charType = \"L\";\n\n    if (charCode <= 0x00ff) {\n      charType = baseTypes[charCode];\n    } else if (0x0590 <= charCode && charCode <= 0x05f4) {\n      charType = \"R\";\n    } else if (0x0600 <= charCode && charCode <= 0x06ff) {\n      charType = arabicTypes[charCode & 0xff];\n\n      if (!charType) {\n        (0, _util.warn)(\"Bidi: invalid Unicode character \" + charCode.toString(16));\n      }\n    } else if (0x0700 <= charCode && charCode <= 0x08ac) {\n      charType = \"AL\";\n    }\n\n    if (charType === \"R\" || charType === \"AL\" || charType === \"AN\") {\n      numBidi++;\n    }\n\n    types[i] = charType;\n  }\n\n  if (numBidi === 0) {\n    isLTR = true;\n    return createBidiText(str, isLTR);\n  }\n\n  if (startLevel === -1) {\n    if (numBidi / strLength < 0.3) {\n      isLTR = true;\n      startLevel = 0;\n    } else {\n      isLTR = false;\n      startLevel = 1;\n    }\n  }\n\n  var levels = [];\n\n  for (i = 0; i < strLength; ++i) {\n    levels[i] = startLevel;\n  }\n\n  var e = isOdd(startLevel) ? \"R\" : \"L\";\n  var sor = e;\n  var eor = sor;\n  var lastType = sor;\n\n  for (i = 0; i < strLength; ++i) {\n    if (types[i] === \"NSM\") {\n      types[i] = lastType;\n    } else {\n      lastType = types[i];\n    }\n  }\n\n  lastType = sor;\n  var t;\n\n  for (i = 0; i < strLength; ++i) {\n    t = types[i];\n\n    if (t === \"EN\") {\n      types[i] = lastType === \"AL\" ? \"AN\" : \"EN\";\n    } else if (t === \"R\" || t === \"L\" || t === \"AL\") {\n      lastType = t;\n    }\n  }\n\n  for (i = 0; i < strLength; ++i) {\n    t = types[i];\n\n    if (t === \"AL\") {\n      types[i] = \"R\";\n    }\n  }\n\n  for (i = 1; i < strLength - 1; ++i) {\n    if (types[i] === \"ES\" && types[i - 1] === \"EN\" && types[i + 1] === \"EN\") {\n      types[i] = \"EN\";\n    }\n\n    if (types[i] === \"CS\" && (types[i - 1] === \"EN\" || types[i - 1] === \"AN\") && types[i + 1] === types[i - 1]) {\n      types[i] = types[i - 1];\n    }\n  }\n\n  for (i = 0; i < strLength; ++i) {\n    if (types[i] === \"EN\") {\n      var j;\n\n      for (j = i - 1; j >= 0; --j) {\n        if (types[j] !== \"ET\") {\n          break;\n        }\n\n        types[j] = \"EN\";\n      }\n\n      for (j = i + 1; j < strLength; ++j) {\n        if (types[j] !== \"ET\") {\n          break;\n        }\n\n        types[j] = \"EN\";\n      }\n    }\n  }\n\n  for (i = 0; i < strLength; ++i) {\n    t = types[i];\n\n    if (t === \"WS\" || t === \"ES\" || t === \"ET\" || t === \"CS\") {\n      types[i] = \"ON\";\n    }\n  }\n\n  lastType = sor;\n\n  for (i = 0; i < strLength; ++i) {\n    t = types[i];\n\n    if (t === \"EN\") {\n      types[i] = lastType === \"L\" ? \"L\" : \"EN\";\n    } else if (t === \"R\" || t === \"L\") {\n      lastType = t;\n    }\n  }\n\n  for (i = 0; i < strLength; ++i) {\n    if (types[i] === \"ON\") {\n      var end = findUnequal(types, i + 1, \"ON\");\n      var before = sor;\n\n      if (i > 0) {\n        before = types[i - 1];\n      }\n\n      var after = eor;\n\n      if (end + 1 < strLength) {\n        after = types[end + 1];\n      }\n\n      if (before !== \"L\") {\n        before = \"R\";\n      }\n\n      if (after !== \"L\") {\n        after = \"R\";\n      }\n\n      if (before === after) {\n        setValues(types, i, end, before);\n      }\n\n      i = end - 1;\n    }\n  }\n\n  for (i = 0; i < strLength; ++i) {\n    if (types[i] === \"ON\") {\n      types[i] = e;\n    }\n  }\n\n  for (i = 0; i < strLength; ++i) {\n    t = types[i];\n\n    if (isEven(levels[i])) {\n      if (t === \"R\") {\n        levels[i] += 1;\n      } else if (t === \"AN\" || t === \"EN\") {\n        levels[i] += 2;\n      }\n    } else {\n      if (t === \"L\" || t === \"AN\" || t === \"EN\") {\n        levels[i] += 1;\n      }\n    }\n  }\n\n  var highestLevel = -1;\n  var lowestOddLevel = 99;\n  var level;\n\n  for (i = 0, ii = levels.length; i < ii; ++i) {\n    level = levels[i];\n\n    if (highestLevel < level) {\n      highestLevel = level;\n    }\n\n    if (lowestOddLevel > level && isOdd(level)) {\n      lowestOddLevel = level;\n    }\n  }\n\n  for (level = highestLevel; level >= lowestOddLevel; --level) {\n    var start = -1;\n\n    for (i = 0, ii = levels.length; i < ii; ++i) {\n      if (levels[i] < level) {\n        if (start >= 0) {\n          reverseValues(chars, start, i);\n          start = -1;\n        }\n      } else if (start < 0) {\n        start = i;\n      }\n    }\n\n    if (start >= 0) {\n      reverseValues(chars, start, levels.length);\n    }\n  }\n\n  for (i = 0, ii = chars.length; i < ii; ++i) {\n    var ch = chars[i];\n\n    if (ch === \"<\" || ch === \">\") {\n      chars[i] = \"\";\n    }\n  }\n\n  return createBidiText(chars.join(\"\"), isLTR);\n}\n\n/***/ }),\n/* 42 */\n/***/ ((__unused_webpack_module, exports, __w_pdfjs_require__) => {\n\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.getMetrics = void 0;\n\nvar _core_utils = __w_pdfjs_require__(8);\n\nvar getMetrics = (0, _core_utils.getLookupTableFactory)(function (t) {\n  t.Courier = 600;\n  t[\"Courier-Bold\"] = 600;\n  t[\"Courier-BoldOblique\"] = 600;\n  t[\"Courier-Oblique\"] = 600;\n  t.Helvetica = (0, _core_utils.getLookupTableFactory)(function (t) {\n    t.space = 278;\n    t.exclam = 278;\n    t.quotedbl = 355;\n    t.numbersign = 556;\n    t.dollar = 556;\n    t.percent = 889;\n    t.ampersand = 667;\n    t.quoteright = 222;\n    t.parenleft = 333;\n    t.parenright = 333;\n    t.asterisk = 389;\n    t.plus = 584;\n    t.comma = 278;\n    t.hyphen = 333;\n    t.period = 278;\n    t.slash = 278;\n    t.zero = 556;\n    t.one = 556;\n    t.two = 556;\n    t.three = 556;\n    t.four = 556;\n    t.five = 556;\n    t.six = 556;\n    t.seven = 556;\n    t.eight = 556;\n    t.nine = 556;\n    t.colon = 278;\n    t.semicolon = 278;\n    t.less = 584;\n    t.equal = 584;\n    t.greater = 584;\n    t.question = 556;\n    t.at = 1015;\n    t.A = 667;\n    t.B = 667;\n    t.C = 722;\n    t.D = 722;\n    t.E = 667;\n    t.F = 611;\n    t.G = 778;\n    t.H = 722;\n    t.I = 278;\n    t.J = 500;\n    t.K = 667;\n    t.L = 556;\n    t.M = 833;\n    t.N = 722;\n    t.O = 778;\n    t.P = 667;\n    t.Q = 778;\n    t.R = 722;\n    t.S = 667;\n    t.T = 611;\n    t.U = 722;\n    t.V = 667;\n    t.W = 944;\n    t.X = 667;\n    t.Y = 667;\n    t.Z = 611;\n    t.bracketleft = 278;\n    t.backslash = 278;\n    t.bracketright = 278;\n    t.asciicircum = 469;\n    t.underscore = 556;\n    t.quoteleft = 222;\n    t.a = 556;\n    t.b = 556;\n    t.c = 500;\n    t.d = 556;\n    t.e = 556;\n    t.f = 278;\n    t.g = 556;\n    t.h = 556;\n    t.i = 222;\n    t.j = 222;\n    t.k = 500;\n    t.l = 222;\n    t.m = 833;\n    t.n = 556;\n    t.o = 556;\n    t.p = 556;\n    t.q = 556;\n    t.r = 333;\n    t.s = 500;\n    t.t = 278;\n    t.u = 556;\n    t.v = 500;\n    t.w = 722;\n    t.x = 500;\n    t.y = 500;\n    t.z = 500;\n    t.braceleft = 334;\n    t.bar = 260;\n    t.braceright = 334;\n    t.asciitilde = 584;\n    t.exclamdown = 333;\n    t.cent = 556;\n    t.sterling = 556;\n    t.fraction = 167;\n    t.yen = 556;\n    t.florin = 556;\n    t.section = 556;\n    t.currency = 556;\n    t.quotesingle = 191;\n    t.quotedblleft = 333;\n    t.guillemotleft = 556;\n    t.guilsinglleft = 333;\n    t.guilsinglright = 333;\n    t.fi = 500;\n    t.fl = 500;\n    t.endash = 556;\n    t.dagger = 556;\n    t.daggerdbl = 556;\n    t.periodcentered = 278;\n    t.paragraph = 537;\n    t.bullet = 350;\n    t.quotesinglbase = 222;\n    t.quotedblbase = 333;\n    t.quotedblright = 333;\n    t.guillemotright = 556;\n    t.ellipsis = 1000;\n    t.perthousand = 1000;\n    t.questiondown = 611;\n    t.grave = 333;\n    t.acute = 333;\n    t.circumflex = 333;\n    t.tilde = 333;\n    t.macron = 333;\n    t.breve = 333;\n    t.dotaccent = 333;\n    t.dieresis = 333;\n    t.ring = 333;\n    t.cedilla = 333;\n    t.hungarumlaut = 333;\n    t.ogonek = 333;\n    t.caron = 333;\n    t.emdash = 1000;\n    t.AE = 1000;\n    t.ordfeminine = 370;\n    t.Lslash = 556;\n    t.Oslash = 778;\n    t.OE = 1000;\n    t.ordmasculine = 365;\n    t.ae = 889;\n    t.dotlessi = 278;\n    t.lslash = 222;\n    t.oslash = 611;\n    t.oe = 944;\n    t.germandbls = 611;\n    t.Idieresis = 278;\n    t.eacute = 556;\n    t.abreve = 556;\n    t.uhungarumlaut = 556;\n    t.ecaron = 556;\n    t.Ydieresis = 667;\n    t.divide = 584;\n    t.Yacute = 667;\n    t.Acircumflex = 667;\n    t.aacute = 556;\n    t.Ucircumflex = 722;\n    t.yacute = 500;\n    t.scommaaccent = 500;\n    t.ecircumflex = 556;\n    t.Uring = 722;\n    t.Udieresis = 722;\n    t.aogonek = 556;\n    t.Uacute = 722;\n    t.uogonek = 556;\n    t.Edieresis = 667;\n    t.Dcroat = 722;\n    t.commaaccent = 250;\n    t.copyright = 737;\n    t.Emacron = 667;\n    t.ccaron = 500;\n    t.aring = 556;\n    t.Ncommaaccent = 722;\n    t.lacute = 222;\n    t.agrave = 556;\n    t.Tcommaaccent = 611;\n    t.Cacute = 722;\n    t.atilde = 556;\n    t.Edotaccent = 667;\n    t.scaron = 500;\n    t.scedilla = 500;\n    t.iacute = 278;\n    t.lozenge = 471;\n    t.Rcaron = 722;\n    t.Gcommaaccent = 778;\n    t.ucircumflex = 556;\n    t.acircumflex = 556;\n    t.Amacron = 667;\n    t.rcaron = 333;\n    t.ccedilla = 500;\n    t.Zdotaccent = 611;\n    t.Thorn = 667;\n    t.Omacron = 778;\n    t.Racute = 722;\n    t.Sacute = 667;\n    t.dcaron = 643;\n    t.Umacron = 722;\n    t.uring = 556;\n    t.threesuperior = 333;\n    t.Ograve = 778;\n    t.Agrave = 667;\n    t.Abreve = 667;\n    t.multiply = 584;\n    t.uacute = 556;\n    t.Tcaron = 611;\n    t.partialdiff = 476;\n    t.ydieresis = 500;\n    t.Nacute = 722;\n    t.icircumflex = 278;\n    t.Ecircumflex = 667;\n    t.adieresis = 556;\n    t.edieresis = 556;\n    t.cacute = 500;\n    t.nacute = 556;\n    t.umacron = 556;\n    t.Ncaron = 722;\n    t.Iacute = 278;\n    t.plusminus = 584;\n    t.brokenbar = 260;\n    t.registered = 737;\n    t.Gbreve = 778;\n    t.Idotaccent = 278;\n    t.summation = 600;\n    t.Egrave = 667;\n    t.racute = 333;\n    t.omacron = 556;\n    t.Zacute = 611;\n    t.Zcaron = 611;\n    t.greaterequal = 549;\n    t.Eth = 722;\n    t.Ccedilla = 722;\n    t.lcommaaccent = 222;\n    t.tcaron = 317;\n    t.eogonek = 556;\n    t.Uogonek = 722;\n    t.Aacute = 667;\n    t.Adieresis = 667;\n    t.egrave = 556;\n    t.zacute = 500;\n    t.iogonek = 222;\n    t.Oacute = 778;\n    t.oacute = 556;\n    t.amacron = 556;\n    t.sacute = 500;\n    t.idieresis = 278;\n    t.Ocircumflex = 778;\n    t.Ugrave = 722;\n    t.Delta = 612;\n    t.thorn = 556;\n    t.twosuperior = 333;\n    t.Odieresis = 778;\n    t.mu = 556;\n    t.igrave = 278;\n    t.ohungarumlaut = 556;\n    t.Eogonek = 667;\n    t.dcroat = 556;\n    t.threequarters = 834;\n    t.Scedilla = 667;\n    t.lcaron = 299;\n    t.Kcommaaccent = 667;\n    t.Lacute = 556;\n    t.trademark = 1000;\n    t.edotaccent = 556;\n    t.Igrave = 278;\n    t.Imacron = 278;\n    t.Lcaron = 556;\n    t.onehalf = 834;\n    t.lessequal = 549;\n    t.ocircumflex = 556;\n    t.ntilde = 556;\n    t.Uhungarumlaut = 722;\n    t.Eacute = 667;\n    t.emacron = 556;\n    t.gbreve = 556;\n    t.onequarter = 834;\n    t.Scaron = 667;\n    t.Scommaaccent = 667;\n    t.Ohungarumlaut = 778;\n    t.degree = 400;\n    t.ograve = 556;\n    t.Ccaron = 722;\n    t.ugrave = 556;\n    t.radical = 453;\n    t.Dcaron = 722;\n    t.rcommaaccent = 333;\n    t.Ntilde = 722;\n    t.otilde = 556;\n    t.Rcommaaccent = 722;\n    t.Lcommaaccent = 556;\n    t.Atilde = 667;\n    t.Aogonek = 667;\n    t.Aring = 667;\n    t.Otilde = 778;\n    t.zdotaccent = 500;\n    t.Ecaron = 667;\n    t.Iogonek = 278;\n    t.kcommaaccent = 500;\n    t.minus = 584;\n    t.Icircumflex = 278;\n    t.ncaron = 556;\n    t.tcommaaccent = 278;\n    t.logicalnot = 584;\n    t.odieresis = 556;\n    t.udieresis = 556;\n    t.notequal = 549;\n    t.gcommaaccent = 556;\n    t.eth = 556;\n    t.zcaron = 500;\n    t.ncommaaccent = 556;\n    t.onesuperior = 333;\n    t.imacron = 278;\n    t.Euro = 556;\n  });\n  t[\"Helvetica-Bold\"] = (0, _core_utils.getLookupTableFactory)(function (t) {\n    t.space = 278;\n    t.exclam = 333;\n    t.quotedbl = 474;\n    t.numbersign = 556;\n    t.dollar = 556;\n    t.percent = 889;\n    t.ampersand = 722;\n    t.quoteright = 278;\n    t.parenleft = 333;\n    t.parenright = 333;\n    t.asterisk = 389;\n    t.plus = 584;\n    t.comma = 278;\n    t.hyphen = 333;\n    t.period = 278;\n    t.slash = 278;\n    t.zero = 556;\n    t.one = 556;\n    t.two = 556;\n    t.three = 556;\n    t.four = 556;\n    t.five = 556;\n    t.six = 556;\n    t.seven = 556;\n    t.eight = 556;\n    t.nine = 556;\n    t.colon = 333;\n    t.semicolon = 333;\n    t.less = 584;\n    t.equal = 584;\n    t.greater = 584;\n    t.question = 611;\n    t.at = 975;\n    t.A = 722;\n    t.B = 722;\n    t.C = 722;\n    t.D = 722;\n    t.E = 667;\n    t.F = 611;\n    t.G = 778;\n    t.H = 722;\n    t.I = 278;\n    t.J = 556;\n    t.K = 722;\n    t.L = 611;\n    t.M = 833;\n    t.N = 722;\n    t.O = 778;\n    t.P = 667;\n    t.Q = 778;\n    t.R = 722;\n    t.S = 667;\n    t.T = 611;\n    t.U = 722;\n    t.V = 667;\n    t.W = 944;\n    t.X = 667;\n    t.Y = 667;\n    t.Z = 611;\n    t.bracketleft = 333;\n    t.backslash = 278;\n    t.bracketright = 333;\n    t.asciicircum = 584;\n    t.underscore = 556;\n    t.quoteleft = 278;\n    t.a = 556;\n    t.b = 611;\n    t.c = 556;\n    t.d = 611;\n    t.e = 556;\n    t.f = 333;\n    t.g = 611;\n    t.h = 611;\n    t.i = 278;\n    t.j = 278;\n    t.k = 556;\n    t.l = 278;\n    t.m = 889;\n    t.n = 611;\n    t.o = 611;\n    t.p = 611;\n    t.q = 611;\n    t.r = 389;\n    t.s = 556;\n    t.t = 333;\n    t.u = 611;\n    t.v = 556;\n    t.w = 778;\n    t.x = 556;\n    t.y = 556;\n    t.z = 500;\n    t.braceleft = 389;\n    t.bar = 280;\n    t.braceright = 389;\n    t.asciitilde = 584;\n    t.exclamdown = 333;\n    t.cent = 556;\n    t.sterling = 556;\n    t.fraction = 167;\n    t.yen = 556;\n    t.florin = 556;\n    t.section = 556;\n    t.currency = 556;\n    t.quotesingle = 238;\n    t.quotedblleft = 500;\n    t.guillemotleft = 556;\n    t.guilsinglleft = 333;\n    t.guilsinglright = 333;\n    t.fi = 611;\n    t.fl = 611;\n    t.endash = 556;\n    t.dagger = 556;\n    t.daggerdbl = 556;\n    t.periodcentered = 278;\n    t.paragraph = 556;\n    t.bullet = 350;\n    t.quotesinglbase = 278;\n    t.quotedblbase = 500;\n    t.quotedblright = 500;\n    t.guillemotright = 556;\n    t.ellipsis = 1000;\n    t.perthousand = 1000;\n    t.questiondown = 611;\n    t.grave = 333;\n    t.acute = 333;\n    t.circumflex = 333;\n    t.tilde = 333;\n    t.macron = 333;\n    t.breve = 333;\n    t.dotaccent = 333;\n    t.dieresis = 333;\n    t.ring = 333;\n    t.cedilla = 333;\n    t.hungarumlaut = 333;\n    t.ogonek = 333;\n    t.caron = 333;\n    t.emdash = 1000;\n    t.AE = 1000;\n    t.ordfeminine = 370;\n    t.Lslash = 611;\n    t.Oslash = 778;\n    t.OE = 1000;\n    t.ordmasculine = 365;\n    t.ae = 889;\n    t.dotlessi = 278;\n    t.lslash = 278;\n    t.oslash = 611;\n    t.oe = 944;\n    t.germandbls = 611;\n    t.Idieresis = 278;\n    t.eacute = 556;\n    t.abreve = 556;\n    t.uhungarumlaut = 611;\n    t.ecaron = 556;\n    t.Ydieresis = 667;\n    t.divide = 584;\n    t.Yacute = 667;\n    t.Acircumflex = 722;\n    t.aacute = 556;\n    t.Ucircumflex = 722;\n    t.yacute = 556;\n    t.scommaaccent = 556;\n    t.ecircumflex = 556;\n    t.Uring = 722;\n    t.Udieresis = 722;\n    t.aogonek = 556;\n    t.Uacute = 722;\n    t.uogonek = 611;\n    t.Edieresis = 667;\n    t.Dcroat = 722;\n    t.commaaccent = 250;\n    t.copyright = 737;\n    t.Emacron = 667;\n    t.ccaron = 556;\n    t.aring = 556;\n    t.Ncommaaccent = 722;\n    t.lacute = 278;\n    t.agrave = 556;\n    t.Tcommaaccent = 611;\n    t.Cacute = 722;\n    t.atilde = 556;\n    t.Edotaccent = 667;\n    t.scaron = 556;\n    t.scedilla = 556;\n    t.iacute = 278;\n    t.lozenge = 494;\n    t.Rcaron = 722;\n    t.Gcommaaccent = 778;\n    t.ucircumflex = 611;\n    t.acircumflex = 556;\n    t.Amacron = 722;\n    t.rcaron = 389;\n    t.ccedilla = 556;\n    t.Zdotaccent = 611;\n    t.Thorn = 667;\n    t.Omacron = 778;\n    t.Racute = 722;\n    t.Sacute = 667;\n    t.dcaron = 743;\n    t.Umacron = 722;\n    t.uring = 611;\n    t.threesuperior = 333;\n    t.Ograve = 778;\n    t.Agrave = 722;\n    t.Abreve = 722;\n    t.multiply = 584;\n    t.uacute = 611;\n    t.Tcaron = 611;\n    t.partialdiff = 494;\n    t.ydieresis = 556;\n    t.Nacute = 722;\n    t.icircumflex = 278;\n    t.Ecircumflex = 667;\n    t.adieresis = 556;\n    t.edieresis = 556;\n    t.cacute = 556;\n    t.nacute = 611;\n    t.umacron = 611;\n    t.Ncaron = 722;\n    t.Iacute = 278;\n    t.plusminus = 584;\n    t.brokenbar = 280;\n    t.registered = 737;\n    t.Gbreve = 778;\n    t.Idotaccent = 278;\n    t.summation = 600;\n    t.Egrave = 667;\n    t.racute = 389;\n    t.omacron = 611;\n    t.Zacute = 611;\n    t.Zcaron = 611;\n    t.greaterequal = 549;\n    t.Eth = 722;\n    t.Ccedilla = 722;\n    t.lcommaaccent = 278;\n    t.tcaron = 389;\n    t.eogonek = 556;\n    t.Uogonek = 722;\n    t.Aacute = 722;\n    t.Adieresis = 722;\n    t.egrave = 556;\n    t.zacute = 500;\n    t.iogonek = 278;\n    t.Oacute = 778;\n    t.oacute = 611;\n    t.amacron = 556;\n    t.sacute = 556;\n    t.idieresis = 278;\n    t.Ocircumflex = 778;\n    t.Ugrave = 722;\n    t.Delta = 612;\n    t.thorn = 611;\n    t.twosuperior = 333;\n    t.Odieresis = 778;\n    t.mu = 611;\n    t.igrave = 278;\n    t.ohungarumlaut = 611;\n    t.Eogonek = 667;\n    t.dcroat = 611;\n    t.threequarters = 834;\n    t.Scedilla = 667;\n    t.lcaron = 400;\n    t.Kcommaaccent = 722;\n    t.Lacute = 611;\n    t.trademark = 1000;\n    t.edotaccent = 556;\n    t.Igrave = 278;\n    t.Imacron = 278;\n    t.Lcaron = 611;\n    t.onehalf = 834;\n    t.lessequal = 549;\n    t.ocircumflex = 611;\n    t.ntilde = 611;\n    t.Uhungarumlaut = 722;\n    t.Eacute = 667;\n    t.emacron = 556;\n    t.gbreve = 611;\n    t.onequarter = 834;\n    t.Scaron = 667;\n    t.Scommaaccent = 667;\n    t.Ohungarumlaut = 778;\n    t.degree = 400;\n    t.ograve = 611;\n    t.Ccaron = 722;\n    t.ugrave = 611;\n    t.radical = 549;\n    t.Dcaron = 722;\n    t.rcommaaccent = 389;\n    t.Ntilde = 722;\n    t.otilde = 611;\n    t.Rcommaaccent = 722;\n    t.Lcommaaccent = 611;\n    t.Atilde = 722;\n    t.Aogonek = 722;\n    t.Aring = 722;\n    t.Otilde = 778;\n    t.zdotaccent = 500;\n    t.Ecaron = 667;\n    t.Iogonek = 278;\n    t.kcommaaccent = 556;\n    t.minus = 584;\n    t.Icircumflex = 278;\n    t.ncaron = 611;\n    t.tcommaaccent = 333;\n    t.logicalnot = 584;\n    t.odieresis = 611;\n    t.udieresis = 611;\n    t.notequal = 549;\n    t.gcommaaccent = 611;\n    t.eth = 611;\n    t.zcaron = 500;\n    t.ncommaaccent = 611;\n    t.onesuperior = 333;\n    t.imacron = 278;\n    t.Euro = 556;\n  });\n  t[\"Helvetica-BoldOblique\"] = (0, _core_utils.getLookupTableFactory)(function (t) {\n    t.space = 278;\n    t.exclam = 333;\n    t.quotedbl = 474;\n    t.numbersign = 556;\n    t.dollar = 556;\n    t.percent = 889;\n    t.ampersand = 722;\n    t.quoteright = 278;\n    t.parenleft = 333;\n    t.parenright = 333;\n    t.asterisk = 389;\n    t.plus = 584;\n    t.comma = 278;\n    t.hyphen = 333;\n    t.period = 278;\n    t.slash = 278;\n    t.zero = 556;\n    t.one = 556;\n    t.two = 556;\n    t.three = 556;\n    t.four = 556;\n    t.five = 556;\n    t.six = 556;\n    t.seven = 556;\n    t.eight = 556;\n    t.nine = 556;\n    t.colon = 333;\n    t.semicolon = 333;\n    t.less = 584;\n    t.equal = 584;\n    t.greater = 584;\n    t.question = 611;\n    t.at = 975;\n    t.A = 722;\n    t.B = 722;\n    t.C = 722;\n    t.D = 722;\n    t.E = 667;\n    t.F = 611;\n    t.G = 778;\n    t.H = 722;\n    t.I = 278;\n    t.J = 556;\n    t.K = 722;\n    t.L = 611;\n    t.M = 833;\n    t.N = 722;\n    t.O = 778;\n    t.P = 667;\n    t.Q = 778;\n    t.R = 722;\n    t.S = 667;\n    t.T = 611;\n    t.U = 722;\n    t.V = 667;\n    t.W = 944;\n    t.X = 667;\n    t.Y = 667;\n    t.Z = 611;\n    t.bracketleft = 333;\n    t.backslash = 278;\n    t.bracketright = 333;\n    t.asciicircum = 584;\n    t.underscore = 556;\n    t.quoteleft = 278;\n    t.a = 556;\n    t.b = 611;\n    t.c = 556;\n    t.d = 611;\n    t.e = 556;\n    t.f = 333;\n    t.g = 611;\n    t.h = 611;\n    t.i = 278;\n    t.j = 278;\n    t.k = 556;\n    t.l = 278;\n    t.m = 889;\n    t.n = 611;\n    t.o = 611;\n    t.p = 611;\n    t.q = 611;\n    t.r = 389;\n    t.s = 556;\n    t.t = 333;\n    t.u = 611;\n    t.v = 556;\n    t.w = 778;\n    t.x = 556;\n    t.y = 556;\n    t.z = 500;\n    t.braceleft = 389;\n    t.bar = 280;\n    t.braceright = 389;\n    t.asciitilde = 584;\n    t.exclamdown = 333;\n    t.cent = 556;\n    t.sterling = 556;\n    t.fraction = 167;\n    t.yen = 556;\n    t.florin = 556;\n    t.section = 556;\n    t.currency = 556;\n    t.quotesingle = 238;\n    t.quotedblleft = 500;\n    t.guillemotleft = 556;\n    t.guilsinglleft = 333;\n    t.guilsinglright = 333;\n    t.fi = 611;\n    t.fl = 611;\n    t.endash = 556;\n    t.dagger = 556;\n    t.daggerdbl = 556;\n    t.periodcentered = 278;\n    t.paragraph = 556;\n    t.bullet = 350;\n    t.quotesinglbase = 278;\n    t.quotedblbase = 500;\n    t.quotedblright = 500;\n    t.guillemotright = 556;\n    t.ellipsis = 1000;\n    t.perthousand = 1000;\n    t.questiondown = 611;\n    t.grave = 333;\n    t.acute = 333;\n    t.circumflex = 333;\n    t.tilde = 333;\n    t.macron = 333;\n    t.breve = 333;\n    t.dotaccent = 333;\n    t.dieresis = 333;\n    t.ring = 333;\n    t.cedilla = 333;\n    t.hungarumlaut = 333;\n    t.ogonek = 333;\n    t.caron = 333;\n    t.emdash = 1000;\n    t.AE = 1000;\n    t.ordfeminine = 370;\n    t.Lslash = 611;\n    t.Oslash = 778;\n    t.OE = 1000;\n    t.ordmasculine = 365;\n    t.ae = 889;\n    t.dotlessi = 278;\n    t.lslash = 278;\n    t.oslash = 611;\n    t.oe = 944;\n    t.germandbls = 611;\n    t.Idieresis = 278;\n    t.eacute = 556;\n    t.abreve = 556;\n    t.uhungarumlaut = 611;\n    t.ecaron = 556;\n    t.Ydieresis = 667;\n    t.divide = 584;\n    t.Yacute = 667;\n    t.Acircumflex = 722;\n    t.aacute = 556;\n    t.Ucircumflex = 722;\n    t.yacute = 556;\n    t.scommaaccent = 556;\n    t.ecircumflex = 556;\n    t.Uring = 722;\n    t.Udieresis = 722;\n    t.aogonek = 556;\n    t.Uacute = 722;\n    t.uogonek = 611;\n    t.Edieresis = 667;\n    t.Dcroat = 722;\n    t.commaaccent = 250;\n    t.copyright = 737;\n    t.Emacron = 667;\n    t.ccaron = 556;\n    t.aring = 556;\n    t.Ncommaaccent = 722;\n    t.lacute = 278;\n    t.agrave = 556;\n    t.Tcommaaccent = 611;\n    t.Cacute = 722;\n    t.atilde = 556;\n    t.Edotaccent = 667;\n    t.scaron = 556;\n    t.scedilla = 556;\n    t.iacute = 278;\n    t.lozenge = 494;\n    t.Rcaron = 722;\n    t.Gcommaaccent = 778;\n    t.ucircumflex = 611;\n    t.acircumflex = 556;\n    t.Amacron = 722;\n    t.rcaron = 389;\n    t.ccedilla = 556;\n    t.Zdotaccent = 611;\n    t.Thorn = 667;\n    t.Omacron = 778;\n    t.Racute = 722;\n    t.Sacute = 667;\n    t.dcaron = 743;\n    t.Umacron = 722;\n    t.uring = 611;\n    t.threesuperior = 333;\n    t.Ograve = 778;\n    t.Agrave = 722;\n    t.Abreve = 722;\n    t.multiply = 584;\n    t.uacute = 611;\n    t.Tcaron = 611;\n    t.partialdiff = 494;\n    t.ydieresis = 556;\n    t.Nacute = 722;\n    t.icircumflex = 278;\n    t.Ecircumflex = 667;\n    t.adieresis = 556;\n    t.edieresis = 556;\n    t.cacute = 556;\n    t.nacute = 611;\n    t.umacron = 611;\n    t.Ncaron = 722;\n    t.Iacute = 278;\n    t.plusminus = 584;\n    t.brokenbar = 280;\n    t.registered = 737;\n    t.Gbreve = 778;\n    t.Idotaccent = 278;\n    t.summation = 600;\n    t.Egrave = 667;\n    t.racute = 389;\n    t.omacron = 611;\n    t.Zacute = 611;\n    t.Zcaron = 611;\n    t.greaterequal = 549;\n    t.Eth = 722;\n    t.Ccedilla = 722;\n    t.lcommaaccent = 278;\n    t.tcaron = 389;\n    t.eogonek = 556;\n    t.Uogonek = 722;\n    t.Aacute = 722;\n    t.Adieresis = 722;\n    t.egrave = 556;\n    t.zacute = 500;\n    t.iogonek = 278;\n    t.Oacute = 778;\n    t.oacute = 611;\n    t.amacron = 556;\n    t.sacute = 556;\n    t.idieresis = 278;\n    t.Ocircumflex = 778;\n    t.Ugrave = 722;\n    t.Delta = 612;\n    t.thorn = 611;\n    t.twosuperior = 333;\n    t.Odieresis = 778;\n    t.mu = 611;\n    t.igrave = 278;\n    t.ohungarumlaut = 611;\n    t.Eogonek = 667;\n    t.dcroat = 611;\n    t.threequarters = 834;\n    t.Scedilla = 667;\n    t.lcaron = 400;\n    t.Kcommaaccent = 722;\n    t.Lacute = 611;\n    t.trademark = 1000;\n    t.edotaccent = 556;\n    t.Igrave = 278;\n    t.Imacron = 278;\n    t.Lcaron = 611;\n    t.onehalf = 834;\n    t.lessequal = 549;\n    t.ocircumflex = 611;\n    t.ntilde = 611;\n    t.Uhungarumlaut = 722;\n    t.Eacute = 667;\n    t.emacron = 556;\n    t.gbreve = 611;\n    t.onequarter = 834;\n    t.Scaron = 667;\n    t.Scommaaccent = 667;\n    t.Ohungarumlaut = 778;\n    t.degree = 400;\n    t.ograve = 611;\n    t.Ccaron = 722;\n    t.ugrave = 611;\n    t.radical = 549;\n    t.Dcaron = 722;\n    t.rcommaaccent = 389;\n    t.Ntilde = 722;\n    t.otilde = 611;\n    t.Rcommaaccent = 722;\n    t.Lcommaaccent = 611;\n    t.Atilde = 722;\n    t.Aogonek = 722;\n    t.Aring = 722;\n    t.Otilde = 778;\n    t.zdotaccent = 500;\n    t.Ecaron = 667;\n    t.Iogonek = 278;\n    t.kcommaaccent = 556;\n    t.minus = 584;\n    t.Icircumflex = 278;\n    t.ncaron = 611;\n    t.tcommaaccent = 333;\n    t.logicalnot = 584;\n    t.odieresis = 611;\n    t.udieresis = 611;\n    t.notequal = 549;\n    t.gcommaaccent = 611;\n    t.eth = 611;\n    t.zcaron = 500;\n    t.ncommaaccent = 611;\n    t.onesuperior = 333;\n    t.imacron = 278;\n    t.Euro = 556;\n  });\n  t[\"Helvetica-Oblique\"] = (0, _core_utils.getLookupTableFactory)(function (t) {\n    t.space = 278;\n    t.exclam = 278;\n    t.quotedbl = 355;\n    t.numbersign = 556;\n    t.dollar = 556;\n    t.percent = 889;\n    t.ampersand = 667;\n    t.quoteright = 222;\n    t.parenleft = 333;\n    t.parenright = 333;\n    t.asterisk = 389;\n    t.plus = 584;\n    t.comma = 278;\n    t.hyphen = 333;\n    t.period = 278;\n    t.slash = 278;\n    t.zero = 556;\n    t.one = 556;\n    t.two = 556;\n    t.three = 556;\n    t.four = 556;\n    t.five = 556;\n    t.six = 556;\n    t.seven = 556;\n    t.eight = 556;\n    t.nine = 556;\n    t.colon = 278;\n    t.semicolon = 278;\n    t.less = 584;\n    t.equal = 584;\n    t.greater = 584;\n    t.question = 556;\n    t.at = 1015;\n    t.A = 667;\n    t.B = 667;\n    t.C = 722;\n    t.D = 722;\n    t.E = 667;\n    t.F = 611;\n    t.G = 778;\n    t.H = 722;\n    t.I = 278;\n    t.J = 500;\n    t.K = 667;\n    t.L = 556;\n    t.M = 833;\n    t.N = 722;\n    t.O = 778;\n    t.P = 667;\n    t.Q = 778;\n    t.R = 722;\n    t.S = 667;\n    t.T = 611;\n    t.U = 722;\n    t.V = 667;\n    t.W = 944;\n    t.X = 667;\n    t.Y = 667;\n    t.Z = 611;\n    t.bracketleft = 278;\n    t.backslash = 278;\n    t.bracketright = 278;\n    t.asciicircum = 469;\n    t.underscore = 556;\n    t.quoteleft = 222;\n    t.a = 556;\n    t.b = 556;\n    t.c = 500;\n    t.d = 556;\n    t.e = 556;\n    t.f = 278;\n    t.g = 556;\n    t.h = 556;\n    t.i = 222;\n    t.j = 222;\n    t.k = 500;\n    t.l = 222;\n    t.m = 833;\n    t.n = 556;\n    t.o = 556;\n    t.p = 556;\n    t.q = 556;\n    t.r = 333;\n    t.s = 500;\n    t.t = 278;\n    t.u = 556;\n    t.v = 500;\n    t.w = 722;\n    t.x = 500;\n    t.y = 500;\n    t.z = 500;\n    t.braceleft = 334;\n    t.bar = 260;\n    t.braceright = 334;\n    t.asciitilde = 584;\n    t.exclamdown = 333;\n    t.cent = 556;\n    t.sterling = 556;\n    t.fraction = 167;\n    t.yen = 556;\n    t.florin = 556;\n    t.section = 556;\n    t.currency = 556;\n    t.quotesingle = 191;\n    t.quotedblleft = 333;\n    t.guillemotleft = 556;\n    t.guilsinglleft = 333;\n    t.guilsinglright = 333;\n    t.fi = 500;\n    t.fl = 500;\n    t.endash = 556;\n    t.dagger = 556;\n    t.daggerdbl = 556;\n    t.periodcentered = 278;\n    t.paragraph = 537;\n    t.bullet = 350;\n    t.quotesinglbase = 222;\n    t.quotedblbase = 333;\n    t.quotedblright = 333;\n    t.guillemotright = 556;\n    t.ellipsis = 1000;\n    t.perthousand = 1000;\n    t.questiondown = 611;\n    t.grave = 333;\n    t.acute = 333;\n    t.circumflex = 333;\n    t.tilde = 333;\n    t.macron = 333;\n    t.breve = 333;\n    t.dotaccent = 333;\n    t.dieresis = 333;\n    t.ring = 333;\n    t.cedilla = 333;\n    t.hungarumlaut = 333;\n    t.ogonek = 333;\n    t.caron = 333;\n    t.emdash = 1000;\n    t.AE = 1000;\n    t.ordfeminine = 370;\n    t.Lslash = 556;\n    t.Oslash = 778;\n    t.OE = 1000;\n    t.ordmasculine = 365;\n    t.ae = 889;\n    t.dotlessi = 278;\n    t.lslash = 222;\n    t.oslash = 611;\n    t.oe = 944;\n    t.germandbls = 611;\n    t.Idieresis = 278;\n    t.eacute = 556;\n    t.abreve = 556;\n    t.uhungarumlaut = 556;\n    t.ecaron = 556;\n    t.Ydieresis = 667;\n    t.divide = 584;\n    t.Yacute = 667;\n    t.Acircumflex = 667;\n    t.aacute = 556;\n    t.Ucircumflex = 722;\n    t.yacute = 500;\n    t.scommaaccent = 500;\n    t.ecircumflex = 556;\n    t.Uring = 722;\n    t.Udieresis = 722;\n    t.aogonek = 556;\n    t.Uacute = 722;\n    t.uogonek = 556;\n    t.Edieresis = 667;\n    t.Dcroat = 722;\n    t.commaaccent = 250;\n    t.copyright = 737;\n    t.Emacron = 667;\n    t.ccaron = 500;\n    t.aring = 556;\n    t.Ncommaaccent = 722;\n    t.lacute = 222;\n    t.agrave = 556;\n    t.Tcommaaccent = 611;\n    t.Cacute = 722;\n    t.atilde = 556;\n    t.Edotaccent = 667;\n    t.scaron = 500;\n    t.scedilla = 500;\n    t.iacute = 278;\n    t.lozenge = 471;\n    t.Rcaron = 722;\n    t.Gcommaaccent = 778;\n    t.ucircumflex = 556;\n    t.acircumflex = 556;\n    t.Amacron = 667;\n    t.rcaron = 333;\n    t.ccedilla = 500;\n    t.Zdotaccent = 611;\n    t.Thorn = 667;\n    t.Omacron = 778;\n    t.Racute = 722;\n    t.Sacute = 667;\n    t.dcaron = 643;\n    t.Umacron = 722;\n    t.uring = 556;\n    t.threesuperior = 333;\n    t.Ograve = 778;\n    t.Agrave = 667;\n    t.Abreve = 667;\n    t.multiply = 584;\n    t.uacute = 556;\n    t.Tcaron = 611;\n    t.partialdiff = 476;\n    t.ydieresis = 500;\n    t.Nacute = 722;\n    t.icircumflex = 278;\n    t.Ecircumflex = 667;\n    t.adieresis = 556;\n    t.edieresis = 556;\n    t.cacute = 500;\n    t.nacute = 556;\n    t.umacron = 556;\n    t.Ncaron = 722;\n    t.Iacute = 278;\n    t.plusminus = 584;\n    t.brokenbar = 260;\n    t.registered = 737;\n    t.Gbreve = 778;\n    t.Idotaccent = 278;\n    t.summation = 600;\n    t.Egrave = 667;\n    t.racute = 333;\n    t.omacron = 556;\n    t.Zacute = 611;\n    t.Zcaron = 611;\n    t.greaterequal = 549;\n    t.Eth = 722;\n    t.Ccedilla = 722;\n    t.lcommaaccent = 222;\n    t.tcaron = 317;\n    t.eogonek = 556;\n    t.Uogonek = 722;\n    t.Aacute = 667;\n    t.Adieresis = 667;\n    t.egrave = 556;\n    t.zacute = 500;\n    t.iogonek = 222;\n    t.Oacute = 778;\n    t.oacute = 556;\n    t.amacron = 556;\n    t.sacute = 500;\n    t.idieresis = 278;\n    t.Ocircumflex = 778;\n    t.Ugrave = 722;\n    t.Delta = 612;\n    t.thorn = 556;\n    t.twosuperior = 333;\n    t.Odieresis = 778;\n    t.mu = 556;\n    t.igrave = 278;\n    t.ohungarumlaut = 556;\n    t.Eogonek = 667;\n    t.dcroat = 556;\n    t.threequarters = 834;\n    t.Scedilla = 667;\n    t.lcaron = 299;\n    t.Kcommaaccent = 667;\n    t.Lacute = 556;\n    t.trademark = 1000;\n    t.edotaccent = 556;\n    t.Igrave = 278;\n    t.Imacron = 278;\n    t.Lcaron = 556;\n    t.onehalf = 834;\n    t.lessequal = 549;\n    t.ocircumflex = 556;\n    t.ntilde = 556;\n    t.Uhungarumlaut = 722;\n    t.Eacute = 667;\n    t.emacron = 556;\n    t.gbreve = 556;\n    t.onequarter = 834;\n    t.Scaron = 667;\n    t.Scommaaccent = 667;\n    t.Ohungarumlaut = 778;\n    t.degree = 400;\n    t.ograve = 556;\n    t.Ccaron = 722;\n    t.ugrave = 556;\n    t.radical = 453;\n    t.Dcaron = 722;\n    t.rcommaaccent = 333;\n    t.Ntilde = 722;\n    t.otilde = 556;\n    t.Rcommaaccent = 722;\n    t.Lcommaaccent = 556;\n    t.Atilde = 667;\n    t.Aogonek = 667;\n    t.Aring = 667;\n    t.Otilde = 778;\n    t.zdotaccent = 500;\n    t.Ecaron = 667;\n    t.Iogonek = 278;\n    t.kcommaaccent = 500;\n    t.minus = 584;\n    t.Icircumflex = 278;\n    t.ncaron = 556;\n    t.tcommaaccent = 278;\n    t.logicalnot = 584;\n    t.odieresis = 556;\n    t.udieresis = 556;\n    t.notequal = 549;\n    t.gcommaaccent = 556;\n    t.eth = 556;\n    t.zcaron = 500;\n    t.ncommaaccent = 556;\n    t.onesuperior = 333;\n    t.imacron = 278;\n    t.Euro = 556;\n  });\n  t.Symbol = (0, _core_utils.getLookupTableFactory)(function (t) {\n    t.space = 250;\n    t.exclam = 333;\n    t.universal = 713;\n    t.numbersign = 500;\n    t.existential = 549;\n    t.percent = 833;\n    t.ampersand = 778;\n    t.suchthat = 439;\n    t.parenleft = 333;\n    t.parenright = 333;\n    t.asteriskmath = 500;\n    t.plus = 549;\n    t.comma = 250;\n    t.minus = 549;\n    t.period = 250;\n    t.slash = 278;\n    t.zero = 500;\n    t.one = 500;\n    t.two = 500;\n    t.three = 500;\n    t.four = 500;\n    t.five = 500;\n    t.six = 500;\n    t.seven = 500;\n    t.eight = 500;\n    t.nine = 500;\n    t.colon = 278;\n    t.semicolon = 278;\n    t.less = 549;\n    t.equal = 549;\n    t.greater = 549;\n    t.question = 444;\n    t.congruent = 549;\n    t.Alpha = 722;\n    t.Beta = 667;\n    t.Chi = 722;\n    t.Delta = 612;\n    t.Epsilon = 611;\n    t.Phi = 763;\n    t.Gamma = 603;\n    t.Eta = 722;\n    t.Iota = 333;\n    t.theta1 = 631;\n    t.Kappa = 722;\n    t.Lambda = 686;\n    t.Mu = 889;\n    t.Nu = 722;\n    t.Omicron = 722;\n    t.Pi = 768;\n    t.Theta = 741;\n    t.Rho = 556;\n    t.Sigma = 592;\n    t.Tau = 611;\n    t.Upsilon = 690;\n    t.sigma1 = 439;\n    t.Omega = 768;\n    t.Xi = 645;\n    t.Psi = 795;\n    t.Zeta = 611;\n    t.bracketleft = 333;\n    t.therefore = 863;\n    t.bracketright = 333;\n    t.perpendicular = 658;\n    t.underscore = 500;\n    t.radicalex = 500;\n    t.alpha = 631;\n    t.beta = 549;\n    t.chi = 549;\n    t.delta = 494;\n    t.epsilon = 439;\n    t.phi = 521;\n    t.gamma = 411;\n    t.eta = 603;\n    t.iota = 329;\n    t.phi1 = 603;\n    t.kappa = 549;\n    t.lambda = 549;\n    t.mu = 576;\n    t.nu = 521;\n    t.omicron = 549;\n    t.pi = 549;\n    t.theta = 521;\n    t.rho = 549;\n    t.sigma = 603;\n    t.tau = 439;\n    t.upsilon = 576;\n    t.omega1 = 713;\n    t.omega = 686;\n    t.xi = 493;\n    t.psi = 686;\n    t.zeta = 494;\n    t.braceleft = 480;\n    t.bar = 200;\n    t.braceright = 480;\n    t.similar = 549;\n    t.Euro = 750;\n    t.Upsilon1 = 620;\n    t.minute = 247;\n    t.lessequal = 549;\n    t.fraction = 167;\n    t.infinity = 713;\n    t.florin = 500;\n    t.club = 753;\n    t.diamond = 753;\n    t.heart = 753;\n    t.spade = 753;\n    t.arrowboth = 1042;\n    t.arrowleft = 987;\n    t.arrowup = 603;\n    t.arrowright = 987;\n    t.arrowdown = 603;\n    t.degree = 400;\n    t.plusminus = 549;\n    t.second = 411;\n    t.greaterequal = 549;\n    t.multiply = 549;\n    t.proportional = 713;\n    t.partialdiff = 494;\n    t.bullet = 460;\n    t.divide = 549;\n    t.notequal = 549;\n    t.equivalence = 549;\n    t.approxequal = 549;\n    t.ellipsis = 1000;\n    t.arrowvertex = 603;\n    t.arrowhorizex = 1000;\n    t.carriagereturn = 658;\n    t.aleph = 823;\n    t.Ifraktur = 686;\n    t.Rfraktur = 795;\n    t.weierstrass = 987;\n    t.circlemultiply = 768;\n    t.circleplus = 768;\n    t.emptyset = 823;\n    t.intersection = 768;\n    t.union = 768;\n    t.propersuperset = 713;\n    t.reflexsuperset = 713;\n    t.notsubset = 713;\n    t.propersubset = 713;\n    t.reflexsubset = 713;\n    t.element = 713;\n    t.notelement = 713;\n    t.angle = 768;\n    t.gradient = 713;\n    t.registerserif = 790;\n    t.copyrightserif = 790;\n    t.trademarkserif = 890;\n    t.product = 823;\n    t.radical = 549;\n    t.dotmath = 250;\n    t.logicalnot = 713;\n    t.logicaland = 603;\n    t.logicalor = 603;\n    t.arrowdblboth = 1042;\n    t.arrowdblleft = 987;\n    t.arrowdblup = 603;\n    t.arrowdblright = 987;\n    t.arrowdbldown = 603;\n    t.lozenge = 494;\n    t.angleleft = 329;\n    t.registersans = 790;\n    t.copyrightsans = 790;\n    t.trademarksans = 786;\n    t.summation = 713;\n    t.parenlefttp = 384;\n    t.parenleftex = 384;\n    t.parenleftbt = 384;\n    t.bracketlefttp = 384;\n    t.bracketleftex = 384;\n    t.bracketleftbt = 384;\n    t.bracelefttp = 494;\n    t.braceleftmid = 494;\n    t.braceleftbt = 494;\n    t.braceex = 494;\n    t.angleright = 329;\n    t.integral = 274;\n    t.integraltp = 686;\n    t.integralex = 686;\n    t.integralbt = 686;\n    t.parenrighttp = 384;\n    t.parenrightex = 384;\n    t.parenrightbt = 384;\n    t.bracketrighttp = 384;\n    t.bracketrightex = 384;\n    t.bracketrightbt = 384;\n    t.bracerighttp = 494;\n    t.bracerightmid = 494;\n    t.bracerightbt = 494;\n    t.apple = 790;\n  });\n  t[\"Times-Roman\"] = (0, _core_utils.getLookupTableFactory)(function (t) {\n    t.space = 250;\n    t.exclam = 333;\n    t.quotedbl = 408;\n    t.numbersign = 500;\n    t.dollar = 500;\n    t.percent = 833;\n    t.ampersand = 778;\n    t.quoteright = 333;\n    t.parenleft = 333;\n    t.parenright = 333;\n    t.asterisk = 500;\n    t.plus = 564;\n    t.comma = 250;\n    t.hyphen = 333;\n    t.period = 250;\n    t.slash = 278;\n    t.zero = 500;\n    t.one = 500;\n    t.two = 500;\n    t.three = 500;\n    t.four = 500;\n    t.five = 500;\n    t.six = 500;\n    t.seven = 500;\n    t.eight = 500;\n    t.nine = 500;\n    t.colon = 278;\n    t.semicolon = 278;\n    t.less = 564;\n    t.equal = 564;\n    t.greater = 564;\n    t.question = 444;\n    t.at = 921;\n    t.A = 722;\n    t.B = 667;\n    t.C = 667;\n    t.D = 722;\n    t.E = 611;\n    t.F = 556;\n    t.G = 722;\n    t.H = 722;\n    t.I = 333;\n    t.J = 389;\n    t.K = 722;\n    t.L = 611;\n    t.M = 889;\n    t.N = 722;\n    t.O = 722;\n    t.P = 556;\n    t.Q = 722;\n    t.R = 667;\n    t.S = 556;\n    t.T = 611;\n    t.U = 722;\n    t.V = 722;\n    t.W = 944;\n    t.X = 722;\n    t.Y = 722;\n    t.Z = 611;\n    t.bracketleft = 333;\n    t.backslash = 278;\n    t.bracketright = 333;\n    t.asciicircum = 469;\n    t.underscore = 500;\n    t.quoteleft = 333;\n    t.a = 444;\n    t.b = 500;\n    t.c = 444;\n    t.d = 500;\n    t.e = 444;\n    t.f = 333;\n    t.g = 500;\n    t.h = 500;\n    t.i = 278;\n    t.j = 278;\n    t.k = 500;\n    t.l = 278;\n    t.m = 778;\n    t.n = 500;\n    t.o = 500;\n    t.p = 500;\n    t.q = 500;\n    t.r = 333;\n    t.s = 389;\n    t.t = 278;\n    t.u = 500;\n    t.v = 500;\n    t.w = 722;\n    t.x = 500;\n    t.y = 500;\n    t.z = 444;\n    t.braceleft = 480;\n    t.bar = 200;\n    t.braceright = 480;\n    t.asciitilde = 541;\n    t.exclamdown = 333;\n    t.cent = 500;\n    t.sterling = 500;\n    t.fraction = 167;\n    t.yen = 500;\n    t.florin = 500;\n    t.section = 500;\n    t.currency = 500;\n    t.quotesingle = 180;\n    t.quotedblleft = 444;\n    t.guillemotleft = 500;\n    t.guilsinglleft = 333;\n    t.guilsinglright = 333;\n    t.fi = 556;\n    t.fl = 556;\n    t.endash = 500;\n    t.dagger = 500;\n    t.daggerdbl = 500;\n    t.periodcentered = 250;\n    t.paragraph = 453;\n    t.bullet = 350;\n    t.quotesinglbase = 333;\n    t.quotedblbase = 444;\n    t.quotedblright = 444;\n    t.guillemotright = 500;\n    t.ellipsis = 1000;\n    t.perthousand = 1000;\n    t.questiondown = 444;\n    t.grave = 333;\n    t.acute = 333;\n    t.circumflex = 333;\n    t.tilde = 333;\n    t.macron = 333;\n    t.breve = 333;\n    t.dotaccent = 333;\n    t.dieresis = 333;\n    t.ring = 333;\n    t.cedilla = 333;\n    t.hungarumlaut = 333;\n    t.ogonek = 333;\n    t.caron = 333;\n    t.emdash = 1000;\n    t.AE = 889;\n    t.ordfeminine = 276;\n    t.Lslash = 611;\n    t.Oslash = 722;\n    t.OE = 889;\n    t.ordmasculine = 310;\n    t.ae = 667;\n    t.dotlessi = 278;\n    t.lslash = 278;\n    t.oslash = 500;\n    t.oe = 722;\n    t.germandbls = 500;\n    t.Idieresis = 333;\n    t.eacute = 444;\n    t.abreve = 444;\n    t.uhungarumlaut = 500;\n    t.ecaron = 444;\n    t.Ydieresis = 722;\n    t.divide = 564;\n    t.Yacute = 722;\n    t.Acircumflex = 722;\n    t.aacute = 444;\n    t.Ucircumflex = 722;\n    t.yacute = 500;\n    t.scommaaccent = 389;\n    t.ecircumflex = 444;\n    t.Uring = 722;\n    t.Udieresis = 722;\n    t.aogonek = 444;\n    t.Uacute = 722;\n    t.uogonek = 500;\n    t.Edieresis = 611;\n    t.Dcroat = 722;\n    t.commaaccent = 250;\n    t.copyright = 760;\n    t.Emacron = 611;\n    t.ccaron = 444;\n    t.aring = 444;\n    t.Ncommaaccent = 722;\n    t.lacute = 278;\n    t.agrave = 444;\n    t.Tcommaaccent = 611;\n    t.Cacute = 667;\n    t.atilde = 444;\n    t.Edotaccent = 611;\n    t.scaron = 389;\n    t.scedilla = 389;\n    t.iacute = 278;\n    t.lozenge = 471;\n    t.Rcaron = 667;\n    t.Gcommaaccent = 722;\n    t.ucircumflex = 500;\n    t.acircumflex = 444;\n    t.Amacron = 722;\n    t.rcaron = 333;\n    t.ccedilla = 444;\n    t.Zdotaccent = 611;\n    t.Thorn = 556;\n    t.Omacron = 722;\n    t.Racute = 667;\n    t.Sacute = 556;\n    t.dcaron = 588;\n    t.Umacron = 722;\n    t.uring = 500;\n    t.threesuperior = 300;\n    t.Ograve = 722;\n    t.Agrave = 722;\n    t.Abreve = 722;\n    t.multiply = 564;\n    t.uacute = 500;\n    t.Tcaron = 611;\n    t.partialdiff = 476;\n    t.ydieresis = 500;\n    t.Nacute = 722;\n    t.icircumflex = 278;\n    t.Ecircumflex = 611;\n    t.adieresis = 444;\n    t.edieresis = 444;\n    t.cacute = 444;\n    t.nacute = 500;\n    t.umacron = 500;\n    t.Ncaron = 722;\n    t.Iacute = 333;\n    t.plusminus = 564;\n    t.brokenbar = 200;\n    t.registered = 760;\n    t.Gbreve = 722;\n    t.Idotaccent = 333;\n    t.summation = 600;\n    t.Egrave = 611;\n    t.racute = 333;\n    t.omacron = 500;\n    t.Zacute = 611;\n    t.Zcaron = 611;\n    t.greaterequal = 549;\n    t.Eth = 722;\n    t.Ccedilla = 667;\n    t.lcommaaccent = 278;\n    t.tcaron = 326;\n    t.eogonek = 444;\n    t.Uogonek = 722;\n    t.Aacute = 722;\n    t.Adieresis = 722;\n    t.egrave = 444;\n    t.zacute = 444;\n    t.iogonek = 278;\n    t.Oacute = 722;\n    t.oacute = 500;\n    t.amacron = 444;\n    t.sacute = 389;\n    t.idieresis = 278;\n    t.Ocircumflex = 722;\n    t.Ugrave = 722;\n    t.Delta = 612;\n    t.thorn = 500;\n    t.twosuperior = 300;\n    t.Odieresis = 722;\n    t.mu = 500;\n    t.igrave = 278;\n    t.ohungarumlaut = 500;\n    t.Eogonek = 611;\n    t.dcroat = 500;\n    t.threequarters = 750;\n    t.Scedilla = 556;\n    t.lcaron = 344;\n    t.Kcommaaccent = 722;\n    t.Lacute = 611;\n    t.trademark = 980;\n    t.edotaccent = 444;\n    t.Igrave = 333;\n    t.Imacron = 333;\n    t.Lcaron = 611;\n    t.onehalf = 750;\n    t.lessequal = 549;\n    t.ocircumflex = 500;\n    t.ntilde = 500;\n    t.Uhungarumlaut = 722;\n    t.Eacute = 611;\n    t.emacron = 444;\n    t.gbreve = 500;\n    t.onequarter = 750;\n    t.Scaron = 556;\n    t.Scommaaccent = 556;\n    t.Ohungarumlaut = 722;\n    t.degree = 400;\n    t.ograve = 500;\n    t.Ccaron = 667;\n    t.ugrave = 500;\n    t.radical = 453;\n    t.Dcaron = 722;\n    t.rcommaaccent = 333;\n    t.Ntilde = 722;\n    t.otilde = 500;\n    t.Rcommaaccent = 667;\n    t.Lcommaaccent = 611;\n    t.Atilde = 722;\n    t.Aogonek = 722;\n    t.Aring = 722;\n    t.Otilde = 722;\n    t.zdotaccent = 444;\n    t.Ecaron = 611;\n    t.Iogonek = 333;\n    t.kcommaaccent = 500;\n    t.minus = 564;\n    t.Icircumflex = 333;\n    t.ncaron = 500;\n    t.tcommaaccent = 278;\n    t.logicalnot = 564;\n    t.odieresis = 500;\n    t.udieresis = 500;\n    t.notequal = 549;\n    t.gcommaaccent = 500;\n    t.eth = 500;\n    t.zcaron = 444;\n    t.ncommaaccent = 500;\n    t.onesuperior = 300;\n    t.imacron = 278;\n    t.Euro = 500;\n  });\n  t[\"Times-Bold\"] = (0, _core_utils.getLookupTableFactory)(function (t) {\n    t.space = 250;\n    t.exclam = 333;\n    t.quotedbl = 555;\n    t.numbersign = 500;\n    t.dollar = 500;\n    t.percent = 1000;\n    t.ampersand = 833;\n    t.quoteright = 333;\n    t.parenleft = 333;\n    t.parenright = 333;\n    t.asterisk = 500;\n    t.plus = 570;\n    t.comma = 250;\n    t.hyphen = 333;\n    t.period = 250;\n    t.slash = 278;\n    t.zero = 500;\n    t.one = 500;\n    t.two = 500;\n    t.three = 500;\n    t.four = 500;\n    t.five = 500;\n    t.six = 500;\n    t.seven = 500;\n    t.eight = 500;\n    t.nine = 500;\n    t.colon = 333;\n    t.semicolon = 333;\n    t.less = 570;\n    t.equal = 570;\n    t.greater = 570;\n    t.question = 500;\n    t.at = 930;\n    t.A = 722;\n    t.B = 667;\n    t.C = 722;\n    t.D = 722;\n    t.E = 667;\n    t.F = 611;\n    t.G = 778;\n    t.H = 778;\n    t.I = 389;\n    t.J = 500;\n    t.K = 778;\n    t.L = 667;\n    t.M = 944;\n    t.N = 722;\n    t.O = 778;\n    t.P = 611;\n    t.Q = 778;\n    t.R = 722;\n    t.S = 556;\n    t.T = 667;\n    t.U = 722;\n    t.V = 722;\n    t.W = 1000;\n    t.X = 722;\n    t.Y = 722;\n    t.Z = 667;\n    t.bracketleft = 333;\n    t.backslash = 278;\n    t.bracketright = 333;\n    t.asciicircum = 581;\n    t.underscore = 500;\n    t.quoteleft = 333;\n    t.a = 500;\n    t.b = 556;\n    t.c = 444;\n    t.d = 556;\n    t.e = 444;\n    t.f = 333;\n    t.g = 500;\n    t.h = 556;\n    t.i = 278;\n    t.j = 333;\n    t.k = 556;\n    t.l = 278;\n    t.m = 833;\n    t.n = 556;\n    t.o = 500;\n    t.p = 556;\n    t.q = 556;\n    t.r = 444;\n    t.s = 389;\n    t.t = 333;\n    t.u = 556;\n    t.v = 500;\n    t.w = 722;\n    t.x = 500;\n    t.y = 500;\n    t.z = 444;\n    t.braceleft = 394;\n    t.bar = 220;\n    t.braceright = 394;\n    t.asciitilde = 520;\n    t.exclamdown = 333;\n    t.cent = 500;\n    t.sterling = 500;\n    t.fraction = 167;\n    t.yen = 500;\n    t.florin = 500;\n    t.section = 500;\n    t.currency = 500;\n    t.quotesingle = 278;\n    t.quotedblleft = 500;\n    t.guillemotleft = 500;\n    t.guilsinglleft = 333;\n    t.guilsinglright = 333;\n    t.fi = 556;\n    t.fl = 556;\n    t.endash = 500;\n    t.dagger = 500;\n    t.daggerdbl = 500;\n    t.periodcentered = 250;\n    t.paragraph = 540;\n    t.bullet = 350;\n    t.quotesinglbase = 333;\n    t.quotedblbase = 500;\n    t.quotedblright = 500;\n    t.guillemotright = 500;\n    t.ellipsis = 1000;\n    t.perthousand = 1000;\n    t.questiondown = 500;\n    t.grave = 333;\n    t.acute = 333;\n    t.circumflex = 333;\n    t.tilde = 333;\n    t.macron = 333;\n    t.breve = 333;\n    t.dotaccent = 333;\n    t.dieresis = 333;\n    t.ring = 333;\n    t.cedilla = 333;\n    t.hungarumlaut = 333;\n    t.ogonek = 333;\n    t.caron = 333;\n    t.emdash = 1000;\n    t.AE = 1000;\n    t.ordfeminine = 300;\n    t.Lslash = 667;\n    t.Oslash = 778;\n    t.OE = 1000;\n    t.ordmasculine = 330;\n    t.ae = 722;\n    t.dotlessi = 278;\n    t.lslash = 278;\n    t.oslash = 500;\n    t.oe = 722;\n    t.germandbls = 556;\n    t.Idieresis = 389;\n    t.eacute = 444;\n    t.abreve = 500;\n    t.uhungarumlaut = 556;\n    t.ecaron = 444;\n    t.Ydieresis = 722;\n    t.divide = 570;\n    t.Yacute = 722;\n    t.Acircumflex = 722;\n    t.aacute = 500;\n    t.Ucircumflex = 722;\n    t.yacute = 500;\n    t.scommaaccent = 389;\n    t.ecircumflex = 444;\n    t.Uring = 722;\n    t.Udieresis = 722;\n    t.aogonek = 500;\n    t.Uacute = 722;\n    t.uogonek = 556;\n    t.Edieresis = 667;\n    t.Dcroat = 722;\n    t.commaaccent = 250;\n    t.copyright = 747;\n    t.Emacron = 667;\n    t.ccaron = 444;\n    t.aring = 500;\n    t.Ncommaaccent = 722;\n    t.lacute = 278;\n    t.agrave = 500;\n    t.Tcommaaccent = 667;\n    t.Cacute = 722;\n    t.atilde = 500;\n    t.Edotaccent = 667;\n    t.scaron = 389;\n    t.scedilla = 389;\n    t.iacute = 278;\n    t.lozenge = 494;\n    t.Rcaron = 722;\n    t.Gcommaaccent = 778;\n    t.ucircumflex = 556;\n    t.acircumflex = 500;\n    t.Amacron = 722;\n    t.rcaron = 444;\n    t.ccedilla = 444;\n    t.Zdotaccent = 667;\n    t.Thorn = 611;\n    t.Omacron = 778;\n    t.Racute = 722;\n    t.Sacute = 556;\n    t.dcaron = 672;\n    t.Umacron = 722;\n    t.uring = 556;\n    t.threesuperior = 300;\n    t.Ograve = 778;\n    t.Agrave = 722;\n    t.Abreve = 722;\n    t.multiply = 570;\n    t.uacute = 556;\n    t.Tcaron = 667;\n    t.partialdiff = 494;\n    t.ydieresis = 500;\n    t.Nacute = 722;\n    t.icircumflex = 278;\n    t.Ecircumflex = 667;\n    t.adieresis = 500;\n    t.edieresis = 444;\n    t.cacute = 444;\n    t.nacute = 556;\n    t.umacron = 556;\n    t.Ncaron = 722;\n    t.Iacute = 389;\n    t.plusminus = 570;\n    t.brokenbar = 220;\n    t.registered = 747;\n    t.Gbreve = 778;\n    t.Idotaccent = 389;\n    t.summation = 600;\n    t.Egrave = 667;\n    t.racute = 444;\n    t.omacron = 500;\n    t.Zacute = 667;\n    t.Zcaron = 667;\n    t.greaterequal = 549;\n    t.Eth = 722;\n    t.Ccedilla = 722;\n    t.lcommaaccent = 278;\n    t.tcaron = 416;\n    t.eogonek = 444;\n    t.Uogonek = 722;\n    t.Aacute = 722;\n    t.Adieresis = 722;\n    t.egrave = 444;\n    t.zacute = 444;\n    t.iogonek = 278;\n    t.Oacute = 778;\n    t.oacute = 500;\n    t.amacron = 500;\n    t.sacute = 389;\n    t.idieresis = 278;\n    t.Ocircumflex = 778;\n    t.Ugrave = 722;\n    t.Delta = 612;\n    t.thorn = 556;\n    t.twosuperior = 300;\n    t.Odieresis = 778;\n    t.mu = 556;\n    t.igrave = 278;\n    t.ohungarumlaut = 500;\n    t.Eogonek = 667;\n    t.dcroat = 556;\n    t.threequarters = 750;\n    t.Scedilla = 556;\n    t.lcaron = 394;\n    t.Kcommaaccent = 778;\n    t.Lacute = 667;\n    t.trademark = 1000;\n    t.edotaccent = 444;\n    t.Igrave = 389;\n    t.Imacron = 389;\n    t.Lcaron = 667;\n    t.onehalf = 750;\n    t.lessequal = 549;\n    t.ocircumflex = 500;\n    t.ntilde = 556;\n    t.Uhungarumlaut = 722;\n    t.Eacute = 667;\n    t.emacron = 444;\n    t.gbreve = 500;\n    t.onequarter = 750;\n    t.Scaron = 556;\n    t.Scommaaccent = 556;\n    t.Ohungarumlaut = 778;\n    t.degree = 400;\n    t.ograve = 500;\n    t.Ccaron = 722;\n    t.ugrave = 556;\n    t.radical = 549;\n    t.Dcaron = 722;\n    t.rcommaaccent = 444;\n    t.Ntilde = 722;\n    t.otilde = 500;\n    t.Rcommaaccent = 722;\n    t.Lcommaaccent = 667;\n    t.Atilde = 722;\n    t.Aogonek = 722;\n    t.Aring = 722;\n    t.Otilde = 778;\n    t.zdotaccent = 444;\n    t.Ecaron = 667;\n    t.Iogonek = 389;\n    t.kcommaaccent = 556;\n    t.minus = 570;\n    t.Icircumflex = 389;\n    t.ncaron = 556;\n    t.tcommaaccent = 333;\n    t.logicalnot = 570;\n    t.odieresis = 500;\n    t.udieresis = 556;\n    t.notequal = 549;\n    t.gcommaaccent = 500;\n    t.eth = 500;\n    t.zcaron = 444;\n    t.ncommaaccent = 556;\n    t.onesuperior = 300;\n    t.imacron = 278;\n    t.Euro = 500;\n  });\n  t[\"Times-BoldItalic\"] = (0, _core_utils.getLookupTableFactory)(function (t) {\n    t.space = 250;\n    t.exclam = 389;\n    t.quotedbl = 555;\n    t.numbersign = 500;\n    t.dollar = 500;\n    t.percent = 833;\n    t.ampersand = 778;\n    t.quoteright = 333;\n    t.parenleft = 333;\n    t.parenright = 333;\n    t.asterisk = 500;\n    t.plus = 570;\n    t.comma = 250;\n    t.hyphen = 333;\n    t.period = 250;\n    t.slash = 278;\n    t.zero = 500;\n    t.one = 500;\n    t.two = 500;\n    t.three = 500;\n    t.four = 500;\n    t.five = 500;\n    t.six = 500;\n    t.seven = 500;\n    t.eight = 500;\n    t.nine = 500;\n    t.colon = 333;\n    t.semicolon = 333;\n    t.less = 570;\n    t.equal = 570;\n    t.greater = 570;\n    t.question = 500;\n    t.at = 832;\n    t.A = 667;\n    t.B = 667;\n    t.C = 667;\n    t.D = 722;\n    t.E = 667;\n    t.F = 667;\n    t.G = 722;\n    t.H = 778;\n    t.I = 389;\n    t.J = 500;\n    t.K = 667;\n    t.L = 611;\n    t.M = 889;\n    t.N = 722;\n    t.O = 722;\n    t.P = 611;\n    t.Q = 722;\n    t.R = 667;\n    t.S = 556;\n    t.T = 611;\n    t.U = 722;\n    t.V = 667;\n    t.W = 889;\n    t.X = 667;\n    t.Y = 611;\n    t.Z = 611;\n    t.bracketleft = 333;\n    t.backslash = 278;\n    t.bracketright = 333;\n    t.asciicircum = 570;\n    t.underscore = 500;\n    t.quoteleft = 333;\n    t.a = 500;\n    t.b = 500;\n    t.c = 444;\n    t.d = 500;\n    t.e = 444;\n    t.f = 333;\n    t.g = 500;\n    t.h = 556;\n    t.i = 278;\n    t.j = 278;\n    t.k = 500;\n    t.l = 278;\n    t.m = 778;\n    t.n = 556;\n    t.o = 500;\n    t.p = 500;\n    t.q = 500;\n    t.r = 389;\n    t.s = 389;\n    t.t = 278;\n    t.u = 556;\n    t.v = 444;\n    t.w = 667;\n    t.x = 500;\n    t.y = 444;\n    t.z = 389;\n    t.braceleft = 348;\n    t.bar = 220;\n    t.braceright = 348;\n    t.asciitilde = 570;\n    t.exclamdown = 389;\n    t.cent = 500;\n    t.sterling = 500;\n    t.fraction = 167;\n    t.yen = 500;\n    t.florin = 500;\n    t.section = 500;\n    t.currency = 500;\n    t.quotesingle = 278;\n    t.quotedblleft = 500;\n    t.guillemotleft = 500;\n    t.guilsinglleft = 333;\n    t.guilsinglright = 333;\n    t.fi = 556;\n    t.fl = 556;\n    t.endash = 500;\n    t.dagger = 500;\n    t.daggerdbl = 500;\n    t.periodcentered = 250;\n    t.paragraph = 500;\n    t.bullet = 350;\n    t.quotesinglbase = 333;\n    t.quotedblbase = 500;\n    t.quotedblright = 500;\n    t.guillemotright = 500;\n    t.ellipsis = 1000;\n    t.perthousand = 1000;\n    t.questiondown = 500;\n    t.grave = 333;\n    t.acute = 333;\n    t.circumflex = 333;\n    t.tilde = 333;\n    t.macron = 333;\n    t.breve = 333;\n    t.dotaccent = 333;\n    t.dieresis = 333;\n    t.ring = 333;\n    t.cedilla = 333;\n    t.hungarumlaut = 333;\n    t.ogonek = 333;\n    t.caron = 333;\n    t.emdash = 1000;\n    t.AE = 944;\n    t.ordfeminine = 266;\n    t.Lslash = 611;\n    t.Oslash = 722;\n    t.OE = 944;\n    t.ordmasculine = 300;\n    t.ae = 722;\n    t.dotlessi = 278;\n    t.lslash = 278;\n    t.oslash = 500;\n    t.oe = 722;\n    t.germandbls = 500;\n    t.Idieresis = 389;\n    t.eacute = 444;\n    t.abreve = 500;\n    t.uhungarumlaut = 556;\n    t.ecaron = 444;\n    t.Ydieresis = 611;\n    t.divide = 570;\n    t.Yacute = 611;\n    t.Acircumflex = 667;\n    t.aacute = 500;\n    t.Ucircumflex = 722;\n    t.yacute = 444;\n    t.scommaaccent = 389;\n    t.ecircumflex = 444;\n    t.Uring = 722;\n    t.Udieresis = 722;\n    t.aogonek = 500;\n    t.Uacute = 722;\n    t.uogonek = 556;\n    t.Edieresis = 667;\n    t.Dcroat = 722;\n    t.commaaccent = 250;\n    t.copyright = 747;\n    t.Emacron = 667;\n    t.ccaron = 444;\n    t.aring = 500;\n    t.Ncommaaccent = 722;\n    t.lacute = 278;\n    t.agrave = 500;\n    t.Tcommaaccent = 611;\n    t.Cacute = 667;\n    t.atilde = 500;\n    t.Edotaccent = 667;\n    t.scaron = 389;\n    t.scedilla = 389;\n    t.iacute = 278;\n    t.lozenge = 494;\n    t.Rcaron = 667;\n    t.Gcommaaccent = 722;\n    t.ucircumflex = 556;\n    t.acircumflex = 500;\n    t.Amacron = 667;\n    t.rcaron = 389;\n    t.ccedilla = 444;\n    t.Zdotaccent = 611;\n    t.Thorn = 611;\n    t.Omacron = 722;\n    t.Racute = 667;\n    t.Sacute = 556;\n    t.dcaron = 608;\n    t.Umacron = 722;\n    t.uring = 556;\n    t.threesuperior = 300;\n    t.Ograve = 722;\n    t.Agrave = 667;\n    t.Abreve = 667;\n    t.multiply = 570;\n    t.uacute = 556;\n    t.Tcaron = 611;\n    t.partialdiff = 494;\n    t.ydieresis = 444;\n    t.Nacute = 722;\n    t.icircumflex = 278;\n    t.Ecircumflex = 667;\n    t.adieresis = 500;\n    t.edieresis = 444;\n    t.cacute = 444;\n    t.nacute = 556;\n    t.umacron = 556;\n    t.Ncaron = 722;\n    t.Iacute = 389;\n    t.plusminus = 570;\n    t.brokenbar = 220;\n    t.registered = 747;\n    t.Gbreve = 722;\n    t.Idotaccent = 389;\n    t.summation = 600;\n    t.Egrave = 667;\n    t.racute = 389;\n    t.omacron = 500;\n    t.Zacute = 611;\n    t.Zcaron = 611;\n    t.greaterequal = 549;\n    t.Eth = 722;\n    t.Ccedilla = 667;\n    t.lcommaaccent = 278;\n    t.tcaron = 366;\n    t.eogonek = 444;\n    t.Uogonek = 722;\n    t.Aacute = 667;\n    t.Adieresis = 667;\n    t.egrave = 444;\n    t.zacute = 389;\n    t.iogonek = 278;\n    t.Oacute = 722;\n    t.oacute = 500;\n    t.amacron = 500;\n    t.sacute = 389;\n    t.idieresis = 278;\n    t.Ocircumflex = 722;\n    t.Ugrave = 722;\n    t.Delta = 612;\n    t.thorn = 500;\n    t.twosuperior = 300;\n    t.Odieresis = 722;\n    t.mu = 576;\n    t.igrave = 278;\n    t.ohungarumlaut = 500;\n    t.Eogonek = 667;\n    t.dcroat = 500;\n    t.threequarters = 750;\n    t.Scedilla = 556;\n    t.lcaron = 382;\n    t.Kcommaaccent = 667;\n    t.Lacute = 611;\n    t.trademark = 1000;\n    t.edotaccent = 444;\n    t.Igrave = 389;\n    t.Imacron = 389;\n    t.Lcaron = 611;\n    t.onehalf = 750;\n    t.lessequal = 549;\n    t.ocircumflex = 500;\n    t.ntilde = 556;\n    t.Uhungarumlaut = 722;\n    t.Eacute = 667;\n    t.emacron = 444;\n    t.gbreve = 500;\n    t.onequarter = 750;\n    t.Scaron = 556;\n    t.Scommaaccent = 556;\n    t.Ohungarumlaut = 722;\n    t.degree = 400;\n    t.ograve = 500;\n    t.Ccaron = 667;\n    t.ugrave = 556;\n    t.radical = 549;\n    t.Dcaron = 722;\n    t.rcommaaccent = 389;\n    t.Ntilde = 722;\n    t.otilde = 500;\n    t.Rcommaaccent = 667;\n    t.Lcommaaccent = 611;\n    t.Atilde = 667;\n    t.Aogonek = 667;\n    t.Aring = 667;\n    t.Otilde = 722;\n    t.zdotaccent = 389;\n    t.Ecaron = 667;\n    t.Iogonek = 389;\n    t.kcommaaccent = 500;\n    t.minus = 606;\n    t.Icircumflex = 389;\n    t.ncaron = 556;\n    t.tcommaaccent = 278;\n    t.logicalnot = 606;\n    t.odieresis = 500;\n    t.udieresis = 556;\n    t.notequal = 549;\n    t.gcommaaccent = 500;\n    t.eth = 500;\n    t.zcaron = 389;\n    t.ncommaaccent = 556;\n    t.onesuperior = 300;\n    t.imacron = 278;\n    t.Euro = 500;\n  });\n  t[\"Times-Italic\"] = (0, _core_utils.getLookupTableFactory)(function (t) {\n    t.space = 250;\n    t.exclam = 333;\n    t.quotedbl = 420;\n    t.numbersign = 500;\n    t.dollar = 500;\n    t.percent = 833;\n    t.ampersand = 778;\n    t.quoteright = 333;\n    t.parenleft = 333;\n    t.parenright = 333;\n    t.asterisk = 500;\n    t.plus = 675;\n    t.comma = 250;\n    t.hyphen = 333;\n    t.period = 250;\n    t.slash = 278;\n    t.zero = 500;\n    t.one = 500;\n    t.two = 500;\n    t.three = 500;\n    t.four = 500;\n    t.five = 500;\n    t.six = 500;\n    t.seven = 500;\n    t.eight = 500;\n    t.nine = 500;\n    t.colon = 333;\n    t.semicolon = 333;\n    t.less = 675;\n    t.equal = 675;\n    t.greater = 675;\n    t.question = 500;\n    t.at = 920;\n    t.A = 611;\n    t.B = 611;\n    t.C = 667;\n    t.D = 722;\n    t.E = 611;\n    t.F = 611;\n    t.G = 722;\n    t.H = 722;\n    t.I = 333;\n    t.J = 444;\n    t.K = 667;\n    t.L = 556;\n    t.M = 833;\n    t.N = 667;\n    t.O = 722;\n    t.P = 611;\n    t.Q = 722;\n    t.R = 611;\n    t.S = 500;\n    t.T = 556;\n    t.U = 722;\n    t.V = 611;\n    t.W = 833;\n    t.X = 611;\n    t.Y = 556;\n    t.Z = 556;\n    t.bracketleft = 389;\n    t.backslash = 278;\n    t.bracketright = 389;\n    t.asciicircum = 422;\n    t.underscore = 500;\n    t.quoteleft = 333;\n    t.a = 500;\n    t.b = 500;\n    t.c = 444;\n    t.d = 500;\n    t.e = 444;\n    t.f = 278;\n    t.g = 500;\n    t.h = 500;\n    t.i = 278;\n    t.j = 278;\n    t.k = 444;\n    t.l = 278;\n    t.m = 722;\n    t.n = 500;\n    t.o = 500;\n    t.p = 500;\n    t.q = 500;\n    t.r = 389;\n    t.s = 389;\n    t.t = 278;\n    t.u = 500;\n    t.v = 444;\n    t.w = 667;\n    t.x = 444;\n    t.y = 444;\n    t.z = 389;\n    t.braceleft = 400;\n    t.bar = 275;\n    t.braceright = 400;\n    t.asciitilde = 541;\n    t.exclamdown = 389;\n    t.cent = 500;\n    t.sterling = 500;\n    t.fraction = 167;\n    t.yen = 500;\n    t.florin = 500;\n    t.section = 500;\n    t.currency = 500;\n    t.quotesingle = 214;\n    t.quotedblleft = 556;\n    t.guillemotleft = 500;\n    t.guilsinglleft = 333;\n    t.guilsinglright = 333;\n    t.fi = 500;\n    t.fl = 500;\n    t.endash = 500;\n    t.dagger = 500;\n    t.daggerdbl = 500;\n    t.periodcentered = 250;\n    t.paragraph = 523;\n    t.bullet = 350;\n    t.quotesinglbase = 333;\n    t.quotedblbase = 556;\n    t.quotedblright = 556;\n    t.guillemotright = 500;\n    t.ellipsis = 889;\n    t.perthousand = 1000;\n    t.questiondown = 500;\n    t.grave = 333;\n    t.acute = 333;\n    t.circumflex = 333;\n    t.tilde = 333;\n    t.macron = 333;\n    t.breve = 333;\n    t.dotaccent = 333;\n    t.dieresis = 333;\n    t.ring = 333;\n    t.cedilla = 333;\n    t.hungarumlaut = 333;\n    t.ogonek = 333;\n    t.caron = 333;\n    t.emdash = 889;\n    t.AE = 889;\n    t.ordfeminine = 276;\n    t.Lslash = 556;\n    t.Oslash = 722;\n    t.OE = 944;\n    t.ordmasculine = 310;\n    t.ae = 667;\n    t.dotlessi = 278;\n    t.lslash = 278;\n    t.oslash = 500;\n    t.oe = 667;\n    t.germandbls = 500;\n    t.Idieresis = 333;\n    t.eacute = 444;\n    t.abreve = 500;\n    t.uhungarumlaut = 500;\n    t.ecaron = 444;\n    t.Ydieresis = 556;\n    t.divide = 675;\n    t.Yacute = 556;\n    t.Acircumflex = 611;\n    t.aacute = 500;\n    t.Ucircumflex = 722;\n    t.yacute = 444;\n    t.scommaaccent = 389;\n    t.ecircumflex = 444;\n    t.Uring = 722;\n    t.Udieresis = 722;\n    t.aogonek = 500;\n    t.Uacute = 722;\n    t.uogonek = 500;\n    t.Edieresis = 611;\n    t.Dcroat = 722;\n    t.commaaccent = 250;\n    t.copyright = 760;\n    t.Emacron = 611;\n    t.ccaron = 444;\n    t.aring = 500;\n    t.Ncommaaccent = 667;\n    t.lacute = 278;\n    t.agrave = 500;\n    t.Tcommaaccent = 556;\n    t.Cacute = 667;\n    t.atilde = 500;\n    t.Edotaccent = 611;\n    t.scaron = 389;\n    t.scedilla = 389;\n    t.iacute = 278;\n    t.lozenge = 471;\n    t.Rcaron = 611;\n    t.Gcommaaccent = 722;\n    t.ucircumflex = 500;\n    t.acircumflex = 500;\n    t.Amacron = 611;\n    t.rcaron = 389;\n    t.ccedilla = 444;\n    t.Zdotaccent = 556;\n    t.Thorn = 611;\n    t.Omacron = 722;\n    t.Racute = 611;\n    t.Sacute = 500;\n    t.dcaron = 544;\n    t.Umacron = 722;\n    t.uring = 500;\n    t.threesuperior = 300;\n    t.Ograve = 722;\n    t.Agrave = 611;\n    t.Abreve = 611;\n    t.multiply = 675;\n    t.uacute = 500;\n    t.Tcaron = 556;\n    t.partialdiff = 476;\n    t.ydieresis = 444;\n    t.Nacute = 667;\n    t.icircumflex = 278;\n    t.Ecircumflex = 611;\n    t.adieresis = 500;\n    t.edieresis = 444;\n    t.cacute = 444;\n    t.nacute = 500;\n    t.umacron = 500;\n    t.Ncaron = 667;\n    t.Iacute = 333;\n    t.plusminus = 675;\n    t.brokenbar = 275;\n    t.registered = 760;\n    t.Gbreve = 722;\n    t.Idotaccent = 333;\n    t.summation = 600;\n    t.Egrave = 611;\n    t.racute = 389;\n    t.omacron = 500;\n    t.Zacute = 556;\n    t.Zcaron = 556;\n    t.greaterequal = 549;\n    t.Eth = 722;\n    t.Ccedilla = 667;\n    t.lcommaaccent = 278;\n    t.tcaron = 300;\n    t.eogonek = 444;\n    t.Uogonek = 722;\n    t.Aacute = 611;\n    t.Adieresis = 611;\n    t.egrave = 444;\n    t.zacute = 389;\n    t.iogonek = 278;\n    t.Oacute = 722;\n    t.oacute = 500;\n    t.amacron = 500;\n    t.sacute = 389;\n    t.idieresis = 278;\n    t.Ocircumflex = 722;\n    t.Ugrave = 722;\n    t.Delta = 612;\n    t.thorn = 500;\n    t.twosuperior = 300;\n    t.Odieresis = 722;\n    t.mu = 500;\n    t.igrave = 278;\n    t.ohungarumlaut = 500;\n    t.Eogonek = 611;\n    t.dcroat = 500;\n    t.threequarters = 750;\n    t.Scedilla = 500;\n    t.lcaron = 300;\n    t.Kcommaaccent = 667;\n    t.Lacute = 556;\n    t.trademark = 980;\n    t.edotaccent = 444;\n    t.Igrave = 333;\n    t.Imacron = 333;\n    t.Lcaron = 611;\n    t.onehalf = 750;\n    t.lessequal = 549;\n    t.ocircumflex = 500;\n    t.ntilde = 500;\n    t.Uhungarumlaut = 722;\n    t.Eacute = 611;\n    t.emacron = 444;\n    t.gbreve = 500;\n    t.onequarter = 750;\n    t.Scaron = 500;\n    t.Scommaaccent = 500;\n    t.Ohungarumlaut = 722;\n    t.degree = 400;\n    t.ograve = 500;\n    t.Ccaron = 667;\n    t.ugrave = 500;\n    t.radical = 453;\n    t.Dcaron = 722;\n    t.rcommaaccent = 389;\n    t.Ntilde = 667;\n    t.otilde = 500;\n    t.Rcommaaccent = 611;\n    t.Lcommaaccent = 556;\n    t.Atilde = 611;\n    t.Aogonek = 611;\n    t.Aring = 611;\n    t.Otilde = 722;\n    t.zdotaccent = 389;\n    t.Ecaron = 611;\n    t.Iogonek = 333;\n    t.kcommaaccent = 444;\n    t.minus = 675;\n    t.Icircumflex = 333;\n    t.ncaron = 500;\n    t.tcommaaccent = 278;\n    t.logicalnot = 675;\n    t.odieresis = 500;\n    t.udieresis = 500;\n    t.notequal = 549;\n    t.gcommaaccent = 500;\n    t.eth = 500;\n    t.zcaron = 389;\n    t.ncommaaccent = 500;\n    t.onesuperior = 300;\n    t.imacron = 278;\n    t.Euro = 500;\n  });\n  t.ZapfDingbats = (0, _core_utils.getLookupTableFactory)(function (t) {\n    t.space = 278;\n    t.a1 = 974;\n    t.a2 = 961;\n    t.a202 = 974;\n    t.a3 = 980;\n    t.a4 = 719;\n    t.a5 = 789;\n    t.a119 = 790;\n    t.a118 = 791;\n    t.a117 = 690;\n    t.a11 = 960;\n    t.a12 = 939;\n    t.a13 = 549;\n    t.a14 = 855;\n    t.a15 = 911;\n    t.a16 = 933;\n    t.a105 = 911;\n    t.a17 = 945;\n    t.a18 = 974;\n    t.a19 = 755;\n    t.a20 = 846;\n    t.a21 = 762;\n    t.a22 = 761;\n    t.a23 = 571;\n    t.a24 = 677;\n    t.a25 = 763;\n    t.a26 = 760;\n    t.a27 = 759;\n    t.a28 = 754;\n    t.a6 = 494;\n    t.a7 = 552;\n    t.a8 = 537;\n    t.a9 = 577;\n    t.a10 = 692;\n    t.a29 = 786;\n    t.a30 = 788;\n    t.a31 = 788;\n    t.a32 = 790;\n    t.a33 = 793;\n    t.a34 = 794;\n    t.a35 = 816;\n    t.a36 = 823;\n    t.a37 = 789;\n    t.a38 = 841;\n    t.a39 = 823;\n    t.a40 = 833;\n    t.a41 = 816;\n    t.a42 = 831;\n    t.a43 = 923;\n    t.a44 = 744;\n    t.a45 = 723;\n    t.a46 = 749;\n    t.a47 = 790;\n    t.a48 = 792;\n    t.a49 = 695;\n    t.a50 = 776;\n    t.a51 = 768;\n    t.a52 = 792;\n    t.a53 = 759;\n    t.a54 = 707;\n    t.a55 = 708;\n    t.a56 = 682;\n    t.a57 = 701;\n    t.a58 = 826;\n    t.a59 = 815;\n    t.a60 = 789;\n    t.a61 = 789;\n    t.a62 = 707;\n    t.a63 = 687;\n    t.a64 = 696;\n    t.a65 = 689;\n    t.a66 = 786;\n    t.a67 = 787;\n    t.a68 = 713;\n    t.a69 = 791;\n    t.a70 = 785;\n    t.a71 = 791;\n    t.a72 = 873;\n    t.a73 = 761;\n    t.a74 = 762;\n    t.a203 = 762;\n    t.a75 = 759;\n    t.a204 = 759;\n    t.a76 = 892;\n    t.a77 = 892;\n    t.a78 = 788;\n    t.a79 = 784;\n    t.a81 = 438;\n    t.a82 = 138;\n    t.a83 = 277;\n    t.a84 = 415;\n    t.a97 = 392;\n    t.a98 = 392;\n    t.a99 = 668;\n    t.a100 = 668;\n    t.a89 = 390;\n    t.a90 = 390;\n    t.a93 = 317;\n    t.a94 = 317;\n    t.a91 = 276;\n    t.a92 = 276;\n    t.a205 = 509;\n    t.a85 = 509;\n    t.a206 = 410;\n    t.a86 = 410;\n    t.a87 = 234;\n    t.a88 = 234;\n    t.a95 = 334;\n    t.a96 = 334;\n    t.a101 = 732;\n    t.a102 = 544;\n    t.a103 = 544;\n    t.a104 = 910;\n    t.a106 = 667;\n    t.a107 = 760;\n    t.a108 = 760;\n    t.a112 = 776;\n    t.a111 = 595;\n    t.a110 = 694;\n    t.a109 = 626;\n    t.a120 = 788;\n    t.a121 = 788;\n    t.a122 = 788;\n    t.a123 = 788;\n    t.a124 = 788;\n    t.a125 = 788;\n    t.a126 = 788;\n    t.a127 = 788;\n    t.a128 = 788;\n    t.a129 = 788;\n    t.a130 = 788;\n    t.a131 = 788;\n    t.a132 = 788;\n    t.a133 = 788;\n    t.a134 = 788;\n    t.a135 = 788;\n    t.a136 = 788;\n    t.a137 = 788;\n    t.a138 = 788;\n    t.a139 = 788;\n    t.a140 = 788;\n    t.a141 = 788;\n    t.a142 = 788;\n    t.a143 = 788;\n    t.a144 = 788;\n    t.a145 = 788;\n    t.a146 = 788;\n    t.a147 = 788;\n    t.a148 = 788;\n    t.a149 = 788;\n    t.a150 = 788;\n    t.a151 = 788;\n    t.a152 = 788;\n    t.a153 = 788;\n    t.a154 = 788;\n    t.a155 = 788;\n    t.a156 = 788;\n    t.a157 = 788;\n    t.a158 = 788;\n    t.a159 = 788;\n    t.a160 = 894;\n    t.a161 = 838;\n    t.a163 = 1016;\n    t.a164 = 458;\n    t.a196 = 748;\n    t.a165 = 924;\n    t.a192 = 748;\n    t.a166 = 918;\n    t.a167 = 927;\n    t.a168 = 928;\n    t.a169 = 928;\n    t.a170 = 834;\n    t.a171 = 873;\n    t.a172 = 828;\n    t.a173 = 924;\n    t.a162 = 924;\n    t.a174 = 917;\n    t.a175 = 930;\n    t.a176 = 931;\n    t.a177 = 463;\n    t.a178 = 883;\n    t.a179 = 836;\n    t.a193 = 836;\n    t.a180 = 867;\n    t.a199 = 867;\n    t.a181 = 696;\n    t.a200 = 696;\n    t.a182 = 874;\n    t.a201 = 874;\n    t.a183 = 760;\n    t.a184 = 946;\n    t.a197 = 771;\n    t.a185 = 865;\n    t.a194 = 771;\n    t.a198 = 888;\n    t.a186 = 967;\n    t.a195 = 888;\n    t.a187 = 831;\n    t.a188 = 873;\n    t.a189 = 927;\n    t.a190 = 970;\n    t.a191 = 918;\n  });\n});\nexports.getMetrics = getMetrics;\n\n/***/ }),\n/* 43 */\n/***/ ((__unused_webpack_module, exports, __w_pdfjs_require__) => {\n\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.MurmurHash3_64 = void 0;\n\nvar _util = __w_pdfjs_require__(2);\n\nconst SEED = 0xc3d2e1f0;\nconst MASK_HIGH = 0xffff0000;\nconst MASK_LOW = 0xffff;\n\nclass MurmurHash3_64 {\n  constructor(seed) {\n    this.h1 = seed ? seed & 0xffffffff : SEED;\n    this.h2 = seed ? seed & 0xffffffff : SEED;\n  }\n\n  update(input) {\n    let data, length;\n\n    if ((0, _util.isString)(input)) {\n      data = new Uint8Array(input.length * 2);\n      length = 0;\n\n      for (let i = 0, ii = input.length; i < ii; i++) {\n        const code = input.charCodeAt(i);\n\n        if (code <= 0xff) {\n          data[length++] = code;\n        } else {\n          data[length++] = code >>> 8;\n          data[length++] = code & 0xff;\n        }\n      }\n    } else if ((0, _util.isArrayBuffer)(input)) {\n      data = input.slice();\n      length = data.byteLength;\n    } else {\n      throw new Error(\"Wrong data format in MurmurHash3_64_update. \" + \"Input must be a string or array.\");\n    }\n\n    const blockCounts = length >> 2;\n    const tailLength = length - blockCounts * 4;\n    const dataUint32 = new Uint32Array(data.buffer, 0, blockCounts);\n    let k1 = 0,\n        k2 = 0;\n    let h1 = this.h1,\n        h2 = this.h2;\n    const C1 = 0xcc9e2d51,\n          C2 = 0x1b873593;\n    const C1_LOW = C1 & MASK_LOW,\n          C2_LOW = C2 & MASK_LOW;\n\n    for (let i = 0; i < blockCounts; i++) {\n      if (i & 1) {\n        k1 = dataUint32[i];\n        k1 = k1 * C1 & MASK_HIGH | k1 * C1_LOW & MASK_LOW;\n        k1 = k1 << 15 | k1 >>> 17;\n        k1 = k1 * C2 & MASK_HIGH | k1 * C2_LOW & MASK_LOW;\n        h1 ^= k1;\n        h1 = h1 << 13 | h1 >>> 19;\n        h1 = h1 * 5 + 0xe6546b64;\n      } else {\n        k2 = dataUint32[i];\n        k2 = k2 * C1 & MASK_HIGH | k2 * C1_LOW & MASK_LOW;\n        k2 = k2 << 15 | k2 >>> 17;\n        k2 = k2 * C2 & MASK_HIGH | k2 * C2_LOW & MASK_LOW;\n        h2 ^= k2;\n        h2 = h2 << 13 | h2 >>> 19;\n        h2 = h2 * 5 + 0xe6546b64;\n      }\n    }\n\n    k1 = 0;\n\n    switch (tailLength) {\n      case 3:\n        k1 ^= data[blockCounts * 4 + 2] << 16;\n\n      case 2:\n        k1 ^= data[blockCounts * 4 + 1] << 8;\n\n      case 1:\n        k1 ^= data[blockCounts * 4];\n        k1 = k1 * C1 & MASK_HIGH | k1 * C1_LOW & MASK_LOW;\n        k1 = k1 << 15 | k1 >>> 17;\n        k1 = k1 * C2 & MASK_HIGH | k1 * C2_LOW & MASK_LOW;\n\n        if (blockCounts & 1) {\n          h1 ^= k1;\n        } else {\n          h2 ^= k1;\n        }\n\n    }\n\n    this.h1 = h1;\n    this.h2 = h2;\n  }\n\n  hexdigest() {\n    let h1 = this.h1,\n        h2 = this.h2;\n    h1 ^= h2 >>> 1;\n    h1 = h1 * 0xed558ccd & MASK_HIGH | h1 * 0x8ccd & MASK_LOW;\n    h2 = h2 * 0xff51afd7 & MASK_HIGH | ((h2 << 16 | h1 >>> 16) * 0xafd7ed55 & MASK_HIGH) >>> 16;\n    h1 ^= h2 >>> 1;\n    h1 = h1 * 0x1a85ec53 & MASK_HIGH | h1 * 0xec53 & MASK_LOW;\n    h2 = h2 * 0xc4ceb9fe & MASK_HIGH | ((h2 << 16 | h1 >>> 16) * 0xb9fe1a85 & MASK_HIGH) >>> 16;\n    h1 ^= h2 >>> 1;\n    const hex1 = (h1 >>> 0).toString(16),\n          hex2 = (h2 >>> 0).toString(16);\n    return hex1.padStart(8, \"0\") + hex2.padStart(8, \"0\");\n  }\n\n}\n\nexports.MurmurHash3_64 = MurmurHash3_64;\n\n/***/ }),\n/* 44 */\n/***/ ((__unused_webpack_module, exports, __w_pdfjs_require__) => {\n\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.OperatorList = void 0;\n\nvar _util = __w_pdfjs_require__(2);\n\nvar QueueOptimizer = function QueueOptimizerClosure() {\n  function addState(parentState, pattern, checkFn, iterateFn, processFn) {\n    var state = parentState;\n\n    for (var i = 0, ii = pattern.length - 1; i < ii; i++) {\n      var item = pattern[i];\n      state = state[item] || (state[item] = []);\n    }\n\n    state[pattern[pattern.length - 1]] = {\n      checkFn,\n      iterateFn,\n      processFn\n    };\n  }\n\n  function handlePaintSolidColorImageMask(iFirstSave, count, fnArray, argsArray) {\n    var iFirstPIMXO = iFirstSave + 2;\n\n    for (var i = 0; i < count; i++) {\n      var arg = argsArray[iFirstPIMXO + 4 * i];\n      var imageMask = arg.length === 1 && arg[0];\n\n      if (imageMask && imageMask.width === 1 && imageMask.height === 1 && (!imageMask.data.length || imageMask.data.length === 1 && imageMask.data[0] === 0)) {\n        fnArray[iFirstPIMXO + 4 * i] = _util.OPS.paintSolidColorImageMask;\n        continue;\n      }\n\n      break;\n    }\n\n    return count - i;\n  }\n\n  var InitialState = [];\n  addState(InitialState, [_util.OPS.save, _util.OPS.transform, _util.OPS.paintInlineImageXObject, _util.OPS.restore], null, function iterateInlineImageGroup(context, i) {\n    var fnArray = context.fnArray;\n    var iFirstSave = context.iCurr - 3;\n    var pos = (i - iFirstSave) % 4;\n\n    switch (pos) {\n      case 0:\n        return fnArray[i] === _util.OPS.save;\n\n      case 1:\n        return fnArray[i] === _util.OPS.transform;\n\n      case 2:\n        return fnArray[i] === _util.OPS.paintInlineImageXObject;\n\n      case 3:\n        return fnArray[i] === _util.OPS.restore;\n    }\n\n    throw new Error(`iterateInlineImageGroup - invalid pos: ${pos}`);\n  }, function foundInlineImageGroup(context, i) {\n    var MIN_IMAGES_IN_INLINE_IMAGES_BLOCK = 10;\n    var MAX_IMAGES_IN_INLINE_IMAGES_BLOCK = 200;\n    var MAX_WIDTH = 1000;\n    var IMAGE_PADDING = 1;\n    var fnArray = context.fnArray,\n        argsArray = context.argsArray;\n    var curr = context.iCurr;\n    var iFirstSave = curr - 3;\n    var iFirstTransform = curr - 2;\n    var iFirstPIIXO = curr - 1;\n    var count = Math.min(Math.floor((i - iFirstSave) / 4), MAX_IMAGES_IN_INLINE_IMAGES_BLOCK);\n\n    if (count < MIN_IMAGES_IN_INLINE_IMAGES_BLOCK) {\n      return i - (i - iFirstSave) % 4;\n    }\n\n    var maxX = 0;\n    var map = [],\n        maxLineHeight = 0;\n    var currentX = IMAGE_PADDING,\n        currentY = IMAGE_PADDING;\n    var q;\n\n    for (q = 0; q < count; q++) {\n      var transform = argsArray[iFirstTransform + (q << 2)];\n      var img = argsArray[iFirstPIIXO + (q << 2)][0];\n\n      if (currentX + img.width > MAX_WIDTH) {\n        maxX = Math.max(maxX, currentX);\n        currentY += maxLineHeight + 2 * IMAGE_PADDING;\n        currentX = 0;\n        maxLineHeight = 0;\n      }\n\n      map.push({\n        transform,\n        x: currentX,\n        y: currentY,\n        w: img.width,\n        h: img.height\n      });\n      currentX += img.width + 2 * IMAGE_PADDING;\n      maxLineHeight = Math.max(maxLineHeight, img.height);\n    }\n\n    var imgWidth = Math.max(maxX, currentX) + IMAGE_PADDING;\n    var imgHeight = currentY + maxLineHeight + IMAGE_PADDING;\n    var imgData = new Uint8ClampedArray(imgWidth * imgHeight * 4);\n    var imgRowSize = imgWidth << 2;\n\n    for (q = 0; q < count; q++) {\n      var data = argsArray[iFirstPIIXO + (q << 2)][0].data;\n      var rowSize = map[q].w << 2;\n      var dataOffset = 0;\n      var offset = map[q].x + map[q].y * imgWidth << 2;\n      imgData.set(data.subarray(0, rowSize), offset - imgRowSize);\n\n      for (var k = 0, kk = map[q].h; k < kk; k++) {\n        imgData.set(data.subarray(dataOffset, dataOffset + rowSize), offset);\n        dataOffset += rowSize;\n        offset += imgRowSize;\n      }\n\n      imgData.set(data.subarray(dataOffset - rowSize, dataOffset), offset);\n\n      while (offset >= 0) {\n        data[offset - 4] = data[offset];\n        data[offset - 3] = data[offset + 1];\n        data[offset - 2] = data[offset + 2];\n        data[offset - 1] = data[offset + 3];\n        data[offset + rowSize] = data[offset + rowSize - 4];\n        data[offset + rowSize + 1] = data[offset + rowSize - 3];\n        data[offset + rowSize + 2] = data[offset + rowSize - 2];\n        data[offset + rowSize + 3] = data[offset + rowSize - 1];\n        offset -= imgRowSize;\n      }\n    }\n\n    fnArray.splice(iFirstSave, count * 4, _util.OPS.paintInlineImageXObjectGroup);\n    argsArray.splice(iFirstSave, count * 4, [{\n      width: imgWidth,\n      height: imgHeight,\n      kind: _util.ImageKind.RGBA_32BPP,\n      data: imgData\n    }, map]);\n    return iFirstSave + 1;\n  });\n  addState(InitialState, [_util.OPS.save, _util.OPS.transform, _util.OPS.paintImageMaskXObject, _util.OPS.restore], null, function iterateImageMaskGroup(context, i) {\n    var fnArray = context.fnArray;\n    var iFirstSave = context.iCurr - 3;\n    var pos = (i - iFirstSave) % 4;\n\n    switch (pos) {\n      case 0:\n        return fnArray[i] === _util.OPS.save;\n\n      case 1:\n        return fnArray[i] === _util.OPS.transform;\n\n      case 2:\n        return fnArray[i] === _util.OPS.paintImageMaskXObject;\n\n      case 3:\n        return fnArray[i] === _util.OPS.restore;\n    }\n\n    throw new Error(`iterateImageMaskGroup - invalid pos: ${pos}`);\n  }, function foundImageMaskGroup(context, i) {\n    var MIN_IMAGES_IN_MASKS_BLOCK = 10;\n    var MAX_IMAGES_IN_MASKS_BLOCK = 100;\n    var MAX_SAME_IMAGES_IN_MASKS_BLOCK = 1000;\n    var fnArray = context.fnArray,\n        argsArray = context.argsArray;\n    var curr = context.iCurr;\n    var iFirstSave = curr - 3;\n    var iFirstTransform = curr - 2;\n    var iFirstPIMXO = curr - 1;\n    var count = Math.floor((i - iFirstSave) / 4);\n    count = handlePaintSolidColorImageMask(iFirstSave, count, fnArray, argsArray);\n\n    if (count < MIN_IMAGES_IN_MASKS_BLOCK) {\n      return i - (i - iFirstSave) % 4;\n    }\n\n    var q;\n    var isSameImage = false;\n    var iTransform, transformArgs;\n    var firstPIMXOArg0 = argsArray[iFirstPIMXO][0];\n    const firstTransformArg0 = argsArray[iFirstTransform][0],\n          firstTransformArg1 = argsArray[iFirstTransform][1],\n          firstTransformArg2 = argsArray[iFirstTransform][2],\n          firstTransformArg3 = argsArray[iFirstTransform][3];\n\n    if (firstTransformArg1 === firstTransformArg2) {\n      isSameImage = true;\n      iTransform = iFirstTransform + 4;\n      var iPIMXO = iFirstPIMXO + 4;\n\n      for (q = 1; q < count; q++, iTransform += 4, iPIMXO += 4) {\n        transformArgs = argsArray[iTransform];\n\n        if (argsArray[iPIMXO][0] !== firstPIMXOArg0 || transformArgs[0] !== firstTransformArg0 || transformArgs[1] !== firstTransformArg1 || transformArgs[2] !== firstTransformArg2 || transformArgs[3] !== firstTransformArg3) {\n          if (q < MIN_IMAGES_IN_MASKS_BLOCK) {\n            isSameImage = false;\n          } else {\n            count = q;\n          }\n\n          break;\n        }\n      }\n    }\n\n    if (isSameImage) {\n      count = Math.min(count, MAX_SAME_IMAGES_IN_MASKS_BLOCK);\n      var positions = new Float32Array(count * 2);\n      iTransform = iFirstTransform;\n\n      for (q = 0; q < count; q++, iTransform += 4) {\n        transformArgs = argsArray[iTransform];\n        positions[q << 1] = transformArgs[4];\n        positions[(q << 1) + 1] = transformArgs[5];\n      }\n\n      fnArray.splice(iFirstSave, count * 4, _util.OPS.paintImageMaskXObjectRepeat);\n      argsArray.splice(iFirstSave, count * 4, [firstPIMXOArg0, firstTransformArg0, firstTransformArg1, firstTransformArg2, firstTransformArg3, positions]);\n    } else {\n      count = Math.min(count, MAX_IMAGES_IN_MASKS_BLOCK);\n      var images = [];\n\n      for (q = 0; q < count; q++) {\n        transformArgs = argsArray[iFirstTransform + (q << 2)];\n        var maskParams = argsArray[iFirstPIMXO + (q << 2)][0];\n        images.push({\n          data: maskParams.data,\n          width: maskParams.width,\n          height: maskParams.height,\n          transform: transformArgs\n        });\n      }\n\n      fnArray.splice(iFirstSave, count * 4, _util.OPS.paintImageMaskXObjectGroup);\n      argsArray.splice(iFirstSave, count * 4, [images]);\n    }\n\n    return iFirstSave + 1;\n  });\n  addState(InitialState, [_util.OPS.save, _util.OPS.transform, _util.OPS.paintImageXObject, _util.OPS.restore], function (context) {\n    var argsArray = context.argsArray;\n    var iFirstTransform = context.iCurr - 2;\n    return argsArray[iFirstTransform][1] === 0 && argsArray[iFirstTransform][2] === 0;\n  }, function iterateImageGroup(context, i) {\n    var fnArray = context.fnArray,\n        argsArray = context.argsArray;\n    var iFirstSave = context.iCurr - 3;\n    var pos = (i - iFirstSave) % 4;\n\n    switch (pos) {\n      case 0:\n        return fnArray[i] === _util.OPS.save;\n\n      case 1:\n        if (fnArray[i] !== _util.OPS.transform) {\n          return false;\n        }\n\n        var iFirstTransform = context.iCurr - 2;\n        var firstTransformArg0 = argsArray[iFirstTransform][0];\n        var firstTransformArg3 = argsArray[iFirstTransform][3];\n\n        if (argsArray[i][0] !== firstTransformArg0 || argsArray[i][1] !== 0 || argsArray[i][2] !== 0 || argsArray[i][3] !== firstTransformArg3) {\n          return false;\n        }\n\n        return true;\n\n      case 2:\n        if (fnArray[i] !== _util.OPS.paintImageXObject) {\n          return false;\n        }\n\n        var iFirstPIXO = context.iCurr - 1;\n        var firstPIXOArg0 = argsArray[iFirstPIXO][0];\n\n        if (argsArray[i][0] !== firstPIXOArg0) {\n          return false;\n        }\n\n        return true;\n\n      case 3:\n        return fnArray[i] === _util.OPS.restore;\n    }\n\n    throw new Error(`iterateImageGroup - invalid pos: ${pos}`);\n  }, function (context, i) {\n    var MIN_IMAGES_IN_BLOCK = 3;\n    var MAX_IMAGES_IN_BLOCK = 1000;\n    var fnArray = context.fnArray,\n        argsArray = context.argsArray;\n    var curr = context.iCurr;\n    var iFirstSave = curr - 3;\n    var iFirstTransform = curr - 2;\n    var iFirstPIXO = curr - 1;\n    var firstPIXOArg0 = argsArray[iFirstPIXO][0];\n    var firstTransformArg0 = argsArray[iFirstTransform][0];\n    var firstTransformArg3 = argsArray[iFirstTransform][3];\n    var count = Math.min(Math.floor((i - iFirstSave) / 4), MAX_IMAGES_IN_BLOCK);\n\n    if (count < MIN_IMAGES_IN_BLOCK) {\n      return i - (i - iFirstSave) % 4;\n    }\n\n    var positions = new Float32Array(count * 2);\n    var iTransform = iFirstTransform;\n\n    for (var q = 0; q < count; q++, iTransform += 4) {\n      var transformArgs = argsArray[iTransform];\n      positions[q << 1] = transformArgs[4];\n      positions[(q << 1) + 1] = transformArgs[5];\n    }\n\n    var args = [firstPIXOArg0, firstTransformArg0, firstTransformArg3, positions];\n    fnArray.splice(iFirstSave, count * 4, _util.OPS.paintImageXObjectRepeat);\n    argsArray.splice(iFirstSave, count * 4, args);\n    return iFirstSave + 1;\n  });\n  addState(InitialState, [_util.OPS.beginText, _util.OPS.setFont, _util.OPS.setTextMatrix, _util.OPS.showText, _util.OPS.endText], null, function iterateShowTextGroup(context, i) {\n    var fnArray = context.fnArray,\n        argsArray = context.argsArray;\n    var iFirstSave = context.iCurr - 4;\n    var pos = (i - iFirstSave) % 5;\n\n    switch (pos) {\n      case 0:\n        return fnArray[i] === _util.OPS.beginText;\n\n      case 1:\n        return fnArray[i] === _util.OPS.setFont;\n\n      case 2:\n        return fnArray[i] === _util.OPS.setTextMatrix;\n\n      case 3:\n        if (fnArray[i] !== _util.OPS.showText) {\n          return false;\n        }\n\n        var iFirstSetFont = context.iCurr - 3;\n        var firstSetFontArg0 = argsArray[iFirstSetFont][0];\n        var firstSetFontArg1 = argsArray[iFirstSetFont][1];\n\n        if (argsArray[i][0] !== firstSetFontArg0 || argsArray[i][1] !== firstSetFontArg1) {\n          return false;\n        }\n\n        return true;\n\n      case 4:\n        return fnArray[i] === _util.OPS.endText;\n    }\n\n    throw new Error(`iterateShowTextGroup - invalid pos: ${pos}`);\n  }, function (context, i) {\n    var MIN_CHARS_IN_BLOCK = 3;\n    var MAX_CHARS_IN_BLOCK = 1000;\n    var fnArray = context.fnArray,\n        argsArray = context.argsArray;\n    var curr = context.iCurr;\n    var iFirstBeginText = curr - 4;\n    var iFirstSetFont = curr - 3;\n    var iFirstSetTextMatrix = curr - 2;\n    var iFirstShowText = curr - 1;\n    var iFirstEndText = curr;\n    var firstSetFontArg0 = argsArray[iFirstSetFont][0];\n    var firstSetFontArg1 = argsArray[iFirstSetFont][1];\n    var count = Math.min(Math.floor((i - iFirstBeginText) / 5), MAX_CHARS_IN_BLOCK);\n\n    if (count < MIN_CHARS_IN_BLOCK) {\n      return i - (i - iFirstBeginText) % 5;\n    }\n\n    var iFirst = iFirstBeginText;\n\n    if (iFirstBeginText >= 4 && fnArray[iFirstBeginText - 4] === fnArray[iFirstSetFont] && fnArray[iFirstBeginText - 3] === fnArray[iFirstSetTextMatrix] && fnArray[iFirstBeginText - 2] === fnArray[iFirstShowText] && fnArray[iFirstBeginText - 1] === fnArray[iFirstEndText] && argsArray[iFirstBeginText - 4][0] === firstSetFontArg0 && argsArray[iFirstBeginText - 4][1] === firstSetFontArg1) {\n      count++;\n      iFirst -= 5;\n    }\n\n    var iEndText = iFirst + 4;\n\n    for (var q = 1; q < count; q++) {\n      fnArray.splice(iEndText, 3);\n      argsArray.splice(iEndText, 3);\n      iEndText += 2;\n    }\n\n    return iEndText + 1;\n  });\n\n  function QueueOptimizer(queue) {\n    this.queue = queue;\n    this.state = null;\n    this.context = {\n      iCurr: 0,\n      fnArray: queue.fnArray,\n      argsArray: queue.argsArray\n    };\n    this.match = null;\n    this.lastProcessed = 0;\n  }\n\n  QueueOptimizer.prototype = {\n    _optimize() {\n      const fnArray = this.queue.fnArray;\n      let i = this.lastProcessed,\n          ii = fnArray.length;\n      let state = this.state;\n      let match = this.match;\n\n      if (!state && !match && i + 1 === ii && !InitialState[fnArray[i]]) {\n        this.lastProcessed = ii;\n        return;\n      }\n\n      const context = this.context;\n\n      while (i < ii) {\n        if (match) {\n          const iterate = (0, match.iterateFn)(context, i);\n\n          if (iterate) {\n            i++;\n            continue;\n          }\n\n          i = (0, match.processFn)(context, i + 1);\n          ii = fnArray.length;\n          match = null;\n          state = null;\n\n          if (i >= ii) {\n            break;\n          }\n        }\n\n        state = (state || InitialState)[fnArray[i]];\n\n        if (!state || Array.isArray(state)) {\n          i++;\n          continue;\n        }\n\n        context.iCurr = i;\n        i++;\n\n        if (state.checkFn && !(0, state.checkFn)(context)) {\n          state = null;\n          continue;\n        }\n\n        match = state;\n        state = null;\n      }\n\n      this.state = state;\n      this.match = match;\n      this.lastProcessed = i;\n    },\n\n    push(fn, args) {\n      this.queue.fnArray.push(fn);\n      this.queue.argsArray.push(args);\n\n      this._optimize();\n    },\n\n    flush() {\n      while (this.match) {\n        const length = this.queue.fnArray.length;\n        this.lastProcessed = (0, this.match.processFn)(this.context, length);\n        this.match = null;\n        this.state = null;\n\n        this._optimize();\n      }\n    },\n\n    reset() {\n      this.state = null;\n      this.match = null;\n      this.lastProcessed = 0;\n    }\n\n  };\n  return QueueOptimizer;\n}();\n\nvar NullOptimizer = function NullOptimizerClosure() {\n  function NullOptimizer(queue) {\n    this.queue = queue;\n  }\n\n  NullOptimizer.prototype = {\n    push(fn, args) {\n      this.queue.fnArray.push(fn);\n      this.queue.argsArray.push(args);\n    },\n\n    flush() {},\n\n    reset() {}\n\n  };\n  return NullOptimizer;\n}();\n\nvar OperatorList = function OperatorListClosure() {\n  var CHUNK_SIZE = 1000;\n  var CHUNK_SIZE_ABOUT = CHUNK_SIZE - 5;\n\n  function OperatorList(intent, streamSink) {\n    this._streamSink = streamSink;\n    this.fnArray = [];\n    this.argsArray = [];\n\n    if (streamSink && intent !== \"oplist\") {\n      this.optimizer = new QueueOptimizer(this);\n    } else {\n      this.optimizer = new NullOptimizer(this);\n    }\n\n    this.dependencies = new Set();\n    this._totalLength = 0;\n    this.weight = 0;\n    this._resolved = streamSink ? null : Promise.resolve();\n  }\n\n  OperatorList.prototype = {\n    get length() {\n      return this.argsArray.length;\n    },\n\n    get ready() {\n      return this._resolved || this._streamSink.ready;\n    },\n\n    get totalLength() {\n      return this._totalLength + this.length;\n    },\n\n    addOp(fn, args) {\n      this.optimizer.push(fn, args);\n      this.weight++;\n\n      if (this._streamSink) {\n        if (this.weight >= CHUNK_SIZE) {\n          this.flush();\n        } else if (this.weight >= CHUNK_SIZE_ABOUT && (fn === _util.OPS.restore || fn === _util.OPS.endText)) {\n          this.flush();\n        }\n      }\n    },\n\n    addDependency(dependency) {\n      if (this.dependencies.has(dependency)) {\n        return;\n      }\n\n      this.dependencies.add(dependency);\n      this.addOp(_util.OPS.dependency, [dependency]);\n    },\n\n    addDependencies(dependencies) {\n      for (const dependency of dependencies) {\n        this.addDependency(dependency);\n      }\n    },\n\n    addOpList(opList) {\n      if (!(opList instanceof OperatorList)) {\n        (0, _util.warn)('addOpList - ignoring invalid \"opList\" parameter.');\n        return;\n      }\n\n      for (const dependency of opList.dependencies) {\n        this.dependencies.add(dependency);\n      }\n\n      for (var i = 0, ii = opList.length; i < ii; i++) {\n        this.addOp(opList.fnArray[i], opList.argsArray[i]);\n      }\n    },\n\n    getIR() {\n      return {\n        fnArray: this.fnArray,\n        argsArray: this.argsArray,\n        length: this.length\n      };\n    },\n\n    get _transfers() {\n      const transfers = [];\n      const {\n        fnArray,\n        argsArray,\n        length\n      } = this;\n\n      for (let i = 0; i < length; i++) {\n        switch (fnArray[i]) {\n          case _util.OPS.paintInlineImageXObject:\n          case _util.OPS.paintInlineImageXObjectGroup:\n          case _util.OPS.paintImageMaskXObject:\n            const arg = argsArray[i][0];\n            ;\n\n            if (!arg.cached) {\n              transfers.push(arg.data.buffer);\n            }\n\n            break;\n        }\n      }\n\n      return transfers;\n    },\n\n    flush(lastChunk = false) {\n      this.optimizer.flush();\n      const length = this.length;\n      this._totalLength += length;\n\n      this._streamSink.enqueue({\n        fnArray: this.fnArray,\n        argsArray: this.argsArray,\n        lastChunk,\n        length\n      }, 1, this._transfers);\n\n      this.dependencies.clear();\n      this.fnArray.length = 0;\n      this.argsArray.length = 0;\n      this.weight = 0;\n      this.optimizer.reset();\n    }\n\n  };\n  return OperatorList;\n}();\n\nexports.OperatorList = OperatorList;\n\n/***/ }),\n/* 45 */\n/***/ ((__unused_webpack_module, exports, __w_pdfjs_require__) => {\n\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.PDFImage = void 0;\n\nvar _util = __w_pdfjs_require__(2);\n\nvar _primitives = __w_pdfjs_require__(5);\n\nvar _colorspace = __w_pdfjs_require__(23);\n\nvar _stream = __w_pdfjs_require__(12);\n\nvar _jpeg_stream = __w_pdfjs_require__(18);\n\nvar _jpx = __w_pdfjs_require__(21);\n\nfunction decodeAndClamp(value, addend, coefficient, max) {\n  value = addend + value * coefficient;\n\n  if (value < 0) {\n    value = 0;\n  } else if (value > max) {\n    value = max;\n  }\n\n  return value;\n}\n\nfunction resizeImageMask(src, bpc, w1, h1, w2, h2) {\n  var length = w2 * h2;\n  let dest;\n\n  if (bpc <= 8) {\n    dest = new Uint8Array(length);\n  } else if (bpc <= 16) {\n    dest = new Uint16Array(length);\n  } else {\n    dest = new Uint32Array(length);\n  }\n\n  var xRatio = w1 / w2;\n  var yRatio = h1 / h2;\n  var i,\n      j,\n      py,\n      newIndex = 0,\n      oldIndex;\n  var xScaled = new Uint16Array(w2);\n  var w1Scanline = w1;\n\n  for (i = 0; i < w2; i++) {\n    xScaled[i] = Math.floor(i * xRatio);\n  }\n\n  for (i = 0; i < h2; i++) {\n    py = Math.floor(i * yRatio) * w1Scanline;\n\n    for (j = 0; j < w2; j++) {\n      oldIndex = py + xScaled[j];\n      dest[newIndex++] = src[oldIndex];\n    }\n  }\n\n  return dest;\n}\n\nclass PDFImage {\n  constructor({\n    xref,\n    res,\n    image,\n    isInline = false,\n    smask = null,\n    mask = null,\n    isMask = false,\n    pdfFunctionFactory,\n    localColorSpaceCache\n  }) {\n    this.image = image;\n    var dict = image.dict;\n    const filter = dict.get(\"Filter\");\n\n    if ((0, _primitives.isName)(filter)) {\n      switch (filter.name) {\n        case \"JPXDecode\":\n          var jpxImage = new _jpx.JpxImage();\n          jpxImage.parseImageProperties(image.stream);\n          image.stream.reset();\n          image.width = jpxImage.width;\n          image.height = jpxImage.height;\n          image.bitsPerComponent = jpxImage.bitsPerComponent;\n          image.numComps = jpxImage.componentsCount;\n          break;\n\n        case \"JBIG2Decode\":\n          image.bitsPerComponent = 1;\n          image.numComps = 1;\n          break;\n      }\n    }\n\n    let width = dict.get(\"Width\", \"W\");\n    let height = dict.get(\"Height\", \"H\");\n\n    if (Number.isInteger(image.width) && image.width > 0 && Number.isInteger(image.height) && image.height > 0 && (image.width !== width || image.height !== height)) {\n      (0, _util.warn)(\"PDFImage - using the Width/Height of the image data, \" + \"rather than the image dictionary.\");\n      width = image.width;\n      height = image.height;\n    }\n\n    if (width < 1 || height < 1) {\n      throw new _util.FormatError(`Invalid image width: ${width} or height: ${height}`);\n    }\n\n    this.width = width;\n    this.height = height;\n    this.interpolate = dict.get(\"Interpolate\", \"I\") || false;\n    this.imageMask = dict.get(\"ImageMask\", \"IM\") || false;\n    this.matte = dict.get(\"Matte\") || false;\n    var bitsPerComponent = image.bitsPerComponent;\n\n    if (!bitsPerComponent) {\n      bitsPerComponent = dict.get(\"BitsPerComponent\", \"BPC\");\n\n      if (!bitsPerComponent) {\n        if (this.imageMask) {\n          bitsPerComponent = 1;\n        } else {\n          throw new _util.FormatError(`Bits per component missing in image: ${this.imageMask}`);\n        }\n      }\n    }\n\n    this.bpc = bitsPerComponent;\n\n    if (!this.imageMask) {\n      let colorSpace = dict.getRaw(\"ColorSpace\") || dict.getRaw(\"CS\");\n\n      if (!colorSpace) {\n        (0, _util.info)(\"JPX images (which do not require color spaces)\");\n\n        switch (image.numComps) {\n          case 1:\n            colorSpace = _primitives.Name.get(\"DeviceGray\");\n            break;\n\n          case 3:\n            colorSpace = _primitives.Name.get(\"DeviceRGB\");\n            break;\n\n          case 4:\n            colorSpace = _primitives.Name.get(\"DeviceCMYK\");\n            break;\n\n          default:\n            throw new Error(`JPX images with ${image.numComps} ` + \"color components not supported.\");\n        }\n      }\n\n      this.colorSpace = _colorspace.ColorSpace.parse({\n        cs: colorSpace,\n        xref,\n        resources: isInline ? res : null,\n        pdfFunctionFactory,\n        localColorSpaceCache\n      });\n      this.numComps = this.colorSpace.numComps;\n    }\n\n    this.decode = dict.getArray(\"Decode\", \"D\");\n    this.needsDecode = false;\n\n    if (this.decode && (this.colorSpace && !this.colorSpace.isDefaultDecode(this.decode, bitsPerComponent) || isMask && !_colorspace.ColorSpace.isDefaultDecode(this.decode, 1))) {\n      this.needsDecode = true;\n      var max = (1 << bitsPerComponent) - 1;\n      this.decodeCoefficients = [];\n      this.decodeAddends = [];\n      const isIndexed = this.colorSpace && this.colorSpace.name === \"Indexed\";\n\n      for (var i = 0, j = 0; i < this.decode.length; i += 2, ++j) {\n        var dmin = this.decode[i];\n        var dmax = this.decode[i + 1];\n        this.decodeCoefficients[j] = isIndexed ? (dmax - dmin) / max : dmax - dmin;\n        this.decodeAddends[j] = isIndexed ? dmin : max * dmin;\n      }\n    }\n\n    if (smask) {\n      this.smask = new PDFImage({\n        xref,\n        res,\n        image: smask,\n        isInline,\n        pdfFunctionFactory,\n        localColorSpaceCache\n      });\n    } else if (mask) {\n      if ((0, _primitives.isStream)(mask)) {\n        var maskDict = mask.dict,\n            imageMask = maskDict.get(\"ImageMask\", \"IM\");\n\n        if (!imageMask) {\n          (0, _util.warn)(\"Ignoring /Mask in image without /ImageMask.\");\n        } else {\n          this.mask = new PDFImage({\n            xref,\n            res,\n            image: mask,\n            isInline,\n            isMask: true,\n            pdfFunctionFactory,\n            localColorSpaceCache\n          });\n        }\n      } else {\n        this.mask = mask;\n      }\n    }\n  }\n\n  static async buildImage({\n    xref,\n    res,\n    image,\n    isInline = false,\n    pdfFunctionFactory,\n    localColorSpaceCache\n  }) {\n    const imageData = image;\n    let smaskData = null;\n    let maskData = null;\n    const smask = image.dict.get(\"SMask\");\n    const mask = image.dict.get(\"Mask\");\n\n    if (smask) {\n      smaskData = smask;\n    } else if (mask) {\n      if ((0, _primitives.isStream)(mask) || Array.isArray(mask)) {\n        maskData = mask;\n      } else {\n        (0, _util.warn)(\"Unsupported mask format.\");\n      }\n    }\n\n    return new PDFImage({\n      xref,\n      res,\n      image: imageData,\n      isInline,\n      smask: smaskData,\n      mask: maskData,\n      pdfFunctionFactory,\n      localColorSpaceCache\n    });\n  }\n\n  static createMask({\n    imgArray,\n    width,\n    height,\n    imageIsFromDecodeStream,\n    inverseDecode\n  }) {\n    var computedLength = (width + 7 >> 3) * height;\n    var actualLength = imgArray.byteLength;\n    var haveFullData = computedLength === actualLength;\n    var data, i;\n\n    if (imageIsFromDecodeStream && (!inverseDecode || haveFullData)) {\n      data = imgArray;\n    } else if (!inverseDecode) {\n      data = new Uint8ClampedArray(actualLength);\n      data.set(imgArray);\n    } else {\n      data = new Uint8ClampedArray(computedLength);\n      data.set(imgArray);\n\n      for (i = actualLength; i < computedLength; i++) {\n        data[i] = 0xff;\n      }\n    }\n\n    if (inverseDecode) {\n      for (i = 0; i < actualLength; i++) {\n        data[i] ^= 0xff;\n      }\n    }\n\n    return {\n      data,\n      width,\n      height\n    };\n  }\n\n  get drawWidth() {\n    return Math.max(this.width, this.smask && this.smask.width || 0, this.mask && this.mask.width || 0);\n  }\n\n  get drawHeight() {\n    return Math.max(this.height, this.smask && this.smask.height || 0, this.mask && this.mask.height || 0);\n  }\n\n  decodeBuffer(buffer) {\n    var bpc = this.bpc;\n    var numComps = this.numComps;\n    var decodeAddends = this.decodeAddends;\n    var decodeCoefficients = this.decodeCoefficients;\n    var max = (1 << bpc) - 1;\n    var i, ii;\n\n    if (bpc === 1) {\n      for (i = 0, ii = buffer.length; i < ii; i++) {\n        buffer[i] = +!buffer[i];\n      }\n\n      return;\n    }\n\n    var index = 0;\n\n    for (i = 0, ii = this.width * this.height; i < ii; i++) {\n      for (var j = 0; j < numComps; j++) {\n        buffer[index] = decodeAndClamp(buffer[index], decodeAddends[j], decodeCoefficients[j], max);\n        index++;\n      }\n    }\n  }\n\n  getComponents(buffer) {\n    var bpc = this.bpc;\n\n    if (bpc === 8) {\n      return buffer;\n    }\n\n    var width = this.width;\n    var height = this.height;\n    var numComps = this.numComps;\n    var length = width * height * numComps;\n    var bufferPos = 0;\n    let output;\n\n    if (bpc <= 8) {\n      output = new Uint8Array(length);\n    } else if (bpc <= 16) {\n      output = new Uint16Array(length);\n    } else {\n      output = new Uint32Array(length);\n    }\n\n    var rowComps = width * numComps;\n    var max = (1 << bpc) - 1;\n    var i = 0,\n        ii,\n        buf;\n\n    if (bpc === 1) {\n      var mask, loop1End, loop2End;\n\n      for (var j = 0; j < height; j++) {\n        loop1End = i + (rowComps & ~7);\n        loop2End = i + rowComps;\n\n        while (i < loop1End) {\n          buf = buffer[bufferPos++];\n          output[i] = buf >> 7 & 1;\n          output[i + 1] = buf >> 6 & 1;\n          output[i + 2] = buf >> 5 & 1;\n          output[i + 3] = buf >> 4 & 1;\n          output[i + 4] = buf >> 3 & 1;\n          output[i + 5] = buf >> 2 & 1;\n          output[i + 6] = buf >> 1 & 1;\n          output[i + 7] = buf & 1;\n          i += 8;\n        }\n\n        if (i < loop2End) {\n          buf = buffer[bufferPos++];\n          mask = 128;\n\n          while (i < loop2End) {\n            output[i++] = +!!(buf & mask);\n            mask >>= 1;\n          }\n        }\n      }\n    } else {\n      var bits = 0;\n      buf = 0;\n\n      for (i = 0, ii = length; i < ii; ++i) {\n        if (i % rowComps === 0) {\n          buf = 0;\n          bits = 0;\n        }\n\n        while (bits < bpc) {\n          buf = buf << 8 | buffer[bufferPos++];\n          bits += 8;\n        }\n\n        var remainingBits = bits - bpc;\n        let value = buf >> remainingBits;\n\n        if (value < 0) {\n          value = 0;\n        } else if (value > max) {\n          value = max;\n        }\n\n        output[i] = value;\n        buf = buf & (1 << remainingBits) - 1;\n        bits = remainingBits;\n      }\n    }\n\n    return output;\n  }\n\n  fillOpacity(rgbaBuf, width, height, actualHeight, image) {\n    var smask = this.smask;\n    var mask = this.mask;\n    var alphaBuf, sw, sh, i, ii, j;\n\n    if (smask) {\n      sw = smask.width;\n      sh = smask.height;\n      alphaBuf = new Uint8ClampedArray(sw * sh);\n      smask.fillGrayBuffer(alphaBuf);\n\n      if (sw !== width || sh !== height) {\n        alphaBuf = resizeImageMask(alphaBuf, smask.bpc, sw, sh, width, height);\n      }\n    } else if (mask) {\n      if (mask instanceof PDFImage) {\n        sw = mask.width;\n        sh = mask.height;\n        alphaBuf = new Uint8ClampedArray(sw * sh);\n        mask.numComps = 1;\n        mask.fillGrayBuffer(alphaBuf);\n\n        for (i = 0, ii = sw * sh; i < ii; ++i) {\n          alphaBuf[i] = 255 - alphaBuf[i];\n        }\n\n        if (sw !== width || sh !== height) {\n          alphaBuf = resizeImageMask(alphaBuf, mask.bpc, sw, sh, width, height);\n        }\n      } else if (Array.isArray(mask)) {\n        alphaBuf = new Uint8ClampedArray(width * height);\n        var numComps = this.numComps;\n\n        for (i = 0, ii = width * height; i < ii; ++i) {\n          var opacity = 0;\n          var imageOffset = i * numComps;\n\n          for (j = 0; j < numComps; ++j) {\n            var color = image[imageOffset + j];\n            var maskOffset = j * 2;\n\n            if (color < mask[maskOffset] || color > mask[maskOffset + 1]) {\n              opacity = 255;\n              break;\n            }\n          }\n\n          alphaBuf[i] = opacity;\n        }\n      } else {\n        throw new _util.FormatError(\"Unknown mask format.\");\n      }\n    }\n\n    if (alphaBuf) {\n      for (i = 0, j = 3, ii = width * actualHeight; i < ii; ++i, j += 4) {\n        rgbaBuf[j] = alphaBuf[i];\n      }\n    } else {\n      for (i = 0, j = 3, ii = width * actualHeight; i < ii; ++i, j += 4) {\n        rgbaBuf[j] = 255;\n      }\n    }\n  }\n\n  undoPreblend(buffer, width, height) {\n    var matte = this.smask && this.smask.matte;\n\n    if (!matte) {\n      return;\n    }\n\n    var matteRgb = this.colorSpace.getRgb(matte, 0);\n    var matteR = matteRgb[0];\n    var matteG = matteRgb[1];\n    var matteB = matteRgb[2];\n    var length = width * height * 4;\n\n    for (var i = 0; i < length; i += 4) {\n      var alpha = buffer[i + 3];\n\n      if (alpha === 0) {\n        buffer[i] = 255;\n        buffer[i + 1] = 255;\n        buffer[i + 2] = 255;\n        continue;\n      }\n\n      var k = 255 / alpha;\n      buffer[i] = (buffer[i] - matteR) * k + matteR;\n      buffer[i + 1] = (buffer[i + 1] - matteG) * k + matteG;\n      buffer[i + 2] = (buffer[i + 2] - matteB) * k + matteB;\n    }\n  }\n\n  createImageData(forceRGBA = false) {\n    var drawWidth = this.drawWidth;\n    var drawHeight = this.drawHeight;\n    var imgData = {\n      width: drawWidth,\n      height: drawHeight,\n      kind: 0,\n      data: null\n    };\n    var numComps = this.numComps;\n    var originalWidth = this.width;\n    var originalHeight = this.height;\n    var bpc = this.bpc;\n    var rowBytes = originalWidth * numComps * bpc + 7 >> 3;\n    var imgArray;\n\n    if (!forceRGBA) {\n      var kind;\n\n      if (this.colorSpace.name === \"DeviceGray\" && bpc === 1) {\n        kind = _util.ImageKind.GRAYSCALE_1BPP;\n      } else if (this.colorSpace.name === \"DeviceRGB\" && bpc === 8 && !this.needsDecode) {\n        kind = _util.ImageKind.RGB_24BPP;\n      }\n\n      if (kind && !this.smask && !this.mask && drawWidth === originalWidth && drawHeight === originalHeight) {\n        imgData.kind = kind;\n        imgArray = this.getImageBytes(originalHeight * rowBytes);\n\n        if (this.image instanceof _stream.DecodeStream) {\n          imgData.data = imgArray;\n        } else {\n          var newArray = new Uint8ClampedArray(imgArray.length);\n          newArray.set(imgArray);\n          imgData.data = newArray;\n        }\n\n        if (this.needsDecode) {\n          (0, _util.assert)(kind === _util.ImageKind.GRAYSCALE_1BPP, \"PDFImage.createImageData: The image must be grayscale.\");\n          var buffer = imgData.data;\n\n          for (var i = 0, ii = buffer.length; i < ii; i++) {\n            buffer[i] ^= 0xff;\n          }\n        }\n\n        return imgData;\n      }\n\n      if (this.image instanceof _jpeg_stream.JpegStream && !this.smask && !this.mask) {\n        let imageLength = originalHeight * rowBytes;\n\n        switch (this.colorSpace.name) {\n          case \"DeviceGray\":\n            imageLength *= 3;\n\n          case \"DeviceRGB\":\n          case \"DeviceCMYK\":\n            imgData.kind = _util.ImageKind.RGB_24BPP;\n            imgData.data = this.getImageBytes(imageLength, drawWidth, drawHeight, true);\n            return imgData;\n        }\n      }\n    }\n\n    imgArray = this.getImageBytes(originalHeight * rowBytes);\n    var actualHeight = 0 | imgArray.length / rowBytes * drawHeight / originalHeight;\n    var comps = this.getComponents(imgArray);\n    var alpha01, maybeUndoPreblend;\n\n    if (!forceRGBA && !this.smask && !this.mask) {\n      imgData.kind = _util.ImageKind.RGB_24BPP;\n      imgData.data = new Uint8ClampedArray(drawWidth * drawHeight * 3);\n      alpha01 = 0;\n      maybeUndoPreblend = false;\n    } else {\n      imgData.kind = _util.ImageKind.RGBA_32BPP;\n      imgData.data = new Uint8ClampedArray(drawWidth * drawHeight * 4);\n      alpha01 = 1;\n      maybeUndoPreblend = true;\n      this.fillOpacity(imgData.data, drawWidth, drawHeight, actualHeight, comps);\n    }\n\n    if (this.needsDecode) {\n      this.decodeBuffer(comps);\n    }\n\n    this.colorSpace.fillRgb(imgData.data, originalWidth, originalHeight, drawWidth, drawHeight, actualHeight, bpc, comps, alpha01);\n\n    if (maybeUndoPreblend) {\n      this.undoPreblend(imgData.data, drawWidth, actualHeight);\n    }\n\n    return imgData;\n  }\n\n  fillGrayBuffer(buffer) {\n    var numComps = this.numComps;\n\n    if (numComps !== 1) {\n      throw new _util.FormatError(`Reading gray scale from a color image: ${numComps}`);\n    }\n\n    var width = this.width;\n    var height = this.height;\n    var bpc = this.bpc;\n    var rowBytes = width * numComps * bpc + 7 >> 3;\n    var imgArray = this.getImageBytes(height * rowBytes);\n    var comps = this.getComponents(imgArray);\n    var i, length;\n\n    if (bpc === 1) {\n      length = width * height;\n\n      if (this.needsDecode) {\n        for (i = 0; i < length; ++i) {\n          buffer[i] = comps[i] - 1 & 255;\n        }\n      } else {\n        for (i = 0; i < length; ++i) {\n          buffer[i] = -comps[i] & 255;\n        }\n      }\n\n      return;\n    }\n\n    if (this.needsDecode) {\n      this.decodeBuffer(comps);\n    }\n\n    length = width * height;\n    var scale = 255 / ((1 << bpc) - 1);\n\n    for (i = 0; i < length; ++i) {\n      buffer[i] = scale * comps[i];\n    }\n  }\n\n  getImageBytes(length, drawWidth, drawHeight, forceRGB = false) {\n    this.image.reset();\n    this.image.drawWidth = drawWidth || this.width;\n    this.image.drawHeight = drawHeight || this.height;\n    this.image.forceRGB = !!forceRGB;\n    return this.image.getBytes(length, true);\n  }\n\n}\n\nexports.PDFImage = PDFImage;\n\n/***/ }),\n/* 46 */\n/***/ ((__unused_webpack_module, exports, __w_pdfjs_require__) => {\n\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.incrementalUpdate = incrementalUpdate;\nexports.writeDict = writeDict;\n\nvar _util = __w_pdfjs_require__(2);\n\nvar _primitives = __w_pdfjs_require__(5);\n\nvar _core_utils = __w_pdfjs_require__(8);\n\nvar _xml_parser = __w_pdfjs_require__(47);\n\nvar _crypto = __w_pdfjs_require__(22);\n\nfunction writeDict(dict, buffer, transform) {\n  buffer.push(\"<<\");\n\n  for (const key of dict.getKeys()) {\n    buffer.push(` /${(0, _core_utils.escapePDFName)(key)} `);\n    writeValue(dict.getRaw(key), buffer, transform);\n  }\n\n  buffer.push(\">>\");\n}\n\nfunction writeStream(stream, buffer, transform) {\n  writeDict(stream.dict, buffer, transform);\n  buffer.push(\" stream\\n\");\n  let string = (0, _util.bytesToString)(stream.getBytes());\n\n  if (transform !== null) {\n    string = transform.encryptString(string);\n  }\n\n  buffer.push(string);\n  buffer.push(\"\\nendstream\\n\");\n}\n\nfunction writeArray(array, buffer, transform) {\n  buffer.push(\"[\");\n  let first = true;\n\n  for (const val of array) {\n    if (!first) {\n      buffer.push(\" \");\n    } else {\n      first = false;\n    }\n\n    writeValue(val, buffer, transform);\n  }\n\n  buffer.push(\"]\");\n}\n\nfunction numberToString(value) {\n  if (Number.isInteger(value)) {\n    return value.toString();\n  }\n\n  const roundedValue = Math.round(value * 100);\n\n  if (roundedValue % 100 === 0) {\n    return (roundedValue / 100).toString();\n  }\n\n  if (roundedValue % 10 === 0) {\n    return value.toFixed(1);\n  }\n\n  return value.toFixed(2);\n}\n\nfunction writeValue(value, buffer, transform) {\n  if ((0, _primitives.isName)(value)) {\n    buffer.push(`/${(0, _core_utils.escapePDFName)(value.name)}`);\n  } else if ((0, _primitives.isRef)(value)) {\n    buffer.push(`${value.num} ${value.gen} R`);\n  } else if (Array.isArray(value)) {\n    writeArray(value, buffer, transform);\n  } else if (typeof value === \"string\") {\n    if (transform !== null) {\n      value = transform.encryptString(value);\n    }\n\n    buffer.push(`(${(0, _util.escapeString)(value)})`);\n  } else if (typeof value === \"number\") {\n    buffer.push(numberToString(value));\n  } else if ((0, _primitives.isDict)(value)) {\n    writeDict(value, buffer, transform);\n  } else if ((0, _primitives.isStream)(value)) {\n    writeStream(value, buffer, transform);\n  }\n}\n\nfunction writeInt(number, size, offset, buffer) {\n  for (let i = size + offset - 1; i > offset - 1; i--) {\n    buffer[i] = number & 0xff;\n    number >>= 8;\n  }\n\n  return offset + size;\n}\n\nfunction writeString(string, offset, buffer) {\n  for (let i = 0, len = string.length; i < len; i++) {\n    buffer[offset + i] = string.charCodeAt(i) & 0xff;\n  }\n}\n\nfunction computeMD5(filesize, xrefInfo) {\n  const time = Math.floor(Date.now() / 1000);\n  const filename = xrefInfo.filename || \"\";\n  const md5Buffer = [time.toString(), filename, filesize.toString()];\n  let md5BufferLen = md5Buffer.reduce((a, str) => a + str.length, 0);\n\n  for (const value of Object.values(xrefInfo.info)) {\n    md5Buffer.push(value);\n    md5BufferLen += value.length;\n  }\n\n  const array = new Uint8Array(md5BufferLen);\n  let offset = 0;\n\n  for (const str of md5Buffer) {\n    writeString(str, offset, array);\n    offset += str.length;\n  }\n\n  return (0, _util.bytesToString)((0, _crypto.calculateMD5)(array));\n}\n\nfunction updateXFA(datasetsRef, newRefs, xref) {\n  if (datasetsRef === null || xref === null) {\n    return;\n  }\n\n  const datasets = xref.fetchIfRef(datasetsRef);\n  const str = (0, _util.bytesToString)(datasets.getBytes());\n  const xml = new _xml_parser.SimpleXMLParser({\n    hasAttributes: true\n  }).parseFromString(str);\n\n  for (const {\n    xfa\n  } of newRefs) {\n    if (!xfa) {\n      continue;\n    }\n\n    const {\n      path,\n      value\n    } = xfa;\n\n    if (!path) {\n      continue;\n    }\n\n    const node = xml.documentElement.searchNode((0, _core_utils.parseXFAPath)(path), 0);\n\n    if (node) {\n      node.childNodes = [new _xml_parser.SimpleDOMNode(\"#text\", value)];\n    } else {\n      (0, _util.warn)(`Node not found for path: ${path}`);\n    }\n  }\n\n  const buffer = [];\n  xml.documentElement.dump(buffer);\n  let updatedXml = buffer.join(\"\");\n  const encrypt = xref.encrypt;\n\n  if (encrypt) {\n    const transform = encrypt.createCipherTransform(datasetsRef.num, datasetsRef.gen);\n    updatedXml = transform.encryptString(updatedXml);\n  }\n\n  const data = `${datasetsRef.num} ${datasetsRef.gen} obj\\n` + `<< /Type /EmbeddedFile /Length ${updatedXml.length}>>\\nstream\\n` + updatedXml + \"\\nendstream\\nendobj\\n\";\n  newRefs.push({\n    ref: datasetsRef,\n    data\n  });\n}\n\nfunction incrementalUpdate({\n  originalData,\n  xrefInfo,\n  newRefs,\n  xref = null,\n  datasetsRef = null\n}) {\n  updateXFA(datasetsRef, newRefs, xref);\n  const newXref = new _primitives.Dict(null);\n  const refForXrefTable = xrefInfo.newRef;\n  let buffer, baseOffset;\n  const lastByte = originalData[originalData.length - 1];\n\n  if (lastByte === 0x0a || lastByte === 0x0d) {\n    buffer = [];\n    baseOffset = originalData.length;\n  } else {\n    buffer = [\"\\n\"];\n    baseOffset = originalData.length + 1;\n  }\n\n  newXref.set(\"Size\", refForXrefTable.num + 1);\n  newXref.set(\"Prev\", xrefInfo.startXRef);\n  newXref.set(\"Type\", _primitives.Name.get(\"XRef\"));\n\n  if (xrefInfo.rootRef !== null) {\n    newXref.set(\"Root\", xrefInfo.rootRef);\n  }\n\n  if (xrefInfo.infoRef !== null) {\n    newXref.set(\"Info\", xrefInfo.infoRef);\n  }\n\n  if (xrefInfo.encrypt !== null) {\n    newXref.set(\"Encrypt\", xrefInfo.encrypt);\n  }\n\n  newRefs.push({\n    ref: refForXrefTable,\n    data: \"\"\n  });\n  newRefs = newRefs.sort((a, b) => {\n    return a.ref.num - b.ref.num;\n  });\n  const xrefTableData = [[0, 1, 0xffff]];\n  const indexes = [0, 1];\n  let maxOffset = 0;\n\n  for (const {\n    ref,\n    data\n  } of newRefs) {\n    maxOffset = Math.max(maxOffset, baseOffset);\n    xrefTableData.push([1, baseOffset, Math.min(ref.gen, 0xffff)]);\n    baseOffset += data.length;\n    indexes.push(ref.num);\n    indexes.push(1);\n    buffer.push(data);\n  }\n\n  newXref.set(\"Index\", indexes);\n\n  if (xrefInfo.fileIds.length !== 0) {\n    const md5 = computeMD5(baseOffset, xrefInfo);\n    newXref.set(\"ID\", [xrefInfo.fileIds[0], md5]);\n  }\n\n  const offsetSize = Math.ceil(Math.log2(maxOffset) / 8);\n  const sizes = [1, offsetSize, 2];\n  const structSize = sizes[0] + sizes[1] + sizes[2];\n  const tableLength = structSize * xrefTableData.length;\n  newXref.set(\"W\", sizes);\n  newXref.set(\"Length\", tableLength);\n  buffer.push(`${refForXrefTable.num} ${refForXrefTable.gen} obj\\n`);\n  writeDict(newXref, buffer, null);\n  buffer.push(\" stream\\n\");\n  const bufferLen = buffer.reduce((a, str) => a + str.length, 0);\n  const footer = `\\nendstream\\nendobj\\nstartxref\\n${baseOffset}\\n%%EOF\\n`;\n  const array = new Uint8Array(originalData.length + bufferLen + tableLength + footer.length);\n  array.set(originalData);\n  let offset = originalData.length;\n\n  for (const str of buffer) {\n    writeString(str, offset, array);\n    offset += str.length;\n  }\n\n  for (const [type, objOffset, gen] of xrefTableData) {\n    offset = writeInt(type, sizes[0], offset, array);\n    offset = writeInt(objOffset, sizes[1], offset, array);\n    offset = writeInt(gen, sizes[2], offset, array);\n  }\n\n  writeString(footer, offset, array);\n  return array;\n}\n\n/***/ }),\n/* 47 */\n/***/ ((__unused_webpack_module, exports, __w_pdfjs_require__) => {\n\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.SimpleXMLParser = exports.SimpleDOMNode = void 0;\n\nvar _util = __w_pdfjs_require__(2);\n\nconst XMLParserErrorCode = {\n  NoError: 0,\n  EndOfDocument: -1,\n  UnterminatedCdat: -2,\n  UnterminatedXmlDeclaration: -3,\n  UnterminatedDoctypeDeclaration: -4,\n  UnterminatedComment: -5,\n  MalformedElement: -6,\n  OutOfMemory: -7,\n  UnterminatedAttributeValue: -8,\n  UnterminatedElement: -9,\n  ElementNeverBegun: -10\n};\n\nfunction isWhitespace(s, index) {\n  const ch = s[index];\n  return ch === \" \" || ch === \"\\n\" || ch === \"\\r\" || ch === \"\\t\";\n}\n\nfunction isWhitespaceString(s) {\n  for (let i = 0, ii = s.length; i < ii; i++) {\n    if (!isWhitespace(s, i)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nclass XMLParserBase {\n  _resolveEntities(s) {\n    return s.replace(/&([^;]+);/g, (all, entity) => {\n      if (entity.substring(0, 2) === \"#x\") {\n        return String.fromCodePoint(parseInt(entity.substring(2), 16));\n      } else if (entity.substring(0, 1) === \"#\") {\n        return String.fromCodePoint(parseInt(entity.substring(1), 10));\n      }\n\n      switch (entity) {\n        case \"lt\":\n          return \"<\";\n\n        case \"gt\":\n          return \">\";\n\n        case \"amp\":\n          return \"&\";\n\n        case \"quot\":\n          return '\"';\n      }\n\n      return this.onResolveEntity(entity);\n    });\n  }\n\n  _parseContent(s, start) {\n    const attributes = [];\n    let pos = start;\n\n    function skipWs() {\n      while (pos < s.length && isWhitespace(s, pos)) {\n        ++pos;\n      }\n    }\n\n    while (pos < s.length && !isWhitespace(s, pos) && s[pos] !== \">\" && s[pos] !== \"/\") {\n      ++pos;\n    }\n\n    const name = s.substring(start, pos);\n    skipWs();\n\n    while (pos < s.length && s[pos] !== \">\" && s[pos] !== \"/\" && s[pos] !== \"?\") {\n      skipWs();\n      let attrName = \"\",\n          attrValue = \"\";\n\n      while (pos < s.length && !isWhitespace(s, pos) && s[pos] !== \"=\") {\n        attrName += s[pos];\n        ++pos;\n      }\n\n      skipWs();\n\n      if (s[pos] !== \"=\") {\n        return null;\n      }\n\n      ++pos;\n      skipWs();\n      const attrEndChar = s[pos];\n\n      if (attrEndChar !== '\"' && attrEndChar !== \"'\") {\n        return null;\n      }\n\n      const attrEndIndex = s.indexOf(attrEndChar, ++pos);\n\n      if (attrEndIndex < 0) {\n        return null;\n      }\n\n      attrValue = s.substring(pos, attrEndIndex);\n      attributes.push({\n        name: attrName,\n        value: this._resolveEntities(attrValue)\n      });\n      pos = attrEndIndex + 1;\n      skipWs();\n    }\n\n    return {\n      name,\n      attributes,\n      parsed: pos - start\n    };\n  }\n\n  _parseProcessingInstruction(s, start) {\n    let pos = start;\n\n    function skipWs() {\n      while (pos < s.length && isWhitespace(s, pos)) {\n        ++pos;\n      }\n    }\n\n    while (pos < s.length && !isWhitespace(s, pos) && s[pos] !== \">\" && s[pos] !== \"/\") {\n      ++pos;\n    }\n\n    const name = s.substring(start, pos);\n    skipWs();\n    const attrStart = pos;\n\n    while (pos < s.length && (s[pos] !== \"?\" || s[pos + 1] !== \">\")) {\n      ++pos;\n    }\n\n    const value = s.substring(attrStart, pos);\n    return {\n      name,\n      value,\n      parsed: pos - start\n    };\n  }\n\n  parseXml(s) {\n    let i = 0;\n\n    while (i < s.length) {\n      const ch = s[i];\n      let j = i;\n\n      if (ch === \"<\") {\n        ++j;\n        const ch2 = s[j];\n        let q;\n\n        switch (ch2) {\n          case \"/\":\n            ++j;\n            q = s.indexOf(\">\", j);\n\n            if (q < 0) {\n              this.onError(XMLParserErrorCode.UnterminatedElement);\n              return;\n            }\n\n            this.onEndElement(s.substring(j, q));\n            j = q + 1;\n            break;\n\n          case \"?\":\n            ++j;\n\n            const pi = this._parseProcessingInstruction(s, j);\n\n            if (s.substring(j + pi.parsed, j + pi.parsed + 2) !== \"?>\") {\n              this.onError(XMLParserErrorCode.UnterminatedXmlDeclaration);\n              return;\n            }\n\n            this.onPi(pi.name, pi.value);\n            j += pi.parsed + 2;\n            break;\n\n          case \"!\":\n            if (s.substring(j + 1, j + 3) === \"--\") {\n              q = s.indexOf(\"-->\", j + 3);\n\n              if (q < 0) {\n                this.onError(XMLParserErrorCode.UnterminatedComment);\n                return;\n              }\n\n              this.onComment(s.substring(j + 3, q));\n              j = q + 3;\n            } else if (s.substring(j + 1, j + 8) === \"[CDATA[\") {\n              q = s.indexOf(\"]]>\", j + 8);\n\n              if (q < 0) {\n                this.onError(XMLParserErrorCode.UnterminatedCdat);\n                return;\n              }\n\n              this.onCdata(s.substring(j + 8, q));\n              j = q + 3;\n            } else if (s.substring(j + 1, j + 8) === \"DOCTYPE\") {\n              const q2 = s.indexOf(\"[\", j + 8);\n              let complexDoctype = false;\n              q = s.indexOf(\">\", j + 8);\n\n              if (q < 0) {\n                this.onError(XMLParserErrorCode.UnterminatedDoctypeDeclaration);\n                return;\n              }\n\n              if (q2 > 0 && q > q2) {\n                q = s.indexOf(\"]>\", j + 8);\n\n                if (q < 0) {\n                  this.onError(XMLParserErrorCode.UnterminatedDoctypeDeclaration);\n                  return;\n                }\n\n                complexDoctype = true;\n              }\n\n              const doctypeContent = s.substring(j + 8, q + (complexDoctype ? 1 : 0));\n              this.onDoctype(doctypeContent);\n              j = q + (complexDoctype ? 2 : 1);\n            } else {\n              this.onError(XMLParserErrorCode.MalformedElement);\n              return;\n            }\n\n            break;\n\n          default:\n            const content = this._parseContent(s, j);\n\n            if (content === null) {\n              this.onError(XMLParserErrorCode.MalformedElement);\n              return;\n            }\n\n            let isClosed = false;\n\n            if (s.substring(j + content.parsed, j + content.parsed + 2) === \"/>\") {\n              isClosed = true;\n            } else if (s.substring(j + content.parsed, j + content.parsed + 1) !== \">\") {\n              this.onError(XMLParserErrorCode.UnterminatedElement);\n              return;\n            }\n\n            this.onBeginElement(content.name, content.attributes, isClosed);\n            j += content.parsed + (isClosed ? 2 : 1);\n            break;\n        }\n      } else {\n        while (j < s.length && s[j] !== \"<\") {\n          j++;\n        }\n\n        const text = s.substring(i, j);\n        this.onText(this._resolveEntities(text));\n      }\n\n      i = j;\n    }\n  }\n\n  onResolveEntity(name) {\n    return `&${name};`;\n  }\n\n  onPi(name, value) {}\n\n  onComment(text) {}\n\n  onCdata(text) {}\n\n  onDoctype(doctypeContent) {}\n\n  onText(text) {}\n\n  onBeginElement(name, attributes, isEmpty) {}\n\n  onEndElement(name) {}\n\n  onError(code) {}\n\n}\n\nclass SimpleDOMNode {\n  constructor(nodeName, nodeValue) {\n    this.nodeName = nodeName;\n    this.nodeValue = nodeValue;\n    Object.defineProperty(this, \"parentNode\", {\n      value: null,\n      writable: true\n    });\n  }\n\n  get firstChild() {\n    return this.childNodes && this.childNodes[0];\n  }\n\n  get nextSibling() {\n    const childNodes = this.parentNode.childNodes;\n\n    if (!childNodes) {\n      return undefined;\n    }\n\n    const index = childNodes.indexOf(this);\n\n    if (index === -1) {\n      return undefined;\n    }\n\n    return childNodes[index + 1];\n  }\n\n  get textContent() {\n    if (!this.childNodes) {\n      return this.nodeValue || \"\";\n    }\n\n    return this.childNodes.map(function (child) {\n      return child.textContent;\n    }).join(\"\");\n  }\n\n  hasChildNodes() {\n    return this.childNodes && this.childNodes.length > 0;\n  }\n\n  searchNode(paths, pos) {\n    if (pos >= paths.length) {\n      return this;\n    }\n\n    const component = paths[pos];\n    const stack = [];\n    let node = this;\n\n    while (true) {\n      if (component.name === node.nodeName) {\n        if (component.pos === 0) {\n          const res = node.searchNode(paths, pos + 1);\n\n          if (res !== null) {\n            return res;\n          }\n        } else if (stack.length === 0) {\n          return null;\n        } else {\n          const [parent] = stack.pop();\n          let siblingPos = 0;\n\n          for (const child of parent.childNodes) {\n            if (component.name === child.nodeName) {\n              if (siblingPos === component.pos) {\n                return child.searchNode(paths, pos + 1);\n              }\n\n              siblingPos++;\n            }\n          }\n\n          return node.searchNode(paths, pos + 1);\n        }\n      }\n\n      if (node.childNodes && node.childNodes.length !== 0) {\n        stack.push([node, 0]);\n        node = node.childNodes[0];\n      } else if (stack.length === 0) {\n        return null;\n      } else {\n        while (stack.length !== 0) {\n          const [parent, currentPos] = stack.pop();\n          const newPos = currentPos + 1;\n\n          if (newPos < parent.childNodes.length) {\n            stack.push([parent, newPos]);\n            node = parent.childNodes[newPos];\n            break;\n          }\n        }\n\n        if (stack.length === 0) {\n          return null;\n        }\n      }\n    }\n  }\n\n  dump(buffer) {\n    if (this.nodeName === \"#text\") {\n      buffer.push((0, _util.encodeToXmlString)(this.nodeValue));\n      return;\n    }\n\n    buffer.push(`<${this.nodeName}`);\n\n    if (this.attributes) {\n      for (const attribute of this.attributes) {\n        buffer.push(` ${attribute.name}=\"${(0, _util.encodeToXmlString)(attribute.value)}\"`);\n      }\n    }\n\n    if (this.hasChildNodes()) {\n      buffer.push(\">\");\n\n      for (const child of this.childNodes) {\n        child.dump(buffer);\n      }\n\n      buffer.push(`</${this.nodeName}>`);\n    } else if (this.nodeValue) {\n      buffer.push(`>${(0, _util.encodeToXmlString)(this.nodeValue)}</${this.nodeName}>`);\n    } else {\n      buffer.push(\"/>\");\n    }\n  }\n\n}\n\nexports.SimpleDOMNode = SimpleDOMNode;\n\nclass SimpleXMLParser extends XMLParserBase {\n  constructor({\n    hasAttributes = false,\n    lowerCaseName = false\n  }) {\n    super();\n    this._currentFragment = null;\n    this._stack = null;\n    this._errorCode = XMLParserErrorCode.NoError;\n    this._hasAttributes = hasAttributes;\n    this._lowerCaseName = lowerCaseName;\n  }\n\n  parseFromString(data) {\n    this._currentFragment = [];\n    this._stack = [];\n    this._errorCode = XMLParserErrorCode.NoError;\n    this.parseXml(data);\n\n    if (this._errorCode !== XMLParserErrorCode.NoError) {\n      return undefined;\n    }\n\n    const [documentElement] = this._currentFragment;\n\n    if (!documentElement) {\n      return undefined;\n    }\n\n    return {\n      documentElement\n    };\n  }\n\n  onResolveEntity(name) {\n    switch (name) {\n      case \"apos\":\n        return \"'\";\n    }\n\n    return super.onResolveEntity(name);\n  }\n\n  onText(text) {\n    if (isWhitespaceString(text)) {\n      return;\n    }\n\n    const node = new SimpleDOMNode(\"#text\", text);\n\n    this._currentFragment.push(node);\n  }\n\n  onCdata(text) {\n    const node = new SimpleDOMNode(\"#text\", text);\n\n    this._currentFragment.push(node);\n  }\n\n  onBeginElement(name, attributes, isEmpty) {\n    if (this._lowerCaseName) {\n      name = name.toLowerCase();\n    }\n\n    const node = new SimpleDOMNode(name);\n    node.childNodes = [];\n\n    if (this._hasAttributes) {\n      node.attributes = attributes;\n    }\n\n    this._currentFragment.push(node);\n\n    if (isEmpty) {\n      return;\n    }\n\n    this._stack.push(this._currentFragment);\n\n    this._currentFragment = node.childNodes;\n  }\n\n  onEndElement(name) {\n    this._currentFragment = this._stack.pop() || [];\n    const lastElement = this._currentFragment[this._currentFragment.length - 1];\n\n    if (!lastElement) {\n      return;\n    }\n\n    for (let i = 0, ii = lastElement.childNodes.length; i < ii; i++) {\n      lastElement.childNodes[i].parentNode = lastElement;\n    }\n  }\n\n  onError(code) {\n    this._errorCode = code;\n  }\n\n}\n\nexports.SimpleXMLParser = SimpleXMLParser;\n\n/***/ }),\n/* 48 */\n/***/ ((__unused_webpack_module, exports, __w_pdfjs_require__) => {\n\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.MessageHandler = void 0;\n\nvar _util = __w_pdfjs_require__(2);\n\nconst CallbackKind = {\n  UNKNOWN: 0,\n  DATA: 1,\n  ERROR: 2\n};\nconst StreamKind = {\n  UNKNOWN: 0,\n  CANCEL: 1,\n  CANCEL_COMPLETE: 2,\n  CLOSE: 3,\n  ENQUEUE: 4,\n  ERROR: 5,\n  PULL: 6,\n  PULL_COMPLETE: 7,\n  START_COMPLETE: 8\n};\n\nfunction wrapReason(reason) {\n  if (typeof reason !== \"object\" || reason === null) {\n    return reason;\n  }\n\n  switch (reason.name) {\n    case \"AbortException\":\n      return new _util.AbortException(reason.message);\n\n    case \"MissingPDFException\":\n      return new _util.MissingPDFException(reason.message);\n\n    case \"UnexpectedResponseException\":\n      return new _util.UnexpectedResponseException(reason.message, reason.status);\n\n    case \"UnknownErrorException\":\n      return new _util.UnknownErrorException(reason.message, reason.details);\n\n    default:\n      return new _util.UnknownErrorException(reason.message, reason.toString());\n  }\n}\n\nclass MessageHandler {\n  constructor(sourceName, targetName, comObj) {\n    this.sourceName = sourceName;\n    this.targetName = targetName;\n    this.comObj = comObj;\n    this.callbackId = 1;\n    this.streamId = 1;\n    this.postMessageTransfers = true;\n    this.streamSinks = Object.create(null);\n    this.streamControllers = Object.create(null);\n    this.callbackCapabilities = Object.create(null);\n    this.actionHandler = Object.create(null);\n\n    this._onComObjOnMessage = event => {\n      const data = event.data;\n\n      if (data.targetName !== this.sourceName) {\n        return;\n      }\n\n      if (data.stream) {\n        this._processStreamMessage(data);\n\n        return;\n      }\n\n      if (data.callback) {\n        const callbackId = data.callbackId;\n        const capability = this.callbackCapabilities[callbackId];\n\n        if (!capability) {\n          throw new Error(`Cannot resolve callback ${callbackId}`);\n        }\n\n        delete this.callbackCapabilities[callbackId];\n\n        if (data.callback === CallbackKind.DATA) {\n          capability.resolve(data.data);\n        } else if (data.callback === CallbackKind.ERROR) {\n          capability.reject(wrapReason(data.reason));\n        } else {\n          throw new Error(\"Unexpected callback case\");\n        }\n\n        return;\n      }\n\n      const action = this.actionHandler[data.action];\n\n      if (!action) {\n        throw new Error(`Unknown action from worker: ${data.action}`);\n      }\n\n      if (data.callbackId) {\n        const cbSourceName = this.sourceName;\n        const cbTargetName = data.sourceName;\n        new Promise(function (resolve) {\n          resolve(action(data.data));\n        }).then(function (result) {\n          comObj.postMessage({\n            sourceName: cbSourceName,\n            targetName: cbTargetName,\n            callback: CallbackKind.DATA,\n            callbackId: data.callbackId,\n            data: result\n          });\n        }, function (reason) {\n          comObj.postMessage({\n            sourceName: cbSourceName,\n            targetName: cbTargetName,\n            callback: CallbackKind.ERROR,\n            callbackId: data.callbackId,\n            reason: wrapReason(reason)\n          });\n        });\n        return;\n      }\n\n      if (data.streamId) {\n        this._createStreamSink(data);\n\n        return;\n      }\n\n      action(data.data);\n    };\n\n    comObj.addEventListener(\"message\", this._onComObjOnMessage);\n  }\n\n  on(actionName, handler) {\n    const ah = this.actionHandler;\n\n    if (ah[actionName]) {\n      throw new Error(`There is already an actionName called \"${actionName}\"`);\n    }\n\n    ah[actionName] = handler;\n  }\n\n  send(actionName, data, transfers) {\n    this._postMessage({\n      sourceName: this.sourceName,\n      targetName: this.targetName,\n      action: actionName,\n      data\n    }, transfers);\n  }\n\n  sendWithPromise(actionName, data, transfers) {\n    const callbackId = this.callbackId++;\n    const capability = (0, _util.createPromiseCapability)();\n    this.callbackCapabilities[callbackId] = capability;\n\n    try {\n      this._postMessage({\n        sourceName: this.sourceName,\n        targetName: this.targetName,\n        action: actionName,\n        callbackId,\n        data\n      }, transfers);\n    } catch (ex) {\n      capability.reject(ex);\n    }\n\n    return capability.promise;\n  }\n\n  sendWithStream(actionName, data, queueingStrategy, transfers) {\n    const streamId = this.streamId++;\n    const sourceName = this.sourceName;\n    const targetName = this.targetName;\n    const comObj = this.comObj;\n    return new ReadableStream({\n      start: controller => {\n        const startCapability = (0, _util.createPromiseCapability)();\n        this.streamControllers[streamId] = {\n          controller,\n          startCall: startCapability,\n          pullCall: null,\n          cancelCall: null,\n          isClosed: false\n        };\n\n        this._postMessage({\n          sourceName,\n          targetName,\n          action: actionName,\n          streamId,\n          data,\n          desiredSize: controller.desiredSize\n        }, transfers);\n\n        return startCapability.promise;\n      },\n      pull: controller => {\n        const pullCapability = (0, _util.createPromiseCapability)();\n        this.streamControllers[streamId].pullCall = pullCapability;\n        comObj.postMessage({\n          sourceName,\n          targetName,\n          stream: StreamKind.PULL,\n          streamId,\n          desiredSize: controller.desiredSize\n        });\n        return pullCapability.promise;\n      },\n      cancel: reason => {\n        (0, _util.assert)(reason instanceof Error, \"cancel must have a valid reason\");\n        const cancelCapability = (0, _util.createPromiseCapability)();\n        this.streamControllers[streamId].cancelCall = cancelCapability;\n        this.streamControllers[streamId].isClosed = true;\n        comObj.postMessage({\n          sourceName,\n          targetName,\n          stream: StreamKind.CANCEL,\n          streamId,\n          reason: wrapReason(reason)\n        });\n        return cancelCapability.promise;\n      }\n    }, queueingStrategy);\n  }\n\n  _createStreamSink(data) {\n    const self = this;\n    const action = this.actionHandler[data.action];\n    const streamId = data.streamId;\n    const sourceName = this.sourceName;\n    const targetName = data.sourceName;\n    const comObj = this.comObj;\n    const streamSink = {\n      enqueue(chunk, size = 1, transfers) {\n        if (this.isCancelled) {\n          return;\n        }\n\n        const lastDesiredSize = this.desiredSize;\n        this.desiredSize -= size;\n\n        if (lastDesiredSize > 0 && this.desiredSize <= 0) {\n          this.sinkCapability = (0, _util.createPromiseCapability)();\n          this.ready = this.sinkCapability.promise;\n        }\n\n        self._postMessage({\n          sourceName,\n          targetName,\n          stream: StreamKind.ENQUEUE,\n          streamId,\n          chunk\n        }, transfers);\n      },\n\n      close() {\n        if (this.isCancelled) {\n          return;\n        }\n\n        this.isCancelled = true;\n        comObj.postMessage({\n          sourceName,\n          targetName,\n          stream: StreamKind.CLOSE,\n          streamId\n        });\n        delete self.streamSinks[streamId];\n      },\n\n      error(reason) {\n        (0, _util.assert)(reason instanceof Error, \"error must have a valid reason\");\n\n        if (this.isCancelled) {\n          return;\n        }\n\n        this.isCancelled = true;\n        comObj.postMessage({\n          sourceName,\n          targetName,\n          stream: StreamKind.ERROR,\n          streamId,\n          reason: wrapReason(reason)\n        });\n      },\n\n      sinkCapability: (0, _util.createPromiseCapability)(),\n      onPull: null,\n      onCancel: null,\n      isCancelled: false,\n      desiredSize: data.desiredSize,\n      ready: null\n    };\n    streamSink.sinkCapability.resolve();\n    streamSink.ready = streamSink.sinkCapability.promise;\n    this.streamSinks[streamId] = streamSink;\n    new Promise(function (resolve) {\n      resolve(action(data.data, streamSink));\n    }).then(function () {\n      comObj.postMessage({\n        sourceName,\n        targetName,\n        stream: StreamKind.START_COMPLETE,\n        streamId,\n        success: true\n      });\n    }, function (reason) {\n      comObj.postMessage({\n        sourceName,\n        targetName,\n        stream: StreamKind.START_COMPLETE,\n        streamId,\n        reason: wrapReason(reason)\n      });\n    });\n  }\n\n  _processStreamMessage(data) {\n    const streamId = data.streamId;\n    const sourceName = this.sourceName;\n    const targetName = data.sourceName;\n    const comObj = this.comObj;\n\n    switch (data.stream) {\n      case StreamKind.START_COMPLETE:\n        if (data.success) {\n          this.streamControllers[streamId].startCall.resolve();\n        } else {\n          this.streamControllers[streamId].startCall.reject(wrapReason(data.reason));\n        }\n\n        break;\n\n      case StreamKind.PULL_COMPLETE:\n        if (data.success) {\n          this.streamControllers[streamId].pullCall.resolve();\n        } else {\n          this.streamControllers[streamId].pullCall.reject(wrapReason(data.reason));\n        }\n\n        break;\n\n      case StreamKind.PULL:\n        if (!this.streamSinks[streamId]) {\n          comObj.postMessage({\n            sourceName,\n            targetName,\n            stream: StreamKind.PULL_COMPLETE,\n            streamId,\n            success: true\n          });\n          break;\n        }\n\n        if (this.streamSinks[streamId].desiredSize <= 0 && data.desiredSize > 0) {\n          this.streamSinks[streamId].sinkCapability.resolve();\n        }\n\n        this.streamSinks[streamId].desiredSize = data.desiredSize;\n        const {\n          onPull\n        } = this.streamSinks[data.streamId];\n        new Promise(function (resolve) {\n          resolve(onPull && onPull());\n        }).then(function () {\n          comObj.postMessage({\n            sourceName,\n            targetName,\n            stream: StreamKind.PULL_COMPLETE,\n            streamId,\n            success: true\n          });\n        }, function (reason) {\n          comObj.postMessage({\n            sourceName,\n            targetName,\n            stream: StreamKind.PULL_COMPLETE,\n            streamId,\n            reason: wrapReason(reason)\n          });\n        });\n        break;\n\n      case StreamKind.ENQUEUE:\n        (0, _util.assert)(this.streamControllers[streamId], \"enqueue should have stream controller\");\n\n        if (this.streamControllers[streamId].isClosed) {\n          break;\n        }\n\n        this.streamControllers[streamId].controller.enqueue(data.chunk);\n        break;\n\n      case StreamKind.CLOSE:\n        (0, _util.assert)(this.streamControllers[streamId], \"close should have stream controller\");\n\n        if (this.streamControllers[streamId].isClosed) {\n          break;\n        }\n\n        this.streamControllers[streamId].isClosed = true;\n        this.streamControllers[streamId].controller.close();\n\n        this._deleteStreamController(streamId);\n\n        break;\n\n      case StreamKind.ERROR:\n        (0, _util.assert)(this.streamControllers[streamId], \"error should have stream controller\");\n        this.streamControllers[streamId].controller.error(wrapReason(data.reason));\n\n        this._deleteStreamController(streamId);\n\n        break;\n\n      case StreamKind.CANCEL_COMPLETE:\n        if (data.success) {\n          this.streamControllers[streamId].cancelCall.resolve();\n        } else {\n          this.streamControllers[streamId].cancelCall.reject(wrapReason(data.reason));\n        }\n\n        this._deleteStreamController(streamId);\n\n        break;\n\n      case StreamKind.CANCEL:\n        if (!this.streamSinks[streamId]) {\n          break;\n        }\n\n        const {\n          onCancel\n        } = this.streamSinks[data.streamId];\n        new Promise(function (resolve) {\n          resolve(onCancel && onCancel(wrapReason(data.reason)));\n        }).then(function () {\n          comObj.postMessage({\n            sourceName,\n            targetName,\n            stream: StreamKind.CANCEL_COMPLETE,\n            streamId,\n            success: true\n          });\n        }, function (reason) {\n          comObj.postMessage({\n            sourceName,\n            targetName,\n            stream: StreamKind.CANCEL_COMPLETE,\n            streamId,\n            reason: wrapReason(reason)\n          });\n        });\n        this.streamSinks[streamId].sinkCapability.reject(wrapReason(data.reason));\n        this.streamSinks[streamId].isCancelled = true;\n        delete this.streamSinks[streamId];\n        break;\n\n      default:\n        throw new Error(\"Unexpected stream case\");\n    }\n  }\n\n  async _deleteStreamController(streamId) {\n    await Promise.allSettled([this.streamControllers[streamId].startCall, this.streamControllers[streamId].pullCall, this.streamControllers[streamId].cancelCall].map(function (capability) {\n      return capability && capability.promise;\n    }));\n    delete this.streamControllers[streamId];\n  }\n\n  _postMessage(message, transfers) {\n    if (transfers && this.postMessageTransfers) {\n      this.comObj.postMessage(message, transfers);\n    } else {\n      this.comObj.postMessage(message);\n    }\n  }\n\n  destroy() {\n    this.comObj.removeEventListener(\"message\", this._onComObjOnMessage);\n  }\n\n}\n\nexports.MessageHandler = MessageHandler;\n\n/***/ }),\n/* 49 */\n/***/ ((__unused_webpack_module, exports, __w_pdfjs_require__) => {\n\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.PDFWorkerStream = void 0;\n\nvar _util = __w_pdfjs_require__(2);\n\nclass PDFWorkerStream {\n  constructor(msgHandler) {\n    this._msgHandler = msgHandler;\n    this._contentLength = null;\n    this._fullRequestReader = null;\n    this._rangeRequestReaders = [];\n  }\n\n  getFullReader() {\n    (0, _util.assert)(!this._fullRequestReader, \"PDFWorkerStream.getFullReader can only be called once.\");\n    this._fullRequestReader = new PDFWorkerStreamReader(this._msgHandler);\n    return this._fullRequestReader;\n  }\n\n  getRangeReader(begin, end) {\n    const reader = new PDFWorkerStreamRangeReader(begin, end, this._msgHandler);\n\n    this._rangeRequestReaders.push(reader);\n\n    return reader;\n  }\n\n  cancelAllRequests(reason) {\n    if (this._fullRequestReader) {\n      this._fullRequestReader.cancel(reason);\n    }\n\n    const readers = this._rangeRequestReaders.slice(0);\n\n    readers.forEach(function (reader) {\n      reader.cancel(reason);\n    });\n  }\n\n}\n\nexports.PDFWorkerStream = PDFWorkerStream;\n\nclass PDFWorkerStreamReader {\n  constructor(msgHandler) {\n    this._msgHandler = msgHandler;\n    this.onProgress = null;\n    this._contentLength = null;\n    this._isRangeSupported = false;\n    this._isStreamingSupported = false;\n\n    const readableStream = this._msgHandler.sendWithStream(\"GetReader\");\n\n    this._reader = readableStream.getReader();\n    this._headersReady = this._msgHandler.sendWithPromise(\"ReaderHeadersReady\").then(data => {\n      this._isStreamingSupported = data.isStreamingSupported;\n      this._isRangeSupported = data.isRangeSupported;\n      this._contentLength = data.contentLength;\n    });\n  }\n\n  get headersReady() {\n    return this._headersReady;\n  }\n\n  get contentLength() {\n    return this._contentLength;\n  }\n\n  get isStreamingSupported() {\n    return this._isStreamingSupported;\n  }\n\n  get isRangeSupported() {\n    return this._isRangeSupported;\n  }\n\n  async read() {\n    const {\n      value,\n      done\n    } = await this._reader.read();\n\n    if (done) {\n      return {\n        value: undefined,\n        done: true\n      };\n    }\n\n    return {\n      value: value.buffer,\n      done: false\n    };\n  }\n\n  cancel(reason) {\n    this._reader.cancel(reason);\n  }\n\n}\n\nclass PDFWorkerStreamRangeReader {\n  constructor(begin, end, msgHandler) {\n    this._msgHandler = msgHandler;\n    this.onProgress = null;\n\n    const readableStream = this._msgHandler.sendWithStream(\"GetRangeReader\", {\n      begin,\n      end\n    });\n\n    this._reader = readableStream.getReader();\n  }\n\n  get isStreamingSupported() {\n    return false;\n  }\n\n  async read() {\n    const {\n      value,\n      done\n    } = await this._reader.read();\n\n    if (done) {\n      return {\n        value: undefined,\n        done: true\n      };\n    }\n\n    return {\n      value: value.buffer,\n      done: false\n    };\n  }\n\n  cancel(reason) {\n    this._reader.cancel(reason);\n  }\n\n}\n\n/***/ })\n/******/ \t]);\n/************************************************************************/\n/******/ \t// The module cache\n/******/ \tvar __webpack_module_cache__ = {};\n/******/ \t\n/******/ \t// The require function\n/******/ \tfunction __w_pdfjs_require__(moduleId) {\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(__webpack_module_cache__[moduleId]) {\n/******/ \t\t\treturn __webpack_module_cache__[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = __webpack_module_cache__[moduleId] = {\n/******/ \t\t\t// no module.id needed\n/******/ \t\t\t// no module.loaded needed\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/ \t\n/******/ \t\t// Execute the module function\n/******/ \t\t__webpack_modules__[moduleId](module, module.exports, __w_pdfjs_require__);\n/******/ \t\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/ \t\n/************************************************************************/\n/******/ \t/* webpack/runtime/define property getters */\n/******/ \t(() => {\n/******/ \t\t// define getter functions for harmony exports\n/******/ \t\t__w_pdfjs_require__.d = (exports, definition) => {\n/******/ \t\t\tfor(var key in definition) {\n/******/ \t\t\t\tif(__w_pdfjs_require__.o(definition, key) && !__w_pdfjs_require__.o(exports, key)) {\n/******/ \t\t\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n/******/ \t\t\t\t}\n/******/ \t\t\t}\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/hasOwnProperty shorthand */\n/******/ \t(() => {\n/******/ \t\t__w_pdfjs_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop)\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/make namespace object */\n/******/ \t(() => {\n/******/ \t\t// define __esModule on exports\n/******/ \t\t__w_pdfjs_require__.r = (exports) => {\n/******/ \t\t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n/******/ \t\t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n/******/ \t\t\t}\n/******/ \t\t\tObject.defineProperty(exports, '__esModule', { value: true });\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/************************************************************************/\n/******/ \t// module exports must be returned from runtime so entry inlining is disabled\n/******/ \t// startup\n/******/ \t// Load entry module and return exports\n/******/ \treturn __w_pdfjs_require__(0);\n/******/ })()\n;\n});\n\ndefine('skylark-pdfjs-worker/main',[\r\n\t\"skylark-langx/skylark\",\r\n\t\"./worker\"\r\n],function(skylark,worker) {\r\n\treturn skylark.attach(\"intg.pdfworker\",worker);\r\n});\ndefine('skylark-pdfjs-worker', ['skylark-pdfjs-worker/main'], function (main) { return main; });\n\n"]}